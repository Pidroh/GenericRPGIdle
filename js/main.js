(function ($global) { "use strict";
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Achievement = function(id,name,description,image) {
	this.conditions = [];
	this.id = id;
	this.name = name;
	this.description = description;
	this.image = image;
};
$hxClasses["Achievement"] = Achievement;
Achievement.__name__ = "Achievement";
Achievement.prototype = {
	__class__: Achievement
};
var AchievementGroup = function() {
	this.achievements = [];
};
$hxClasses["AchievementGroup"] = AchievementGroup;
AchievementGroup.__name__ = "AchievementGroup";
AchievementGroup.prototype = {
	__class__: AchievementGroup
};
var AchievementLogic = function() { };
$hxClasses["AchievementLogic"] = AchievementLogic;
AchievementLogic.__name__ = "AchievementLogic";
AchievementLogic.isLocked = function(a,pers) {
	if(pers.achievs.h[a.id] == null) {
		return true;
	}
	if(pers.achievs.h[a.id].state == Achievement.LOCKED) {
		return true;
	}
	return false;
};
AchievementLogic.unlock = function(a,pers) {
	if(pers.achievs.h[a.id] == null) {
		var v = null;
		pers.achievs.h[a.id] = v;
		var p = { state : Achievement.UNLOCKED};
		pers.achievs.h[a.id] = p;
	} else {
		pers.achievs.h[a.id].state = Achievement.UNLOCKED;
	}
};
AchievementLogic.canUnlock = function(a,data) {
	var _g = 0;
	var _g1 = a.conditions;
	while(_g < _g1.length) {
		var condition = _g1[_g];
		++_g;
		var pass = ConditionChecker.Check(condition,data.data);
		if(!pass) {
			return false;
		}
	}
	return true;
};
var AchievementGroupHolder = function(dimensionId) {
	this.achievements = new AchievementGroup();
	this.dimensionId = dimensionId;
};
$hxClasses["AchievementGroupHolder"] = AchievementGroupHolder;
AchievementGroupHolder.__name__ = "AchievementGroupHolder";
AchievementGroupHolder.prototype = {
	__class__: AchievementGroupHolder
};
var AchievementModelData = function() {
	this.achievements = [];
};
$hxClasses["AchievementModelData"] = AchievementModelData;
AchievementModelData.__name__ = "AchievementModelData";
AchievementModelData.prototype = {
	__class__: AchievementModelData
};
var AchievementModel = function() {
	this.unlockedAchievements = [];
	this.modelData = new AchievementModelData();
};
$hxClasses["AchievementModel"] = AchievementModel;
AchievementModel.__name__ = "AchievementModel";
AchievementModel.prototype = {
	createAchievements: function() {
		var as = new AchievementGroup();
		var a = new Achievement("main1","Beginner's Door","Clear your first area",Sprite.create("achiev_a1",64,64));
		a.conditions.push(Condition.createWithKeyAndData(ConditionType.largerOrEqual,"maxarea_region0",2));
		as.achievements.push(a);
		var a = new Achievement("main2","Death to the Boss","Get through your first boss",Sprite.create("achiev_a2",64,64));
		a.conditions.push(Condition.createWithKeyAndData(ConditionType.largerOrEqual,"maxarea_region0",6));
		as.achievements.push(a);
		var a = new Achievement("main3","A bit of experience","Get through 20 areas",Sprite.create("achiev_a3",64,64));
		a.conditions.push(Condition.createWithKeyAndData(ConditionType.largerOrEqual,"maxarea_region0",21));
		as.achievements.push(a);
		var a = new Achievement("challenge1","Step of Glory A","Clear Area 5 of Wolf Fields ",Sprite.create("achiev_e1",64,64));
		as.achievements.push(a);
		a.conditions.push(Condition.createWithKeyAndData(ConditionType.largerOrEqual,"maxarea_region1",6));
		var a = new Achievement("challenge2","Step of Glory B","Clear Area 10 of Tonberry's Lair",Sprite.create("achiev_e2",64,64));
		as.achievements.push(a);
		a.conditions.push(Condition.createWithKeyAndData(ConditionType.largerOrEqual,"maxarea_region2",11));
		var a = new Achievement("challenge3","Step of Glory C","Clear Area 15 of Altar Cave",Sprite.create("achiev_e3",64,64));
		a.conditions.push(Condition.createWithKeyAndData(ConditionType.largerOrEqual,"maxarea_region3",16));
		as.achievements.push(a);
		var agh = new AchievementGroupHolder(GRIConfigurer.DIMENSION_ID_LAGRIMA);
		agh.achievements = as;
		this.modelData.achievements.push(agh);
	}
	,update: function() {
		var achievementData = this.modelData.achievementData;
		var _g_current = 0;
		var _g_array = this.modelData.achievements;
		while(_g_current < _g_array.length) {
			var _g1_value = _g_array[_g_current];
			var _g1_key = _g_current++;
			var groupIndex = _g1_key;
			var agh = _g1_value;
			if(agh.dimensionId == this.dimensionId) {
				var _g2_current = 0;
				var _g2_array = agh.achievements.achievements;
				while(_g2_current < _g2_array.length) {
					var _g3_value = _g2_array[_g2_current];
					var _g3_key = _g2_current++;
					var index = _g3_key;
					var value = _g3_value;
					if(AchievementLogic.isLocked(value,achievementData)) {
						if(AchievementLogic.canUnlock(value,this.modelData.globalData)) {
							AchievementLogic.unlock(value,achievementData);
						}
					} else if(this.unlockedAchievements.indexOf(value.id) != -1 == false) {
						this.unlockedAchievements.push(value.id);
					}
				}
			}
		}
	}
	,__class__: AchievementModel
};
var ArrayOfArray = function() {
	this.arrays = [];
};
$hxClasses["ArrayOfArray"] = ArrayOfArray;
ArrayOfArray.__name__ = "ArrayOfArray";
ArrayOfArray.prototype = {
	getList: function(list) {
		return this.arrays[list];
	}
	,get_length: function() {
		return this.arrays.length;
	}
	,getElement: function(list,index) {
		return this.arrays[list][index];
	}
	,setElement: function(list,index,element) {
		this.arrays[list][index] = element;
		return element;
	}
	,adjustLength: function(length) {
		while(this.arrays.length < length) this.arrays.push([]);
	}
	,adjustLengthOfList: function(list,length) {
		while(this.arrays[list].length < length) this.arrays[list].push(null);
	}
	,pushElement: function(list,element) {
		this.arrays[list].push(element);
	}
	,__class__: ArrayOfArray
	,__properties__: {get_length:"get_length"}
};
var ArraysUtilities = function() { };
$hxClasses["ArraysUtilities"] = ArraysUtilities;
ArraysUtilities.__name__ = "ArraysUtilities";
ArraysUtilities.copyContentIntArray = function(target,source) {
	target.length = 0;
	var _g_current = 0;
	var _g_array = source;
	while(_g_current < _g_array.length) {
		var _g1_value = _g_array[_g_current];
		var _g1_key = _g_current++;
		var index = _g1_key;
		var value = _g1_value;
		target.push(value);
	}
};
var spine_attachments_AttachmentLoader = function() { };
$hxClasses["spine.attachments.AttachmentLoader"] = spine_attachments_AttachmentLoader;
spine_attachments_AttachmentLoader.__name__ = "spine.attachments.AttachmentLoader";
spine_attachments_AttachmentLoader.__isInterface__ = true;
spine_attachments_AttachmentLoader.prototype = {
	__class__: spine_attachments_AttachmentLoader
};
var AttachmentLoaderX = function() {
};
$hxClasses["AttachmentLoaderX"] = AttachmentLoaderX;
AttachmentLoaderX.__name__ = "AttachmentLoaderX";
AttachmentLoaderX.__interfaces__ = [spine_attachments_AttachmentLoader];
AttachmentLoaderX.prototype = {
	newRegionAttachment: function(skin,name,path) {
		var attachment = new spine_attachments_RegionAttachment(name);
		return attachment;
	}
	,newMeshAttachment: function(skin,name,path) {
		var attachment = new spine_attachments_MeshAttachment(name);
		return attachment;
	}
	,newBoundingBoxAttachment: function(skin,name) {
		return new spine_attachments_BoundingBoxAttachment(name);
	}
	,newClippingAttachment: function(skin,name) {
		return new spine_attachments_ClippingAttachment(name);
	}
	,newPathAttachment: function(skin,name) {
		return new spine_attachments_PathAttachment(name);
	}
	,newPointAttachment: function(skin,name) {
		return new spine_attachments_PointAttachment(name);
	}
	,__class__: AttachmentLoaderX
};
var seedyrng_GeneratorInterface = function() { };
$hxClasses["seedyrng.GeneratorInterface"] = seedyrng_GeneratorInterface;
seedyrng_GeneratorInterface.__name__ = "seedyrng.GeneratorInterface";
seedyrng_GeneratorInterface.__isInterface__ = true;
seedyrng_GeneratorInterface.prototype = {
	__class__: seedyrng_GeneratorInterface
	,__properties__: {get_usesAllBits:"get_usesAllBits",set_state:"set_state",get_state:"get_state",set_seed:"set_seed",get_seed:"get_seed"}
};
var seedyrng_Random = function(seed,generator) {
	if(seed == null) {
		var this1 = new haxe__$Int64__$_$_$Int64(seedyrng_Random.randomSystemInt(),seedyrng_Random.randomSystemInt());
		seed = this1;
	}
	if(generator == null) {
		generator = new seedyrng_Xorshift128Plus();
	}
	this.generator = generator;
	this.set_seed(seed);
};
$hxClasses["seedyrng.Random"] = seedyrng_Random;
seedyrng_Random.__name__ = "seedyrng.Random";
seedyrng_Random.__interfaces__ = [seedyrng_GeneratorInterface];
seedyrng_Random.randomSystemInt = function() {
	var value = Std.random(255) << 24 | Std.random(255) << 16 | Std.random(255) << 8 | Std.random(255);
	return value;
};
seedyrng_Random.prototype = {
	get_seed: function() {
		return this.generator.get_seed();
	}
	,set_seed: function(value) {
		return this.generator.set_seed(value);
	}
	,get_state: function() {
		return this.generator.get_state();
	}
	,set_state: function(value) {
		return this.generator.set_state(value);
	}
	,get_usesAllBits: function() {
		return this.generator.get_usesAllBits();
	}
	,nextInt: function() {
		return this.generator.nextInt();
	}
	,nextFullInt: function() {
		if(this.generator.get_usesAllBits()) {
			return this.generator.nextInt();
		} else {
			var num1 = this.generator.nextInt();
			var num2 = this.generator.nextInt();
			num2 = num2 >>> 16 | num2 << 16;
			return num1 ^ num2;
		}
	}
	,setStringSeed: function(seed) {
		this.setBytesSeed(haxe_io_Bytes.ofString(seed));
	}
	,setBytesSeed: function(seed) {
		var hash = haxe_crypto_Sha1.make(seed);
		this.set_seed(hash.getInt64(0));
	}
	,random: function() {
		var upper = this.nextFullInt() & 2097151;
		var lower = this.nextFullInt();
		var lhs = upper * Math.pow(2,32);
		var floatNum = UInt.toFloat(lower) + lhs;
		var result = floatNum * Math.pow(2,-53);
		return result;
	}
	,randomInt: function(lower,upper) {
		return Math.floor(this.random() * (upper - lower + 1)) + lower;
	}
	,uniform: function(lower,upper) {
		return this.random() * (upper - lower) + lower;
	}
	,choice: function(array) {
		return array[this.randomInt(0,array.length - 1)];
	}
	,shuffle: function(array) {
		var _g = 0;
		var _g1 = array.length - 1;
		while(_g < _g1) {
			var index = _g++;
			var randIndex = this.randomInt(index,array.length - 1);
			var tempA = array[index];
			var tempB = array[randIndex];
			array[index] = tempB;
			array[randIndex] = tempA;
		}
	}
	,__class__: seedyrng_Random
	,__properties__: {get_usesAllBits:"get_usesAllBits",set_state:"set_state",get_state:"get_state",set_seed:"set_seed",get_seed:"get_seed"}
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
Math.__name__ = "Math";
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = "haxe._Int64.___Int64";
haxe__$Int64__$_$_$Int64.prototype = {
	__class__: haxe__$Int64__$_$_$Int64
};
var seedyrng_Xorshift128Plus = function() {
	this._currentAvailable = false;
	var this1 = new haxe__$Int64__$_$_$Int64(0,1);
	this.set_seed(this1);
};
$hxClasses["seedyrng.Xorshift128Plus"] = seedyrng_Xorshift128Plus;
seedyrng_Xorshift128Plus.__name__ = "seedyrng.Xorshift128Plus";
seedyrng_Xorshift128Plus.__interfaces__ = [seedyrng_GeneratorInterface];
seedyrng_Xorshift128Plus.prototype = {
	get_usesAllBits: function() {
		return false;
	}
	,get_seed: function() {
		return this._seed;
	}
	,set_seed: function(value) {
		var b_high = 0;
		var b_low = 0;
		if(!(value.high != b_high || value.low != b_low)) {
			var this1 = new haxe__$Int64__$_$_$Int64(0,1);
			value = this1;
		}
		this._seed = value;
		this._state0 = value;
		this._state1 = seedyrng_Xorshift128Plus.SEED_1;
		this._currentAvailable = false;
		return value;
	}
	,get_state: function() {
		var bytes = new haxe_io_Bytes(new ArrayBuffer(33));
		bytes.setInt64(0,this._seed);
		bytes.setInt64(8,this._state0);
		bytes.setInt64(16,this._state1);
		bytes.b[24] = this._currentAvailable ? 1 : 0;
		if(this._currentAvailable) {
			bytes.setInt64(25,this._current);
		}
		return bytes;
	}
	,set_state: function(value) {
		if(value.length != 33) {
			throw haxe_Exception.thrown("Wrong state size " + value.length);
		}
		this._seed = value.getInt64(0);
		this._state0 = value.getInt64(8);
		this._state1 = value.getInt64(16);
		this._currentAvailable = value.b[24] == 1;
		if(this._currentAvailable) {
			this._current = value.getInt64(25);
		}
		return value;
	}
	,stepNext: function() {
		var x = this._state0;
		var y = this._state1;
		this._state0 = y;
		var b = 23;
		b &= 63;
		var b1;
		if(b == 0) {
			var this1 = new haxe__$Int64__$_$_$Int64(x.high,x.low);
			b1 = this1;
		} else if(b < 32) {
			var this1 = new haxe__$Int64__$_$_$Int64(x.high << b | x.low >>> 32 - b,x.low << b);
			b1 = this1;
		} else {
			var this1 = new haxe__$Int64__$_$_$Int64(x.low << b - 32,0);
			b1 = this1;
		}
		var this1 = new haxe__$Int64__$_$_$Int64(x.high ^ b1.high,x.low ^ b1.low);
		x = this1;
		var a_high = x.high ^ y.high;
		var a_low = x.low ^ y.low;
		var b = 17;
		b &= 63;
		var b1;
		if(b == 0) {
			var this1 = new haxe__$Int64__$_$_$Int64(x.high,x.low);
			b1 = this1;
		} else if(b < 32) {
			var this1 = new haxe__$Int64__$_$_$Int64(x.high >> b,x.high << 32 - b | x.low >>> b);
			b1 = this1;
		} else {
			var this1 = new haxe__$Int64__$_$_$Int64(x.high >> 31,x.high >> b - 32);
			b1 = this1;
		}
		var a_high1 = a_high ^ b1.high;
		var a_low1 = a_low ^ b1.low;
		var b = 26;
		b &= 63;
		var b1;
		if(b == 0) {
			var this1 = new haxe__$Int64__$_$_$Int64(y.high,y.low);
			b1 = this1;
		} else if(b < 32) {
			var this1 = new haxe__$Int64__$_$_$Int64(y.high >> b,y.high << 32 - b | y.low >>> b);
			b1 = this1;
		} else {
			var this1 = new haxe__$Int64__$_$_$Int64(y.high >> 31,y.high >> b - 32);
			b1 = this1;
		}
		var this1 = new haxe__$Int64__$_$_$Int64(a_high1 ^ b1.high,a_low1 ^ b1.low);
		this._state1 = this1;
		var a = this._state1;
		var high = a.high + y.high | 0;
		var low = a.low + y.low | 0;
		if(haxe_Int32.ucompare(low,a.low) < 0) {
			var ret = high++;
			high = high | 0;
		}
		var this1 = new haxe__$Int64__$_$_$Int64(high,low);
		this._current = this1;
	}
	,nextInt: function() {
		if(this._currentAvailable) {
			this._currentAvailable = false;
			return this._current.low;
		} else {
			this.stepNext();
			this._currentAvailable = true;
			return this._current.high;
		}
	}
	,__class__: seedyrng_Xorshift128Plus
	,__properties__: {get_usesAllBits:"get_usesAllBits",set_state:"set_state",get_state:"get_state",set_seed:"set_seed",get_seed:"get_seed"}
};
var Generation = function(seed) {
};
$hxClasses["Generation"] = Generation;
Generation.__name__ = "Generation";
Generation.GenerateNumber = function(seed,min,max) {
};
Generation.GenerateRepetitions = function(seed,procUnits,range) {
	var purs = [];
	Generation.random.setStringSeed(seed);
	var _g_current = 0;
	var _g_array = procUnits;
	while(_g_current < _g_array.length) {
		var _g1_value = _g_array[_g_current];
		var _g1_key = _g_current++;
		var index = _g1_key;
		var value = _g1_value;
		var repetitions = RandomExtender.Range(Generation.random,range);
		var _g = 0;
		var _g1 = repetitions;
		while(_g < _g1) {
			var i = _g++;
			var pur = new ProceduralUnitRepeated();
			pur.position = i;
			pur.total = repetitions;
			pur.proceduralUnit = value;
			pur.randomExtra.push(Generation.random.randomInt(0,1000));
			pur.randomExtra.push(Generation.random.randomInt(0,1000));
			pur.randomExtra.push(Generation.random.randomInt(0,1000));
			purs.push(pur);
		}
	}
	return purs;
};
Generation.Generate = function(seed,maxChar1,maxChar2,repetition,response,skipCharacteristicsFirstRound) {
	Generation.random.setStringSeed(seed);
	if(response == null) {
		var response1 = [];
	}
	var responseAux = [];
	var _g = 0;
	var _g1 = repetition;
	while(_g < _g1) {
		var rep = _g++;
		var _g2 = 0;
		var _g3 = maxChar1;
		while(_g2 < _g3) {
			var c1 = _g2++;
			if(skipCharacteristicsFirstRound != null && repetition == 0 && skipCharacteristicsFirstRound.indexOf(c1) != -1) {
				continue;
			}
			var _g4 = 0;
			var _g5 = maxChar2;
			while(_g4 < _g5) {
				var c2 = _g4++;
				var pu = new ProceduralUnit();
				pu.characteristics[0] = c1;
				pu.characteristics[1] = c2;
				pu.repeat = rep;
				responseAux.push(pu);
			}
		}
		Generation.random.shuffle(responseAux);
		var _g6 = 0;
		while(_g6 < responseAux.length) {
			var unit = responseAux[_g6];
			++_g6;
			response.push(unit);
		}
		responseAux.length = 0;
	}
	return response;
};
Generation.prototype = {
	__class__: Generation
};
var ProceduralUnit = function() {
	this.repeat = 0;
	this.characteristics = [];
};
$hxClasses["ProceduralUnit"] = ProceduralUnit;
ProceduralUnit.__name__ = "ProceduralUnit";
ProceduralUnit.prototype = {
	__class__: ProceduralUnit
};
var ProceduralUnitRepeated = function() {
	this.randomExtra = [];
	this.total = 0;
	this.position = 0;
};
$hxClasses["ProceduralUnitRepeated"] = ProceduralUnitRepeated;
ProceduralUnitRepeated.__name__ = "ProceduralUnitRepeated";
ProceduralUnitRepeated.prototype = {
	__class__: ProceduralUnitRepeated
};
var BattleConstants = function() { };
$hxClasses["BattleConstants"] = BattleConstants;
BattleConstants.__name__ = "BattleConstants";
var RegionType = $hxEnums["RegionType"] = { __ename__:true,__constructs__:null
	,PROCEDURAL: {_hx_name:"PROCEDURAL",_hx_index:0,__enum__:"RegionType",toString:$estr}
	,CHALLENGE: {_hx_name:"CHALLENGE",_hx_index:1,__enum__:"RegionType",toString:$estr}
	,SEMIPROCEDURAL: {_hx_name:"SEMIPROCEDURAL",_hx_index:2,__enum__:"RegionType",toString:$estr}
};
RegionType.__constructs__ = [RegionType.PROCEDURAL,RegionType.CHALLENGE,RegionType.SEMIPROCEDURAL];
var CounterAttackData = function() {
	this.attributeInfluenceOnCounterPower = new haxe_ds_StringMap();
	this.element = null;
};
$hxClasses["CounterAttackData"] = CounterAttackData;
CounterAttackData.__name__ = "CounterAttackData";
CounterAttackData.prototype = {
	__class__: CounterAttackData
};
var CounterAttackBuffer = function(actor,counter) {
	this.actor = null;
	this.actor = actor;
	this.counterId = counter;
};
$hxClasses["CounterAttackBuffer"] = CounterAttackBuffer;
CounterAttackBuffer.__name__ = "CounterAttackBuffer";
CounterAttackBuffer.prototype = {
	__class__: CounterAttackBuffer
};
var BattleManagerConfiguration = function() {
	this.regions = [];
};
$hxClasses["BattleManagerConfiguration"] = BattleManagerConfiguration;
BattleManagerConfiguration.__name__ = "BattleManagerConfiguration";
BattleManagerConfiguration.prototype = {
	__class__: BattleManagerConfiguration
};
var Prize = function() {
	this.resourcePrize = null;
	this.equipments = null;
	this.xp = 0;
};
$hxClasses["Prize"] = Prize;
Prize.__name__ = "Prize";
Prize.prototype = {
	__class__: Prize
};
var AreaData = function() {
};
$hxClasses["AreaData"] = AreaData;
AreaData.__name__ = "AreaData";
AreaData.prototype = {
	setEnemyInfo: function(enemyInfo) {
		this.enemy = enemyInfo;
		return this;
	}
	,__class__: AreaData
};
var RegionData = function(type) {
	this.areaDatas = [];
	this.regionPrize = null;
	this.actorSheet = null;
	this.conditionArea = -1;
	this.conditionRegion = -1;
	this.type = type;
};
$hxClasses["RegionData"] = RegionData;
RegionData.__name__ = "RegionData";
RegionData.regionWithPrize = function(type,prize) {
	var cr = new RegionData(type);
	cr.regionPrize = prize;
	return cr;
};
RegionData.challengeRegion = function(conditionRegion,conditionArea,actorSheet,regionPrize) {
	var cr = new RegionData(RegionType.CHALLENGE);
	cr.actorSheet = actorSheet;
	cr.regionPrize = regionPrize;
	cr.conditionArea = conditionArea;
	cr.conditionRegion = conditionRegion;
	return cr;
};
RegionData.prototype = {
	__class__: RegionData
};
var ArrayHelper = function() { };
$hxClasses["ArrayHelper"] = ArrayHelper;
ArrayHelper.__name__ = "ArrayHelper";
ArrayHelper.InsertOnEmpty = function(ele,array) {
	if(array.indexOf(null) != -1) {
		var id = array.indexOf(null);
		array[id] = ele;
		return id;
	}
	array.push(ele);
	return array.length - 1;
};
var BattleManager = function() {
	this.timeGetRate = 1;
	this.timePeriodOverwrite = -1;
	this.heroMaxLevel = 99999;
	this.counterAttackBuffered = [];
	this.counterAttackDatas = [];
	this.achievementModel = new AchievementModel();
	this.global = new GlobalData();
	this.enemyAreaFromProcedural = new EnemyAreaFromProceduralUnitRepetition();
	this.equipmentToDiscard = [];
	this.volatileAttributeAux = [];
	this.volatileAttributeList = ["MP","Life","MPRechargeCount","SpeedCount",BattleConstants.damageLastTurn];
	this.skillSlotUnlocklevel = [2,7,22,35];
	this.itemDropAux = [];
	this.regionRequirements = [0];
	this.playerActions = new haxe_ds_StringMap();
	this.events = [];
	this.turnSpeedCount = 1000;
	this.externalStatBonuses = new haxe_ds_StringMap();
	this.statCopyAux = new haxe_ds_StringMap();
	this.fixedRandom = new seedyrng_Random();
	this.random = new seedyrng_Random();
	this.equipMaxPerType = 100;
	this.equipDropChance_Rare = 15;
	this.equipDropChance = 30;
	this.timePeriod = 0.6;
	this.timeCount = 0;
	this.turnList = [];
	this.autoAdvanceRequest = false;
	this.prestiged = false;
	this.canLevelUp = false;
	this.canAdvance = false;
	this.canRetreat = false;
	this.dirty = false;
	this.heroConditionalBonus = [];
	this.currencyModel = new CurrencyModel(null);
	this.balancing = { timeToKillFirstEnemy : 5, timeForFirstAreaProgress : 20, timeForFirstLevelUpGrind : 90, areaBonusXPPercentOfFirstLevelUp : 60};
	this.achievementModel.createAchievements();
	var bm = this;
	this.enemyAreaFromProcedural.enemySheets.push({ speciesMultiplier : null, speciesLevelStats : null, speciesAdd : null});
	this.enemyAreaFromProcedural.equipments.push(null);
	var tmp = this.enemyAreaFromProcedural.enemySheets;
	var _g = new haxe_ds_StringMap();
	_g.h["Attack"] = 0.6;
	_g.h["Speed"] = 1.3;
	_g.h["LifeMax"] = 0.85;
	var _g1 = new haxe_ds_StringMap();
	_g1.h["Speed"] = 0.6;
	tmp.push({ speciesMultiplier : { attributesBase : _g}, speciesAdd : null, speciesLevelStats : { attributesBase : _g1}});
	this.enemyAreaFromProcedural.equipments.push(null);
	var tmp = this.enemyAreaFromProcedural.enemySheets;
	var _g = new haxe_ds_StringMap();
	_g.h["Attack"] = 1.8;
	_g.h["Speed"] = 0.3;
	_g.h["LifeMax"] = 1.2;
	var _g1 = new haxe_ds_StringMap();
	_g1.h["Speed"] = 0.05;
	_g1.h["Defense"] = 0.05;
	tmp.push({ speciesMultiplier : { attributesBase : _g}, speciesAdd : null, speciesLevelStats : { attributesBase : _g1}});
	this.enemyAreaFromProcedural.equipments.push(null);
	var tmp = this.enemyAreaFromProcedural.enemySheets;
	var _g = new haxe_ds_StringMap();
	_g.h["Attack"] = 0.9;
	_g.h["Speed"] = 0.5;
	_g.h["LifeMax"] = 1.3;
	var _g1 = new haxe_ds_StringMap();
	_g1.h["Defense"] = 1;
	var _g2 = new haxe_ds_StringMap();
	_g2.h["Defense"] = 0.1;
	_g2.h["Speed"] = 0;
	tmp.push({ speciesMultiplier : { attributesBase : _g}, speciesAdd : _g1, speciesLevelStats : { attributesBase : _g2}});
	this.enemyAreaFromProcedural.equipments.push(null);
	this.enemyAreaFromProcedural.equipments.push(null);
	var tmp = this.enemyAreaFromProcedural.equipments;
	var _g = new haxe_ds_StringMap();
	_g.h["thunder-damage"] = 250;
	_g.h["fire-damage"] = 30;
	tmp.push({ type : 0, seen : 2, requiredAttributes : null, attributes : _g, outsideSystems : null});
	var tmp = this.enemyAreaFromProcedural.equipments;
	var _g = new haxe_ds_StringMap();
	_g.h["fire-damage"] = 250;
	_g.h["ice-damage"] = 30;
	tmp.push({ type : 0, seen : 2, requiredAttributes : null, attributes : _g, outsideSystems : null});
	var tmp = this.enemyAreaFromProcedural.equipments;
	var _g = new haxe_ds_StringMap();
	_g.h["ice-damage"] = 250;
	_g.h["thunder-damage"] = 30;
	tmp.push({ type : 0, seen : 2, requiredAttributes : null, attributes : _g, outsideSystems : null});
	var pus = [];
	var pu = new ProceduralUnit();
	pu.characteristics.push(0);
	pu.characteristics.push(0);
	pu.repeat = 0;
	pus.push(pu);
	var pu = new ProceduralUnit();
	pu.characteristics.push(1);
	pu.characteristics.push(0);
	pu.repeat = 0;
	pus.push(pu);
	pus = Generation.Generate("w1",8,1,3,pus,[0,1]);
	var purs = Generation.GenerateRepetitions("w1",pus,{ min : 3, max : 6});
	this.enemyAreaFromProcedural.units = purs;
	var _g = new haxe_ds_StringMap();
	_g.h["Attack"] = 1;
	_g.h["Life"] = 20;
	_g.h["LifeMax"] = 20;
	_g.h["Speed"] = 20;
	_g.h["SpeedCount"] = 0;
	var stats = _g;
	var w = { worldVersion : 30160, hero : { level : 1, attributesBase : null, equipment : null, xp : null, attributesCalculated : stats, reference : new ActorReference(0,0), viewAux : 0}, enemy : null, maxArea : 1, necessaryToKillInArea : 0, killedInArea : [0,0], prestigeTimes : 0, timeCount : 0, playerTimesKilled : 0, battleArea : 0, battleAreaRegion : 0, battleAreaRegionMax : 1, playerActions : new haxe_ds_StringMap(), recovering : false, sleeping : false, regionProgress : []};
	this.wdata = w;
	this.counterAttackDatas.push(null);
	var ctd = new CounterAttackData();
	ctd.element = "fire";
	var _g = new haxe_ds_StringMap();
	_g.h["Attack"] = 50;
	ctd.attributeInfluenceOnCounterPower = _g;
	this.counterAttackDatas.push(ctd);
	var ctd = new CounterAttackData();
	ctd.element = "ice";
	var _g = new haxe_ds_StringMap();
	_g.h["Defense"] = 120;
	ctd.attributeInfluenceOnCounterPower = _g;
	this.counterAttackDatas.push(ctd);
	var ctd = new CounterAttackData();
	ctd.element = "thunder";
	var _g = new haxe_ds_StringMap();
	_g.h[BattleConstants.damageLastTurn] = 100;
	ctd.attributeInfluenceOnCounterPower = _g;
	this.counterAttackDatas.push(ctd);
	var ctd = new CounterAttackData();
	ctd.element = null;
	var _g = new haxe_ds_StringMap();
	_g.h["Attack"] = 100;
	ctd.attributeInfluenceOnCounterPower = _g;
	this.counterAttackDatas.push(ctd);
	this.ReinitGameValues();
	this.ChangeBattleArea(0);
	var v = this.wdata.hero.attributesCalculated.h["LifeMax"];
	this.wdata.hero.attributesCalculated.h["Life"] = v;
};
$hxClasses["BattleManager"] = BattleManager;
BattleManager.__name__ = "BattleManager";
BattleManager.IsLimitBreakable = function(e,wdata) {
	if(e.type == 2) {
		return false;
	}
	var level = wdata.equipLevels[e.outsideSystems.h["level"]];
	return level.limitbreak < 3;
};
BattleManager.IsUpgradable = function(e,wdata) {
	if(e.type == 2) {
		return false;
	}
	var level = wdata.equipLevels[e.outsideSystems.h["level"]];
	var maxLevel = level.limitbreak * 3 + 3;
	var upgradable = level.level < maxLevel;
	return upgradable;
};
BattleManager.GetLimitBreakCost = function(e,wdata) {
	return ((BattleManager.GetCost(e,wdata) + 1) / 5 | 0) * 3;
};
BattleManager.GetSellPrize = function(e,wdata) {
	return BattleManager.GetCost(e,wdata) / 5 | 0;
};
BattleManager.GetCost = function(e,wdata) {
	var genLevel = 1;
	if(e.generationLevel >= 0) {
		genLevel = e.generationLevel;
	}
	if(e.generationPrefixMod >= 0) {
		genLevel += 5;
	}
	if(e.generationSuffixMod >= 0) {
		genLevel += 5;
	}
	return (genLevel / 5 | 0) * 5 + 5;
};
BattleManager.CanUpgrade = function(e,wdata) {
	if(BattleManager.IsUpgradable(e,wdata) == false) {
		return false;
	}
	return BattleManager.GetCost(e,wdata) <= wdata.currency.currencies.h["Lagrima"].value;
};
BattleManager.CanLimitBreak = function(e,wdata) {
	if(BattleManager.IsLimitBreakable(e,wdata) == false) {
		return false;
	}
	return BattleManager.GetLimitBreakCost(e,wdata) <= wdata.currency.currencies.h["Lagrima Stone"].value;
};
BattleManager.LimitBreak = function(e,wdata) {
	var cost = BattleManager.GetLimitBreakCost(e,wdata);
	wdata.currency.currencies.h["Lagrima Stone"].value -= cost;
	var level = wdata.equipLevels[e.outsideSystems.h["level"]];
	level.limitbreak++;
};
BattleManager.Upgrade = function(e,wdata,bm) {
	var cost = BattleManager.GetCost(e,wdata);
	wdata.currency.currencies.h["Lagrima"].value -= cost;
	var level = wdata.equipLevels[e.outsideSystems.h["level"]];
	level.level++;
	if(BattleManager.IsUpgradable(e,wdata) == false) {
		var bonus = BattleManager.GetLimitBreakCost(e,wdata) / 3 | 0;
		wdata.currency.currencies.h["Lagrima Stone"].value += bonus;
		var e1 = bm.AddEvent(EventTypes.EquipMaxed);
		e1.data = bonus;
		e1.dataString = "Lagrima Stone";
	}
	if(Object.prototype.hasOwnProperty.call(e.attributes.h,"Attack")) {
		var tmp = "Attack";
		var v = e.attributes.h[tmp] + 1;
		e.attributes.h[tmp] = v;
	}
	if(Object.prototype.hasOwnProperty.call(e.attributes.h,"MagicAttack")) {
		var tmp = "MagicAttack";
		var v = e.attributes.h[tmp] + 1;
		e.attributes.h[tmp] = v;
	}
	if(e.type == 1) {
		if(e.attributes.h["LifeMax"] >= 0 == false) {
			e.attributes.h["LifeMax"] = 0;
		}
		var _g = e.attributes;
		var v = _g.h["LifeMax"] + 2;
		_g.h["LifeMax"] = v;
	}
	if(level.level % 3 != 0) {
		if(Object.prototype.hasOwnProperty.call(e.attributes.h,"Defense")) {
			var tmp = "Defense";
			var v = e.attributes.h[tmp] + 1;
			e.attributes.h[tmp] = v;
		}
		if(Object.prototype.hasOwnProperty.call(e.attributes.h,"MagicDefense")) {
			var tmp = "MagicDefense";
			var v = e.attributes.h[tmp] + 1;
			e.attributes.h[tmp] = v;
		}
	}
};
BattleManager.prototype = {
	GetAttribute: function(actor,label) {
		var i = actor.attributesCalculated.h[label];
		if(i < 0) {
			i = 0;
		}
		return i;
	}
	,UseMP: function(actor,mpCost,event) {
		if(event == null) {
			event = true;
		}
		var mp = actor.attributesCalculated.h["MP"];
		mp -= mpCost;
		if(mp <= 0) {
			mp = 0;
			actor.attributesCalculated.h["MPRechargeCount"] = 0;
			if(event) {
				var ev = this.AddEvent(EventTypes.MPRunOut);
				ev.origin = this.wdata.hero.reference;
			}
		}
		actor.attributesCalculated.h["MP"] = mp;
	}
	,UseSkill: function(skill,actor,activeStep) {
		if(activeStep == null) {
			activeStep = false;
		}
		var id = skill.id;
		var skillBase = this.GetSkillBase(id);
		if(skillBase.turnRecharge > 0) {
			if(actor.turnRecharge == null) {
				actor.turnRecharge = [];
			}
			actor.turnRecharge[actor.usableSkills.indexOf(skill)] = skillBase.turnRecharge;
		}
		if(activeStep == false && skillBase.activeEffect != null) {
			this.scheduledSkill = skill;
			return;
		}
		if(actor == this.wdata.hero) {
			this.timeCount = 0;
		}
		var executedEffects = 0;
		var efs = skillBase.effects;
		if(activeStep) {
			efs = skillBase.activeEffect;
		}
		var skillUsed = false;
		var _g = 0;
		while(_g < efs.length) {
			var ef = efs[_g];
			++_g;
			var targets = [];
			if(ef.target == Target.SELF) {
				targets.push(actor);
			}
			if(ef.target == Target.ENEMY) {
				if(this.wdata.hero == actor) {
					if(this.wdata.enemy.attributesCalculated.h["LifeMax"] == 0) {
						this.CreateAreaEnemy();
					}
					targets.push(this.wdata.enemy);
				} else {
					targets.push(this.wdata.hero);
				}
			}
			++executedEffects;
			if(skillUsed == false) {
				skillUsed = true;
				var mpCost = skillBase.mpCost;
				this.UseMP(actor,mpCost);
				var ev = this.AddEvent(EventTypes.SkillUse);
				ev.origin = this.wdata.hero.reference;
				ev.dataString = skill.id;
			}
			ef.effectExecution(this,skill.level,actor,targets);
		}
	}
	,Heal: function(target,lifeMaxPercentage,rawBonus) {
		if(rawBonus == null) {
			rawBonus = 0;
		}
		if(lifeMaxPercentage == null) {
			lifeMaxPercentage = 0;
		}
		var lifem = target.attributesCalculated.h["LifeMax"];
		var life = target.attributesCalculated.h["Life"];
		var healAmountRaw = rawBonus + (lifeMaxPercentage * lifem / 100 | 0);
		life += healAmountRaw;
		if(life > lifem) {
			life = lifem;
		}
		target.attributesCalculated.h["Life"] = life;
		this.AddEvent(EventTypes.heal).data = healAmountRaw;
	}
	,getGeneralJson: function() {
		if(this.generalSaveData == null) {
			return null;
		}
		return JsonMainTypes.jsonwritergeneral.write(this.generalSaveData);
	}
	,loadGeneralJson: function(json,worldVersion) {
		if(worldVersion <= 3003) {
			json = null;
		}
		if(json == null) {
			this.generalSaveData = { achievementData : { achievs : null}};
			this.generalSaveData.achievementData = { achievs : new haxe_ds_StringMap()};
		} else {
			this.generalSaveData = JsonMainTypes.jsonparsergeneral.fromJson(json);
		}
		this.achievementModel.modelData.achievementData = this.generalSaveData.achievementData;
		this.achievementModel.modelData.globalData = this.global;
	}
	,RemoveBuffs: function(defender,keepDebuffs) {
		if(keepDebuffs == null) {
			keepDebuffs = true;
		}
		if(keepDebuffs == false) {
			defender.buffs.length = 0;
		} else {
			var i = 0;
			while(i < defender.buffs.length) {
				if(defender.buffs[i].debuff == true) {
					++i;
					continue;
				}
				HxOverrides.remove(defender.buffs,defender.buffs[i]);
			}
		}
		this.RecalculateAttributes(defender);
		this.AddEvent(EventTypes.BuffRemoval).origin = defender.reference;
	}
	,RefreshCalculatedTurnOrder: function() {
		this.turnList.length = 0;
		var hero = this.wdata.hero;
		var enemy = this.wdata.enemy;
		if(enemy == null) {
			return;
		}
		if(enemy.attributesCalculated.h["Life"] == 0) {
			return;
		}
		var countH = hero.attributesCalculated.h["SpeedCount"];
		var countE = enemy.attributesCalculated.h["SpeedCount"];
		var _g = 0;
		while(_g < 10000) {
			var i = _g++;
			var actorAct = -1;
			var actorView = -1;
			var bActor = hero;
			var count = countH;
			count += bActor.attributesCalculated.h["Speed"];
			if(actorAct == -1) {
				if(count > this.turnSpeedCount) {
					actorAct = 0;
					actorView = bActor.viewAux;
					count -= this.turnSpeedCount;
				}
			}
			countH = count;
			var bActor1 = hero;
			var count1 = countH;
			bActor1 = enemy;
			count1 = countE;
			count1 += bActor1.attributesCalculated.h["Speed"];
			if(actorAct == -1) {
				if(count1 > this.turnSpeedCount) {
					actorAct = 1;
					actorView = bActor1.viewAux;
					count1 -= this.turnSpeedCount;
				}
			}
			countE = count1;
			if(actorAct >= 0) {
				this.turnList.push(actorView);
			}
			if(this.turnList.length >= 6) {
				break;
			}
		}
	}
	,copyActorStatsToAux: function(actor) {
		this.statCopyAux.h = Object.create(null);
		var h = actor.attributesCalculated.h;
		var _g_h = h;
		var _g_keys = Object.keys(h);
		var _g_length = _g_keys.length;
		var _g_current = 0;
		while(_g_current < _g_length) {
			var key = _g_keys[_g_current++];
			var _g1_key = key;
			var _g1_value = _g_h[key];
			var key1 = _g1_key;
			var value = _g1_value;
			this.statCopyAux.h[key1] = value;
		}
		return this.statCopyAux;
	}
	,getStatsIfEquipped: function(actor,equipPos) {
		var es = actor.equipmentSets[actor.chosenEquipSet].equipmentSlots;
		var e = actor.equipment[equipPos];
		var type = e.type;
		var original = es[type];
		es[type] = equipPos;
		this.RecalculateAttributes(actor);
		var statAux = this.copyActorStatsToAux(actor);
		es[type] = original;
		this.RecalculateAttributes(actor);
		return statAux;
	}
	,getStatsIfSet: function(actor,setPos) {
		var original = actor.chosenEquipSet;
		actor.chosenEquipSet = setPos;
		this.RecalculateAttributes(actor);
		var statAux = this.copyActorStatsToAux(actor);
		actor.chosenEquipSet = original;
		this.RecalculateAttributes(actor);
		return statAux;
	}
	,AttackExecute: function(attacker,defender,attackRate,attackBonus,defenseRate,magicAttack,element,attackerStatInfluence,attackerText,defenderText) {
		if(magicAttack == null) {
			magicAttack = false;
		}
		if(defenseRate == null) {
			defenseRate = 100;
		}
		if(attackBonus == null) {
			attackBonus = 0;
		}
		if(attackRate == null) {
			attackRate = 100;
		}
		this.lastActiveActor = attacker;
		var gEvent = this.AddEvent(EventTypes.ActorAttack);
		var enchant = attacker.attributesCalculated.h["enchant-fire"];
		if(enchant > 0) {
			magicAttack = true;
			attackBonus += enchant;
		}
		if(element != null) {
			var elementDmg = element + "-damage";
			if(Object.prototype.hasOwnProperty.call(defender.attributesCalculated.h,elementDmg)) {
				var baseDmg = defender.attributesCalculated.h[elementDmg];
				attackRate = attackRate * baseDmg / 100 | 0;
			}
			var elementAtk = element + "-boost";
			if(Object.prototype.hasOwnProperty.call(attacker.attributesCalculated.h,elementAtk)) {
				var baseDmg = attacker.attributesCalculated.h[elementAtk];
				attackRate = attackRate * baseDmg / 100 | 0;
			}
		}
		var bloodDecrease = 0;
		if(attacker.attributesCalculated.h["Blood"] > 0) {
			var blood = attacker.attributesCalculated.h["Blood"];
			var bloodMul = 100;
			if(attacker.attributesCalculated.h["Bloodthirst"] > 0) {
				bloodMul += attacker.attributesCalculated.h["Bloodthirst"];
			}
			attackBonus += blood;
			attackRate += (blood * 5 + 10) * bloodMul / 100 | 0;
			var life = attacker.attributesCalculated.h["Life"];
			var decrease = attacker.attributesCalculated.h["LifeMax"] * blood / 100 | 0;
			if(decrease < 1) {
				decrease = 1;
			}
			if(decrease >= life - 1) {
				decrease = life - 1;
			}
			bloodDecrease = decrease;
			life -= decrease | 0;
			attacker.attributesCalculated.h["Life"] = life;
		}
		if(attacker.attributesCalculated.h["Antibuff"] > 0) {
			this.RemoveBuffs(defender);
		}
		var counterAttackHappen = false;
		var counterAttack = -1;
		if(magicAttack == false) {
			var attackPierce = attacker.attributesCalculated.h["Piercing"];
			if(attackPierce > 0 == true) {
				if(defender.attributesCalculated.h["Safeguard"] > 0) {
					attackPierce -= defender.attributesCalculated.h["Safeguard"];
				}
				if(attackPierce > 0) {
					defenseRate -= attackPierce;
				}
			}
			counterAttack = defender.attributesCalculated.h["Counterattack"];
		}
		if(counterAttack > 0) {
			counterAttackHappen = true;
		}
		if(defenseRate < 0) {
			defenseRate = 0;
		}
		var attack = 0;
		var defense = 0;
		if(magicAttack) {
			attack = attacker.attributesCalculated.h["MagicAttack"];
			defense = defender.attributesCalculated.h["MagicDefense"];
		} else {
			attack = attacker.attributesCalculated.h["Attack"];
			defense = defender.attributesCalculated.h["Defense"];
		}
		attack = attackRate * attack / 100 + attackBonus;
		if(attackerStatInfluence != null) {
			var h = attackerStatInfluence.h;
			var _g_h = h;
			var _g_keys = Object.keys(h);
			var _g_length = _g_keys.length;
			var _g_current = 0;
			while(_g_current < _g_length) {
				var key = _g_keys[_g_current++];
				var _g1_key = key;
				var _g1_value = _g_h[key];
				var statName = _g1_key;
				var value = _g1_value;
				var attr = attacker.attributesCalculated.h[statName];
				attack += value * attr / 100;
			}
		}
		var damage = attack - defense * defenseRate / 100 | 0;
		if(damage < 0) {
			damage = 0;
		}
		var _g = defender.attributesCalculated;
		var v = _g.h["Life"] - damage;
		_g.h["Life"] = v;
		defender.attributesCalculated.h[BattleConstants.damageLastTurn] = damage;
		var defenderDead = false;
		if(defender.attributesCalculated.h["Life"] <= 0) {
			defender.attributesCalculated.h["Life"] = 0;
			defenderDead = true;
		}
		if(defenderDead == false && counterAttackHappen) {
			var counterB = new CounterAttackBuffer(defender.reference,counterAttack);
			var nullIndex = -1;
			var _g_current = 0;
			var _g_array = this.counterAttackBuffered;
			while(_g_current < _g_array.length) {
				var _g1_value = _g_array[_g_current];
				var _g1_key = _g_current++;
				var index = _g1_key;
				var value = _g1_value;
				if(value == null) {
					nullIndex = index;
				}
			}
			if(nullIndex >= 0) {
				this.counterAttackBuffered[nullIndex] = counterB;
			} else {
				this.counterAttackBuffered.push(counterB);
			}
		}
		if(damage >= 1) {
			var _g = 0;
			var _g1 = defender.buffs;
			while(_g < _g1.length) {
				var b = _g1[_g];
				++_g;
				if(b.noble == true) {
					b.duration = 0;
				}
			}
		}
		gEvent.origin = attacker.reference;
		gEvent.target = defender.reference;
		gEvent.data = damage;
		gEvent.data2 = bloodDecrease;
		gEvent.dataString = attackerText;
		gEvent.dataString2 = defenderText;
		var hero = this.wdata.hero;
		var enemy = this.wdata.enemy;
		var killedInArea = this.wdata.killedInArea;
		var battleArea = this.wdata.battleArea;
		var areaComplete = killedInArea[battleArea] >= this.wdata.necessaryToKillInArea;
		if(enemy.attributesCalculated.h["Life"] <= 0) {
			if(killedInArea[battleArea] == null) {
				killedInArea[battleArea] = 0;
			}
			killedInArea[battleArea]++;
			if(this.config.regions[this.wdata.battleAreaRegion].type != RegionType.CHALLENGE) {
				this.DropItemOrSkillSet(this.equipDropChance,1,enemy.level,enemy.reference);
			}
			var e = this.AddEvent(EventTypes.ActorDead);
			e.origin = enemy.reference;
			var xpGain = enemy.level;
			this.AwardXP(enemy.level,null);
			var regionPrize = this.config.regions[this.wdata.battleAreaRegion].regionPrize;
			if(killedInArea[battleArea] >= this.wdata.necessaryToKillInArea) {
				this.AddEvent(EventTypes.AreaComplete).data = this.wdata.battleArea;
				if(this.wdata.maxArea == this.wdata.battleArea) {
					if(regionPrize.xpPrize == true) {
						var areaForBonus = this.wdata.battleArea;
						ResourceLogic.recalculateScalingResource(areaForBonus,this.areaBonus);
						var xpPlus = this.areaBonus.calculatedMax;
						if(xpPlus >= this.areaBonus.cap) {
							xpPlus = areaForBonus * 100 + this.areaBonus.cap;
						}
						this.AwardXP(xpPlus,"special");
					}
					if(regionPrize.statBonus != null) {
						var h = regionPrize.statBonus.h;
						var su_h = h;
						var su_keys = Object.keys(h);
						var su_length = su_keys.length;
						var su_current = 0;
						while(su_current < su_length) {
							var key = su_keys[su_current++];
							var su_key = key;
							var su_value = su_h[key];
							var e = this.AddEvent(EventTypes.statUpgrade);
							e.dataString = su_key;
							e.data = su_value;
						}
						this.AddEvent(EventTypes.PermanentStatUpgrade);
					}
					this.wdata.maxArea++;
					this.AddEvent(EventTypes.AreaUnlock).data = this.wdata.maxArea;
					killedInArea[this.wdata.maxArea] = 0;
				}
				if(this.wdata.autoAdvance) {
					this.autoAdvanceRequest = true;
					this.wdata.hero.turnRecharge.length = 0;
				}
				if(this.wdata.autoRepeat) {
					this.autoRepeatRequest = true;
					this.wdata.hero.turnRecharge.length = 0;
				}
			}
		}
		if(hero.attributesCalculated.h["Life"] <= 0) {
			this.wdata.recovering = true;
			this.wdata.enemy = null;
			var e = this.AddEvent(EventTypes.ActorDead);
			e.origin = hero.reference;
			this.wdata.playerTimesKilled++;
		}
	}
	,ForceSkillSetDrop: function(enemyLevel,dropperReference,ss,event) {
		if(event == null) {
			event = true;
		}
		var scalingStats = new haxe_ds_StringMap();
		switch(this.random.randomInt(0,2)) {
		case 0:
			scalingStats.h["Attack"] = 0.3;
			break;
		case 1:
			scalingStats.h["Defense"] = 0.3;
			break;
		case 2:
			scalingStats.h["Speed"] = 0.1;
			break;
		}
		var itemB = { type : 2, statMultipliers : null, scalingStats : scalingStats, statAdd : null, name : null, abbrev : null, dropRequirement : { minEnemyLevel : 0, maxEnemyLevel : 999999}};
		if(this.wdata.skillSets == null) {
			this.wdata.skillSets = [];
		}
		var skillSetPos = ArrayHelper.InsertOnEmpty(ss,this.wdata.skillSets);
		this.DropItem(itemB,-1,skillSetPos,enemyLevel,dropperReference,event);
	}
	,ResetEquipToBaseLevel: function(equipment,level) {
		var baseItem = equipment.generationBaseItem;
		if(baseItem >= 0) {
			var ib = this.itemBases[baseItem];
			if(ib != null) {
				var h = ib.scalingStats.h;
				var _g_h = h;
				var _g_keys = Object.keys(h);
				var _g_length = _g_keys.length;
				var _g_current = 0;
				while(_g_current < _g_length) {
					var key = _g_keys[_g_current++];
					var _g1_key = key;
					var _g1_value = _g_h[key];
					var key1 = _g1_key;
					var value = _g1_value;
					var v = value * level | 0;
					equipment.attributes.h[key1] = v;
				}
				equipment.generationLevel = 1;
				return true;
			}
			return false;
		}
		return false;
	}
	,createAreaGoEvent: function(region,area) {
		var d = new Data();
		d.intData = region;
		d.intData2 = area;
		d.stringData = BattleConstants.DATAEVENT_CHANGEAREA;
		return d;
	}
	,DropItemOrSkillSet: function(itemDropProbability,skillSetDropProbability,enemyLevel,dropperReference) {
		if(skillSetDropProbability == null) {
			skillSetDropProbability = 2;
		}
		var baseItem = -1;
		var itemB = null;
		if(this.random.randomInt(0,1000) < skillSetDropProbability * 10) {
			var skillPosArray = [];
			var baseLevel = 1;
			var maxLevel = 1;
			var maxNSkills = 2;
			if(this.wdata.enemy.level > 5) {
				maxNSkills = 3;
			}
			if(this.wdata.enemy.level > 10) {
				maxLevel = 2;
			}
			if(this.wdata.enemy.level > 25) {
				maxNSkills = 4;
			}
			if(this.wdata.enemy.level > 35) {
				maxLevel = 4;
			}
			var numberOfSkills = this.random.randomInt(1,maxNSkills);
			var _g = 0;
			var _g1 = numberOfSkills;
			while(_g < _g1) {
				var s = _g++;
				var skill = this.random.randomInt(0,this.skillBases.length - 1 - s);
				while(skillPosArray.indexOf(skill) != -1) ++skill;
				skillPosArray[s] = skill;
			}
			var ss = { skills : []};
			var _g = 0;
			var _g1 = skillPosArray.length;
			while(_g < _g1) {
				var j = _g++;
				var level = baseLevel;
				level = this.random.randomInt(baseLevel,maxLevel);
				if(j >= 2) {
					level = maxLevel + 1;
				}
				if(j >= 3) {
					level = maxLevel + 2;
				}
				var sp = skillPosArray[j];
				ss.skills.push({ id : this.skillBases[sp].id, level : level});
			}
			this.ForceSkillSetDrop(enemyLevel,dropperReference,ss);
			return;
		}
		if(this.random.randomInt(0,100) < itemDropProbability) {
			this.itemDropAux.length = 0;
			var _g_current = 0;
			var _g_array = this.itemBases;
			while(_g_current < _g_array.length) {
				var _g1_value = _g_array[_g_current];
				var _g1_key = _g_current++;
				var index = _g1_key;
				var value = _g1_value;
				var dr = value.dropRequirement;
				if(enemyLevel >= dr.minEnemyLevel && enemyLevel <= dr.maxEnemyLevel) {
					this.itemDropAux.push(index);
				}
			}
			baseItem = this.itemDropAux[this.random.randomInt(0,this.itemDropAux.length - 1)];
			itemB = this.itemBases[baseItem];
			this.DropItem(itemB,baseItem,-1,enemyLevel,dropperReference);
		}
	}
	,DropItem: function(itemB,baseItem,skillSetPos,enemyLevel,dropperReference,event) {
		if(event == null) {
			event = true;
		}
		var e = null;
		var stat = new haxe_ds_StringMap();
		var statVar = new haxe_ds_StringMap();
		var mul = new haxe_ds_StringMap();
		var mulVar = new haxe_ds_StringMap();
		var minLevel = (enemyLevel + 1) / 2 - 3 | 0;
		if(minLevel < 1) {
			minLevel = 1;
		}
		var maxLevel = enemyLevel / 2 + 2 | 0;
		var level = this.random.randomInt(minLevel,maxLevel);
		var prefixPos = -1;
		var prefixSeed = -1;
		var suffixPos = -1;
		var suffixSeed = -1;
		if(itemB.scalingStats != null) {
			var h = itemB.scalingStats.h;
			var s_h = h;
			var s_keys = Object.keys(h);
			var s_length = s_keys.length;
			var s_current = 0;
			while(s_current < s_length) {
				var key = s_keys[s_current++];
				var s_key = key;
				var s_value = s_h[key];
				var vari = 100;
				statVar.h[s_key] = vari;
				var value = s_value * vari * level;
				if(value < 100) {
					value = 100;
				}
				var v = value / 100 | 0;
				stat.h[s_key] = v;
			}
		}
		if(itemB.statAdd != null) {
			var h = itemB.statAdd.h;
			var s_h = h;
			var s_keys = Object.keys(h);
			var s_length = s_keys.length;
			var s_current = 0;
			while(s_current < s_length) {
				var key = s_keys[s_current++];
				var s_key = key;
				var s_value = s_h[key];
				if(Object.prototype.hasOwnProperty.call(stat.h,s_key)) {
					var _g = s_key;
					var _g1 = stat;
					var v = _g1.h[_g] + s_value;
					_g1.h[_g] = v;
				} else {
					var v1 = s_value;
					stat.h[s_key] = v1;
				}
			}
		}
		if(itemB.statMultipliers != null) {
			var h = itemB.statMultipliers.h;
			var s_h = h;
			var s_keys = Object.keys(h);
			var s_length = s_keys.length;
			var s_current = 0;
			while(s_current < s_length) {
				var key = s_keys[s_current++];
				var s_key = key;
				var s_value = s_h[key];
				var vari = 100;
				mulVar.h[s_key] = vari;
				var min = s_value.min;
				var max = s_value.max;
				var range = max - min;
				var v = min + range * vari / 100 | 0;
				mul.h[s_key] = v;
			}
		}
		if(this.random.randomInt(0,100) < this.equipDropChance_Rare) {
			this.itemDropAux.length = 0;
			var _g_current = 0;
			var _g_array = this.modBases;
			while(_g_current < _g_array.length) {
				var _g1_value = _g_array[_g_current];
				var _g1_key = _g_current++;
				var index = _g1_key;
				var value = _g1_value;
				var dr = value.dropRequirement;
				if(enemyLevel >= dr.minEnemyLevel && enemyLevel <= dr.maxEnemyLevel) {
					this.itemDropAux.push(index);
				}
			}
			if(this.itemDropAux.length > 0) {
				var modType = this.random.randomInt(0,2);
				var prefixExist = modType == 0 || modType == 2;
				var suffixExist = modType == 1 || modType == 2;
				if(prefixExist) {
					prefixPos = this.itemDropAux[this.random.randomInt(0,this.itemDropAux.length - 1)];
					prefixSeed = this.random.nextInt();
					var tmp = this.modBases[prefixPos];
					var this1 = new haxe__$Int64__$_$_$Int64(prefixSeed >> 31,prefixSeed);
					this.AddMod(tmp,stat,mul,this1);
				}
				if(suffixExist) {
					suffixPos = this.itemDropAux[this.random.randomInt(0,this.itemDropAux.length - 1)];
					suffixSeed = this.random.nextInt();
					var tmp = this.modBases[suffixPos];
					var this1 = new haxe__$Int64__$_$_$Int64(suffixSeed >> 31,suffixSeed);
					this.AddMod(tmp,stat,mul,this1);
				}
			}
		}
		var h = mul.h;
		var m_h = h;
		var m_keys = Object.keys(h);
		var m_length = m_keys.length;
		var m_current = 0;
		while(m_current < m_length) {
			var key = m_keys[m_current++];
			var m_key = key;
			var m_value = m_h[key];
			if(m_value % 5 != 0) {
				var v = ((m_value + 4) / 5 | 0) * 5;
				mul.h[m_key] = v;
			}
		}
		var outsideSystem = new haxe_ds_StringMap();
		if(this.wdata.equipLevels == null) {
			this.wdata.equipLevels = [];
		}
		if(skillSetPos >= 0) {
			outsideSystem.h["skillset"] = skillSetPos;
		}
		var v = ArrayHelper.InsertOnEmpty({ level : 0, limitbreak : 0, ascension : 0},this.wdata.equipLevels);
		outsideSystem.h["level"] = v;
		e = { type : itemB.type, seen : 0, requiredAttributes : null, attributes : stat, generationVariations : statVar, generationLevel : level, generationBaseItem : baseItem, attributeMultiplier : mul, generationVariationsMultiplier : mulVar, generationSuffixMod : suffixPos, generationPrefixMod : prefixPos, generationSuffixModSeed : suffixSeed, generationPrefixModSeed : prefixSeed, outsideSystems : outsideSystem};
		this.AddEquip(e,event,dropperReference);
	}
	,AddEquip: function(e,event,dropperReference) {
		var addedIndex = -1;
		var amountAlready = 0;
		var _g = 0;
		var _g1 = this.wdata.hero.equipment;
		while(_g < _g1.length) {
			var equip = _g1[_g];
			++_g;
			if(e.type == equip.type) {
				++amountAlready;
			}
		}
		if(amountAlready >= this.equipMaxPerType) {
			if(event) {
				var ev = this.AddEvent(EventTypes.EquipFullFail);
				ev.data = e.type;
			}
			return;
		}
		var _g = 0;
		var _g1 = this.wdata.hero.equipment.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.wdata.hero.equipment[i] == null) {
				this.wdata.hero.equipment[i] = e;
				addedIndex = i;
				break;
			}
		}
		if(addedIndex < 0) {
			this.wdata.hero.equipment.push(e);
			addedIndex = this.wdata.hero.equipment.length - 1;
		}
		if(event) {
			var e1 = this.AddEvent(EventTypes.EquipDrop);
			e1.data = addedIndex;
			e1.origin = dropperReference;
		}
		if(amountAlready >= this.equipMaxPerType - 1) {
			if(event) {
				var ev = this.AddEvent(EventTypes.EquipFullJustNow);
				ev.data = e.type;
			}
		}
	}
	,AddBuff: function(buff,actor) {
		var addBuff = true;
		if(buff.debuff == true) {
			var debpro = actor.attributesCalculated.h["DebuffProtection"];
			if(debpro > 0) {
				if(this.random.randomInt(1,100) < debpro) {
					this.AddEvent(EventTypes.DebuffBlock).origin = actor.reference;
					return;
				}
			}
		}
		var _g = 0;
		var _g1 = actor.buffs.length;
		while(_g < _g1) {
			var bi = _g++;
			var b = actor.buffs[bi];
			if(b.uniqueId == buff.uniqueId) {
				addBuff = false;
				if(b.strength < buff.strength) {
					actor.buffs[bi] = buff;
					break;
				}
				if(b.strength == buff.strength && b.duration < buff.duration) {
					actor.buffs[bi] = buff;
					break;
				}
			}
		}
		if(addBuff) {
			actor.buffs.push(buff);
		}
		this.RecalculateAttributes(actor);
	}
	,GetSkillBase: function(id) {
		var _g = 0;
		var _g1 = this.skillBases;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.id == id) {
				return s;
			}
		}
		return null;
	}
	,ChangeBattleArea: function(area) {
		var regionData = null;
		if(this.config != null) {
			regionData = this.config.regions[this.wdata.battleAreaRegion];
		} else {
			return;
		}
		if(this.wdata.killedInArea[this.wdata.battleArea] >= this.wdata.necessaryToKillInArea) {
			this.wdata.killedInArea[this.wdata.battleArea] = 0;
		}
		this.wdata.battleArea = area;
		this.wdata.necessaryToKillInArea = 0;
		while(this.wdata.killedInArea.length <= area) this.wdata.killedInArea.push(0);
		var e = this.AddEvent(EventTypes.AreaEnter);
		e.data = this.wdata.battleAreaRegion;
		e.data2 = this.wdata.battleArea;
		var initialEnemyToKill = this.balancing.timeForFirstAreaProgress / this.balancing.timeToKillFirstEnemy | 0;
		if(this.isBattleArea()) {
			this.wdata.necessaryToKillInArea = initialEnemyToKill + ((area - 1) * initialEnemyToKill * 0.3 | 0);
			if(this.wdata.necessaryToKillInArea > initialEnemyToKill * 14) {
				this.wdata.necessaryToKillInArea = initialEnemyToKill * 14;
			}
			var fRand = this.fixedRandom;
			var x = area + 1;
			var this1 = new haxe__$Int64__$_$_$Int64(x >> 31,x);
			fRand.set_seed(this1);
			if(area > 8) {
				var mul = fRand.random() * 1.5 + 0.5;
				this.wdata.necessaryToKillInArea = this.wdata.necessaryToKillInArea * mul | 0;
			} else if(area > 4) {
				var mul = fRand.random() * 0.2 + 0.5;
				this.wdata.necessaryToKillInArea = this.wdata.necessaryToKillInArea * mul | 0;
			}
			if(this.enemyAreaFromProcedural != null && this.wdata.battleAreaRegion == 0) {
				var eAI = this.enemyAreaFromProcedural.GetEnemyAreaInformation(area - 1);
				if(eAI.nEnemies > 0) {
					this.wdata.necessaryToKillInArea = eAI.nEnemies;
				}
			}
			if(regionData.type == RegionType.SEMIPROCEDURAL) {
				var eAI = this.config.regions[this.wdata.battleAreaRegion].areaDatas[this.wdata.battleArea].enemy;
				if(eAI.nEnemies > 0) {
					this.wdata.necessaryToKillInArea = eAI.nEnemies;
				}
			}
			if(regionData.type == RegionType.CHALLENGE) {
				this.wdata.necessaryToKillInArea = 3;
			}
			if(this.PlayerFightMode()) {
				this.CreateAreaEnemy();
			}
		} else {
			this.wdata.enemy = null;
		}
		ResourceLogic.recalculateScalingResource(this.wdata.battleArea,this.areaBonus);
		this.dirty = true;
	}
	,recalculateTurnSpeedCount: function() {
		var speedH = this.wdata.hero.attributesCalculated.h["Speed"];
		this.turnSpeedCount = speedH * 15 - 1;
		if(this.wdata.enemy != null) {
			var speedE = this.wdata.enemy.attributesCalculated.h["Speed"];
			if(speedE > speedH) {
				this.turnSpeedCount = speedE * 15 - 1;
			}
		}
	}
	,PlayerFightMode: function() {
		if(this.wdata.recovering != true) {
			return this.wdata.sleeping != true;
		} else {
			return false;
		}
	}
	,CalculateHeroMaxLevel: function() {
		return this.heroMaxLevel;
	}
	,isXPCap: function() {
		if(this.wdata.hero.xp.value > this.wdata.hero.xp.calculatedMax * 12) {
			return true;
		}
		return false;
	}
	,AwardXP: function(xpPlus,type) {
		if(this.wdata.hero.level < this.CalculateHeroMaxLevel() && this.isXPCap() == false) {
			xpPlus += xpPlus * this.wdata.prestigeTimes * this.GetXPBonusOnPrestige() | 0;
			xpPlus += this.GetXPAddBonusOnPrestige();
			this.wdata.hero.xp.value += xpPlus;
			var e = this.AddEvent(EventTypes.GetXP);
			e.data = xpPlus;
			e.dataString = type;
		}
	}
	,GetMaxLevelBonusOnPrestige: function() {
		return 10;
	}
	,GetXPBonusOnPrestige: function() {
		return 0.5;
	}
	,GetXPAddBonusOnPrestige: function() {
		return this.wdata.prestigeTimes * 2;
	}
	,GetLevelRequirementForPrestige: function() {
		return 25 + this.wdata.prestigeTimes * 25;
	}
	,CreateEnemy: function(region,area) {
		var enemyLevel = area;
		var sheet = this.config.regions[region].actorSheet;
		var regionType = this.config.regions[region].type;
		var enemy;
		if(regionType == RegionType.CHALLENGE) {
			var oldLevel = enemyLevel;
			enemyLevel = 0;
			var _g = 0;
			var _g1 = oldLevel;
			while(_g < _g1) {
				var i = _g++;
				enemyLevel += 10;
				enemyLevel += i * 10;
			}
		}
		var equipment = null;
		var viewOverride = -1;
		if(regionType == RegionType.SEMIPROCEDURAL) {
			var areaInfo = this.config.regions[region].areaDatas[area].enemy;
			sheet = areaInfo.sheet;
			enemyLevel += areaInfo.level;
			equipment = areaInfo.equipment;
			viewOverride = areaInfo.viewOverride;
		}
		if(regionType == RegionType.PROCEDURAL && this.enemyAreaFromProcedural != null && this.enemyAreaFromProcedural.units != null) {
			var areaInfo = this.enemyAreaFromProcedural.GetEnemyAreaInformation(area - 1);
			sheet = areaInfo.sheet;
			enemyLevel += areaInfo.level;
			equipment = areaInfo.equipment;
			viewOverride = areaInfo.viewOverride;
		}
		var timeToKillEnemy = this.balancing.timeToKillFirstEnemy;
		var initialAttackHero = 1;
		var heroAttackTime = this.timePeriod * 2;
		var heroDPS = initialAttackHero / heroAttackTime;
		var initialLifeEnemy = heroDPS * timeToKillEnemy | 0;
		var enemyLife = initialLifeEnemy + (enemyLevel - 1) * initialLifeEnemy;
		var enemyAttack = 1 + (enemyLevel - 1);
		var _g = new haxe_ds_StringMap();
		_g.h["Attack"] = enemyAttack;
		_g.h["Life"] = enemyLife;
		_g.h["LifeMax"] = enemyLife;
		_g.h["Speed"] = 20;
		_g.h["SpeedCount"] = 0;
		_g.h["Defense"] = 0;
		_g.h["MagicDefense"] = 0;
		_g.h["Piercing"] = 0;
		var stats2 = _g;
		enemy = { level : 1 + enemyLevel, attributesBase : stats2, equipment : [], xp : null, attributesCalculated : stats2, reference : new ActorReference(1,0), buffs : [], usableSkills : [], viewAux : 1};
		if(equipment != null) {
			var equipSlots = [];
			var _g1_current = 0;
			var _g1_array = equipment;
			while(_g1_current < _g1_array.length) {
				var _g2_value = _g1_array[_g1_current];
				var _g2_key = _g1_current++;
				var index = _g2_key;
				var value = _g2_value;
				enemy.equipment.push(value);
				equipSlots.push(index);
			}
			enemy.equipmentSets = [{ equipmentSlots : equipSlots}];
			enemy.chosenEquipSet = 0;
		}
		if(sheet != null) {
			var mul = sheet.speciesMultiplier;
			if(mul != null) {
				var h = mul.attributesBase.h;
				var p_h = h;
				var p_keys = Object.keys(h);
				var p_length = p_keys.length;
				var p_current = 0;
				while(p_current < p_length) {
					var key = p_keys[p_current++];
					var p_key = key;
					var p_value = p_h[key];
					var mul = p_value;
					var value = enemy.attributesBase.h[p_key] * mul | 0;
					enemy.attributesBase.h[p_key] = value;
					enemy.attributesCalculated.h[p_key] = value;
				}
			}
			if(sheet.speciesAdd != null) {
				var h = sheet.speciesAdd.h;
				var p_h = h;
				var p_keys = Object.keys(h);
				var p_length = p_keys.length;
				var p_current = 0;
				while(p_current < p_length) {
					var key = p_keys[p_current++];
					var p_key = key;
					var p_value = p_h[key];
					var add = p_value;
					if(Object.prototype.hasOwnProperty.call(enemy.attributesBase.h,p_key) == false) {
						enemy.attributesBase.h[p_key] = add;
						enemy.attributesCalculated.h[p_key] = add;
					} else {
						var _g = p_key;
						var _g1 = enemy.attributesBase;
						var v = _g1.h[_g] + add;
						_g1.h[_g] = v;
						var _g2 = p_key;
						var _g3 = enemy.attributesCalculated;
						var v1 = _g3.h[_g2] + add;
						_g3.h[_g2] = v1;
					}
				}
			}
			if(sheet.speciesLevelStats != null) {
				var h = sheet.speciesLevelStats.attributesBase.h;
				var p_h = h;
				var p_keys = Object.keys(h);
				var p_length = p_keys.length;
				var p_current = 0;
				while(p_current < p_length) {
					var key = p_keys[p_current++];
					var p_key = key;
					var p_value = p_h[key];
					var addLevel = p_value;
					var value = enemy.attributesBase.h[p_key] + addLevel * enemyLevel | 0;
					enemy.attributesBase.h[p_key] = value;
					enemy.attributesCalculated.h[p_key] = value;
				}
			}
			if(sheet.initialBuff != null) {
				var b = Reflect.copy(sheet.initialBuff);
				this.AddBuff(b,enemy);
			}
			if(sheet.viewAux >= 0) {
				enemy.viewAux = sheet.viewAux;
			}
			if(viewOverride >= 0) {
				enemy.viewAux = viewOverride;
			}
		}
		this.RecalculateAttributes(enemy);
		var v = enemy.attributesCalculated.h["LifeMax"];
		enemy.attributesCalculated.h["Life"] = v;
		return enemy;
	}
	,CreateAreaEnemy: function() {
		this.wdata.enemy = this.CreateEnemy(this.wdata.battleAreaRegion,this.wdata.battleArea);
		if(this.wdata.hero.attributesCalculated.h["Speed"] > this.wdata.enemy.attributesCalculated.h["Speed"]) {
			var v = this.turnSpeedCount;
			this.wdata.hero.attributesCalculated.h["SpeedCount"] = v;
		} else {
			this.wdata.hero.attributesCalculated.h["SpeedCount"] = 0;
		}
		var speedH = this.wdata.hero.attributesCalculated.h["Speed"];
		this.turnSpeedCount = speedH * 15 - 1;
		if(this.wdata.enemy != null) {
			var speedE = this.wdata.enemy.attributesCalculated.h["Speed"];
			if(speedE > speedH) {
				this.turnSpeedCount = speedE * 15 - 1;
			}
		}
	}
	,getRegionProgress: function(region) {
		this.CheckRegionNull(region);
		return this.wdata.regionProgress[region];
	}
	,ReinitGameValues: function() {
		var _gthis = this;
		this.testInitializeRetentionWorldVersion(this.wdata);
		if(this.wdata.userId == null) {
			var tmp = HxOverrides.dateStr(new Date()) + " ";
			var tmp1 = this.random.randomInt(1,99999);
			this.wdata.userId = tmp + tmp1;
			haxe_Log.trace("reinit user id",{ fileName : "Sources\\GRI\\logic/BattleManager.hx", lineNumber : 1436, className : "BattleManager", methodName : "ReinitGameValues"});
		}
		if(this.wdata.timesReviewed >= 0 == false) {
			this.wdata.timesReviewed = 0;
		}
		if(this.wdata.currency == null) {
			var _g = new haxe_ds_StringMap();
			_g.h["Lagrima"] = { value : 0, visible : false};
			_g.h["Lagrima Stone"] = { value : 0, visible : false};
			this.wdata.currency = { currencies : _g};
		}
		this.currencyModel.currencyHolder = this.wdata.currency;
		this.currencyModel.initializeCurrency(BattleConstants.CURRENCY_TIME,100);
		if(this.wdata.battleAreaRegion < 0) {
			this.wdata.battleAreaRegion = 0;
		}
		if(this.wdata.hero.equipmentSets == null) {
			this.wdata.hero.equipmentSets = [];
			this.wdata.hero.chosenEquipSet = 0;
		}
		if(this.wdata.hero.viewAux >= 0 == false) {
			this.wdata.hero.viewAux = 0;
		}
		while(this.wdata.hero.equipmentSets.length < BattleManager.NUMBER_OF_EQUIPMENT_SETS) this.wdata.hero.equipmentSets.push({ equipmentSlots : [-1,-1,-1]});
		if(this.wdata.hero.equipment != null) {
			while(this.wdata.hero.equipment.indexOf(null) != -1) this.DiscardSingleEquipment(this.wdata.hero.equipment.indexOf(null));
			var _g_current = 0;
			var _g_array = this.wdata.hero.equipment;
			while(_g_current < _g_array.length) {
				var _g1_value = _g_array[_g_current];
				var _g1_key = _g_current++;
				var index = _g1_key;
				var value = _g1_value;
				var e = value;
				if(value.outsideSystems == null) {
					value.outsideSystems = new haxe_ds_StringMap();
				}
				if(this.wdata.equipLevels == null) {
					this.wdata.equipLevels = [];
				}
				if(Object.prototype.hasOwnProperty.call(value.outsideSystems.h,"level") == false) {
					var index1 = ArrayHelper.InsertOnEmpty({ level : 0, limitbreak : 0, ascension : 0},this.wdata.equipLevels);
					value.outsideSystems.h["level"] = index1;
				}
			}
		}
		if(this.wdata.regionProgress == null) {
			this.wdata.regionProgress = [];
		}
		var _g = 0;
		var _g1 = this.wdata.regionProgress.length;
		while(_g < _g1) {
			var i = _g++;
			this.CheckRegionNull(i);
			var r = this.wdata.regionProgress[i];
			if(r.maxArea >= 1 == false) {
				r.maxArea = 1;
			}
			if(r.maxAreaOnPrestigeRecord == null) {
				r.maxAreaOnPrestigeRecord = [];
			}
		}
		if(this.wdata.maxArea >= 1 == false) {
			this.wdata.maxArea = 1;
		}
		if(this.wdata.battleAreaRegionMax >= 1 == false) {
			this.wdata.battleAreaRegionMax = 1;
		}
		if(this.wdata.prestigeTimes >= 0 == false) {
			this.wdata.prestigeTimes = 0;
		}
		if(this.wdata.hero.buffs != null == false) {
			this.wdata.hero.buffs = [];
		}
		if(this.wdata.hero.usableSkills != null == false) {
			this.wdata.hero.usableSkills = [];
		}
		if(this.wdata.enemy != null) {
			if(this.wdata.enemy.buffs != null == false) {
				this.wdata.enemy.buffs = [];
			}
		}
		var addAction = function(id,action,callback) {
			var w = _gthis.wdata;
			if(Object.prototype.hasOwnProperty.call(_gthis.wdata.playerActions.h,id) == false) {
				_gthis.wdata.playerActions.h[id] = action;
				if(callback != null) {
					var v = { actionData : w.playerActions.h[id], actualAction : callback};
					_gthis.playerActions.h[id] = v;
				}
			}
		};
		var createAction = function() {
			var a = { visible : false, enabled : false, mode : 0, timesUsed : 0};
			return a;
		};
		addAction("sleep",{ visible : false, enabled : false, timesUsed : 0, mode : 0},function(a) {
			_gthis.sleepToggle();
		});
		addAction("advance",{ visible : true, enabled : false, timesUsed : 0, mode : 0},null);
		addAction("autoadvance",{ visible : false, enabled : false, timesUsed : 0, mode : 0},null);
		addAction("autorepeat",{ visible : false, enabled : false, timesUsed : 0, mode : 0},null);
		addAction("retreat",{ visible : false, enabled : false, timesUsed : 0, mode : 0},null);
		addAction("levelup",{ visible : false, enabled : false, timesUsed : 0, mode : 0},null);
		addAction("tabequipment",{ visible : false, enabled : false, timesUsed : 0, mode : 0},null);
		addAction("tabvillage",{ visible : false, enabled : false, timesUsed : 0, mode : 0},null);
		addAction("tabmemory",{ visible : false, enabled : false, timesUsed : 0, mode : 0},null);
		addAction("tabregion",{ visible : false, enabled : false, timesUsed : 0, mode : 0},null);
		addAction("tabcharacter",{ visible : false, enabled : false, timesUsed : 0, mode : 0},null);
		addAction("equipset_menu",{ visible : false, enabled : false, timesUsed : 0, mode : 0},null);
		addAction("equipset_battle",{ visible : false, enabled : false, timesUsed : 0, mode : 0},null);
		addAction("repeat",createAction(),function(a) {
			_gthis.wdata.killedInArea[_gthis.wdata.battleArea] = 0;
		});
		addAction("prestige",createAction(),function(a) {
			_gthis.PrestigeExecute();
		});
		var buttonId = 0;
		addAction("battleaction_" + 0,createAction(),function(struct) {
			var skill = _gthis.wdata.hero.usableSkills[0];
			_gthis.UseSkill(skill,_gthis.wdata.hero);
		});
		var buttonId = 1;
		addAction("battleaction_" + 1,createAction(),function(struct) {
			var skill = _gthis.wdata.hero.usableSkills[1];
			_gthis.UseSkill(skill,_gthis.wdata.hero);
		});
		var buttonId = 2;
		addAction("battleaction_" + 2,createAction(),function(struct) {
			var skill = _gthis.wdata.hero.usableSkills[2];
			_gthis.UseSkill(skill,_gthis.wdata.hero);
		});
		var buttonId = 3;
		addAction("battleaction_" + 3,createAction(),function(struct) {
			var skill = _gthis.wdata.hero.usableSkills[3];
			_gthis.UseSkill(skill,_gthis.wdata.hero);
		});
		var buttonId = 4;
		addAction("battleaction_" + 4,createAction(),function(struct) {
			var skill = _gthis.wdata.hero.usableSkills[4];
			_gthis.UseSkill(skill,_gthis.wdata.hero);
		});
		var buttonId = 5;
		addAction("battleaction_" + 5,createAction(),function(struct) {
			var skill = _gthis.wdata.hero.usableSkills[5];
			_gthis.UseSkill(skill,_gthis.wdata.hero);
		});
		var buttonId = 6;
		addAction("battleaction_" + 6,createAction(),function(struct) {
			var skill = _gthis.wdata.hero.usableSkills[6];
			_gthis.UseSkill(skill,_gthis.wdata.hero);
		});
		var _g = new haxe_ds_StringMap();
		_g.h["Life"] = 20;
		_g.h["LifeMax"] = 20;
		_g.h["Speed"] = 20;
		_g.h["SpeedCount"] = 0;
		_g.h["Attack"] = 1;
		_g.h["Defense"] = 0;
		_g.h["MagicAttack"] = 1;
		_g.h["MagicDefense"] = 0;
		_g.h["Piercing"] = 0;
		_g.h["Regen"] = 0;
		_g.h["enchant-fire"] = 0;
		_g.h["MP"] = 0;
		_g.h["MPMax"] = 100;
		_g.h["MPRecharge"] = 100;
		_g.h["MPRechargeCount"] = 10000;
		_g.h[BattleConstants.counterAttack] = 0;
		this.wdata.hero.attributesBase = _g;
		var valueXP = 0;
		if(this.wdata.hero.xp != null) {
			valueXP = this.wdata.hero.xp.value;
		}
		var timeLevelUpGrind = this.balancing.timeForFirstLevelUpGrind;
		var initialEnemyXP = 2;
		var initialXPToLevelUp = this.balancing.timeForFirstLevelUpGrind * initialEnemyXP / this.balancing.timeToKillFirstEnemy | 0;
		this.wdata.hero.xp = ResourceLogic.getExponentialResource(1.25,1,initialXPToLevelUp,200000);
		this.wdata.hero.xp.value = valueXP;
		if(this.wdata.hero.xp.value < 0) {
			this.wdata.hero.xp.value = 0;
		}
		this.recalculateMaxXP();
		this.areaBonus = ResourceLogic.getExponentialResource(1.05,1,initialXPToLevelUp * this.balancing.areaBonusXPPercentOfFirstLevelUp / 100 | 0,50000);
		if(this.wdata.hero.equipment == null) {
			this.wdata.hero.equipment = [];
		}
		if(this.wdata.hero.equipmentSets[this.wdata.hero.chosenEquipSet].equipmentSlots == null) {
			this.wdata.hero.equipmentSets[this.wdata.hero.chosenEquipSet].equipmentSlots = [-1,-1,-1];
		}
		this.RecalculateAttributes(this.wdata.hero);
	}
	,recalculateMaxXP: function() {
		ResourceLogic.recalculateScalingResource(this.wdata.hero.level,this.wdata.hero.xp);
		if(this.wdata.hero.xp.calculatedMax >= this.wdata.hero.xp.cap || this.wdata.hero.xp.calculatedMax < 0) {
			this.wdata.hero.xp.calculatedMax = 200000 + this.wdata.hero.level * 1000;
		}
	}
	,PrestigeExecute: function() {
		this.prestiged = true;
		this.wdata.enemy = null;
		this.wdata.hero.level = 1;
		this.wdata.hero.xp.value = 0;
		var hero = this.wdata.hero;
		var v = hero.attributesCalculated.h["LifeMax"];
		hero.attributesCalculated.h["Life"] = v;
		this.recalculateMaxXP();
		var _g = 0;
		var _g1 = this.wdata.regionProgress.length;
		while(_g < _g1) {
			var i = _g++;
			this.wdata.regionProgress[i].maxAreaOnPrestigeRecord.push(this.wdata.regionProgress[i].maxArea);
			this.wdata.regionProgress[i].area = 0;
			this.wdata.regionProgress[i].maxArea = 1;
			this.wdata.regionProgress[i].amountEnemyKilledInArea = 0;
			this.wdata.killedInArea = [0];
		}
		this.wdata.battleAreaRegion = 0;
		this.wdata.battleArea = 0;
		this.wdata.maxArea = 1;
		this.wdata.battleAreaRegionMax = 1;
		this.wdata.prestigeTimes++;
		this.wdata.currency.currencies.h["Lagrima"].value = 0;
		this.wdata.currency.currencies.h["Lagrima Stone"].value = 0;
		this.RecalculateAttributes(this.wdata.hero);
		var i = 0;
		while(i < this.wdata.hero.equipment.length) {
			var equipKept = false;
			var _g = 0;
			var _g1 = this.wdata.hero.equipmentSets.length;
			while(_g < _g1) {
				var j = _g++;
				if(this.wdata.hero.equipmentSets[j].equipmentSlots.indexOf(i) != -1) {
					var e = this.wdata.hero.equipment[i];
					if(e != null) {
						var reset = this.ResetEquipToBaseLevel(e,1);
						var tmp = reset == false;
						if(Object.prototype.hasOwnProperty.call(e.outsideSystems.h,"level")) {
							var levelId = e.outsideSystems.h["level"];
							if(levelId >= 0) {
								var el = this.wdata.equipLevels[levelId];
								el.ascension = 0;
								el.level = 0;
								el.limitbreak = 0;
							}
						}
					}
					equipKept = true;
					break;
				}
			}
			if(equipKept == false) {
				this.DiscardSingleEquipment(i);
				--i;
			}
			++i;
		}
	}
	,CheckRegionNull: function(region) {
		if(this.wdata.regionProgress[region] == null) {
			this.wdata.regionProgress[region] = { area : 0, maxArea : 1, amountEnemyKilledInArea : 0, maxAreaRecord : 1, maxAreaOnPrestigeRecord : [], seen : 0};
		}
	}
	,changeRegion: function(region) {
		this.wdata.battleAreaRegion = region;
		this.CheckRegionNull(region);
		this.ChangeBattleArea(this.wdata.regionProgress[region].area);
		this.wdata.maxArea = this.wdata.regionProgress[region].maxArea;
		this.wdata.killedInArea[this.wdata.battleArea] = this.wdata.regionProgress[region].amountEnemyKilledInArea;
	}
	,advance: function() {
		if(this.autoAdvanceRequest) {
			if(this.wdata.battleArea < this.wdata.maxArea) {
				this.ChangeBattleArea(this.wdata.battleArea + 1);
			}
			this.autoAdvanceRequest = false;
			return;
		}
		if(this.autoRepeatRequest) {
			this.wdata.killedInArea[this.wdata.battleArea] = 0;
			this.autoRepeatRequest = false;
		}
		var hero = this.wdata.hero;
		var enemy = this.wdata.enemy;
		var killedInArea = this.wdata.killedInArea;
		var battleArea = this.wdata.battleArea;
		var areaComplete = killedInArea[battleArea] >= this.wdata.necessaryToKillInArea;
		var attackHappen = true;
		if(areaComplete) {
			this.wdata.enemy = null;
			attackHappen = false;
		}
		if(this.isBattleArea() && this.PlayerFightMode() && areaComplete != true) {
			if(enemy == null) {
				this.CreateAreaEnemy();
				enemy = this.wdata.enemy;
				attackHappen = false;
			}
			if(enemy.attributesCalculated.h["Life"] <= 0) {
				attackHappen = false;
				this.CreateAreaEnemy();
			}
		}
		if(this.PlayerFightMode() == false || enemy == null) {
			var _g = 0;
			var _g1 = this.counterAttackBuffered.length;
			while(_g < _g1) {
				var i = _g++;
				this.counterAttackBuffered[i] = null;
			}
			attackHappen = false;
			var chargeMultiplier = 3;
			var max = 99999;
			var restMultiplier = 1;
			var valueK = "Life";
			var valueMaxK = "LifeMax";
			var value = this.wdata.hero.attributesCalculated.h[valueK];
			if(valueMaxK != null) {
				max = this.wdata.hero.attributesCalculated.h[valueMaxK];
			}
			value += max * 0.05 | 0;
			if(this.wdata.sleeping) {
				value += max * 0.3 | 0;
			}
			if(value > max) {
				value = max;
			}
			this.wdata.hero.attributesCalculated.h[valueK] = value;
		}
		var _g = 0;
		while(_g < 2) {
			var i = _g++;
			var actor = this.wdata.hero;
			if(i == 1) {
				actor = this.wdata.enemy;
			}
			if(actor == null) {
				continue;
			}
			var regen = actor.attributesCalculated.h["Regen"];
			if(regen > 0) {
				var recovery = regen * actor.attributesCalculated.h["LifeMax"] / 100;
				if(recovery < 1) {
					recovery = 1;
				}
				var _g1 = actor.attributesCalculated;
				var v = _g1.h["Life"] + (recovery | 0);
				_g1.h["Life"] = v;
			}
			if(actor.attributesCalculated.h["Life"] > actor.attributesCalculated.h["LifeMax"]) {
				var v1 = actor.attributesCalculated.h["LifeMax"];
				actor.attributesCalculated.h["Life"] = v1;
			}
		}
		if(attackHappen) {
			var counterAttackBufferPos = -1;
			var _g1_current = 0;
			var _g1_array = this.counterAttackBuffered;
			while(_g1_current < _g1_array.length) {
				var _g2_value = _g1_array[_g1_current];
				var _g2_key = _g1_current++;
				var index = _g2_key;
				var value = _g2_value;
				if(value != null) {
					counterAttackBufferPos = index;
				}
			}
			if(counterAttackBufferPos >= 0) {
				var bufferC = this.counterAttackBuffered[counterAttackBufferPos];
				var counterD = this.counterAttackDatas[bufferC.counterId];
				var attacker = this.wdata.hero;
				var defender = this.wdata.enemy;
				if(bufferC.actor.type != 0) {
					attacker = this.wdata.enemy;
					defender = this.wdata.hero;
				}
				this.AttackExecute(attacker,defender,0,0,100,false,counterD.element,counterD.attributeInfluenceOnCounterPower,"Counter");
				this.counterAttackBuffered[counterAttackBufferPos] = null;
				return;
			}
			var attacker = null;
			var defender = null;
			var decided = false;
			attacker = hero;
			defender = enemy;
			var _g = 0;
			while(_g < 100) {
				var i = _g++;
				var bActor = hero;
				var _g1 = bActor.attributesCalculated;
				var v = _g1.h["SpeedCount"] + bActor.attributesCalculated.h["Speed"];
				_g1.h["SpeedCount"] = v;
				var sc = bActor.attributesCalculated.h["SpeedCount"];
				if(decided == false) {
					if(bActor.attributesCalculated.h["SpeedCount"] > this.turnSpeedCount) {
						var v1 = bActor.attributesCalculated.h["SpeedCount"] - this.turnSpeedCount;
						bActor.attributesCalculated.h["SpeedCount"] = v1;
						decided = true;
					}
				}
				var bActor1 = hero;
				bActor1 = enemy;
				var _g2 = bActor1.attributesCalculated;
				var v2 = _g2.h["SpeedCount"] + bActor1.attributesCalculated.h["Speed"];
				_g2.h["SpeedCount"] = v2;
				var sc1 = bActor1.attributesCalculated.h["SpeedCount"];
				if(decided == false) {
					if(bActor1.attributesCalculated.h["SpeedCount"] > this.turnSpeedCount) {
						var v3 = bActor1.attributesCalculated.h["SpeedCount"] - this.turnSpeedCount;
						bActor1.attributesCalculated.h["SpeedCount"] = v3;
						attacker = enemy;
						defender = hero;
						decided = true;
					}
				}
				if(decided) {
					break;
				}
			}
			if(attacker == this.wdata.hero && this.scheduledSkill != null) {
				this.UseSkill(this.scheduledSkill,attacker,true);
				this.scheduledSkill = null;
			} else {
				this.AttackExecute(attacker,defender,100,0,100,attacker.attributesCalculated.h[BattleConstants.MAGICAL] > 0);
			}
			if(attacker.turnRecharge != null) {
				var _g = 0;
				var _g1 = attacker.turnRecharge.length;
				while(_g < _g1) {
					var i = _g++;
					if(attacker.turnRecharge[i] > 0) {
						attacker.turnRecharge[i]--;
					}
				}
			}
			var _g = 0;
			var _g1 = attacker.buffs.length;
			while(_g < _g1) {
				var b = _g++;
				var bu = attacker.buffs[b];
				if(attacker.buffs[b] != null) {
					bu.duration -= 1;
				}
			}
			this.CheckRemoveMod(attacker);
			this.CheckRemoveMod(defender);
		} else if(this.wdata.hero.turnRecharge != null) {
			this.wdata.hero.turnRecharge.length = 0;
		}
	}
	,CheckRemoveMod: function(actor) {
		var attackerBuffChanged = false;
		var _g = 0;
		var _g1 = actor.buffs.length;
		while(_g < _g1) {
			var b = _g++;
			var bu = actor.buffs[b];
			if(bu.duration <= 0) {
				attackerBuffChanged = true;
				actor.buffs[b] = null;
			}
		}
		while(HxOverrides.remove(actor.buffs,null)) {
		}
		if(attackerBuffChanged) {
			this.RecalculateAttributes(actor);
		}
	}
	,AddMod: function(modBase,statAdd,statMul,seed) {
		var mulAdd = modBase.statMultipliers;
		var rand = this.fixedRandom;
		rand.set_seed(seed);
		if(mulAdd != null) {
			var h = mulAdd.h;
			var m_h = h;
			var m_keys = Object.keys(h);
			var m_length = m_keys.length;
			var m_current = 0;
			while(m_current < m_length) {
				var key = m_keys[m_current++];
				var m_key = key;
				var m_value = m_h[key];
				var val = mulAdd.h[m_key].max;
				if(Object.prototype.hasOwnProperty.call(statMul.h,m_key)) {
					var v = statMul.h[m_key] * val / 100 | 0;
					statMul.h[m_key] = v;
				} else {
					statMul.h[m_key] = val;
				}
			}
		}
		if(modBase.statAdds != null) {
			var h = modBase.statAdds.h;
			var m_h = h;
			var m_keys = Object.keys(h);
			var m_length = m_keys.length;
			var m_current = 0;
			while(m_current < m_length) {
				var key = m_keys[m_current++];
				var m_key = key;
				var m_value = m_h[key];
				var val = modBase.statAdds.h[m_key].max;
				if(Object.prototype.hasOwnProperty.call(statAdd.h,m_key)) {
					var v = statAdd.h[m_key] + val | 0;
					statAdd.h[m_key] = v;
				} else {
					statAdd.h[m_key] = val;
				}
			}
		}
	}
	,LimitBreakEquipment: function(pos) {
		var e = this.wdata.hero.equipment[pos];
		BattleManager.LimitBreak(e,this.wdata);
	}
	,ChangeEquipmentSet: function(pos) {
		this.wdata.hero.chosenEquipSet = pos;
		this.RecalculateAttributes(this.wdata.hero);
	}
	,UpgradeOrLimitBreakEquipment: function(pos) {
		var e = this.wdata.hero.equipment[pos];
		if(BattleManager.IsUpgradable(e,this.wdata)) {
			BattleManager.Upgrade(e,this.wdata,this);
		} else {
			BattleManager.LimitBreak(e,this.wdata);
		}
		this.RecalculateAttributes(this.wdata.hero);
	}
	,DiscardSingleEquipment: function(pos) {
		var e = this.wdata.hero.equipment[pos];
		HxOverrides.remove(this.wdata.hero.equipment,e);
		var _g = 0;
		var _g1 = this.wdata.hero.equipmentSets.length;
		while(_g < _g1) {
			var j = _g++;
			var _g2 = 0;
			var _g3 = this.wdata.hero.equipmentSets[j].equipmentSlots.length;
			while(_g2 < _g3) {
				var i = _g2++;
				if(this.wdata.hero.equipmentSets[j].equipmentSlots[i] >= pos) {
					this.wdata.hero.equipmentSets[j].equipmentSlots[i]--;
				}
			}
		}
		if(e != null) {
			this.equipmentToDiscard.push(e);
		}
	}
	,SellSingleEquipment: function(pos) {
		var prize = BattleManager.GetSellPrize(this.wdata.hero.equipment[pos],this.wdata);
		this.DiscardSingleEquipment(pos);
		this.wdata.currency.currencies.h["Lagrima"].value += prize;
	}
	,SellEquipment: function(pos) {
		this.SellSingleEquipment(pos);
		this.RecalculateAttributes(this.wdata.hero);
	}
	,ToggleEquipped: function(pos) {
		var slot = this.wdata.hero.equipment[pos].type;
		if(this.wdata.hero.equipmentSets[this.wdata.hero.chosenEquipSet].equipmentSlots[slot] == pos) {
			if(slot != 2) {
				this.wdata.hero.equipmentSets[this.wdata.hero.chosenEquipSet].equipmentSlots[slot] = -1;
			}
		} else {
			this.wdata.hero.equipmentSets[this.wdata.hero.chosenEquipSet].equipmentSlots[slot] = pos;
		}
		this.RecalculateAttributes(this.wdata.hero);
	}
	,IsEquipped: function(pos,anySet) {
		if(anySet == null) {
			anySet = true;
		}
		if(anySet) {
			var _g = 0;
			var _g1 = this.wdata.hero.equipmentSets.length;
			while(_g < _g1) {
				var i = _g++;
				if(this.wdata.hero.equipmentSets[i].equipmentSlots.indexOf(pos) != -1) {
					return true;
				}
			}
			return false;
		} else {
			return this.wdata.hero.equipmentSets[this.wdata.hero.chosenEquipSet].equipmentSlots.indexOf(pos) != -1;
		}
	}
	,hasEquipmentOfType: function(type) {
		var _g = 0;
		var _g1 = this.wdata.hero.equipment;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(e.type == type) {
				return true;
			}
		}
		return false;
	}
	,AddEvent: function(eventType) {
		var e = new GameEvent(eventType);
		this.events.push(e);
		return e;
	}
	,BaseInformationFormattedString: function() {
		var hero = this.wdata.hero;
		var maxArea = this.wdata.maxArea;
		var battleArea = this.wdata.battleArea;
		var enemy = this.wdata.enemy;
		var level = hero.level;
		var xp = hero.xp.value;
		var xpmax = hero.xp.calculatedMax;
		var baseInfo = this.CharacterBaseInfoFormattedString(hero);
		var areaText = "";
		var battleAreaShow = battleArea + 1;
		var maxAreaShow = maxArea + 1;
		if(maxArea > 0) {
			areaText = "Area: " + battleAreaShow + " / " + maxAreaShow;
		}
		var output = "" + areaText + "\n\n\n\nPlayer \n\tlevel: " + level + "\n\txp: " + xp + " / " + xpmax + "\n" + baseInfo;
		baseInfo = this.CharacterBaseInfoFormattedString(enemy);
		output += "\n\n";
		output += "Enemy\n" + baseInfo;
		return output;
	}
	,CharacterBaseInfoFormattedString: function(actor) {
		var life = actor.attributesCalculated.h["Life"];
		var lifeM = actor.attributesCalculated.h["LifeMax"];
		var attack = actor.attributesCalculated.h["Attack"];
		return "\t Life: " + life + " / " + lifeM + "\n\tAttack: " + attack;
	}
	,isTriggeredByEvent: function(trigger) {
		var _g_current = 0;
		var _g_array = this.events;
		while(_g_current < _g_array.length) {
			var _g1_value = _g_array[_g_current];
			var _g1_key = _g_current++;
			var index = _g1_key;
			var value = _g1_value;
			if(trigger.necessaryType == value.type) {
				if(trigger.necessaryData != GameEventTrigger.IGNORE && trigger.necessaryData != value.data) {
					continue;
				}
				if(trigger.necessaryData2 != GameEventTrigger.IGNORE && trigger.necessaryData2 != value.data2) {
					continue;
				}
				return true;
			}
		}
		return false;
	}
	,processEvents: function(eventDataHolder) {
		var _g_current = 0;
		var _g_array = eventDataHolder.dataEvents;
		while(_g_current < _g_array.length) {
			var _g1_value = _g_array[_g_current];
			var _g1_key = _g_current++;
			var index = _g1_key;
			var value = _g1_value;
			if(value.stringData == BattleConstants.DATAEVENT_CHANGEAREA) {
				this.changeRegion(value.intData);
				this.ChangeBattleArea(value.intData2);
			}
			if(value.stringData == BattleConstants.DATAEVENT_REGIONUNLOCK) {
				var region = value.intData;
				while(this.wdata.regionProgress.length <= region) this.wdata.regionProgress.push({ area : 0, maxArea : 1, amountEnemyKilledInArea : -1, maxAreaRecord : -1, maxAreaOnPrestigeRecord : [], seen : 0});
				this.wdata.regionProgress[region].seen = 1;
			}
		}
	}
	,update: function(delta) {
		this.timeCount += delta;
		this.RefreshCalculatedTurnOrder();
		var v = this.wdata.maxArea;
		this.global.data.h["maxarea"] = v;
		var v = this.wdata.hero.level;
		this.global.data.h["herolevel"] = v;
		var _g_current = 0;
		var _g_array = this.wdata.regionProgress;
		while(_g_current < _g_array.length) {
			var _g1_value = _g_array[_g_current];
			var _g1_key = _g_current++;
			var index = _g1_key;
			var value = _g1_value;
			if(value != null) {
				var v = value.maxAreaRecord;
				this.global.data.h["maxarea_region" + index] = v;
			}
		}
		this.achievementModel.update();
		var _g = 0;
		var _g1 = this.equipmentToDiscard;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(e.outsideSystems != null) {
				if(Object.prototype.hasOwnProperty.call(e.outsideSystems.h,"skillset")) {
					var skillsetpos = e.outsideSystems.h["skillset"];
					this.wdata.skillSets[skillsetpos] = null;
				}
				if(Object.prototype.hasOwnProperty.call(e.outsideSystems.h,"level")) {
					var level = e.outsideSystems.h["level"];
					this.wdata.equipLevels[level] = null;
				}
			}
		}
		this.equipmentToDiscard.length = 0;
		if(this.wdata.regionProgress == null) {
			this.wdata.regionProgress = [];
		}
		while(this.wdata.regionProgress.length <= this.wdata.battleAreaRegion) this.wdata.regionProgress.push({ area : 0, maxArea : 1, amountEnemyKilledInArea : -1, maxAreaRecord : -1, maxAreaOnPrestigeRecord : [], seen : 0});
		this.wdata.regionProgress[this.wdata.battleAreaRegion].area = this.wdata.battleArea;
		var recalculate = false;
		if(this.wdata.regionProgress[this.wdata.battleAreaRegion].maxArea != this.wdata.maxArea) {
			recalculate = true;
			this.wdata.regionProgress[this.wdata.battleAreaRegion].maxArea = this.wdata.maxArea;
		}
		var _g = 0;
		var _g1 = this.wdata.regionProgress;
		while(_g < _g1.length) {
			var rp = _g1[_g];
			++_g;
			if(rp != null) {
				if(rp.maxArea > rp.maxAreaRecord) {
					rp.maxAreaRecord = rp.maxArea;
					recalculate = true;
				}
			}
		}
		if(this.isBattleArea() == false) {
			if(this.wdata.maxArea == this.wdata.battleArea) {
				this.wdata.maxArea++;
			}
		}
		if(recalculate) {
			this.RecalculateAttributes(this.wdata.hero);
		}
		this.wdata.regionProgress[this.wdata.battleAreaRegion].amountEnemyKilledInArea = this.wdata.killedInArea[this.wdata.battleArea];
		var _g4_current = 0;
		var _g4_array = this.config.regions;
		while(_g4_current < _g4_array.length) {
			var _g5_value = _g4_array[_g4_current];
			var _g5_key = _g4_current++;
			var index = _g5_key;
			var reg = _g5_value;
			if(this.wdata.regionProgress.length <= index) {
				this.wdata.regionProgress.push({ area : 0, maxArea : 1, amountEnemyKilledInArea : -1, maxAreaRecord : -1, maxAreaOnPrestigeRecord : [], seen : 0});
			}
			var progress = this.wdata.regionProgress[index];
			if(progress.seen > 0 == false) {
				if(reg.conditionRegion >= 0) {
					var maxArea = this.wdata.regionProgress[reg.conditionRegion].maxArea;
					if(maxArea > reg.conditionArea) {
						progress.seen = 1;
						this.AddEvent(EventTypes.RegionUnlock).data = index;
					}
				}
			}
		}
		var maxArea = this.wdata.maxArea;
		var reg = this.config.regions[this.wdata.battleAreaRegion].areaDatas;
		if(reg != null && reg.length > 0) {
			if(maxArea > reg.length - 1) {
				maxArea = reg.length - 1;
			}
		}
		this.canAdvance = this.wdata.battleArea < maxArea;
		this.canRetreat = this.wdata.battleArea > 0;
		this.canLevelUp = this.wdata.hero.xp.value >= this.wdata.hero.xp.calculatedMax && this.wdata.hero.level < this.CalculateHeroMaxLevel();
		var hasEquipment = this.wdata.hero.equipment.length > 1;
		var lu = this.wdata.playerActions.h["tabequipment"];
		lu.enabled = hasEquipment;
		lu.visible = lu.enabled || lu.visible;
		var lu = this.wdata.playerActions.h["tabvillage"];
		lu.enabled = this.wdata.hero.level > 1 || lu.enabled;
		lu.visible = lu.enabled || lu.visible;
		var lu = this.wdata.playerActions.h["tabregion"];
		lu.enabled = true;
		lu.visible = true;
		var lu = this.wdata.playerActions.h["tabcharacter"];
		lu.enabled = true;
		lu.visible = this.canLevelUp || lu.visible || this.wdata.hero.level > 1;
		var lu = this.wdata.playerActions.h["equipset_menu"];
		lu.enabled = true;
		lu.visible = this.wdata.hero.equipment.length > 10 || lu.visible;
		var lu = this.wdata.playerActions.h["equipset_battle"];
		lu.enabled = true;
		lu.visible = this.wdata.hero.equipment.length > 10 || lu.visible;
		var lu = this.wdata.playerActions.h["levelup"];
		lu.enabled = this.canLevelUp;
		lu.visible = this.canLevelUp || lu.visible;
		var lu = this.wdata.playerActions.h["prestige"];
		lu.enabled = this.wdata.hero.level >= this.GetLevelRequirementForPrestige();
		lu.visible = lu.enabled || lu.visible;
		var _g = 0;
		while(_g < 7) {
			var i = _g++;
			var buttonId = i;
			var lu = this.wdata.playerActions.h["battleaction_" + i];
			var skillUsable = false;
			var skillVisible = false;
			var skillButtonMode = 0;
			if(this.wdata.hero.level < this.skillSlotUnlocklevel[i]) {
				skillButtonMode = 1;
			}
			if(this.wdata.hero.usableSkills[i] != null) {
				if(this.wdata.hero.level >= this.skillSlotUnlocklevel[i]) {
					if(this.wdata.hero.attributesCalculated.h["MPRechargeCount"] >= 10000) {
						skillUsable = true;
					}
				}
				if(i == 0 || this.wdata.hero.level >= this.skillSlotUnlocklevel[i - 1]) {
					skillVisible = true;
				}
				var sb = this.GetSkillBase(this.wdata.hero.usableSkills[i].id);
				if(sb.turnRecharge > 0) {
					if(this.wdata.hero.turnRecharge == null) {
						this.wdata.hero.turnRecharge = [];
					}
					if(this.wdata.hero.turnRecharge.length > i) {
						if(this.wdata.hero.turnRecharge[i] > 0) {
							skillUsable = false;
						}
					}
				}
				if(skillUsable && skillVisible && (this.wdata.enemy == null || this.wdata.enemy.attributesCalculated.h["Life"] == 0)) {
					var efs = sb.effects;
					if(efs == null) {
						efs = sb.activeEffect;
					}
					var _g1 = 0;
					while(_g1 < efs.length) {
						var e = efs[_g1];
						++_g1;
						if(e.target == Target.ENEMY) {
							skillUsable = false;
							break;
						}
					}
				}
			}
			if(this.scheduledSkill != null) {
				skillUsable = false;
				if(this.scheduledSkill == this.wdata.hero.usableSkills[i]) {
					skillButtonMode = 2;
				}
			}
			lu.enabled = skillUsable;
			lu.visible = skillVisible;
			lu.mode = skillButtonMode;
		}
		var lu = this.wdata.playerActions.h["advance"];
		lu.visible = this.canAdvance || lu.visible;
		lu.enabled = this.canAdvance;
		var lu = this.wdata.playerActions.h["autoadvance"];
		lu.visible = this.wdata.maxArea > 10 || lu.visible;
		lu.enabled = this.wdata.hero.level > 50 || lu.enabled;
		var lu = this.wdata.playerActions.h["autorepeat"];
		lu.visible = this.wdata.maxArea > 5 || lu.visible;
		lu.enabled = this.wdata.hero.level > 10 || lu.enabled;
		var lu = this.wdata.playerActions.h["retreat"];
		lu.enabled = this.canRetreat;
		lu.visible = lu.enabled || lu.visible;
		var lu = this.wdata.playerActions.h["repeat"];
		lu.enabled = this.wdata.maxArea > this.wdata.battleArea && this.wdata.killedInArea[this.wdata.battleArea] > 0;
		lu.visible = lu.enabled || lu.visible;
		var lu = this.wdata.playerActions.h["sleep"];
		if(this.wdata.sleeping == true) {
			lu.mode = 1;
			lu.enabled = true;
		} else {
			lu.mode = 0;
			lu.enabled = this.wdata.recovering == false;
		}
		lu.visible = lu.enabled || lu.visible;
		if(this.wdata.recovering && this.wdata.hero.attributesCalculated.h["Life"] >= this.wdata.hero.attributesCalculated.h["LifeMax"]) {
			var v = this.wdata.hero.attributesCalculated.h["LifeMax"];
			this.wdata.hero.attributesCalculated.h["Life"] = v;
			this.wdata.recovering = false;
		}
		var mrc = this.wdata.hero.attributesCalculated.h["MPRechargeCount"];
		if(mrc < 10000) {
			mrc += this.wdata.hero.attributesCalculated.h["MPRecharge"] * delta * 5 | 0;
			this.wdata.hero.attributesCalculated.h["MPRechargeCount"] = mrc;
			if(mrc >= 10000) {
				var v = this.wdata.hero.attributesCalculated.h["MPMax"];
				this.wdata.hero.attributesCalculated.h["MP"] = v;
			}
		}
		if(this.PlayerFightMode() && this.wdata.enemy != null) {
			this.currencyModel.addFloat(BattleConstants.CURRENCY_TIME,delta * this.timeGetRate);
		}
		var timePeriodUsed = this.timePeriod;
		if(this.timePeriodOverwrite >= 0) {
			timePeriodUsed = this.timePeriodOverwrite;
		}
		if(this.timeCount >= timePeriodUsed) {
			this.timePeriodOverwrite = -1;
			this.timeCount = 0;
			var tmp = this.turnList[0] == this.turnList[1];
			this.advance();
			var _g = 0;
			var _g1 = this.counterAttackBuffered;
			while(_g < _g1.length) {
				var buffer = _g1[_g];
				++_g;
				if(buffer != null) {
					this.timePeriodOverwrite = this.timePeriod;
					break;
				}
			}
		}
		if(this.dirty) {
			this.dirty = false;
		}
		return null;
	}
	,DefaultConfiguration: function() {
	}
	,getPlayerTimesKilled: function() {
		return this.wdata.playerTimesKilled;
	}
	,RetreatArea: function() {
		if(this.wdata.battleArea > 0) {
			this.ChangeBattleArea(this.wdata.battleArea - 1);
		}
	}
	,LevelUp: function() {
		if(this.canLevelUp) {
			this.ForceLevelUp();
		}
	}
	,ForceLevelUp: function() {
		var hero = this.wdata.hero;
		hero.xp.value -= hero.xp.calculatedMax;
		hero.level++;
		this.AddEvent(EventTypes.ActorLevelUp);
		this.RecalculateAttributes(hero);
		this.recalculateMaxXP();
		var v = hero.attributesCalculated.h["LifeMax"];
		hero.attributesCalculated.h["Life"] = v;
		var v = hero.attributesCalculated.h["MPMax"];
		hero.attributesCalculated.h["MP"] = v;
		hero.attributesCalculated.h["MPRechargeCount"] = 10000;
	}
	,GetRegionBonusLevel: function(i) {
		this.CheckRegionNull(i);
		var prize = this.config.regions[i].regionPrize;
		var pro = this.wdata.regionProgress[i];
		var bonusLevel = 0;
		if(prize.statBonus != null) {
			if(pro.maxArea >= 2) {
				bonusLevel += pro.maxArea - 1;
			}
			var _g = 0;
			var _g1 = pro.maxAreaOnPrestigeRecord;
			while(_g < _g1.length) {
				var maxAreaPrestiges = _g1[_g];
				++_g;
				if(maxAreaPrestiges >= 2) {
					bonusLevel += maxAreaPrestiges - 1;
				}
			}
			return bonusLevel;
		}
		return -1;
	}
	,RecalculateAttributes: function(actor,equipCalculation,buffCalculation,conditionalBonus) {
		if(buffCalculation == null) {
			buffCalculation = true;
		}
		if(equipCalculation == null) {
			equipCalculation = true;
		}
		var _g = 0;
		var _g1 = this.volatileAttributeList.length;
		while(_g < _g1) {
			var i = _g++;
			this.volatileAttributeAux[i] = actor.attributesCalculated.h[this.volatileAttributeList[i]];
			if(this.volatileAttributeAux[i] >= 0 == false) {
				this.volatileAttributeAux[i] = 0;
			}
		}
		if(actor == this.wdata.hero) {
			if(conditionalBonus == null) {
				conditionalBonus = this.heroConditionalBonus;
			}
			var skillSetPos = this.wdata.hero.equipmentSets[this.wdata.hero.chosenEquipSet].equipmentSlots[2];
			if(skillSetPos >= 0) {
				var e = this.wdata.hero.equipment[skillSetPos];
				if(e != null && e.type == 2) {
					var skillSet = this.wdata.skillSets[e.outsideSystems.h["skillset"]];
					this.wdata.hero.usableSkills = skillSet.skills;
				}
			}
		}
		if(actor.attributesBase == actor.attributesCalculated) {
			actor.attributesCalculated = new haxe_ds_StringMap();
		}
		actor.attributesCalculated.h = Object.create(null);
		if(actor == this.wdata.hero) {
			var actor1 = actor.attributesBase;
			var _g = new haxe_ds_StringMap();
			_g.h["Attack"] = 1;
			_g.h["LifeMax"] = 5;
			_g.h["Life"] = 5;
			_g.h["Speed"] = 0;
			_g.h["Defense"] = 0;
			_g.h["MagicAttack"] = 1;
			_g.h["MagicDefense"] = 0;
			_g.h["SpeedCount"] = 0;
			_g.h["Piercing"] = 0;
			_g.h["MPMax"] = 2;
			AttributeLogic.Add(actor1,_g,actor.level,actor.attributesCalculated);
		} else {
			var h = actor.attributesBase.h;
			var _g2_h = h;
			var _g2_keys = Object.keys(h);
			var _g2_length = _g2_keys.length;
			var _g2_current = 0;
			while(_g2_current < _g2_length) {
				var key = _g2_keys[_g2_current++];
				var _g3_key = key;
				var _g3_value = _g2_h[key];
				var key1 = _g3_key;
				var value = _g3_value;
				actor.attributesCalculated.h[key1] = value;
			}
		}
		if(actor == this.wdata.hero) {
			var _g = 0;
			var _g1 = this.wdata.regionProgress.length;
			while(_g < _g1) {
				var i = _g++;
				var bonusLevel = this.GetRegionBonusLevel(i);
				if(bonusLevel > 0) {
					var prize = this.config.regions[i].regionPrize;
					AttributeLogic.Add(actor.attributesCalculated,prize.statBonus,bonusLevel,actor.attributesCalculated);
				}
			}
			AttributeLogic.Add(actor.attributesCalculated,this.externalStatBonuses,1,actor.attributesCalculated);
		}
		if(equipCalculation) {
			if(actor.equipmentSets != null) {
				if(actor.equipmentSets[actor.chosenEquipSet].equipmentSlots != null) {
					var _g = 0;
					var _g1 = actor.equipmentSets[actor.chosenEquipSet].equipmentSlots;
					while(_g < _g1.length) {
						var es = _g1[_g];
						++_g;
						var e = actor.equipment[es];
						if(e != null) {
							AttributeLogic.Add(actor.attributesCalculated,e.attributes,1,actor.attributesCalculated);
						}
					}
				}
			}
			if(conditionalBonus != null) {
				var _g2_current = 0;
				var _g2_array = conditionalBonus;
				while(_g2_current < _g2_array.length) {
					var _g3_value = _g2_array[_g2_current];
					var _g3_key = _g2_current++;
					var index = _g3_key;
					var value = _g3_value;
					var condition = value.condition;
					if(this.testConditionGroup(condition)) {
						var _g4_current = 0;
						var _g4_array = value.AttributeBonuses;
						while(_g4_current < _g4_array.length) {
							var _g5_value = _g4_array[_g4_current];
							var _g5_key = _g4_current++;
							var atpos = _g5_key;
							var atv = _g5_value;
							if(atv.attributes != null) {
								AttributeLogic.Add(actor.attributesCalculated,atv.attributes,1,actor.attributesCalculated);
							}
						}
					}
				}
			}
		}
		if(buffCalculation) {
			var _g = 0;
			var _g1 = actor.buffs;
			while(_g < _g1.length) {
				var b = _g1[_g];
				++_g;
				if(b.addStats != null) {
					AttributeLogic.Add(actor.attributesCalculated,b.addStats,1,actor.attributesCalculated);
				}
			}
		}
		if(equipCalculation) {
			if(actor.equipmentSets != null) {
				if(actor.equipmentSets[actor.chosenEquipSet].equipmentSlots != null) {
					var _g = 0;
					var _g1 = actor.equipmentSets[actor.chosenEquipSet].equipmentSlots;
					while(_g < _g1.length) {
						var es = _g1[_g];
						++_g;
						var e = actor.equipment[es];
						if(e != null) {
							if(e.attributeMultiplier != null) {
								var h = e.attributeMultiplier.h;
								var a_h = h;
								var a_keys = Object.keys(h);
								var a_length = a_keys.length;
								var a_current = 0;
								while(a_current < a_length) {
									var key = a_keys[a_current++];
									var a_key = key;
									var a_value = a_h[key];
									var v = actor.attributesCalculated.h[a_key] * a_value / 100 | 0;
									actor.attributesCalculated.h[a_key] = v;
								}
							}
						}
					}
				}
			}
			if(conditionalBonus != null) {
				var _g2_current = 0;
				var _g2_array = conditionalBonus;
				while(_g2_current < _g2_array.length) {
					var _g3_value = _g2_array[_g2_current];
					var _g3_key = _g2_current++;
					var index = _g3_key;
					var value = _g3_value;
					var condition = value.condition;
					if(this.testConditionGroup(condition)) {
						var _g4_current = 0;
						var _g4_array = value.AttributeBonuses;
						while(_g4_current < _g4_array.length) {
							var _g5_value = _g4_array[_g4_current];
							var _g5_key = _g4_current++;
							var atpos = _g5_key;
							var atv = _g5_value;
							var h = atv.attributeMultiplier.h;
							var a_h = h;
							var a_keys = Object.keys(h);
							var a_length = a_keys.length;
							var a_current = 0;
							while(a_current < a_length) {
								var key = a_keys[a_current++];
								var a_key = key;
								var a_value = a_h[key];
								var v = actor.attributesCalculated.h[a_key] * a_value / 100 | 0;
								actor.attributesCalculated.h[a_key] = v;
							}
						}
					}
				}
			}
		}
		if(buffCalculation) {
			var _g = 0;
			var _g1 = actor.buffs;
			while(_g < _g1.length) {
				var b = _g1[_g];
				++_g;
				if(b.mulStats != null) {
					var h = b.mulStats.h;
					var a_h = h;
					var a_keys = Object.keys(h);
					var a_length = a_keys.length;
					var a_current = 0;
					while(a_current < a_length) {
						var key = a_keys[a_current++];
						var a_key = key;
						var a_value = a_h[key];
						var v = actor.attributesCalculated.h[a_key] * a_value / 100 | 0;
						actor.attributesCalculated.h[a_key] = v;
					}
				}
			}
		}
		var _g = 0;
		var _g1 = this.volatileAttributeList.length;
		while(_g < _g1) {
			var i = _g++;
			var v = this.volatileAttributeAux[i];
			actor.attributesCalculated.h[this.volatileAttributeList[i]] = v;
		}
	}
	,AdvanceArea: function() {
		this.ChangeBattleArea(this.wdata.battleArea + 1);
	}
	,DiscardWorseEquipment: function() {
		var i = 0;
		var times = 0;
		while(i < this.wdata.hero.equipment.length) {
			++times;
			if(times > 500) {
				haxe_Log.trace("LOOP SCAPE",{ fileName : "Sources\\GRI\\logic/BattleManager.hx", lineNumber : 2656, className : "BattleManager", methodName : "DiscardWorseEquipment"});
				break;
			}
			var e = this.wdata.hero.equipment[i];
			if(e == null) {
				++i;
				continue;
			}
			if(e.type == 2) {
				++i;
				continue;
			}
			var j = i + 1;
			var times2 = 0;
			while(j < this.wdata.hero.equipment.length) {
				++times2;
				if(times2 > 500) {
					haxe_Log.trace("LOOP SCAPE 2",{ fileName : "Sources\\GRI\\logic/BattleManager.hx", lineNumber : 2673, className : "BattleManager", methodName : "DiscardWorseEquipment"});
					break;
				}
				var e2 = this.wdata.hero.equipment[j];
				if(e2 == null) {
					++j;
					continue;
				}
				if(e.type != e2.type) {
					++j;
					continue;
				}
				var r = this.CompareEquipmentStrength(e,e2);
				if(r == 1 || r == 0) {
					var continueHappen = false;
					var _g = 0;
					var _g1 = this.wdata.hero.equipmentSets;
					while(_g < _g1.length) {
						var set = _g1[_g];
						++_g;
						if(set.equipmentSlots.indexOf(j) != -1) {
							++j;
							continueHappen = true;
							break;
						}
					}
					if(continueHappen) {
						continue;
					}
					this.SellSingleEquipment(j);
					continue;
				}
				if(r == 2) {
					var continueHappen1 = false;
					var _g2 = 0;
					var _g3 = this.wdata.hero.equipmentSets;
					while(_g2 < _g3.length) {
						var set1 = _g3[_g2];
						++_g2;
						if(set1.equipmentSlots.indexOf(i) != -1) {
							++j;
							continueHappen1 = true;
							break;
						}
					}
					if(continueHappen1) {
						continue;
					}
					this.SellSingleEquipment(i);
					--i;
					break;
				}
				++j;
			}
			++i;
		}
	}
	,CompareEquipmentStrength: function(e1,e2) {
		var e1Superior = 0;
		var e2Superior = 0;
		if(e1.outsideSystems != null && e1.outsideSystems.h["level"] >= 0 == true) {
			var e1level = this.wdata.equipLevels[e1.outsideSystems.h["level"]].level;
			if(e1level > 0) {
				return -1;
			}
		}
		if(e2.outsideSystems != null && e2.outsideSystems.h["level"] >= 0 == true) {
			var e2level = this.wdata.equipLevels[e1.outsideSystems.h["level"]].level;
			if(e2level > 0) {
				return -1;
			}
		}
		var mapAttr1 = e1.attributes;
		var mapAttr2 = e2.attributes;
		var h = mapAttr1.h;
		var attrKey_h = h;
		var attrKey_keys = Object.keys(h);
		var attrKey_length = attrKey_keys.length;
		var attrKey_current = 0;
		while(attrKey_current < attrKey_length) {
			var attrKey = attrKey_keys[attrKey_current++];
			if(Object.prototype.hasOwnProperty.call(mapAttr2.h,attrKey)) {
				if(mapAttr1.h[attrKey] > mapAttr2.h[attrKey]) {
					e1Superior = 1;
				}
				if(mapAttr1.h[attrKey] < mapAttr2.h[attrKey]) {
					e2Superior = 1;
				}
			} else if(mapAttr1.h[attrKey] > 0) {
				e1Superior = 1;
			} else {
				e2Superior = 1;
			}
			if(e1Superior == 1 && e2Superior == 1) {
				return -1;
			}
		}
		var h = mapAttr2.h;
		var attrKey_h = h;
		var attrKey_keys = Object.keys(h);
		var attrKey_length = attrKey_keys.length;
		var attrKey_current = 0;
		while(attrKey_current < attrKey_length) {
			var attrKey = attrKey_keys[attrKey_current++];
			if(Object.prototype.hasOwnProperty.call(mapAttr1.h,attrKey)) {
				if(mapAttr1.h[attrKey] > mapAttr2.h[attrKey]) {
					e1Superior = 1;
				}
				if(mapAttr1.h[attrKey] < mapAttr2.h[attrKey]) {
					e2Superior = 1;
				}
			} else if(mapAttr2.h[attrKey] > 0) {
				e2Superior = 1;
			} else {
				e1Superior = 1;
			}
			if(e1Superior == 1 && e2Superior == 1) {
				return -1;
			}
		}
		var mapAttr1 = e1.attributeMultiplier;
		var mapAttr2 = e2.attributeMultiplier;
		if(mapAttr1 != null || mapAttr2 != null) {
			if(mapAttr2 == null) {
				mapAttr2 = new haxe_ds_StringMap();
			}
			if(mapAttr1 == null) {
				mapAttr1 = new haxe_ds_StringMap();
			}
			var h = mapAttr1.h;
			var attrKey_h = h;
			var attrKey_keys = Object.keys(h);
			var attrKey_length = attrKey_keys.length;
			var attrKey_current = 0;
			while(attrKey_current < attrKey_length) {
				var attrKey = attrKey_keys[attrKey_current++];
				if(Object.prototype.hasOwnProperty.call(mapAttr2.h,attrKey)) {
					if(mapAttr1.h[attrKey] > mapAttr2.h[attrKey]) {
						e1Superior = 1;
					}
					if(mapAttr1.h[attrKey] < mapAttr2.h[attrKey]) {
						e2Superior = 1;
					}
				} else {
					if(mapAttr1.h[attrKey] > 100) {
						e1Superior = 1;
					}
					if(mapAttr1.h[attrKey] < 100) {
						e2Superior = 1;
					}
				}
				if(e1Superior == 1 && e2Superior == 1) {
					return -1;
				}
			}
			var h = mapAttr2.h;
			var attrKey_h = h;
			var attrKey_keys = Object.keys(h);
			var attrKey_length = attrKey_keys.length;
			var attrKey_current = 0;
			while(attrKey_current < attrKey_length) {
				var attrKey = attrKey_keys[attrKey_current++];
				if(Object.prototype.hasOwnProperty.call(mapAttr1.h,attrKey)) {
					if(mapAttr1.h[attrKey] > mapAttr2.h[attrKey]) {
						e1Superior = 1;
					}
					if(mapAttr1.h[attrKey] < mapAttr2.h[attrKey]) {
						e2Superior = 1;
					}
				} else {
					if(mapAttr2.h[attrKey] > 100) {
						e2Superior = 1;
					}
					if(mapAttr2.h[attrKey] < 100) {
						e1Superior = 1;
					}
				}
				if(e1Superior == 1 && e2Superior == 1) {
					return -1;
				}
			}
		}
		if(e1Superior == 1 && e2Superior == 0) {
			return 1;
		}
		if(e1Superior == 0 && e2Superior == 1) {
			return 2;
		}
		return 0;
	}
	,GetJsonPersistentData: function() {
		return JsonMainTypes.jsonwriterwdata.write(this.wdata);
	}
	,testInitializeRetentionWorldVersion: function(loadedWdata) {
		if(loadedWdata.retention == null) {
			loadedWdata.retention = { gameStartVersion : loadedWdata.worldVersion, gameStartDate : HxOverrides.dateStr(new Date()), latestDayRetention : 0, reportedRollingRetention : []};
			haxe_Log.trace(loadedWdata.retention.gameStartDate,{ fileName : "Sources\\GRI\\logic/BattleManager.hx", lineNumber : 2859, className : "BattleManager", methodName : "testInitializeRetentionWorldVersion"});
			this.AddEvent(EventTypes.GameStartOnVersion).data = loadedWdata.worldVersion;
		}
		try {
			HxOverrides.strDate(loadedWdata.retention.gameStartDate);
			haxe_Log.trace("normal date",{ fileName : "Sources\\GRI\\logic/BattleManager.hx", lineNumber : 2864, className : "BattleManager", methodName : "testInitializeRetentionWorldVersion"});
		} catch( _g ) {
			var tmp = HxOverrides.dateStr(new Date());
			loadedWdata.retention.gameStartDate = tmp;
			haxe_Log.trace("Buggy date fix!",{ fileName : "Sources\\GRI\\logic/BattleManager.hx", lineNumber : 2867, className : "BattleManager", methodName : "testInitializeRetentionWorldVersion"});
		}
	}
	,sendJsonLegacy: function(jsonString) {
		return JsonX.parse(jsonString);
	}
	,SendJsonPersistentData: function(jsonString,verbose) {
		if(verbose == null) {
			verbose = true;
		}
		var loadedWdata = null;
		try {
			loadedWdata = JsonMainTypes.jsonparserwdata.fromJson(jsonString);
			if(JsonMainTypes.jsonparserwdata.errors.length > 0) {
				haxe_Log.trace(json2object_ErrorUtils.convertErrorArray(JsonMainTypes.jsonparserwdata.errors),{ fileName : "Sources\\GRI\\logic/BattleManager.hx", lineNumber : 2882, className : "BattleManager", methodName : "SendJsonPersistentData"});
			}
			if(loadedWdata == null) {
				ErrorX.errorMessage = "SAVE CORRUPTED\n" + jsonString;
				haxe_Log.trace("save corrupted! ",{ fileName : "Sources\\GRI\\logic/BattleManager.hx", lineNumber : 2887, className : "BattleManager", methodName : "SendJsonPersistentData"});
				return false;
			}
			if(loadedWdata.worldVersion <= 3003) {
				haxe_Log.trace("legacy save ",{ fileName : "Sources\\GRI\\logic/BattleManager.hx", lineNumber : 2891, className : "BattleManager", methodName : "SendJsonPersistentData"});
				loadedWdata = this.sendJsonLegacy(jsonString);
			}
		} catch( _g ) {
			var e = haxe_Exception.caught(_g);
			haxe_Log.trace("load save failed ",{ fileName : "Sources\\GRI\\logic/BattleManager.hx", lineNumber : 2896, className : "BattleManager", methodName : "SendJsonPersistentData"});
			haxe_Log.trace(e.get_message(),{ fileName : "Sources\\GRI\\logic/BattleManager.hx", lineNumber : 2897, className : "BattleManager", methodName : "SendJsonPersistentData"});
			ErrorX.exception = e;
			return false;
		}
		this.testInitializeRetentionWorldVersion(loadedWdata);
		if(loadedWdata.worldVersion < 301) {
			loadedWdata.worldVersion = this.wdata.worldVersion;
			loadedWdata.sleeping = loadedWdata.sleeping == true;
		}
		if(loadedWdata.worldVersion >= 601 == false) {
			loadedWdata.regionProgress = [];
			loadedWdata.regionProgress.push({ area : loadedWdata.battleArea, maxArea : loadedWdata.maxArea, amountEnemyKilledInArea : loadedWdata.killedInArea[loadedWdata.battleArea], maxAreaRecord : loadedWdata.maxArea, maxAreaOnPrestigeRecord : [], seen : 2});
			loadedWdata.battleAreaRegion = 0;
			loadedWdata.battleArea = 0;
		}
		if(loadedWdata.worldVersion > 30100 == false) {
			var _g_current = 0;
			var _g_array = loadedWdata.regionProgress;
			while(_g_current < _g_array.length) {
				var _g1_value = _g_array[_g_current];
				var _g1_key = _g_current++;
				var index = _g1_key;
				var value = _g1_value;
				value.seen = 2;
			}
		}
		if(loadedWdata.worldVersion != this.wdata.worldVersion) {
			loadedWdata.enemy = null;
		}
		loadedWdata.worldVersion = this.wdata.worldVersion;
		this.wdata = loadedWdata;
		if(this.wdata.battleArea >= this.wdata.killedInArea.length) {
			this.wdata.battleArea = this.wdata.killedInArea.length - 1;
		}
		if(this.wdata.maxArea >= this.wdata.killedInArea.length) {
			this.wdata.maxArea = this.wdata.killedInArea.length - 1;
		}
		this.ReinitGameValues();
		return true;
	}
	,testConditionGroup: function(cond) {
		var _g_current = 0;
		var _g_array = cond.conditions;
		while(_g_current < _g_array.length) {
			var _g1_value = _g_array[_g_current];
			var _g1_key = _g_current++;
			var index = _g1_key;
			var value = _g1_value;
			if(this.testCondition(value) == false) {
				return false;
			}
		}
		return true;
	}
	,testCondition: function(cond) {
		if(cond.cType == BMConditionType.CURRENT_SET_NUMBER) {
			return this.wdata.hero.chosenEquipSet == cond.data1;
		}
		if(cond.cType == BMConditionType.ITEM_IN_SLOT_IS_OF_ITEM_TYPE) {
			var ePos = this.wdata.hero.equipmentSets[this.wdata.hero.chosenEquipSet].equipmentSlots[cond.data1];
			var e = this.wdata.hero.equipment[ePos];
			if(e == null) {
				return false;
			}
			if(e.generationBaseItem == cond.data2) {
				return true;
			}
			return false;
		}
		haxe_Log.trace("ERROR: condition check ignored",{ fileName : "Sources\\GRI\\logic/BattleManager.hx", lineNumber : 2974, className : "BattleManager", methodName : "testCondition"});
		return false;
	}
	,isBattleArea: function() {
		if(this.config == null) {
			return false;
		}
		var region = this.wdata.battleAreaRegion;
		var area = this.wdata.battleArea;
		return this.isBattleAreaVerify(region,area);
	}
	,isBattleAreaVerify: function(region,area) {
		if(this.config == null) {
			return false;
		}
		if(this.config.regions[region].type == RegionType.SEMIPROCEDURAL && this.config.regions[region].areaDatas[area].enemy == null) {
			return false;
		}
		return area > 0;
	}
	,isLevelCap: function() {
		return this.wdata.hero.level >= this.CalculateHeroMaxLevel();
	}
	,sleepToggle: function() {
		this.wdata.enemy = null;
		this.wdata.sleeping = !this.wdata.sleeping;
	}
	,__class__: BattleManager
};
var ButtonBinding = function(button,key) {
	this.button = button;
	this.key = key;
};
$hxClasses["ButtonBinding"] = ButtonBinding;
ButtonBinding.__name__ = "ButtonBinding";
ButtonBinding.prototype = {
	__class__: ButtonBinding
};
var ButtonBindingGroup = function(bindings) {
	this.bindings = bindings;
};
$hxClasses["ButtonBindingGroup"] = ButtonBindingGroup;
ButtonBindingGroup.__name__ = "ButtonBindingGroup";
ButtonBindingGroup.prototype = {
	__class__: ButtonBindingGroup
};
var Buttons = function() {
	this.buttonsUp = [];
	this.buttonsDown = [];
	this.buttonsPressed = [];
};
$hxClasses["Buttons"] = Buttons;
Buttons.__name__ = "Buttons";
Buttons.prototype = {
	__class__: Buttons
};
var KeyboardToButtonsLogic = function() { };
$hxClasses["KeyboardToButtonsLogic"] = KeyboardToButtonsLogic;
KeyboardToButtonsLogic.__name__ = "KeyboardToButtonsLogic";
KeyboardToButtonsLogic.processKeyToButton = function(bindings,buttons,keys) {
	var _g_current = 0;
	var _g_array = keys;
	while(_g_current < _g_array.length) {
		var _g1_value = _g_array[_g_current];
		var _g1_key = _g_current++;
		var index = _g1_key;
		var key = _g1_value;
		var _g2_current = 0;
		var _g2_array = bindings.bindings;
		while(_g2_current < _g2_array.length) {
			var _g3_value = _g2_array[_g2_current];
			var _g3_key = _g2_current++;
			var index2 = _g3_key;
			var binding = _g3_value;
			if(binding.key == key) {
				if(buttons.indexOf(binding.button) != -1 == false) {
					buttons.push(binding.button);
				}
			}
		}
	}
};
KeyboardToButtonsLogic.process = function(bindings) {
	var keys = Keyboard.keyboard.charsDown;
	var buttons = Buttons.buttons.buttonsDown;
	KeyboardToButtonsLogic.processKeyToButton(bindings,buttons,keys);
	if(buttons.length > 0) {
		haxe_Log.trace("down button " + buttons[0],{ fileName : "Sources\\Reusable/ButtonBinding.hx", lineNumber : 53, className : "KeyboardToButtonsLogic", methodName : "process"});
	}
	KeyboardToButtonsLogic.processKeyToButton(bindings,Buttons.buttons.buttonsPressed,Keyboard.keyboard.charsPressed);
	KeyboardToButtonsLogic.processKeyToButton(bindings,Buttons.buttons.buttonsUp,Keyboard.keyboard.charsUp);
};
KeyboardToButtonsLogic.endButtonFrame = function() {
	Buttons.buttons.buttonsDown.length = 0;
	Buttons.buttons.buttonsPressed.length = 0;
	Buttons.buttons.buttonsUp.length = 0;
};
var ConditionType = $hxEnums["ConditionType"] = { __ename__:true,__constructs__:null
	,largerOrEqual: {_hx_name:"largerOrEqual",_hx_index:0,__enum__:"ConditionType",toString:$estr}
};
ConditionType.__constructs__ = [ConditionType.largerOrEqual];
var Condition = function() {
};
$hxClasses["Condition"] = Condition;
Condition.__name__ = "Condition";
Condition.createWithKeyAndData = function(type,valueK,data) {
	var c = new Condition();
	c.type = type;
	c.valueKey = valueK;
	c.data = data;
	return c;
};
Condition.prototype = {
	__class__: Condition
};
var ConditionChecker = function() { };
$hxClasses["ConditionChecker"] = ConditionChecker;
ConditionChecker.__name__ = "ConditionChecker";
ConditionChecker.Check = function(condition,values) {
	var vk = condition.valueKey;
	if(!Object.prototype.hasOwnProperty.call(values.h,vk)) {
		return false;
	}
	var value = values.h[vk];
	if(condition.type == ConditionType.largerOrEqual) {
		if(value >= condition.data) {
			return true;
		}
	}
	return false;
};
var CrossTarget = function() { };
$hxClasses["CrossTarget"] = CrossTarget;
CrossTarget.__name__ = "CrossTarget";
CrossTarget.OpenURL = function(url) {
	window.open(url, '_blank');
};
CrossTarget.crossPrint = function(s) {
	haxe_Log.trace(s,{ fileName : "Sources\\Reusable/CrossTarget.hx", lineNumber : 23, className : "CrossTarget", methodName : "crossPrint"});
};
CrossTarget.getTextResource = function(s) {
	return haxe_Resource.getString(s);
};
CrossTarget.userExternalFileContent = function() {
	return null;
};
CrossTarget.reload = function() {
	$global.location.reload();
};
CrossTarget.downloadFile = function(filename,text) {
	
        download('bla', 'blu');
    ;
};
CrossTarget.GetLocalStorageItem = function(key,updateLatestSave) {
	if(updateLatestSave == null) {
		updateLatestSave = true;
	}
	var data = "";
	data = js_Browser.getLocalStorage().getItem(key);
	if(updateLatestSave) {
		CrossTarget.latestSave = data;
	}
	return data;
};
CrossTarget.SetLocalStorageItem = function(key,value,updateLatestSave) {
	if(updateLatestSave == null) {
		updateLatestSave = true;
	}
	if(updateLatestSave) {
		CrossTarget.latestSave = value;
	}
	js_Browser.getLocalStorage().setItem(key,value);
	return "";
};
CrossTarget.resetLocalStorage = function(key) {
	CrossTarget.SetLocalStorageItem(key,"");
};
var CurrencyMetaInfo = function() {
	this.maxValue = -1;
};
$hxClasses["CurrencyMetaInfo"] = CurrencyMetaInfo;
CurrencyMetaInfo.__name__ = "CurrencyMetaInfo";
CurrencyMetaInfo.prototype = {
	__class__: CurrencyMetaInfo
};
var CurrencyModel = function(currencyHolder) {
	this.currencyMetaInfo = new haxe_ds_StringMap();
	this.currencyBuffer = new haxe_ds_StringMap();
	this.currencyHolder = currencyHolder;
};
$hxClasses["CurrencyModel"] = CurrencyModel;
CurrencyModel.__name__ = "CurrencyModel";
CurrencyModel.prototype = {
	spend: function(currencyKey,amount) {
		this.add(currencyKey,-amount);
	}
	,add: function(currencyKey,amount) {
		var value = this.currencyHolder.currencies.h[currencyKey].value;
		var metaInfo = this.currencyMetaInfo.h[currencyKey];
		var max = 99999999;
		var min = 0;
		if(metaInfo != null && metaInfo.maxValue >= 0) {
			max = metaInfo.maxValue;
		}
		value += amount;
		if(value > max) {
			value = max;
		}
		if(value < min) {
			value = min;
		}
		this.currencyHolder.currencies.h[currencyKey].value = value;
	}
	,addFloat: function(currencyKey,amount) {
		if(Object.prototype.hasOwnProperty.call(this.currencyBuffer.h,currencyKey) == false) {
			this.currencyBuffer.h[currencyKey] = 0;
		}
		var v = this.currencyBuffer.h[currencyKey];
		v += amount;
		if(v > 1) {
			var aInt = Math.ceil(this.currencyBuffer.h[currencyKey]);
			this.add(currencyKey,aInt);
			v -= aInt;
		}
		if(v < -1) {
			var aInt = Math.floor(this.currencyBuffer.h[currencyKey]);
			this.add(currencyKey,aInt);
			v -= aInt;
		}
		this.currencyBuffer.h[currencyKey] = v;
	}
	,canSpend: function(key,cost) {
		return this.currencyHolder.currencies.h[key].value >= cost;
	}
	,initializeCurrency: function(key,setMax) {
		if(setMax == null) {
			setMax = -1;
		}
		if(Object.prototype.hasOwnProperty.call(this.currencyHolder.currencies.h,key) == false) {
			var cp = { value : 0, visible : false};
			this.currencyHolder.currencies.h[key] = cp;
		}
		var mf = this.currencyMetaInfo.h[key];
		if(mf == null) {
			mf = new CurrencyMetaInfo();
			this.currencyMetaInfo.h[key] = mf;
		}
		if(setMax != -1) {
			mf.maxValue = setMax;
		}
	}
	,setMaxCurrency: function(key,maxValue) {
		this.currencyMetaInfo.h[key].maxValue = maxValue;
	}
	,getCurrency: function(key) {
		return this.currencyHolder.currencies.h[key].value;
	}
	,getMax: function(key) {
		return this.currencyMetaInfo.h[key].maxValue;
	}
	,maxAllThatMax: function() {
		var h = this.currencyMetaInfo.h;
		var _g_h = h;
		var _g_keys = Object.keys(h);
		var _g_length = _g_keys.length;
		var _g_current = 0;
		while(_g_current < _g_length) {
			var key = _g_keys[_g_current++];
			var _g1_key = key;
			var _g1_value = _g_h[key];
			var key1 = _g1_key;
			var value = _g1_value;
			if(value.maxValue > 0) {
				this.currencyHolder.currencies.h[key1].value = value.maxValue;
			}
		}
	}
	,__class__: CurrencyModel
};
var EventTransformer = function(origin,response) {
	this.originD = origin;
	this.responseD = response;
};
$hxClasses["EventTransformer"] = EventTransformer;
EventTransformer.__name__ = "EventTransformer";
EventTransformer.prototype = {
	__class__: EventTransformer
};
var Data = function() {
	this.stringData2 = null;
	this.stringData = null;
	this.intData3 = -99999;
	this.intData2 = -99999;
	this.intData = -99999;
};
$hxClasses["Data"] = Data;
Data.__name__ = "Data";
Data.create = function(intData,stringData,intData2,stringData2) {
	if(intData2 == null) {
		intData2 = -99999;
	}
	if(intData == null) {
		intData = -99999;
	}
	var d = new Data();
	d.intData = intData;
	d.stringData = stringData;
	d.intData2 = intData2;
	d.stringData2 = stringData2;
	return d;
};
Data.prototype = {
	__class__: Data
};
var DataEventHolder = function() {
	this.dataEvents = [];
};
$hxClasses["DataEventHolder"] = DataEventHolder;
DataEventHolder.__name__ = "DataEventHolder";
DataEventHolder.prototype = {
	isEqual: function(event1,event2) {
		if(event1.intData == event2.intData) {
			if(event1.intData2 == event2.intData2) {
				if(event1.intData3 == event2.intData3) {
					if(event1.stringData == event2.stringData) {
						if(event1.stringData2 == event2.stringData2) {
							return true;
						}
					}
				}
			}
		}
		return false;
	}
	,processTransformers: function(eventTransformers) {
		var _g = 0;
		var _g1 = this.dataEvents.length;
		while(_g < _g1) {
			var i = _g++;
			var dataP = this.dataEvents[i];
			var _g_current = 0;
			var _g_array = eventTransformers;
			while(_g_current < _g_array.length) {
				var _g1_value = _g_array[_g_current];
				var _g1_key = _g_current++;
				var index = _g1_key;
				var eve = _g1_value;
				if(this.isEqual(eve.originD,dataP)) {
					this.dataEvents.push(eve.responseD);
				}
			}
		}
	}
	,__class__: DataEventHolder
};
var DefaultButtons = function() { };
$hxClasses["DefaultButtons"] = DefaultButtons;
DefaultButtons.__name__ = "DefaultButtons";
DefaultButtons.getDefaultButtonBindings = function() {
	var bindings = new ButtonBindingGroup([new ButtonBinding(DefaultButtons.UP,119),new ButtonBinding(DefaultButtons.DOWN,115),new ButtonBinding(DefaultButtons.LEFT,97),new ButtonBinding(DefaultButtons.RIGHT,100),new ButtonBinding(DefaultButtons.RIGHT,Keyboard.KEY_RIGHT),new ButtonBinding(DefaultButtons.LEFT,Keyboard.KEY_LEFT),new ButtonBinding(DefaultButtons.UP,Keyboard.KEY_UP),new ButtonBinding(DefaultButtons.DOWN,Keyboard.KEY_DOWN),new ButtonBinding(DefaultButtons.RIGHT,Keyboard.JOY_BUTTON_D_RIGHT),new ButtonBinding(DefaultButtons.LEFT,Keyboard.JOY_BUTTON_D_LEFT),new ButtonBinding(DefaultButtons.UP,Keyboard.JOY_BUTTON_D_UP),new ButtonBinding(DefaultButtons.DOWN,Keyboard.JOY_BUTTON_D_DOWN),new ButtonBinding(DefaultButtons.CONFIRM,Keyboard.JOY_BUTTON_1),new ButtonBinding(DefaultButtons.CANCEL,Keyboard.JOY_BUTTON_2),new ButtonBinding(DefaultButtons.CONFIRM,Keyboard.KEY_ENTER),new ButtonBinding(DefaultButtons.CANCEL,Keyboard.KEY_ESCAPE),new ButtonBinding(DefaultButtons.CONFIRM,Keyboard.KEY_SPACE),new ButtonBinding(DefaultButtons.TABLEFT,113),new ButtonBinding(DefaultButtons.TABRIGHT,101),new ButtonBinding(DefaultButtons.TABRIGHT,Keyboard.KEY_TAB)]);
	return bindings;
};
var Direction = $hxEnums["Direction"] = { __ename__:true,__constructs__:null
	,NORTH: {_hx_name:"NORTH",_hx_index:0,__enum__:"Direction",toString:$estr}
	,WEST: {_hx_name:"WEST",_hx_index:1,__enum__:"Direction",toString:$estr}
	,SOUTH: {_hx_name:"SOUTH",_hx_index:2,__enum__:"Direction",toString:$estr}
	,EAST: {_hx_name:"EAST",_hx_index:3,__enum__:"Direction",toString:$estr}
};
Direction.__constructs__ = [Direction.NORTH,Direction.WEST,Direction.SOUTH,Direction.EAST];
var ErrorX = function() { };
$hxClasses["ErrorX"] = ErrorX;
ErrorX.__name__ = "ErrorX";
ErrorX.hasError = function() {
	if(ErrorX.errorMessage == null) {
		return ErrorX.exception != null;
	} else {
		return true;
	}
};
ErrorX.clearError = function() {
	ErrorX.errorMessage = null;
	ErrorX.exception = null;
};
var FileAccessJS = function() { };
$hxClasses["FileAccessJS"] = FileAccessJS;
FileAccessJS.__name__ = "FileAccessJS";
FileAccessJS.createImportElement = function() {
	FileAccessJS.element = window.document.createElement("div");
	var style = "";
	FileAccessJS.element.innerHTML = "<div id ='saveimport' class='saveelement' style = " + style + ">Import Save: <input id='import__' type='file'></input></div>";
	FileAccessJS.element.style.top = "80%";
	FileAccessJS.element.style.left = "30px";
	FileAccessJS.element.style.position = "fixed";
	haxe_Log.trace(FileAccessJS.element.innerHTML,{ fileName : "Sources\\JS/FileAccess.hx", lineNumber : 18, className : "FileAccessJS", methodName : "createImportElement"});
	window.document.body.appendChild(FileAccessJS.element);
};
FileAccessJS.feedSave = function(saveDataContent) {
	if(FileAccessJS.elementExport == null) {
		FileAccessJS.elementExport = window.document.createElement("div");
		window.document.body.appendChild(FileAccessJS.elementExport);
		var element = FileAccessJS.elementExport;
		element.style.top = "85%";
		element.style.left = "30px";
		element.style.position = "fixed";
		element.className = "saveelement";
	}
	var ht = "<a href='data:text/plain;charset=utf-8,";
	ht += saveDataContent;
	ht += "' download='savedata.json'>Export save data</a>";
	FileAccessJS.elementExport.innerHTML = ht;
};
FileAccessJS.saveImportVisibility = function(visible) {
	if(FileAccessJS.element != null) {
		if(visible) {
			FileAccessJS.element.style.visibility = "visible";
		} else {
			FileAccessJS.element.style.visibility = "hidden";
		}
	}
	if(FileAccessJS.elementExport != null) {
		if(visible) {
			FileAccessJS.elementExport.style.visibility = "visible";
		} else {
			FileAccessJS.elementExport.style.visibility = "hidden";
		}
	}
};
var FileUtilities = function() { };
$hxClasses["FileUtilities"] = FileUtilities;
FileUtilities.__name__ = "FileUtilities";
FileUtilities.GetFetchTextContent = function() {
	var fileText = fetchTextContent;
	if(fileText != "") {
		fetchTextContent = "";
	}
	return fileText;
};
FileUtilities.ReadFile = function(file,callback) {
	var fReader = new FileReader();
	fReader.readAsDataURL(file);
	fReader.onloadend = function(event) {
		haxe_Log.trace(event.target.result,{ fileName : "Sources\\JS/FileReader.hx", lineNumber : 23, className : "FileUtilities", methodName : "ReadFile"});
		haxe_Log.trace(event.target.value,{ fileName : "Sources\\JS/FileReader.hx", lineNumber : 24, className : "FileUtilities", methodName : "ReadFile"});
		var content = event.target.result;
		var string = event.target.result;
		if(string.indexOf("data:application/json;base64,") != -1) {
			var savedata = haxe_crypto_Base64.decode(HxOverrides.substr(string,"data:application/json;base64,".length,null));
			callback(savedata.toString());
		} else {
			ErrorX.errorMessage = "Save File not JSON base 64\n" + string;
		}
	};
};
var GRIAchievementView = function(layout) {
	this.elements = [];
	this.layoutId = layout;
};
$hxClasses["GRIAchievementView"] = GRIAchievementView;
GRIAchievementView.__name__ = "GRIAchievementView";
GRIAchievementView.prototype = {
	__class__: GRIAchievementView
};
var GRIAchievementViewLogic = function() { };
$hxClasses["GRIAchievementViewLogic"] = GRIAchievementViewLogic;
GRIAchievementViewLogic.__name__ = "GRIAchievementViewLogic";
GRIAchievementViewLogic.update = function(achievModel,view,griView) {
	var achievementGroups = achievModel.achievements;
	var data = achievModel.achievementData;
	var _g_current = 0;
	var _g_array = achievementGroups;
	while(_g_current < _g_array.length) {
		var _g1_value = _g_array[_g_current];
		var _g1_key = _g_current++;
		var index = _g1_key;
		var achievGroupHolder = _g1_value;
		while(view.elements.length < achievGroupHolder.achievements.achievements.length) {
			var e = griView.uiCreation.createImageElement(null,64,64);
			griView.uiCreation.addElementInLayoutId(e,view.layoutId);
			view.elements.push(e);
		}
	}
	var _g_current = 0;
	var _g_array = achievementGroups;
	while(_g_current < _g_array.length) {
		var _g1_value = _g_array[_g_current];
		var _g1_key = _g_current++;
		var index = _g1_key;
		var achievGroupHolder = _g1_value;
		var achievs = achievGroupHolder.achievements;
		var _g2_current = 0;
		var _g2_array = achievs.achievements;
		while(_g2_current < _g2_array.length) {
			var _g3_value = _g2_array[_g2_current];
			var _g3_key = _g2_current++;
			var index1 = _g3_key;
			var value = _g3_value;
			var e = view.elements[index1];
			e.style.sprite = value.image;
			e.style.alpha = 80;
			var t = "LOCKED";
			if(Object.prototype.hasOwnProperty.call(data.achievs.h,value.id)) {
				if(data.achievs.h[value.id].state == Achievement.UNLOCKED) {
					t = value.name;
					e.style.alpha = 255;
				}
			}
			griView.ui.hover.setHoverGeneric(e,t,value.description);
		}
	}
};
var GRIArcaniaBattleManagerIntegrator = function(arcaniaC) {
	this.battleStat = [];
	this.arcaniaUnits = [];
	this.arcaniaControl = arcaniaC;
	var h = GRIArcaniaBattleManagerIntegrator.arcaniaToBattleManagerStat.h;
	var _g_h = h;
	var _g_keys = Object.keys(h);
	var _g_length = _g_keys.length;
	var _g_current = 0;
	while(_g_current < _g_length) {
		var key = _g_keys[_g_current++];
		var _g1_key = key;
		var _g1_value = _g_h[key];
		var key1 = _g1_key;
		var value = _g1_value;
		var ru = this.arcaniaControl.arcaniaModel.runtime.findUnitWithString(key1);
		if(ru == null) {
			continue;
		}
		this.arcaniaUnits.push(ru);
		this.battleStat.push(value);
	}
	this.playerLevel = this.arcaniaControl.arcaniaModel.runtime.findUnitWithString("playerlevel");
};
$hxClasses["GRIArcaniaBattleManagerIntegrator"] = GRIArcaniaBattleManagerIntegrator;
GRIArcaniaBattleManagerIntegrator.__name__ = "GRIArcaniaBattleManagerIntegrator";
GRIArcaniaBattleManagerIntegrator.prototype = {
	updateValues: function() {
		var stats = this.arcaniaControl.control.battleManager.externalStatBonuses;
		var change = false;
		var _g_current = 0;
		var _g_array = this.arcaniaUnits;
		while(_g_current < _g_array.length) {
			var _g1_value = _g_array[_g_current];
			var _g1_key = _g_current++;
			var index = _g1_key;
			var value = _g1_value;
			var previous = stats.h[this.battleStat[index]];
			var newV = this.arcaniaUnits[index].retentionData.amount;
			if(previous != newV) {
				stats.h[this.battleStat[index]] = newV;
				change = true;
			}
		}
		var level = this.arcaniaControl.control.battleManager.wdata.hero.level;
		this.arcaniaControl.arcaniaModel.updateValue(this.playerLevel,level);
		if(change) {
			this.arcaniaControl.control.battleManager.RecalculateAttributes(this.arcaniaControl.control.battleManager.wdata.hero);
		}
	}
	,__class__: GRIArcaniaBattleManagerIntegrator
};
var GRIArcaniaControl = function() {
	this.active = true;
	this.arcaniaModel = new arcania_logic_ArcaniaModel();
	this.arcaniaModel.loadJsons(GRIArcaniaJson.actions,GRIArcaniaJson.resources,GRIArcaniaJson.events);
};
$hxClasses["GRIArcaniaControl"] = GRIArcaniaControl;
GRIArcaniaControl.__name__ = "GRIArcaniaControl";
GRIArcaniaControl.prototype = {
	loadData: function(pers) {
		if(pers == null) {
			this.noSaveData();
		} else {
			this.arcaniaModel.loadData(pers);
		}
		this.arcaniaModel.runtime.restingUnit = this.arcaniaModel.runtime.findUnitWithString("sitdown");
	}
	,noSaveData: function() {
		this.loadData({ resources : new haxe_ds_StringMap(), actions : new haxe_ds_StringMap(), events : new haxe_ds_StringMap()});
	}
	,setupUI: function(control) {
		control.view.uiCreation.singleTag(GRIView.tagTabVillage);
		this.control = control;
		this.arcaniaView = new GRIArcaniaView(control.view);
		this.arcaniaView.createResourceViews(this.arcaniaModel.resources.length);
		this.arcaniaView.createButtons(this.arcaniaModel.actions.length);
		var _g_current = 0;
		var _g_array = this.arcaniaModel.actions;
		while(_g_current < _g_array.length) {
			var _g1_value = _g_array[_g_current];
			var _g1_key = _g_current++;
			var index = _g1_key;
			var value = _g1_value;
			this.arcaniaView.feedAction(index,value.basic.name,false,false,null,false,false);
		}
		this.battleintegration = new GRIArcaniaBattleManagerIntegrator(this);
	}
	,update: function(miliseconds) {
		this.control.view.ui.genUI.extendLayoutWidth(GRIArcaniaView.LAYOUT_ACTION,260);
		this.arcaniaModel.update(miliseconds);
		this.battleintegration.updateValues();
		if(this.control.view.littleBattle != null) {
			if(this.arcaniaModel.runtime.runningUnit != null) {
				var ru = this.arcaniaModel.runtime.runningUnit;
				var d = ru.actionData.duration;
				if(d > 0) {
					var progress = ru.retentionData.progressMiliseconds;
					var percent = progress * 0.1 / d | 0;
					this.control.view.littleBattle.leftText.text = this.arcaniaModel.runtime.runningUnit.basicData.name + (" " + percent + "%");
				} else {
					this.control.view.littleBattle.leftText.text = this.arcaniaModel.runtime.runningUnit.basicData.name;
				}
			} else {
				this.control.view.littleBattle.leftText.text = "";
			}
		}
		var _g_current = 0;
		var _g_array = this.arcaniaModel.runtime.events;
		while(_g_current < _g_array.length) {
			var _g1_value = _g_array[_g_current];
			var _g1_key = _g_current++;
			var index = _g1_key;
			var value = _g1_value;
			this.arcaniaView.log.addLog(value.basicData.name,value.basicData.description);
		}
		this.arcaniaModel.runtime.events.length = 0;
		if(this.active) {
			var _g_current = 0;
			var _g_array = this.control.view.ui.dataEvents;
			while(_g_current < _g_array.length) {
				var _g1_value = _g_array[_g_current];
				var _g1_key = _g_current++;
				var index = _g1_key;
				var value = _g1_value;
				if(value.stringData == GRIArcaniaView.DATA_ACTIONPRESS) {
					var actionPos = value.intData;
					this.arcaniaModel.performAction(actionPos);
				}
			}
			var _g = 0;
			var _g1 = this.arcaniaModel.runtime.resourceRuntime.length;
			while(_g < _g1) {
				var i = _g++;
				var res = this.arcaniaModel.runtime.resourceRuntime[i];
				var amount = res.retentionData.amount;
				var name = res.basicData.name;
				var basicHover = this.getBasicHover(res.basicData);
				this.arcaniaView.feedResource(i,name,basicHover,amount,res.getMax(),res.retentionData.seen > 0);
			}
			var _g = 0;
			var _g1 = this.arcaniaModel.runtime.actionRuntime.length;
			while(_g < _g1) {
				var i = _g++;
				var act = this.arcaniaModel.runtime.actionRuntime[i];
				var name = act.basicData.name;
				var basicHover = this.getBasicHover(act.basicData);
				basicHover += this.getActionHover(act.actionData);
				this.arcaniaView.feedAction(i,name,this.arcaniaModel.isActionEnabled(i),this.arcaniaModel.isUnitVisible(act,true),basicHover,act == this.arcaniaModel.runtime.runningUnit,this.arcaniaModel.actionIsInstant(i));
			}
		}
	}
	,getStringFromChangeArray: function() {
		return null;
	}
	,getBasicHover: function(bd) {
		var s = " ";
		if(bd.description != null) {
			s = "" + bd.description;
		}
		if(bd.cost != null) {
			s += "\n\ncost";
			var _g_current = 0;
			var _g_array = bd.cost;
			while(_g_current < _g_array.length) {
				var _g1_value = _g_array[_g_current];
				var _g1_key = _g_current++;
				var index = _g1_key;
				var value = _g1_value;
				var name = this.arcaniaModel.runtime.findUnit(value.id).basicData.name;
				s += "\n" + name + ": " + -value.amount;
			}
		}
		if(bd.result != null) {
			s += "\n\nresult";
			var _g_current = 0;
			var _g_array = bd.result;
			while(_g_current < _g_array.length) {
				var _g1_value = _g_array[_g_current];
				var _g1_key = _g_current++;
				var index = _g1_key;
				var value = _g1_value;
				var name = this.arcaniaModel.runtime.findUnit(value.id).basicData.name;
				s += "\n" + name + ": " + value.amount;
			}
		}
		if(bd.modPerAmount != null) {
			s += "\n\nModification";
			var _g_current = 0;
			var _g_array = bd.modPerAmount;
			while(_g_current < _g_array.length) {
				var _g1_value = _g_array[_g_current];
				var _g1_key = _g_current++;
				var index = _g1_key;
				var value = _g1_value;
				var targetName = this.arcaniaModel.runtime.findUnit(value.targetId).basicData.name;
				if(value.modType == arcania_logic_ModType.MAX) {
					s += "\nMax " + targetName + ": " + value.value;
				}
			}
		}
		if(bd.needs != null) {
			s += "\n\nNeed";
			var _g_current = 0;
			var _g_array = bd.needs;
			while(_g_current < _g_array.length) {
				var _g1_value = _g_array[_g_current];
				var _g1_key = _g_current++;
				var index = _g1_key;
				var value = _g1_value;
				var targetId = value.targetId;
				var targetName = this.arcaniaModel.runtime.findUnit(value.targetId).basicData.name;
				var rel = value.relationship;
				s += "\n" + targetName + " " + rel + " " + value.targetNumber;
			}
		}
		return s;
	}
	,getActionHover: function(act) {
		var s = "";
		if(act.run != null) {
			s += "\n\nRunning Cost: ";
			var _g_current = 0;
			var _g_array = act.run;
			while(_g_current < _g_array.length) {
				var _g1_value = _g_array[_g_current];
				var _g1_key = _g_current++;
				var index = _g1_key;
				var value = _g1_value;
				var name = this.arcaniaModel.runtime.findUnit(value.id).basicData.name;
				s += "\n" + name + ": " + -value.amount;
			}
		}
		if(act.effect != null) {
			s += "\n\nRunning Effect:";
			var _g_current = 0;
			var _g_array = act.effect;
			while(_g_current < _g_array.length) {
				var _g1_value = _g_array[_g_current];
				var _g1_key = _g_current++;
				var index = _g1_key;
				var value = _g1_value;
				var name = this.arcaniaModel.runtime.findUnit(value.id).basicData.name;
				s += "\n" + name + ": " + value.amount + "/s";
			}
		}
		return s;
	}
	,overlayRender: function() {
		if(this.control != null && this.control.view.currentTab == GRIView.tagTabVillage) {
			var _g_current = 0;
			var _g_array = this.arcaniaModel.runtime.actionRuntime;
			while(_g_current < _g_array.length) {
				var _g1_value = _g_array[_g_current];
				var _g1_key = _g_current++;
				var index = _g1_key;
				var value = _g1_value;
				if(value == this.arcaniaModel.runtime.runningUnit) {
					var percent = this.arcaniaModel.getPercentProgress(value,true);
					this.arcaniaView.drawProgressBar(index,percent);
				}
			}
		}
	}
	,__class__: GRIArcaniaControl
};
var GRIArcaniaJson = function() { };
$hxClasses["GRIArcaniaJson"] = GRIArcaniaJson;
GRIArcaniaJson.__name__ = "GRIArcaniaJson";
var GRIArcaniaView = function(view) {
	this.cursorGroupActions = new CursorGroup();
	this.cursorGroupRes = new CursorGroup();
	this.resourceViews = [];
	this.buttons = [];
	this.view = view;
	view.tabMisc.h[GRIView.tagTabVillage].initialCursorGroup = this.cursorGroupActions;
	var v = view.tabCursorGroup;
	this.cursorGroupRes.noElementActivateGroup.set(Direction.NORTH,v);
	var v = view.tabCursorGroup;
	this.cursorGroupActions.noElementActivateGroup.set(Direction.NORTH,v);
	view.ui.bindLeftRight(this.cursorGroupRes,this.cursorGroupActions);
	this.log = new GRIArcaniaViewLog(25,view);
};
$hxClasses["GRIArcaniaView"] = GRIArcaniaView;
GRIArcaniaView.__name__ = "GRIArcaniaView";
GRIArcaniaView.prototype = {
	createResourceViews: function(length) {
		var _g = 0;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			var res = this.view.addText("","Resource",GRIView.ARCHETYPE_SIMPLE_MEDIUM,GRIArcaniaView.LAYOUT_RESOURCES,GRIArcaniaView.TAG_TAB_ARCANIA,true);
			res.transform.size.x -= 40;
			res.transform.size.y = 20;
			res.style.colorText = GRIView.COLOR_TEXT_NORMAL;
			res.style.fill = true;
			res.style.color = 0;
			this.resourceViews.push(res);
			this.cursorGroupRes.elements.push(res);
		}
	}
	,createButtons: function(length) {
		var _g = 0;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			var button = this.view.addButton("","ACTION",null,GRIArcaniaView.LAYOUT_ACTION,GRIArcaniaView.TAG_TAB_ARCANIA);
			this.buttons.push(button);
			button.data.stringData = GRIArcaniaView.DATA_ACTIONPRESS;
			button.data.intData = i;
			this.cursorGroupActions.elements.push(button);
		}
	}
	,feedResource: function(pos,resourceName,hover,value,maxValue,visible) {
		if(maxValue > 0) {
			this.resourceViews[pos].text = "" + resourceName + ":  " + value + " / " + maxValue;
		} else {
			this.resourceViews[pos].text = "" + resourceName + ":  " + value;
		}
		if(hover != null) {
			this.view.ui.hover.setHoverGeneric(this.resourceViews[pos],resourceName,hover);
		}
		this.resourceViews[pos].visible = visible;
	}
	,feedAction: function(actionPos,actionName,actionEnabled,actionVisible,hover,selected,massClickable) {
		this.buttons[actionPos].text = actionName;
		this.buttons[actionPos].enabled = actionEnabled;
		this.buttons[actionPos].visible = actionVisible;
		this.buttons[actionPos].selected = selected;
		this.view.massClickable(this.buttons[actionPos],massClickable);
		if(hover != null) {
			this.view.ui.hover.setHoverGeneric(this.buttons[actionPos],actionName,hover);
		}
	}
	,drawProgressBar: function(index,percent) {
		var uiE = this.buttons[index];
		this.view.ui.drawBarOnTop(uiE,2,0,9,GRIView.COLOR_BLACK,GRIView.COLOR_ACTIVE_PINK,percent / 100);
	}
	,__class__: GRIArcaniaView
};
var GRIArcaniaViewLog = function(nLogs,view) {
	this.logWidgets = [];
	this.view = view;
	this.layout = view.ui.genUI.getLayout(GRIArcaniaViewLog.LAYOUT_LOG);
	var _g = 0;
	var _g1 = nLogs;
	while(_g < _g1) {
		var i = _g++;
		var lw = view.addText("","",GRIView.ARCHETYPE_SIMPLE_MEDIUM,GRIArcaniaViewLog.LAYOUT_LOG,null,true);
		lw.textPivot.x = 0;
		lw.textPivot.y = 0;
		this.logWidgets.push(lw);
	}
};
$hxClasses["GRIArcaniaViewLog"] = GRIArcaniaViewLog;
GRIArcaniaViewLog.__name__ = "GRIArcaniaViewLog";
GRIArcaniaViewLog.prototype = {
	addLog: function(name,description) {
		var element = this.layout.elements.pop();
		this.layout.elements.splice(0,0,element);
		var text = name;
		if(description != null) {
			text += "   -   " + description;
		}
		this.view.ui.elementText(element,text,true);
	}
	,__class__: GRIArcaniaViewLog
};
var GRIButtons = function() { };
$hxClasses["GRIButtons"] = GRIButtons;
GRIButtons.__name__ = "GRIButtons";
var GRIConfiguration = function(name) {
	this.heroMaxLevel = -1;
	this.heroViewAux = 0;
	this.eventToStoryTriggers = [];
	this.regionNameList = [];
	this.battleManagerConfiguration = new BattleManagerConfiguration();
	this.villageDimensionSave = 0;
	this.dimensionId = null;
	this.dimensionSave = -1;
	this.name = name;
};
$hxClasses["GRIConfiguration"] = GRIConfiguration;
GRIConfiguration.__name__ = "GRIConfiguration";
GRIConfiguration.prototype = {
	addArea: function(regionPos,areaTitle,areaDescription,areaMessage) {
		var listOfAreas = this.regionNameList[regionPos].listOfAreas;
		var ari = new AreaRenderInfo();
		ari.areaName = areaTitle;
		ari.areaDescription = areaDescription;
		ari.areaNoEnemyMessage = areaMessage;
		listOfAreas.push(ari);
		var ad = new AreaData();
		this.battleManagerConfiguration.regions[regionPos].areaDatas.push(ad);
		return ad;
	}
	,addRegion: function(title,regionData,lore) {
		var regionRender = new RegionRenderInfo();
		regionRender.regionName = title;
		regionRender.regionDescription = lore;
		this.regionNameList.push(regionRender);
		this.battleManagerConfiguration.regions.push(regionData);
		return this.battleManagerConfiguration.regions.length - 1;
	}
	,bindStoryToAreaEntrance: function(regPos,area,storyId) {
		var gameEventTrigger = new GameEventTrigger(EventTypes.AreaEnter);
		gameEventTrigger.necessaryData = regPos;
		gameEventTrigger.necessaryData2 = area;
		this.eventToStoryTriggers.push({ storyId : storyId, eventTrigger : gameEventTrigger});
	}
	,__class__: GRIConfiguration
};
var GRIConfigurer = function() {
	this.desiredMode = -1;
	this.enemies = new EnemySheets();
	this.selectedGRIConfiguration = -1;
	this.dimensions = [];
	this.dimensions.push(this.setupCrystalRoad());
	this.dimensions.push(GRIConfigurer.setupLagrimaRegions());
	this.griControl = new GRIControl();
	this.griControl.setupTitle(this.dimensions);
};
$hxClasses["GRIConfigurer"] = GRIConfigurer;
GRIConfigurer.__name__ = "GRIConfigurer";
GRIConfigurer.setupLagrimaRegions = function() {
	var config = new GRIConfiguration("Play as You");
	config.description_sprite = new Sprite("main_story",512);
	config.description_text = "An young girl who adventures across the Lagrima Continent";
	config.description_title = "You";
	config.mainCharacterName = "You";
	config.dimensionId = GRIConfigurer.DIMENSION_ID_LAGRIMA;
	config.storyDataResource = "storyjson";
	config.dimensionSave = -1;
	config.addRegion("Lagrima Continent",RegionData.regionWithPrize(RegionType.PROCEDURAL,{ statBonus : null, xpPrize : true}),"A land prime for adventure, full of powerful creatures");
	var enemySheets = [];
	var regionPrizes = [];
	var regionRequirements = [5,9,14,18,26,34,55,75,84,63,23,46,98];
	var enemyRegionNames = ["Wolf Fields","Tonberry's Lair","Altar Cave","Bikanel Island","Tartarus","Witchhunter Base","Highsalem","Witchhunter Guild","Mystic Forest","Temple of the Arts","Fire Cavern","Gollund","Thunder Plains"];
	var enemyRegionLores = ["Howling can be heard all over these grassy fields","It is said the Tonberries have left from their old home in Centra","It is said there was a crystal in these caves, but it can no longer be found","The most famous desert in Lagrima Continent","Said to be the place in hell where the Gods lock their enemies","A branch of the Witchhunter Guild. They'll do anything to kill magic users","A powerful sorcerer group has set home in this abandoned village","One of the main buildings owned by the Witchhunter Guild","A soothing forest filled with beautiful butterflies","A Temple located in the old Kingdom of Fabul","It is said that powerful mercenaries train here","A small cave in a city of miners, surrounded by snow","There was a legend of a warrior that dodged 200 lightning bolts"];
	var _g = new haxe_ds_StringMap();
	_g.h["Attack"] = 0.55;
	_g.h["Speed"] = 3.3;
	_g.h["LifeMax"] = 1.6;
	var _g1 = new haxe_ds_StringMap();
	_g1.h["Speed"] = 1;
	enemySheets.push({ speciesMultiplier : { attributesBase : _g}, speciesAdd : null, speciesLevelStats : { attributesBase : _g1}});
	var _g = new haxe_ds_StringMap();
	_g.h["Speed"] = 2;
	_g.h["LifeMax"] = 3;
	regionPrizes.push({ xpPrize : false, statBonus : _g});
	var _g = new haxe_ds_StringMap();
	_g.h["Attack"] = 4;
	_g.h["Speed"] = 0.09;
	_g.h["LifeMax"] = 4;
	var _g1 = new haxe_ds_StringMap();
	_g1.h["Speed"] = 0.05;
	_g1.h["Defense"] = 0.4;
	enemySheets.push({ speciesMultiplier : { attributesBase : _g}, speciesAdd : null, speciesLevelStats : { attributesBase : _g1}});
	var _g = new haxe_ds_StringMap();
	_g.h["Attack"] = 2;
	_g.h["LifeMax"] = 5;
	regionPrizes.push({ xpPrize : false, statBonus : _g});
	var _g = new haxe_ds_StringMap();
	_g.h["Attack"] = 1.4;
	_g.h["Speed"] = 0.15;
	_g.h["LifeMax"] = 5;
	var _g1 = new haxe_ds_StringMap();
	_g1.h["Defense"] = 5;
	var _g2 = new haxe_ds_StringMap();
	_g2.h["Defense"] = 1;
	_g2.h["Speed"] = 0.05;
	enemySheets.push({ speciesMultiplier : { attributesBase : _g}, speciesAdd : _g1, speciesLevelStats : { attributesBase : _g2}});
	var _g = new haxe_ds_StringMap();
	_g.h["Defense"] = 1;
	_g.h["LifeMax"] = 8;
	regionPrizes.push({ xpPrize : false, statBonus : _g});
	var _g = new haxe_ds_StringMap();
	_g.h["Attack"] = 1.4;
	_g.h["Speed"] = 1.1;
	_g.h["LifeMax"] = 1.7;
	var _g1 = new haxe_ds_StringMap();
	_g1.h["Piercing"] = 100;
	var _g2 = new haxe_ds_StringMap();
	_g2.h["Defense"] = 0.2;
	_g2.h["Speed"] = 0.1;
	enemySheets.push({ speciesMultiplier : { attributesBase : _g}, speciesAdd : _g1, speciesLevelStats : { attributesBase : _g2}});
	var _g = new haxe_ds_StringMap();
	_g.h["Attack"] = 1;
	_g.h["Speed"] = 1;
	_g.h["LifeMax"] = 3;
	regionPrizes.push({ xpPrize : false, statBonus : _g});
	var _g = new haxe_ds_StringMap();
	_g.h["Attack"] = 12;
	_g.h["Speed"] = 3.5;
	_g.h["LifeMax"] = 0.4;
	var _g1 = new haxe_ds_StringMap();
	_g1.h["Defense"] = 0;
	_g1.h["Speed"] = 1.5;
	enemySheets.push({ speciesMultiplier : { attributesBase : _g}, speciesAdd : null, speciesLevelStats : { attributesBase : _g1}});
	var _g = new haxe_ds_StringMap();
	_g.h["Attack"] = 2;
	_g.h["Speed"] = 2;
	regionPrizes.push({ xpPrize : false, statBonus : _g});
	var _g = new haxe_ds_StringMap();
	_g.h["Attack"] = 0.5;
	_g.h["Speed"] = 2.9;
	_g.h["LifeMax"] = 2;
	_g.h["Defense"] = 0.3;
	var _g1 = new haxe_ds_StringMap();
	_g1.h["Antibuff"] = 1;
	var _g2 = new haxe_ds_StringMap();
	_g2.h["Defense"] = 0.2;
	_g2.h["Speed"] = 0.1;
	enemySheets.push({ speciesMultiplier : { attributesBase : _g}, speciesAdd : _g1, speciesLevelStats : { attributesBase : _g2}});
	var _g = new haxe_ds_StringMap();
	_g.h["Speed"] = 2;
	_g.h["LifeMax"] = 3;
	regionPrizes.push({ xpPrize : false, statBonus : _g});
	var _g = new haxe_ds_StringMap();
	_g.h["Attack"] = 1;
	_g.h["Speed"] = 0.8;
	_g.h["LifeMax"] = 2;
	_g.h["Defense"] = 0.4;
	var _g1 = new haxe_ds_StringMap();
	_g1.h["Attack"] = 800;
	_g1.h["Defense"] = 800;
	var _g2 = new haxe_ds_StringMap();
	_g2.h["Defense"] = 0.2;
	_g2.h["Speed"] = 0.1;
	enemySheets.push({ speciesMultiplier : { attributesBase : _g}, speciesAdd : null, initialBuff : { uniqueId : "Power Up", mulStats : _g1, duration : 3, addStats : null, strength : 100}, speciesLevelStats : { attributesBase : _g2}});
	var _g = new haxe_ds_StringMap();
	_g.h["Attack"] = 2;
	_g.h["LifeMax"] = 3;
	regionPrizes.push({ xpPrize : false, statBonus : _g});
	var _g = new haxe_ds_StringMap();
	_g.h["Attack"] = 1.8;
	_g.h["Speed"] = 1.4;
	_g.h["LifeMax"] = 2;
	_g.h["Defense"] = 0.5;
	var _g1 = new haxe_ds_StringMap();
	_g1.h["DebuffProtection"] = 100;
	var _g2 = new haxe_ds_StringMap();
	_g2.h["Defense"] = 0.2;
	_g2.h["Speed"] = 0.1;
	enemySheets.push({ speciesMultiplier : { attributesBase : _g}, speciesAdd : _g1, speciesLevelStats : { attributesBase : _g2}});
	var _g = new haxe_ds_StringMap();
	_g.h["Attack"] = 1;
	_g.h["Defense"] = 1;
	_g.h["LifeMax"] = 3;
	regionPrizes.push({ xpPrize : false, statBonus : _g});
	var _g = new haxe_ds_StringMap();
	_g.h["Attack"] = 8;
	_g.h["Speed"] = 0.2;
	_g.h["LifeMax"] = 0.03;
	var _g1 = new haxe_ds_StringMap();
	_g1.h["Defense"] = 8;
	_g1.h["Safeguard"] = 75;
	_g1.h[BattleConstants.MAGICAL] = 100;
	var _g2 = new haxe_ds_StringMap();
	_g2.h["Defense"] = 4;
	_g2.h["Speed"] = 0.05;
	_g2.h["MagicDefense"] = 8;
	enemySheets.push({ speciesMultiplier : { attributesBase : _g}, speciesAdd : _g1, speciesLevelStats : { attributesBase : _g2}});
	var _g = new haxe_ds_StringMap();
	_g.h["Attack"] = 1;
	_g.h["Defense"] = 1;
	regionPrizes.push({ xpPrize : false, statBonus : _g});
	var _g = new haxe_ds_StringMap();
	_g.h["Attack"] = 2;
	_g.h["Speed"] = 1.3;
	_g.h["LifeMax"] = 1.1;
	_g.h["Defense"] = 0.7;
	var _g1 = new haxe_ds_StringMap();
	_g1.h["Counterattack"] = 4;
	var _g2 = new haxe_ds_StringMap();
	_g2.h["Defense"] = 0.3;
	_g2.h["Speed"] = 0.2;
	enemySheets.push({ speciesMultiplier : { attributesBase : _g}, speciesAdd : _g1, speciesLevelStats : { attributesBase : _g2}});
	var _g = new haxe_ds_StringMap();
	_g.h["Attack"] = 1;
	_g.h["LifeMax"] = 1;
	_g.h["Defense"] = 1;
	regionPrizes.push({ xpPrize : false, statBonus : _g});
	var _g = new haxe_ds_StringMap();
	_g.h["MagicAttack"] = 4;
	_g.h["Speed"] = 0.01;
	_g.h["LifeMax"] = 1.1;
	var _g1 = new haxe_ds_StringMap();
	_g1.h["Defense"] = 100000;
	_g1.h["Safeguard"] = 300;
	_g1.h["fire-damage"] = 10;
	_g1.h["thunder-damage"] = 250;
	_g1.h[BattleConstants.MAGICAL] = 100;
	var _g2 = new haxe_ds_StringMap();
	_g2.h["MagicDefense"] = 0.1;
	_g2.h["Speed"] = 0.2;
	_g2.h["MagicAttack"] = 1;
	enemySheets.push({ speciesMultiplier : { attributesBase : _g}, speciesAdd : _g1, speciesLevelStats : { attributesBase : _g2}});
	var _g = new haxe_ds_StringMap();
	_g.h[BattleConstants.MAGICATTACK] = 1;
	_g.h["Defense"] = 1;
	regionPrizes.push({ xpPrize : false, statBonus : _g});
	var _g = new haxe_ds_StringMap();
	_g.h["MagicAttack"] = 5;
	_g.h["Speed"] = 0.01;
	_g.h["LifeMax"] = 1.1;
	var _g1 = new haxe_ds_StringMap();
	_g1.h["Defense"] = 100000;
	_g1.h["Safeguard"] = 300;
	_g1.h["ice-damage"] = 10;
	_g1.h["fire-damage"] = 250;
	_g1.h[BattleConstants.MAGICAL] = 100;
	var _g2 = new haxe_ds_StringMap();
	_g2.h["MagicDefense"] = 0.1;
	_g2.h["Speed"] = 0.2;
	_g2.h["MagicAttack"] = 1;
	enemySheets.push({ speciesMultiplier : { attributesBase : _g}, speciesAdd : _g1, speciesLevelStats : { attributesBase : _g2}});
	var _g = new haxe_ds_StringMap();
	_g.h[BattleConstants.MAGICATTACK] = 1;
	_g.h["Defense"] = 1;
	regionPrizes.push({ xpPrize : false, statBonus : _g});
	var _g = new haxe_ds_StringMap();
	_g.h["MagicAttack"] = 0.5;
	_g.h["Speed"] = 3.2;
	_g.h["LifeMax"] = 0.9;
	var _g1 = new haxe_ds_StringMap();
	_g1.h["Defense"] = 100000;
	_g1.h["Safeguard"] = 300;
	_g1.h["thunder-damage"] = 10;
	_g1.h["ice-damage"] = 250;
	_g1.h[BattleConstants.MAGICAL] = 100;
	var _g2 = new haxe_ds_StringMap();
	_g2.h["MagicDefense"] = 0.1;
	_g2.h["Speed"] = 0.2;
	_g2.h["MagicAttack"] = 1;
	enemySheets.push({ speciesMultiplier : { attributesBase : _g}, speciesAdd : _g1, speciesLevelStats : { attributesBase : _g2}});
	var _g = new haxe_ds_StringMap();
	_g.h[BattleConstants.MAGICATTACK] = 1;
	_g.h["Defense"] = 1;
	regionPrizes.push({ xpPrize : false, statBonus : _g});
	var _g = 0;
	while(_g < enemySheets.length) {
		var unknown = enemySheets[_g];
		++_g;
		unknown.viewAux = 3;
	}
	var _g50_current = 0;
	var _g50_array = regionPrizes;
	while(_g50_current < _g50_array.length) {
		var _g51_value = _g50_array[_g50_current];
		var _g51_key = _g50_current++;
		var index = _g51_key;
		var value = _g51_value;
		config.addRegion(enemyRegionNames[index],RegionData.challengeRegion(0,regionRequirements[index],enemySheets[index],regionPrizes[index]),enemyRegionLores[index]);
	}
	return config;
};
GRIConfigurer.prototype = {
	update: function() {
		if(this.desiredMode >= 0) {
			this.changeGRIConfiguration(this.desiredMode);
			this.desiredMode = -1;
			this.griControl.view.loading = false;
		}
		if(this.griControl.titleControl.desiredMode != this.selectedGRIConfiguration && this.griControl.titleControl.desiredMode >= 0) {
			this.desiredMode = this.griControl.titleControl.desiredMode;
			this.griControl.view.loading = true;
		}
	}
	,changeGRIConfiguration: function(dimension) {
		if(this.selectedGRIConfiguration != dimension) {
			var previousDimension = this.selectedGRIConfiguration;
			if(previousDimension >= 0) {
				this.griControl.saveData();
			}
			this.griControl = new GRIControl(this.dimensions[dimension]);
			var tmp = dimension == 1;
			this.griControl.setupTitle(this.dimensions);
			this.griControl.setupView();
		}
		this.selectedGRIConfiguration = dimension;
	}
	,setupCrystalRoad: function() {
		var config = new GRIConfiguration("Play as Isabel");
		config.heroViewAux = 4;
		config.mainCharacterName = "Isabel";
		config.storyDataResource = "story_main_json";
		config.dimensionSave = 0;
		config.heroMaxLevel = 20;
		config.description_text = "A woman who seeks out revenge and will do whatever it takes to get it done";
		config.description_title = "Isabel";
		config.description_sprite = new Sprite("isabel_story",512);
		config.dimensionId = GRIConfigurer.DIMENSION_ID_AMAZONIA;
		var regionData = RegionData.regionWithPrize(RegionType.SEMIPROCEDURAL,{ statBonus : null, xpPrize : true});
		var regPos = config.addRegion("5 Days Ago",regionData,"Five days before the events of the first chapter");
		config.addArea(regPos,"Graciosa Hills","A hidden, small hill. Can be great to relax");
		config.addArea(regPos,"San Agosto Street I","Agosto was a theologist and philosopher, known as the Saint of Ancient Faith").setEnemyInfo(EnemyAreaInformation.create(this.enemies.rat,0,4,4,BattleManager.NORMAL_ENEMY_VIEW));
		config.addArea(regPos,"San Agosto Street II").setEnemyInfo(EnemyAreaInformation.create(this.enemies.dog,0,3,1,BattleManager.NORMAL_ENEMY_VIEW));
		config.addArea(regPos,"Marino's House","House of the King's advisor, Marino Bonifacio");
		config.addArea(regPos,"San Agosto Hills I").setEnemyInfo(EnemyAreaInformation.create(this.enemies.rat,0,5,4,BattleManager.NORMAL_ENEMY_VIEW));
		config.addArea(regPos,"San Agosto Hills II").setEnemyInfo(EnemyAreaInformation.create(this.enemies.goblin,0,4,0,BattleManager.NORMAL_ENEMY_VIEW));
		config.addArea(regPos,"San Agosto Hills III").setEnemyInfo(EnemyAreaInformation.create(this.enemies.rat,3,1,4,BattleManager.BOSS_ENEMY_VIEW));
		config.addArea(regPos,"Church of Saint Isabel","Also known as the Holy Queen, Saint Isabel used to rule the Lusitanian Empire");
		config.addArea(regPos,"Behind the Church","People who talk and do their dealings here are said to be hiding from the eyes of God");
		config.bindStoryToAreaEntrance(regPos,3,"2_golden_statue");
		config.bindStoryToAreaEntrance(regPos,8,"3_the_deal");
		var regionData = RegionData.regionWithPrize(RegionType.SEMIPROCEDURAL,{ statBonus : null, xpPrize : true});
		regionData.conditionArea = 8;
		regionData.conditionRegion = 0;
		var regPos = config.addRegion("Chapter I",regionData,"When hero saves the princess");
		config.addArea(regPos,"Isabel's Bed");
		config.addArea(regPos,"Marino's House");
		config.addArea(regPos,"Royal Road I").setEnemyInfo(EnemyAreaInformation.create(this.enemies.cat,0,4,5,BattleManager.NORMAL_ENEMY_VIEW));
		config.addArea(regPos,"Royal Road II").setEnemyInfo(EnemyAreaInformation.create(this.enemies.dog,0,3,1,BattleManager.NORMAL_ENEMY_VIEW));
		config.addArea(regPos,"Palacio do Veran");
		config.addArea(regPos,"Royal Road III").setEnemyInfo(EnemyAreaInformation.create(this.enemies.dog,0,5,1,BattleManager.NORMAL_ENEMY_VIEW));
		config.addArea(regPos,"Royal Road IV").setEnemyInfo(EnemyAreaInformation.create(this.enemies.cat,0,4,5,BattleManager.NORMAL_ENEMY_VIEW));
		config.addArea(regPos,"Royal Road V").setEnemyInfo(EnemyAreaInformation.create(this.enemies.cat,4,1,5,BattleManager.BOSS_ENEMY_VIEW));
		config.addArea(regPos,"The East Gate");
		config.addArea(regPos,"East Road").setEnemyInfo(EnemyAreaInformation.create(this.enemies.dog,0,5,1,BattleManager.NORMAL_ENEMY_VIEW));
		config.addArea(regPos,"East Forest I").setEnemyInfo(EnemyAreaInformation.create(this.enemies.goblin,0,3,0,BattleManager.NORMAL_ENEMY_VIEW));
		config.addArea(regPos,"East Forest II").setEnemyInfo(EnemyAreaInformation.create(this.enemies.toad,0,4,6,BattleManager.NORMAL_ENEMY_VIEW));
		config.addArea(regPos,"East Forest III").setEnemyInfo(EnemyAreaInformation.create(this.enemies.goblin,7,1,0,BattleManager.BOSS_ENEMY_VIEW));
		config.addArea(regPos,"Farm");
		config.addArea(regPos,"East Forest IV").setEnemyInfo(EnemyAreaInformation.create(this.enemies.toad,0,3,6,BattleManager.NORMAL_ENEMY_VIEW));
		config.addArea(regPos,"Small Road");
		config.addArea(regPos,"Gate of Fort San Marcelo").setEnemyInfo(EnemyAreaInformation.create(this.enemies.troll,10,1,8,BattleManager.BOSS_ENEMY_VIEW));
		config.addArea(regPos,"Fort San Marcelo I").setEnemyInfo(EnemyAreaInformation.create(this.enemies.giant,0,4,2,BattleManager.NORMAL_ENEMY_VIEW));
		config.addArea(regPos,"Fort San Marcelo II").setEnemyInfo(EnemyAreaInformation.create(this.enemies.nutkin,0,5,7,BattleManager.NORMAL_ENEMY_VIEW));
		config.addArea(regPos,"Fort San Marcelo III").setEnemyInfo(EnemyAreaInformation.create(this.enemies.goblin,0,3,0,BattleManager.NORMAL_ENEMY_VIEW));
		config.addArea(regPos,"Great Hall of Marcelo").setEnemyInfo(EnemyAreaInformation.create(this.enemies.giant,25,1,2,BattleManager.BOSS_ENEMY_VIEW));
		config.addArea(regPos,"The Safe Room","A protected small flower garden inside Fort San Marcelo. Birds leisure, safe from the evils the magic barrier keeps outside.","This story is still\n being written. \nPlay as another\ncharacter from the \nTitle Tab");
		config.bindStoryToAreaEntrance(regPos,1,"4_breakfast");
		config.bindStoryToAreaEntrance(regPos,4,"5_the_court");
		config.bindStoryToAreaEntrance(regPos,8,"6_victor");
		config.bindStoryToAreaEntrance(regPos,11,"7_first_time");
		config.bindStoryToAreaEntrance(regPos,13,"8_royal_guard");
		config.bindStoryToAreaEntrance(regPos,15,"9_troll");
		config.bindStoryToAreaEntrance(regPos,17,"10_strength");
		config.bindStoryToAreaEntrance(regPos,21,"11_arrest");
		return config;
	}
	,__class__: GRIConfigurer
};
var AreaRenderInfo = function() {
};
$hxClasses["AreaRenderInfo"] = AreaRenderInfo;
AreaRenderInfo.__name__ = "AreaRenderInfo";
AreaRenderInfo.prototype = {
	__class__: AreaRenderInfo
};
var RegionRenderInfo = function() {
	this.listOfAreas = [];
};
$hxClasses["RegionRenderInfo"] = RegionRenderInfo;
RegionRenderInfo.__name__ = "RegionRenderInfo";
RegionRenderInfo.prototype = {
	__class__: RegionRenderInfo
};
var RegionsRenderInfo = function() {
	this.listOfRegions = [];
};
$hxClasses["RegionsRenderInfo"] = RegionsRenderInfo;
RegionsRenderInfo.__name__ = "RegionsRenderInfo";
RegionsRenderInfo.prototype = {
	__class__: RegionsRenderInfo
};
var GRIControl = function(configuration) {
	this.regionViewData = new RegionsRenderInfo();
	this.buttonBindings = DefaultButtons.getDefaultButtonBindings();
	this.lagrimaAreaPrefix = [null,null,null,null,null,"Fire","Ice","Thunder"];
	this.debuffIconDefault = Sprite.create("arrowdown",15,22);
	this.buffIconDefault = Sprite.create("arrowup",15,22);
	this.bossMessage = GRIView.TEXT_MESSAGEBOSS;
	var _g = new haxe_ds_StringMap();
	var value = Sprite.create("leaf",21,21);
	_g.h["regen"] = value;
	var value = Sprite.create("shield",15,15);
	_g.h["protect"] = value;
	var value = Sprite.create("boot",21,15);
	_g.h["haste"] = value;
	this.buffToIcon = _g;
	this.lagrimaAreaLore = ["The surrounding trees make you feel at peace, until the Goblins come to fight","Abandoned houses, abandoned pathways","'It's not the mountain we conquer, but ourselves.'","You could go fishing, but the sea life here is a bit scary","Anything could jump at you","The air feels hot. Is it really inactive?","'It was so cold I almost got married'","You pray to the gray skies you don't get hit by lightining"];
	this.lagrimaAreaLabels = ["Forest","Streets","Mountain","Seaside","Wild Plains","Inactive Volcano","Snow Fields","Thunder Roads"];
	var _g = new haxe_ds_StringMap();
	_g.h["regen"] = "Slowly recovers HP";
	_g.h["enchant-fire"] = "Adds fire element and makes attacks magical";
	_g.h["protect"] = "Increases defense";
	_g.h["haste"] = "Increases speed";
	_g.h["nap"] = "Resting to recover HP";
	_g.h["pierce"] = "Increases armor piercing power";
	_g.h["noblesse"] = "Increases damage as long as not hit";
	this.buffToExplanation = _g;
	var _g = new haxe_ds_StringMap();
	_g.h["Fogo"] = "Deals fire damage";
	_g.h["Gelo"] = "Deals ice damage";
	_g.h["Raio"] = "Deals thunder damage";
	_g.h["DeSpell"] = "Removes enemy buffs";
	_g.h["Cure"] = "Heals wounds";
	_g.h["Haste"] = "Increases speed";
	_g.h["Bloodlust"] = "Increases the power of Blood";
	_g.h["Noblesse"] = "Increases damage as long as not hit";
	_g.h["Sharpen"] = "Increases armor piercing power";
	_g.h["Armor Break"] = "Decreases enemy defense";
	_g.h["Attack Break"] = "Decreases enemy attack";
	_g.h["Protect"] = "Increases defense";
	_g.h["Regen"] = "Slowly recovers HP";
	_g.h["Light Slash"] = "Deals light damage";
	_g.h["Slash"] = "Deals damage";
	_g.h["Heavy Slash"] = "deals heavy damage";
	this.SkillToExplanation = _g;
	this.enemyLabels = [["Goblin","Dog","Giant","Turtle","Giant Rat","Stray Cat","Elf Toad","Nutkin","Troll"],["Wolf"],["Tonberry"],["Adamanstoise"],["Cactuar"],["Reaper"],["Witchhunter"],["Buff Witch"],["Witchkiller"],["Mystic Elf"],["Hamedo Monk"],["Red Flan"],["Blue Flan"],["Yellow Flan"]];
	this.retentionLogic = new RetentionLogic();
	this.warningActive = true;
	this.saveCount = 10000;
	this.saveEnabled = true;
	this.sendErrorRequest = false;
	this.showFeedback = false;
	this.eventsShown = 0;
	this.gameStartedAfterTitle = false;
	this.eventToWarning = new haxe_ds_StringMap();
	this.eventToAction = new haxe_ds_StringMap();
	this.eventTransformers = [];
	this.turnOrderView = new TurnOrderView();
	this.view = new GRIView();
	this.scriptExecuter = new hscript_Interp();
	this.battleManager = new BattleManager();
	var hasConfig = true;
	if(configuration == null) {
		configuration = new GRIConfiguration("NO CONFIG");
		configuration.dimensionSave = -1;
		hasConfig = false;
	}
	this.config = configuration;
	var bm = this.battleManager;
	bm.config = this.config.battleManagerConfiguration;
	if(hasConfig) {
		bm.achievementModel.dimensionId = configuration.dimensionId;
		this.view.mainCharacterName = this.config.mainCharacterName;
	}
	this.eventTransformers.push(new EventTransformer(StoryControlLogic.sceneStartedEventNatural("3_the_deal"),this.battleManager.createAreaGoEvent(1,0)));
	this.eventTransformers.push(new EventTransformer(StoryControlLogic.sceneStartedEventNatural("3_the_deal"),Data.create(1,BattleConstants.DATAEVENT_REGIONUNLOCK)));
	this.genericWarning = { title : "Warning", description : "Warning Description", buttonYes : "Close", buttonFalse : null};
	this.equipControl = new GRIControlEquip(bm,this);
	this.regionControl = new GRIControlRegion(this,bm);
	this.villageControl = new GRIControlVillage(this);
	this.titleControl = new GRIControlTitle(bm);
	this.storyControl = StoryControlLogic.createStoryControl(this.view);
	this.turnOrderView.layoutId = "turnorder";
	var proto = new PrototypeItemMaker();
	proto.MakeItems();
	bm.itemBases = proto.items;
	bm.modBases = proto.mods;
	this.protoItemMaker = proto;
	var proto = new PrototypeSkillMaker();
	proto.init();
	bm.skillBases = proto.skills;
	bm.ForceSkillSetDrop(-1,null,{ skills : [{ id : "Slash", level : 1},{ id : "Cure", level : 1},{ id : "Protect", level : 3}]},false);
	var _g = 0;
	var _g1 = bm.wdata.hero.equipmentSets.length;
	while(_g < _g1) {
		var i = _g++;
		bm.wdata.hero.equipmentSets[i].equipmentSlots[2] = 0;
	}
	var storyPersistence = { progressionData : new haxe_ds_StringMap(), worldVersion : bm.wdata.worldVersion, currentStoryId : null};
	var jsonData = CrossTarget.GetLocalStorageItem(GRIControl.key);
	var persistenceMaster = SaveAssistant.GetPersistenceMaster(jsonData);
	this.previousPersistenceMaster = persistenceMaster;
	var jsonData2 = persistenceMaster.jsonStory;
	if(jsonData2 != null && jsonData2 != "") {
		storyPersistence = StoryControlLogic.ReadJsonPersistentData(jsonData2);
	}
	if(hasConfig) {
		if(this.config.dimensionSave < 0) {
			if(persistenceMaster.jsonGameplay != null) {
				var success = bm.SendJsonPersistentData(persistenceMaster.jsonGameplay);
				var tmp = success == false;
			}
		} else {
			if(persistenceMaster.jsonGameplayDimensions == null) {
				persistenceMaster.jsonGameplayDimensions = [];
			}
			if(persistenceMaster.jsonGameplayDimensions.length > this.config.dimensionSave) {
				var jsonD = persistenceMaster.jsonGameplayDimensions[this.config.dimensionSave];
				if(jsonD != null) {
					bm.SendJsonPersistentData(jsonD);
				}
			}
		}
		bm.loadGeneralJson(persistenceMaster.jsonGeneral,persistenceMaster.worldVersion);
		var tmp = persistenceMaster.jsonVillageDimensions != null;
	}
	this.villageControl.loadVillage(persistenceMaster,this.config.villageDimensionSave);
	var storyRuntime = [];
	var _g = new haxe_ds_StringMap();
	var value = new Sprite("mom_story",512);
	_g.h["mom"] = value;
	var value = new Sprite("main_story",512);
	_g.h["you"] = value;
	var value = new Sprite("cid_story",512);
	_g.h["cid"] = value;
	var value = new Sprite("cid_story",512);
	_g.h["man"] = value;
	var value = new Sprite("isabel_story",512);
	_g.h["isabel"] = value;
	var value = new Sprite("vitor_story",512);
	_g.h["victor"] = value;
	var value = new Sprite("pedroiv_story",512);
	_g.h["dom pedro iv"] = value;
	var value = new Sprite("iracema_story",512);
	_g.h["iracema"] = value;
	var value = new Sprite("iracema_story",512);
	_g.h["princess"] = value;
	var value = new Sprite("marino_story",512);
	_g.h["marino"] = value;
	var storyRuntime1 = { currentStoryProgression : null, currentCutsceneIndex : -1, cutscene : null, cutsceneExtra : storyRuntime, cutsceneStartable : null, cutscenes : null, visibilityConditionScripts : [], messageRuntimeInfo : [], persistence : storyPersistence, speakerToImage : _g};
	this.storyControl.runtime = storyRuntime1;
	var storyFile = "storyjson";
	if(hasConfig) {
		storyFile = this.config.storyDataResource;
	}
	StoryControlLogic.Init(CrossTarget.getTextResource(storyFile),this.storyControl.runtime);
	if(hasConfig) {
		var _g3_current = 0;
		var _g3_array = this.config.eventToStoryTriggers;
		while(_g3_current < _g3_array.length) {
			var _g4_value = _g3_array[_g3_current];
			var _g4_key = _g3_current++;
			var index = _g4_key;
			var value = _g4_value;
			var storyId = value.storyId;
			var _g5_current = 0;
			var _g5_array = this.storyControl.runtime.cutscenes;
			while(_g5_current < _g5_array.length) {
				var _g6_value = _g5_array[_g5_current];
				var _g6_key = _g5_current++;
				var cutscenePos = _g6_key;
				var cutscene = _g6_value;
				if(storyId == cutscene.id) {
					this.storyControl.runtime.cutsceneExtra[cutscenePos] = new CutsceneExtraData(false);
					break;
				}
			}
		}
		bm.wdata.hero.viewAux = this.config.heroViewAux;
		if(this.config.heroMaxLevel >= 0) {
			bm.heroMaxLevel = this.config.heroMaxLevel;
		}
	}
	this.scriptExecuter.variables.h["global"] = bm.global.data;
	CrossTarget.SetLocalStorageItem(GRIControl.key,jsonData);
	this.buttonBindings.bindings.push(new ButtonBinding(GRIButtons.FEEDBACK_BUTTON,102));
	this.buttonBindings.bindings.push(new ButtonBinding(GRIButtons.SKILL_BUTTON_1,49));
	this.buttonBindings.bindings.push(new ButtonBinding(GRIButtons.SKILL_BUTTON_2,50));
	this.buttonBindings.bindings.push(new ButtonBinding(GRIButtons.SKILL_BUTTON_3,51));
	this.buttonBindings.bindings.push(new ButtonBinding(GRIButtons.SKILL_BUTTON_4,52));
	this.buttonBindings.bindings.push(new ButtonBinding(GRIButtons.SKILL_BUTTON_5,53));
	this.buttonBindings.bindings.push(new ButtonBinding(GRIButtons.SKILL_BUTTON_6,54));
	this.buttonBindings.bindings.push(new ButtonBinding(GRIButtons.SKILL_BUTTON_7,55));
};
$hxClasses["GRIControl"] = GRIControl;
GRIControl.__name__ = "GRIControl";
GRIControl.prototype = {
	setupTitle: function(dimensions) {
		BitmapText.loadFontFnt("main","lato13",CrossTarget.getTextResource("lato13_fnt"));
		BitmapText.loadFontFnt("main14","lato15",CrossTarget.getTextResource("lato15_fnt"));
		BitmapText.loadFontFnt("main16","lato17",CrossTarget.getTextResource("lato17_fnt"));
		var genui = new GenUIIntegration();
		var res = CrossTarget.getTextResource("uigen_txt");
		CrossTarget.crossPrint(res);
		haxe_Log.trace(res,{ fileName : "Sources\\GRI/GRIControl.hx", lineNumber : 338, className : "GRIControl", methodName : "setupTitle"});
		genui.readUIMaster(res);
		this.view.ui.genUI = genui;
		genui.ui = this.view.ui;
		this.view.setupTitleTabButtons();
		this.titleControl.setupView(this,dimensions);
		this.view.showTab(GRIView.tagTabTitle);
		var key = GRIControl.PRIVACY_ACCEPTANCE_KEY;
		var privacyAcceptance = CrossTarget.GetLocalStorageItem(key,false);
		if(privacyAcceptance == null) {
			this.titleControl.changeMode(TitleMode.ACCEPT);
		} else {
			this.titleControl.changeMode(TitleMode.NORMAL);
		}
		this.view.uiCreation.tags.length = 0;
		this.view.setupDialog();
		this.view.setupMisc();
	}
	,setupView: function() {
		var _gthis = this;
		this.gameStartedAfterTitle = true;
		this.view.uiCreation.tags.length = 0;
		this.view.setupTabButtons();
		this.view.tabMisc.h[GRIView.tagTabBattle].initialCursorGroup = this.view.mainCursorGroup;
		this.equipControl.setupView();
		this.regionControl.setupView();
		StoryControlLogic.setupView(this.storyControl);
		this.characterTabControl = new GRIControlCharacterTab(this);
		this.characterTabControl.setupUI();
		this.villageControl.setupUI();
		this.view.uiCreation.singleTag(GRIView.tagTabBattle);
		this.view.setupBattleActors();
		this.view.setupMiscBattle();
		var levelButton = this.view.addButton("levelup","Level Up","mainbutton","mainbuttongroup",null,this.view.mainCursorGroup);
		this.view.highlightedButtons.push(levelButton);
		this.view.mainCursorGroup.firstElement = levelButton;
		var createButtonFromAction = function(actionId,label,buttontype,layoutid,warning,button) {
			if(button == null) {
				button = -1;
			}
			if(layoutid == null) {
				layoutid = "mainbuttongroup";
			}
			if(buttontype == null) {
				buttontype = "mainbutton";
			}
			var element = _gthis.view.addButton(actionId,label,buttontype,layoutid,null,_gthis.view.mainCursorGroup);
			if(button >= 0) {
				_gthis.view.ui.keyboardManager.buttonPressToElementTrigger.h[button] = element;
			}
			_gthis.eventToAction.h[actionId] = actionId;
			if(warning != null) {
				_gthis.eventToWarning.h[actionId] = warning;
			}
		};
		createButtonFromAction("sleep","Sleep");
		this.eventToAction.h["repeat"] = "repeat";
		var prestigeWarn = "Your XP gains will increase by a small amount" + ". \nYou will keep all permanent stat bonuses. \n\nYou will go back to Level 1. \nYour progress in all regions will be reset. \nAll that is not equipped will be lost. \nAll that is equipped will lose strength.";
		createButtonFromAction("prestige","Soul Crush","mainbutton","mainbuttongroup",{ title : "Soul Crush", description : prestigeWarn, buttonYes : "Soul Crush", buttonFalse : "Cancel"});
		var skillSlotId = 0;
		var bid = "battleaction_" + 0;
		createButtonFromAction(bid,"Action " + 0,"mainbutton","mainbuttongroup",null,GRIButtons.SKILL_BUTTON_1);
		var skillSlotId = 1;
		var bid = "battleaction_" + 1;
		createButtonFromAction(bid,"Action " + 1,"mainbutton","mainbuttongroup",null,GRIButtons.SKILL_BUTTON_1 + 1);
		var skillSlotId = 2;
		var bid = "battleaction_" + 2;
		createButtonFromAction(bid,"Action " + 2,"mainbutton","mainbuttongroup",null,GRIButtons.SKILL_BUTTON_1 + 2);
		var skillSlotId = 3;
		var bid = "battleaction_" + 3;
		createButtonFromAction(bid,"Action " + 3,"mainbutton","mainbuttongroup",null,GRIButtons.SKILL_BUTTON_1 + 3);
		var skillSlotId = 4;
		var bid = "battleaction_" + 4;
		createButtonFromAction(bid,"Action " + 4,"mainbutton","mainbuttongroup",null,GRIButtons.SKILL_BUTTON_1 + 4);
		var skillSlotId = 5;
		var bid = "battleaction_" + 5;
		createButtonFromAction(bid,"Action " + 5,"mainbutton","mainbuttongroup",null,GRIButtons.SKILL_BUTTON_1 + 5);
		var skillSlotId = 6;
		var bid = "battleaction_" + 6;
		createButtonFromAction(bid,"Action " + 6,"mainbutton","mainbuttongroup",null,GRIButtons.SKILL_BUTTON_1 + 6);
		this.view.showTab(GRIView.tagTabBattle);
	}
	,getUserId: function() {
		return this.battleManager.wdata.userId;
	}
	,reviewComplete: function() {
		this.battleManager.wdata.timesReviewed++;
	}
	,getTimesReviewed: function() {
		return this.battleManager.wdata.timesReviewed;
	}
	,executeAction: function(actionId) {
		var bm = this.battleManager;
		if(actionId != null) {
			var action = bm.playerActions.h[actionId];
			var actionData = bm.wdata.playerActions.h[actionId];
			if(actionData.enabled) {
				action.actualAction(actionData);
			}
		}
	}
	,update: function(miliseconds) {
		var _gthis = this;
		KeyboardToButtonsLogic.process(this.buttonBindings);
		this.titleControl.update();
		this.view.update(miliseconds,Mouse.mouse);
		this.view.ui.dataEventHolder.processTransformers(this.eventTransformers);
		var hasError = ErrorX.hasError();
		this.view.errorButton.visible = hasError && (this.view.currentTab != GRIView.tagTabMemory || this.storyControl.state != StoryControlState.STORY);
		if(this.view.errorSendButton != null) {
			this.view.errorSendButton.visible = hasError && (this.view.currentTab != GRIView.tagTabMemory || this.storyControl.state != StoryControlState.STORY);
		}
		if(this.showError) {
			this.view.errorButton.text = "Hide Error";
		} else {
			this.view.errorButton.text = "Error Happened\n(click to Show)";
		}
		if(this.view.feedbackButton != null) {
			this.view.feedbackButton.visible = this.view.currentTab != GRIView.tagTabMemory || this.storyControl.state != StoryControlState.STORY;
		}
		if(this.battleManager != null) {
			this.retentionLogic.checkAndSendRetentionEvents(this.battleManager.wdata.retention);
		}
		this.showFeedback = false;
		var _g_current = 0;
		var _g_array = this.view.ui.dataEvents;
		while(_g_current < _g_array.length) {
			var _g1_value = _g_array[_g_current];
			var _g1_key = _g_current++;
			var index = _g1_key;
			var value = _g1_value;
			if(value.stringData == "advance") {
				if(this.battleManager.wdata.battleArea < this.battleManager.wdata.maxArea) {
					this.battleManager.AdvanceArea();
				}
				continue;
			}
			if(value.stringData == "autoadvance") {
				var auto = !this.battleManager.wdata.autoAdvance;
				this.battleManager.wdata.autoAdvance = auto;
				if(this.battleManager.wdata.autoAdvance == true && this.battleManager.wdata.autoRepeat == true) {
					this.battleManager.wdata.autoRepeat = false;
				}
				continue;
			}
			if(value.stringData == "autorepeat") {
				var auto1 = !this.battleManager.wdata.autoRepeat;
				this.battleManager.wdata.autoRepeat = auto1;
				if(this.battleManager.wdata.autoAdvance == true && this.battleManager.wdata.autoRepeat == true) {
					this.battleManager.wdata.autoAdvance = false;
				}
				continue;
			}
			if(value.stringData == "retreat") {
				this.battleManager.RetreatArea();
				continue;
			}
			if(value.stringData == "levelup") {
				this.battleManager.LevelUp();
				continue;
			}
			if(value.stringData == "fb") {
				this.showFeedback = true;
				haxe_Log.trace("SHOW FEEDBACK",{ fileName : "Sources\\GRI/GRIControl.hx", lineNumber : 533, className : "GRIControl", methodName : "update"});
			}
			if(value.stringData == "error") {
				this.showError = !this.showError;
			}
			if(value.stringData == "error_send") {
				this.sendErrorRequest = true;
				this.errorMessage = ErrorX.errorMessage;
				if(this.errorMessage == null) {
					this.errorMessage = ErrorX.exception.details();
				}
			}
			if(value.stringData == "set") {
				this.battleManager.ChangeEquipmentSet(value.intData);
			}
			if(value.stringData != null) {
				var actionRun = true;
				if(Object.prototype.hasOwnProperty.call(this.eventToWarning.h,value.stringData)) {
					var warning = this.eventToWarning.h[value.stringData];
					if(warning != null) {
						actionRun = false;
						this.view.showDialog(warning);
						this.view.dialogData = "prestige";
					}
				}
				if(actionRun) {
					var actionId = this.eventToAction.h[value.stringData];
					if(actionId != null) {
						this.executeAction(actionId);
						continue;
					}
				}
			}
		}
		if(this.gameStartedAfterTitle == false) {
			return;
		}
		if(this.storyControl.storyStartedFromAnotherTab && this.battleManager.wdata.enemy != null) {
			this.battleManager.sleepToggle();
		}
		var advanceButton = this.view.advanceButton;
		var advanceButtonI = this.view.advanceButtonImage;
		if(this.battleManager.wdata.battleArea == this.battleManager.wdata.maxArea - 1) {
			this.view.highlightedButtons.push(advanceButton);
			this.view.highlightedImages.push(advanceButtonI);
		} else {
			HxOverrides.remove(this.view.highlightedButtons,advanceButton);
			HxOverrides.remove(this.view.highlightedImages,advanceButtonI);
		}
		var thisAreaRender = this.getAreaRender();
		this.battleManager.update(miliseconds / 1000);
		var bm = this.battleManager;
		this.equipControl.update();
		this.villageControl.update(miliseconds);
		this.regionControl.update();
		this.characterTabControl.update();
		if(this.config != null) {
			var _g_current = 0;
			var _g_array = this.config.eventToStoryTriggers;
			while(_g_current < _g_array.length) {
				var _g1_value = _g_array[_g_current];
				var _g1_key = _g_current++;
				var index = _g1_key;
				var value = _g1_value;
				if(bm.isTriggeredByEvent(value.eventTrigger)) {
					StoryControlLogic.tryStoryVisible(value.storyId,this.storyControl);
				}
			}
		}
		StoryControlLogic.update(miliseconds / 1000,this.storyControl,this.scriptExecuter);
		this.storyControl.eventHolder.processTransformers(this.eventTransformers);
		if(this.storyControl.requestBattleTab) {
			this.storyControl.requestBattleTab = false;
			this.view.showTab(GRIView.tagTabBattle);
		}
		this.view.setView.highlight(bm.wdata.hero.chosenEquipSet);
		GameAnalyticsIntegration.InitializeCheck();
		var hoverActorView = null;
		var actorHover = null;
		var changeSet = -1;
		if(this.view.heroBattleView.icon.hovered.state && this.view.ui.isVisible(this.view.heroBattleView.icon)) {
			hoverActorView = this.view.heroBattleView;
			actorHover = bm.wdata.hero;
		}
		if(this.view.enemyBattleView.icon.hovered.state && this.view.ui.isVisible(this.view.enemyBattleView.icon)) {
			hoverActorView = this.view.enemyBattleView;
			actorHover = bm.wdata.enemy;
		}
		var _g_current = 0;
		var _g_array = this.view.setView.buttons;
		while(_g_current < _g_array.length) {
			var _g1_value = _g_array[_g_current];
			var _g1_key = _g_current++;
			var index = _g1_key;
			var value = _g1_value;
			if(value.hovered.state) {
				hoverActorView = this.view.heroBattleView;
				actorHover = bm.wdata.hero;
				changeSet = index;
			}
		}
		this.view.ui.tagVisibility(GRIView.TAG_HOVER_ACTOR,hoverActorView != null);
		if(hoverActorView != null && actorHover != null) {
			this.view.uiCreation.tags.length = 0;
			this.view.uiCreation.activeLayer = GRIView.LAYER_HOVER;
			if(changeSet >= 0) {
				ActorViewLogic.feed(actorHover,this.view.actorHoverView,this.view,null,changeSet,this.battleManager);
				var after = this.battleManager.getStatsIfSet(actorHover,changeSet);
				ActorViewLogic.feed(actorHover,this.view.actorHoverView,this.view,after,changeSet,this.battleManager);
			} else {
				ActorViewLogic.feed(actorHover,this.view.actorHoverView,this.view,null);
			}
			this.view.ui.genUI.layoutAsHover(hoverActorView.icon,GRIView.LAYOUT_HOVER_ACTOR);
			this.view.uiCreation.activeLayer = GRIView.LAYER_DEFAULT;
		}
		if(this.saveCount <= 0 || this.battleManager.prestiged) {
			this.saveCount = GRIControl.saveRate;
			if(this.saveEnabled) {
				this.saveData();
				if(this.battleManager.prestiged) {
					CrossTarget.reload();
					this.battleManager = null;
				}
			}
		} else {
			this.saveCount -= miliseconds;
		}
		this.view.uiCreation.singleTag(GRIView.tagTabBattle);
		TurnOrderControl.feed(this.turnOrderView,this.battleManager,this.view,TurnOrderData.charaSprites);
		var actorView = this.view.heroBattleView;
		var hero = bm.wdata.hero;
		this.actorToView(hero,actorView,false,this.view.littleBattle);
		this.actorToView(bm.wdata.enemy,this.view.enemyBattleView,true);
		this.view.areaMessage.visible = bm.wdata.enemy == null && thisAreaRender != null && thisAreaRender.areaNoEnemyMessage != null;
		if(thisAreaRender != null && thisAreaRender.areaNoEnemyMessage != null) {
			this.view.areaMessage.text = thisAreaRender.areaNoEnemyMessage;
		}
		this.view.levelLabel.text = "Level " + hero.level;
		if(bm.isXPCap() == false) {
			this.view.ui.updateBarValue(this.view.xpBar,hero.xp.value,hero.xp.calculatedMax);
		} else {
			this.view.xpBar.mainText.text = "MAXED";
		}
		if(bm.isLevelCap()) {
			this.view.xpBar.mainText.text = "max level";
		}
		this.view.xpBar.barBack.visible = !bm.isLevelCap();
		this.view.xpBar.barPortion.visible = !bm.isLevelCap();
		var buttonToAction = function(actionId,buttonId) {
			var action = bm.wdata.playerActions.h[actionId];
			_gthis.view.ui.elementVisibility(buttonId,action.visible);
			_gthis.view.ui.elementEnabled(buttonId,action.enabled);
		};
		if(this.warningActive) {
			if(this.view.dialogResult == ConfirmResult.YES || this.view.dialogResult == ConfirmResult.NO) {
				if(this.view.dialogResult == ConfirmResult.YES) {
					if(this.view.dialogData != null) {
						this.executeAction(this.view.dialogData);
					}
				}
				this.view.endDialog();
			}
		}
		var storyHappened = this.storyControl.runtime.persistence.progressionData.h[this.storyControl.runtime.cutscenes[0].id].timesCompleted > 0;
		var storyHappenedPure = storyHappened;
		if(bm.wdata.regionProgress != null && bm.wdata.regionProgress[0] != null) {
			storyHappened = storyHappened && bm.wdata.regionProgress[0].maxArea > 2;
		} else {
			storyHappened = false;
		}
		this.view.tabAccessible(GRIView.tagTabMemory,storyHappened);
		this.view.tabAccessible(GRIView.tagTabCharacter,bm.wdata.regionProgress[0].maxArea > 2);
		var action = bm.wdata.playerActions.h["tabequipment"];
		this.view.tabAccessible(GRIView.tagTabEquip,action.visible);
		var action = bm.wdata.playerActions.h["tabvillage"];
		this.view.tabAccessible(GRIView.tagTabVillage,action.visible);
		var action = bm.wdata.playerActions.h["tabregion"];
		this.view.tabAccessible(GRIView.tagTabRegion,action.visible);
		var action = bm.wdata.playerActions.h["equipset_menu"];
		this.view.ui.tagVisibility(GRISetView.SETVIEWTAG,action.visible);
		var regionProgress = bm.getRegionProgress(this.regionControl.visualizedRegion);
		this.refreshRegionViewData(bm,bm.wdata.battleAreaRegion,bm.wdata.maxArea,this.regionViewData,this.lagrimaAreaLabels);
		this.refreshRegionViewData(bm,this.regionControl.visualizedRegion,regionProgress.maxArea,this.regionViewData,this.lagrimaAreaLabels);
		this.regionControl.updateAreaNames(this.regionViewData.listOfRegions[this.regionControl.visualizedRegion].listOfAreas,bm.wdata.regionProgress[this.regionControl.visualizedRegion].area);
		this.view.areaElement.text = this.regionViewData.listOfRegions[bm.wdata.battleAreaRegion].listOfAreas[bm.wdata.battleArea].areaName;
		if(bm.wdata.necessaryToKillInArea != 0) {
			this.view.areaProgressElement.text = bm.wdata.killedInArea[bm.wdata.battleArea] + " / " + bm.wdata.necessaryToKillInArea;
		} else {
			this.view.areaProgressElement.text = "";
		}
		buttonToAction("retreat","retreat");
		buttonToAction("levelup","levelup");
		buttonToAction("sleep","sleep");
		buttonToAction("repeat","repeat");
		buttonToAction("prestige","prestige");
		buttonToAction("advance","advance");
		buttonToAction("autoadvance","autoadvance");
		buttonToAction("autorepeat","autorepeat");
		var _g = 0;
		while(_g < 7) {
			var i = _g++;
			var id = "battleaction_" + i;
			buttonToAction(id,id);
			var skills = bm.wdata.hero.usableSkills;
			if(skills[i] != null) {
				var action = bm.wdata.playerActions.h[id];
				var header = "Locked";
				var desc = "You do not yet have what it takes to use this skill";
				if(action.mode == 0 || action.mode == 2) {
					var sb = bm.GetSkillBase(skills[i].id);
					var skillName = GRIControlEquip.getSkillName(skills[i]);
					this.view.ui.elementTextId(id,skillName + "    " + sb.mpCost + "MP");
					header = skillName;
					desc = this.SkillToExplanation.h[sb.id];
				}
				var tmp = action.mode == 2 && action.enabled == false;
				if(action.mode == 1) {
					this.view.ui.elementTextId(id,"Unlock at Level " + bm.skillSlotUnlocklevel[i]);
				}
				this.view.ui.hover.setHoverGeneric(this.view.ui.getElement(id),header,desc);
			}
		}
		var sleepAct = bm.wdata.playerActions.h["sleep"];
		if(sleepAct.mode == 0) {
			this.view.ui.elementTextId("sleep","Nap");
		} else {
			this.view.ui.elementTextId("sleep","Wake up");
		}
		var pact = bm.wdata.playerActions.h["prestige"];
		if(pact.enabled == true) {
			this.view.ui.elementTextId("prestige","Soul Crush");
		} else {
			this.view.ui.elementTextId("prestige","Unlock at Level " + bm.GetLevelRequirementForPrestige());
		}
		this.view.ui.getElement("autoadvance").selected = this.battleManager.wdata.autoAdvance;
		this.view.ui.getElement("autorepeat").selected = this.battleManager.wdata.autoRepeat;
		if(this.eventsShown < bm.events.length) {
			var _g = this.eventsShown;
			var _g1 = bm.events.length;
			while(_g < _g1) {
				var i = _g++;
				var event = bm.events[i];
				var e = event;
				var dataString = event.dataString;
				var data = event.data;
				if(event.type == EventTypes.EquipDrop) {
					this.view.lootList.addEvent(GRIControlEquip.GetEquipName(bm.wdata.hero.equipment[event.data],bm),this.view.ui);
				}
				if(event.type == EventTypes.GetXP) {
					this.view.griEffects.showXP(data,this.view.enemyBattleView.icon,dataString);
				}
				if(event.type == EventTypes.EquipMaxed) {
					this.genericWarning.title = "Equipment reached Limit Level";
					this.genericWarning.description = "Your equipment reached Limit Level. The energy materializes into " + dataString + " +" + data;
					this.view.showDialog(this.genericWarning);
				}
				if(event.type == EventTypes.RegionUnlock) {
					this.genericWarning.title = "Found a new region!";
					this.genericWarning.description = "Gained access to a new location. Access it in the region tab.";
					this.view.showDialog(this.genericWarning);
				}
				if(event.type == EventTypes.PermanentStatUpgrade) {
					this.genericWarning.title = "Area Clear";
					this.genericWarning.description = this.bossMessage;
					this.view.showDialog(this.genericWarning);
					this.bossMessage = GRIView.TEXT_MESSAGEBOSS;
					GameAnalyticsIntegration.SendProgressCompleteEvent("Permanentupg","","");
				}
				if(e.type == EventTypes.statUpgrade) {
					var dataS = e.dataString;
					var data1 = e.data;
					this.bossMessage += "" + dataS + " +" + data1 + "\n";
				}
				if(e.type == EventTypes.AreaUnlock) {
					GameAnalyticsIntegration.SendDesignEvent("AreaUnlock",e.data);
					GameAnalyticsIntegration.SendProgressStartEvent("world0","stage" + bm.wdata.battleAreaRegion,"area" + e.data);
				}
				if(e.type == EventTypes.GameStartOnVersion) {
					GameAnalyticsIntegration.SendProgressStartEvent("gamestart","" + data);
				}
				if(e.type == EventTypes.AreaComplete) {
					GameAnalyticsIntegration.SendProgressCompleteEvent("world0","stage0","area" + e.data);
				}
				if(e.type == EventTypes.ActorDead) {
					if(e.target != null) {
						if(e.target.type == 0) {
							GameAnalyticsIntegration.SendProgressFailEvent("world0","stage" + bm.wdata.battleAreaRegion,"area" + bm.wdata.battleArea);
						}
					}
				}
				if(e.type == EventTypes.heal) {
					this.view.griEffects.showText("+" + e.data,this.view.heroBattleView.icon);
				}
				if(e.type == EventTypes.ActorAttack) {
					if(e.target.type == 0) {
						this.view.griEffects.showDamageNumber(e.data,this.view.heroBattleView.icon);
						if(e.dataString != null) {
							this.view.griEffects.showText(e.dataString,this.view.enemyBattleView.icon);
						}
						this.view.enemyBattleView.skeleton.startAnimation("attack");
					} else {
						this.view.griEffects.showDamageNumber(e.data,this.view.enemyBattleView.icon);
						if(e.dataString != null) {
							this.view.griEffects.showText(e.dataString,this.view.heroBattleView.icon);
						}
						if(e.data2 > 0) {
							this.view.griEffects.showDamageNumber(e.data2,this.view.heroBattleView.icon,"Blood");
						}
						this.view.heroBattleView.skeleton.startAnimation("attack");
					}
				}
				if(e.type == EventTypes.RegionUnlock) {
					GameAnalyticsIntegration.SendDesignEvent("RegionUnlock",e.data);
					GameAnalyticsIntegration.SendProgressStartEvent("world0","stage" + e.data);
				}
				if(e.type == EventTypes.ActorLevelUp) {
					GameAnalyticsIntegration.SendProgressCompleteEvent("LevelUp " + bm.wdata.hero.level,"","");
				}
			}
			this.eventsShown = bm.events.length;
		}
		this.battleManager.processEvents(this.storyControl.eventHolder);
	}
	,render: function() {
		this.view.render(this.buttonBindings);
		this.villageControl.overlayRender();
		this.view.postRender();
		if(this.showError) {
			var message = ErrorX.errorMessage;
			if(message == null) {
				message = ErrorX.exception.details();
			}
			this.view.renderError(message);
		}
	}
	,actorToView: function(actor,actorView,enemyName,littleBattle) {
		if(enemyName == null) {
			enemyName = false;
		}
		var bm = this.battleManager;
		this.view.uiCreation.singleTag(GRIView.tagTabBattle);
		actorView.icon.visible = actor != null && actor.attributesCalculated.h["Life"] > 0;
		if(actor != null) {
			if(enemyName) {
				var enemyNameLabel = "";
				var area = bm.wdata.battleArea;
				var region = bm.wdata.battleAreaRegion;
				enemyNameLabel = this.getEnemyName(area,region);
				actorView.mainName.text = enemyNameLabel;
			} else {
				actorView.iconText.text = "";
				actorView.icon.style.alpha = 255;
				if(bm.wdata.sleeping) {
					actorView.iconText.text = "REST";
					actorView.icon.style.alpha = 15;
				}
				if(bm.wdata.recovering) {
					actorView.iconText.text = "RECOVER";
					actorView.icon.style.alpha = 15;
				}
			}
			var va = actor.viewAux;
			var sprite = TurnOrderData.charaSprites[va];
			actorView.icon.style.sprite = sprite;
			while(actor.buffs.length > actorView.buffs.length) {
				var buffTurn;
				var buffImage;
				buffTurn = this.view.addText("buffamount " + actorView.buffs.length,"99",GRIView.ARCHETYPE_SIMPLE,null,actorView.tag);
				buffTurn.transform.position.x = actorView.mainName.transform.position.x + 220 - actorView.buffs.length * 24;
				buffTurn.transform.position.y = actorView.mainName.transform.position.y + 7;
				this.view.uiCreation.addElement(buffTurn);
				buffImage = new UIElement();
				buffImage.tags.push(actorView.tag);
				this.view.uiCreation.addElement(buffImage);
				actorView.buffs.push({ icon : buffImage, duration : buffTurn, parent : null});
			}
			var _g_current = 0;
			var _g_array = actor.buffs;
			while(_g_current < _g_array.length) {
				var _g1_value = _g_array[_g_current];
				var _g1_key = _g_current++;
				var index = _g1_key;
				var value = _g1_value;
				var buffV = actorView.buffs[index];
				buffV.duration.text = "" + value.duration;
				actorView.buffs[index].icon.style.sprite = this.buffToIcon.h[value.uniqueId];
				var color = GRIView.COLOR_BUFF;
				if(actor.buffs[index].debuff) {
					color = GRIView.COLOR_DEBUFF;
				}
				if(actorView.buffs[index].icon.style.sprite == null) {
					if(value.debuff) {
						actorView.buffs[index].icon.style.sprite = this.debuffIconDefault;
					} else {
						actorView.buffs[index].icon.style.sprite = this.buffIconDefault;
					}
				}
				actorView.buffs[index].icon.style.color = color;
				actorView.buffs[index].duration.style.color = color;
				actorView.buffs[index].icon.transform.position.x = actorView.buffs[index].duration.transform.position.x - actorView.buffs[index].icon.style.sprite.rect.width / 2;
				actorView.buffs[index].icon.transform.position.y = actorView.buffs[index].duration.transform.position.y - 3 - actorView.buffs[index].icon.style.sprite.rect.height;
				var y = actorView.buffs[index].icon.style.sprite.rect.height;
				var self = actorView.buffs[index].icon.transform.size;
				self.x = actorView.buffs[index].icon.style.sprite.rect.width;
				self.y = y;
				if(Object.prototype.hasOwnProperty.call(this.buffToExplanation.h,value.uniqueId)) {
					this.view.ui.hover.setHoverGeneric(actorView.buffs[index].icon,value.uniqueId,this.buffToExplanation.h[value.uniqueId]);
				}
			}
			var _g = 0;
			var _g1 = actorView.buffs.length;
			while(_g < _g1) {
				var i = _g++;
				actorView.buffs[i].icon.visible = i < actor.buffs.length;
				actorView.buffs[i].duration.visible = i < actor.buffs.length;
			}
			var hp = bm.GetAttribute(actor,"Life");
			var hpMax = bm.GetAttribute(actor,"LifeMax");
			this.view.ui.updateBarValue(actorView.hpBar,hp,hpMax);
			var rc = bm.GetAttribute(actor,"MPRechargeCount");
			var mp = bm.GetAttribute(actor,"MP");
			var mpmax = bm.GetAttribute(actor,"MPMax");
			if(rc < 10000) {
				mp = rc;
				mpmax = 10000;
				this.view.ui.updateBarLeftText(actorView.mpBar,"charge");
				actorView.mpBar.barPortion.style.sprite = GRIView.SPRITE_PINKGRAD;
			} else {
				this.view.ui.updateBarLeftText(actorView.mpBar,"mp");
				actorView.mpBar.barPortion.style.sprite = GRIView.SPRITE_BLUEGRAD;
			}
			if(littleBattle != null) {
				var mode = 2;
				if(bm.wdata.sleeping) {
					mode = 3;
				}
				if(bm.wdata.recovering) {
					mode = 0;
				}
				if(bm.wdata.enemy != null) {
					mode = 1;
				}
				littleBattle.feed(hp,hpMax,mp,mpmax,mode,rc < 10000,TurnOrderData.charaSprites[this.config.heroViewAux]);
			}
			this.view.ui.updateBarValue(actorView.mpBar,mp,mpmax);
		}
		this.view.ui.tagVisibility(actorView.tag,actor != null);
	}
	,refreshRegionViewData: function(bm,region,maxArea,regionsRenderData,lagrimaAreaLabels) {
		if(regionsRenderData.listOfRegions[region] == null) {
			regionsRenderData.listOfRegions[region] = new RegionRenderInfo();
		}
		while(regionsRenderData.listOfRegions[region].listOfAreas.length <= maxArea) {
			var listOfAreas = regionsRenderData.listOfRegions[region].listOfAreas;
			var bArea = regionsRenderData.listOfRegions[region].listOfAreas.length;
			var regionD = this.config.battleManagerConfiguration.regions[region];
			if(regionD.type == RegionType.PROCEDURAL) {
				var ari = new AreaRenderInfo();
				listOfAreas.push(ari);
				if(bArea > 0) {
					var pur = bm.enemyAreaFromProcedural.GetProceduralUnitRepeated(bArea - 1);
					var characteristic = pur.proceduralUnit.characteristics[0];
					var text = lagrimaAreaLabels[characteristic];
					var lore = this.lagrimaAreaLore[characteristic];
					switch(pur.proceduralUnit.repeat) {
					case 1:
						text += " II";
						break;
					case 2:
						text += " III";
						break;
					case 3:
						text += " IV";
						break;
					case 4:
						text += " V";
						break;
					}
					text += " - " + (pur.position + 1);
					ari.areaName = text;
					ari.areaDescription = lore;
				} else if(region == 0) {
					ari.areaName = "Home";
				} else {
					ari.areaName = "Entrance";
				}
			}
			if(regionD.type == RegionType.CHALLENGE) {
				var ari1 = new AreaRenderInfo();
				listOfAreas.push(ari1);
				if(bArea == 0) {
					ari1.areaName = "Entrance";
				} else {
					ari1.areaName = "Danger Area " + bArea;
				}
			}
			if(regionD.type == RegionType.SEMIPROCEDURAL) {
				if(this.config.regionNameList[region].listOfAreas.length > bArea) {
					var ari2 = new AreaRenderInfo();
					listOfAreas.push(ari2);
					ari2.areaName = this.config.regionNameList[region].listOfAreas[bArea].areaName;
					ari2.areaDescription = this.config.regionNameList[region].listOfAreas[bArea].areaDescription;
				} else {
					break;
				}
			}
		}
	}
	,validateSave: function(jsonData) {
		var persistenceMaster = SaveAssistant.GetPersistenceMaster(jsonData);
		var jsonData2 = persistenceMaster.jsonStory;
		if(jsonData2 != null && jsonData2 != "") {
			var storyPersistence = StoryControlLogic.ReadJsonPersistentData(jsonData2);
		}
		var gamePlaySaveN = 0;
		var bm = new BattleManager();
		var configer = new GRIConfigurer();
		bm.config = configer.dimensions[1].battleManagerConfiguration;
		if(persistenceMaster.jsonGameplay != null) {
			++gamePlaySaveN;
			var success = bm.SendJsonPersistentData(persistenceMaster.jsonGameplay);
			if(success == false) {
				return false;
			}
		}
		if(persistenceMaster.jsonGameplayDimensions == null) {
			persistenceMaster.jsonGameplayDimensions = [];
		}
		var _g = 0;
		var _g1 = persistenceMaster.jsonGameplayDimensions;
		while(_g < _g1.length) {
			var jsonD = _g1[_g];
			++_g;
			if(jsonD != null) {
				bm.config = configer.dimensions[0].battleManagerConfiguration;
				++gamePlaySaveN;
				var success = bm.SendJsonPersistentData(jsonD);
				if(success == false) {
					return false;
				}
			}
		}
		bm.loadGeneralJson(persistenceMaster.jsonGeneral,persistenceMaster.worldVersion);
		if(gamePlaySaveN == 0) {
			return false;
		}
		return true;
	}
	,getEnemyName: function(area,region) {
		var rd = this.config.battleManagerConfiguration.regions[region];
		var enemyNameLabel = "";
		if(!this.battleManager.isBattleAreaVerify(region,area)) {
			return "";
		}
		if(rd.type == RegionType.PROCEDURAL) {
			var eafp = this.battleManager.enemyAreaFromProcedural;
			var eai = eafp.GetEnemyAreaInformation(area - 1);
			enemyNameLabel = this.enemyLabels[0][eai.sheetId];
			if(this.lagrimaAreaPrefix[eai.equipId] != null) {
				enemyNameLabel = this.lagrimaAreaPrefix[eai.equipId] + " " + enemyNameLabel;
			}
			if(eai.level > 0) {
				if(eai.level < 10) {
					enemyNameLabel += " Forte";
				} else if(eai.level < 30) {
					enemyNameLabel += " Monstro";
				} else {
					enemyNameLabel += " do Carai";
				}
			}
		}
		if(rd.type == RegionType.CHALLENGE) {
			enemyNameLabel = this.enemyLabels[region][0];
			enemyNameLabel += " " + String.fromCodePoint((65 + area - 1));
		}
		if(rd.type == RegionType.SEMIPROCEDURAL) {
			var areaD = rd.areaDatas[area];
			var eai = areaD.enemy;
			enemyNameLabel = this.enemyLabels[0][eai.sheetId];
			if(this.lagrimaAreaPrefix[eai.equipId] != null) {
				enemyNameLabel = this.lagrimaAreaPrefix[eai.equipId] + " " + enemyNameLabel;
			}
			if(eai.level > 0) {
				if(eai.level < 10) {
					enemyNameLabel += " Forte";
				} else if(eai.level < 30) {
					enemyNameLabel += " Monstro";
				} else {
					enemyNameLabel += " do Carai";
				}
			}
		}
		return enemyNameLabel;
	}
	,getReviewJson: function(recommended,reviewText) {
		var userId = this.battleManager.wdata.userId;
		if(recommended <= 0) {
			return null;
		}
		return JSON.stringify({ recommended : recommended + "", message : reviewText, save : CrossTarget.latestSave, userId : userId});
	}
	,getAreaRender: function(region,area) {
		if(area == null) {
			area = -1;
		}
		if(region == null) {
			region = -1;
		}
		var bm = this.battleManager;
		if(area < 0) {
			area = bm.wdata.battleArea;
		}
		if(region < 0) {
			region = bm.wdata.battleAreaRegion;
		}
		if(this.config.regionNameList.length > region && this.config.regionNameList[region].listOfAreas != null && this.config.regionNameList[region].listOfAreas.length > area) {
			return this.config.regionNameList[region].listOfAreas[area];
		}
		return null;
	}
	,getFeedbackJson: function(reviewText) {
		var userId = this.battleManager.wdata.userId;
		return JSON.stringify({ message : reviewText, save : CrossTarget.latestSave, userId : userId});
	}
	,getErrorJson: function() {
		var userId = this.battleManager.wdata.userId;
		return JSON.stringify({ message : this.errorMessage, save : CrossTarget.latestSave, userId : userId});
	}
	,saveData: function() {
		var bm = this.battleManager;
		var json = bm.GetJsonPersistentData();
		var json2 = StoryControlLogic.GetJsonPersistentData(this.storyControl.runtime);
		var masterPers = { worldVersion : bm.wdata.worldVersion, jsonGameplay : this.previousPersistenceMaster.jsonGameplay, jsonStory : json2, jsonGeneral : this.previousPersistenceMaster.jsonGeneral, jsonGameplayDimensions : this.previousPersistenceMaster.jsonGameplayDimensions, jsonVillageDimensions : this.previousPersistenceMaster.jsonVillageDimensions, jsonVillageShared : this.previousPersistenceMaster.jsonVillageShared};
		if(masterPers.jsonGameplayDimensions == null) {
			masterPers.jsonGameplayDimensions = [];
		}
		if(this.config.dimensionSave >= 0) {
			masterPers.jsonGameplayDimensions[this.config.dimensionSave] = json;
		} else {
			masterPers.jsonGameplay = json;
		}
		masterPers.jsonGeneral = bm.getGeneralJson();
		masterPers.jsonVillageDimensions = this.villageControl.getDimensionsSaveJson();
		masterPers.jsonVillageShared = this.villageControl.getSharedSaveJson();
		var jsonMaster = JsonX.stringify(masterPers);
		CrossTarget.SetLocalStorageItem(GRIControl.key,jsonMaster);
	}
	,__class__: GRIControl
};
var GRIControlCharacterTab = function(ctrl) {
	this.control = ctrl;
};
$hxClasses["GRIControlCharacterTab"] = GRIControlCharacterTab;
GRIControlCharacterTab.__name__ = "GRIControlCharacterTab";
GRIControlCharacterTab.prototype = {
	setupUI: function() {
		this.view = new GRIViewCharacterTab();
	}
	,update: function() {
		this.control.view.uiCreation.singleTag(GRIView.tagTabCharacter);
		GRIAchievementViewLogic.update(this.control.battleManager.achievementModel.modelData,this.view.achievementView,this.control.view);
	}
	,__class__: GRIControlCharacterTab
};
var EquipMode = $hxEnums["EquipMode"] = { __ename__:true,__constructs__:null
	,EQUIP: {_hx_name:"EQUIP",_hx_index:0,__enum__:"EquipMode",toString:$estr}
	,SELL: {_hx_name:"SELL",_hx_index:1,__enum__:"EquipMode",toString:$estr}
	,UPGRADE: {_hx_name:"UPGRADE",_hx_index:2,__enum__:"EquipMode",toString:$estr}
};
EquipMode.__constructs__ = [EquipMode.EQUIP,EquipMode.SELL,EquipMode.UPGRADE];
var GRIControlEquip = function(battleM,control) {
	var _g = new haxe_ds_EnumValueMap();
	_g.set(EquipMode.SELL,"Sell:");
	_g.set(EquipMode.UPGRADE,"Upgrade:");
	this.modeToSpecialHeader = _g;
	this.mode = EquipMode.EQUIP;
	this.equipBaseItemVisible = -1;
	this.equipTypeVisible = 0;
	this.equipTypeNames = ["Weapons","Armor","Skill Set"];
	this.control = control;
	this.battleManager = battleM;
	this.equipView = control.view.equipView;
	this.filterControl = new GRIEquipFilterControl(control);
};
$hxClasses["GRIControlEquip"] = GRIControlEquip;
GRIControlEquip.__name__ = "GRIControlEquip";
GRIControlEquip.getSkillName = function(skillInfo) {
	var skillName = skillInfo.id;
	if(skillInfo.level > 1) {
		var code = 50 + skillInfo.level;
		skillName += " Lv. " + String.fromCodePoint(code);
	}
	return skillName;
};
GRIControlEquip.GetEquipName = function(e,bm) {
	var itemBases = bm.itemBases;
	var modBases = bm.modBases;
	var skillSets = bm.wdata.skillSets;
	if(e.generationBaseItem != null && e.generationBaseItem >= 0) {
		var name = itemBases[e.generationBaseItem].name;
		if(e.generationPrefixMod >= 0) {
			name = modBases[e.generationPrefixMod].prefix + " " + name;
		}
		if(e.generationSuffixMod >= 0) {
			name = name + " " + modBases[e.generationSuffixMod].suffix;
		}
		var level = bm.wdata.equipLevels[e.outsideSystems.h["level"]].level;
		var levelP = (level - 1) / 3 | 0;
		var levelS = (level - 1) % 3 + 1;
		name += " ";
		var character = "+";
		if(level > 3) {
			character = "Y";
		}
		if(level > 6) {
			character = "V";
		}
		if(level > 9) {
			character = "U";
		}
		var cCount = 0;
		if(level > 0) {
			cCount = (level - 1) % 3 + 1;
		}
		var _g = 0;
		var _g1 = cCount;
		while(_g < _g1) {
			var i = _g++;
			name += character;
		}
		var genlevel = e.generationLevel;
		name += " Lv" + genlevel;
		return name;
	}
	if(e.outsideSystems != null) {
		if(Object.prototype.hasOwnProperty.call(e.outsideSystems.h,"skillset")) {
			var skillSet = e.outsideSystems.h["skillset"];
			var ss = skillSets[skillSet];
			var main = ss.skills[0];
			var sbMain = bm.GetSkillBase(main.id);
			var profession = "Corrupter";
			if(sbMain != null) {
				profession = bm.GetSkillBase(main.id).profession;
			}
			var word1 = null;
			var word2 = null;
			if(ss.skills.length > 1) {
				var skillBase1 = bm.GetSkillBase(ss.skills[1].id);
				word1 = bm.GetSkillBase(ss.skills[0].id).word;
				if(skillBase1 != null) {
					profession = bm.GetSkillBase(ss.skills[1].id).profession;
				}
			}
			if(ss.skills.length > 2) {
				word2 = bm.GetSkillBase(ss.skills[2].id).word;
			}
			if(word2 != null) {
				return "" + word1 + " " + profession + " of " + word2;
			}
			if(word1 != null) {
				return "" + word1 + " " + profession;
			}
			return profession;
		}
	}
	var equipName = "Sword";
	if(e.type == 1) {
		equipName = "Armor";
	}
	return equipName;
};
GRIControlEquip.getAttributeAddText = function(key,value) {
	var meta = ActorViewLogic.attributeMetaData.h[key];
	if(meta != null) {
		if(meta.intAsText != null) {
			var text = meta.intAsText[value];
			return "" + key + ": " + text;
		}
	}
	if(value >= 0) {
		return "" + key + ":   +" + value;
	} else {
		return "" + key + ":   " + value;
	}
};
GRIControlEquip.getAttributeMulText = function(key,value) {
	var percent = value - 100;
	if(percent >= 0) {
		return "" + key + ":   +" + percent + "%";
	} else {
		return "" + key + ":   " + percent + "%";
	}
};
GRIControlEquip.prototype = {
	setupView: function() {
		this.equipView.feedEquipmentTypeNames(this.equipTypeNames);
		this.equipView.setup();
		this.changeEquipMode(EquipMode.EQUIP);
		this.update();
		this.filterControl.changeTypeViewed(this.equipTypeVisible,this.equipBaseItemHas);
	}
	,changeEquipMode: function(mode) {
		this.mode = mode;
		this.control.view.ui.tagVisibility(GRIViewEquip.TAG_EQUIPBUTTON_SPECIALWIDGET,mode != EquipMode.EQUIP);
	}
	,update: function() {
		var bm = this.battleManager;
		var equipViewPos = 0;
		this.control.view.ui.genUI.extendLayoutWidth("equipbutton",30);
		this.control.view.ui.extendElementHeight(this.equipView.scroll.viewport,95);
		this.filterControl.updateSelected(this.equipBaseItemVisible);
		if(this.equipBaseItemHas == null) {
			this.equipBaseItemHas = [];
		}
		var _g = 0;
		var _g1 = this.equipBaseItemHas.length;
		while(_g < _g1) {
			var i = _g++;
			this.equipBaseItemHas[i] = false;
		}
		this.equipView.setView.highlight(bm.wdata.hero.chosenEquipSet);
		var hoveredEquip = -1;
		var hoveredView = -1;
		var hoveredEquippedForKeyboard = -1;
		var hoveredEquipped = -1;
		var hoveredEquippedView = -1;
		var _g = 0;
		var _g1 = bm.wdata.hero.equipment.length;
		while(_g < _g1) {
			var i = _g++;
			var e = bm.wdata.hero.equipment[i];
			if(e != null) {
				if(e.generationBaseItem >= 0 == true) {
					var baseItem = e.generationBaseItem;
					this.equipBaseItemHas[baseItem] = true;
				}
				var filterOk = e.type == this.equipTypeVisible;
				if(this.equipBaseItemVisible >= 0) {
					filterOk = filterOk && e.generationBaseItem == this.equipBaseItemVisible;
				}
				if(filterOk) {
					if(e.seen >= 0 == false) {
						e.seen = 2;
					}
					if(e.seen == 0) {
						var equipTab = false;
						if(equipTab) {
							e.seen = 1;
						}
					}
					var rarity = 0;
					if(e.generationPrefixMod >= 0 || e.generationSuffixMod >= 0) {
						rarity = 1;
					}
					var upgradeCost = 0;
					var upgradable = BattleManager.IsUpgradable(e,bm.wdata);
					var equipName = GRIControlEquip.GetEquipName(e,bm);
					this.equipView.feedEquipment(i,equipViewPos,equipName,bm.IsEquipped(i,false));
					if(this.equipView.isSelected(equipViewPos)) {
						hoveredEquip = i;
						hoveredView = equipViewPos;
					}
					++equipViewPos;
				}
			}
		}
		this.equipView.visibilityOfEquipViewCutoff(equipViewPos);
		if(this.mode == EquipMode.EQUIP) {
			var _g = 0;
			var _g1 = this.equipView.equipmentViews;
			while(_g < _g1.length) {
				var ev = _g1[_g];
				++_g;
				ev.mainButton.enabled = true;
			}
		}
		if(this.mode == EquipMode.SELL) {
			var _g = 0;
			var _g1 = this.equipView.equipmentViews;
			while(_g < _g1.length) {
				var ev = _g1[_g];
				++_g;
				var eId = ev.mainButton.data.intData;
				var e = this.battleManager.wdata.hero.equipment[eId];
				if(e != null) {
					var sellPrize = BattleManager.GetSellPrize(e,this.battleManager.wdata);
					ev.specialElementText.text = "+" + sellPrize;
					ev.specialHeader.text = "Sell:";
					ev.mainButton.enabled = !this.battleManager.IsEquipped(eId,true);
				}
			}
		}
		if(this.mode == EquipMode.UPGRADE) {
			var bm1 = this.battleManager;
			var _g = 0;
			var _g1 = this.equipView.equipmentViews;
			while(_g < _g1.length) {
				var ev = _g1[_g];
				++_g;
				var eId = ev.mainButton.data.intData;
				var e = this.battleManager.wdata.hero.equipment[eId];
				if(e != null) {
					var upgradeLabel = "Upgrade";
					var upgradeCurrency = "Lagrima";
					var canUpgrade = false;
					var upgradeCost = 0;
					var upgradable = BattleManager.IsUpgradable(e,bm1.wdata);
					if(upgradable) {
						canUpgrade = BattleManager.CanUpgrade(e,bm1.wdata);
						upgradeCost = BattleManager.GetCost(e,bm1.wdata);
					} else {
						var limitable = BattleManager.IsLimitBreakable(e,bm1.wdata);
						if(limitable) {
							upgradable = limitable;
							canUpgrade = BattleManager.CanLimitBreak(e,bm1.wdata);
							upgradeCost = BattleManager.GetLimitBreakCost(e,bm1.wdata);
							upgradeLabel = "Limit Break";
							upgradeCurrency = "Lagrima Stone";
						}
					}
					ev.mainButton.enabled = canUpgrade;
					ev.specialElementText.text = "" + upgradeCost;
					ev.specialElementIcon.style.sprite = CurrencyViewLogic.currencyToSprite.h[upgradeCurrency];
					ev.specialHeader.text = upgradeLabel;
				}
			}
		}
		var _g4_current = 0;
		var _g4_array = bm.wdata.hero.equipmentSets[bm.wdata.hero.chosenEquipSet].equipmentSlots;
		while(_g4_current < _g4_array.length) {
			var _g5_value = _g4_array[_g4_current];
			var _g5_key = _g4_current++;
			var index = _g5_key;
			var value = _g5_value;
			if(this.equipView.isEquippedSelectedThisFrame(index)) {
				if(UIElementManager.latestDevice != Device.MOUSE) {
					hoveredEquippedForKeyboard = index;
				}
			}
			if(this.equipView.isEquippedSelected(index)) {
				hoveredEquippedView = index;
				hoveredEquipped = value;
			}
			if(value >= 0) {
				var e = bm.wdata.hero.equipment[value];
				var ename = GRIControlEquip.GetEquipName(e,bm);
				this.equipView.feedEquipped(value,index,ename,index == this.equipTypeVisible,true);
			} else {
				var interactable = bm.hasEquipmentOfType(index);
				this.equipView.feedEquipped(-1,index,this.equipTypeNames[index],index == this.equipTypeVisible,interactable);
			}
		}
		this.equipView.equipmentTags();
		if(this.control.view.currentTab == GRIView.tagTabEquip) {
			ActorViewLogic.feed(bm.wdata.hero,this.equipView.actorEquipView,this.control.view);
			var afterStats = null;
			if(hoveredEquip >= 0) {
				afterStats = bm.getStatsIfEquipped(bm.wdata.hero,hoveredEquip);
			}
			ActorViewLogic.feed(bm.wdata.hero,this.equipView.actorEquipView,this.control.view,afterStats);
		}
		CurrencyViewLogic.update(this.equipView.currencyView,this.control.view,this.control.battleManager);
		if(hoveredEquip >= 0) {
			var equipToHover = hoveredEquip;
			this.equipView.hoverOn(hoveredView);
			this.feedEquipHover(equipToHover);
		} else if(hoveredEquipped >= 0) {
			var equipToHover = hoveredEquipped;
			this.equipView.hoverOnEquippedButton(hoveredEquippedView);
			this.feedEquipHover(equipToHover);
		} else {
			this.equipView.hoverOn(-1);
		}
		if(hoveredEquippedForKeyboard >= 0 && this.equipTypeVisible != hoveredEquip) {
			this.equipTypeVisible = hoveredEquippedForKeyboard;
			this.filterControl.changeTypeViewed(this.equipTypeVisible,this.equipBaseItemHas);
		}
		var evs = this.control.view.ui.dataEvents;
		var _g4_current = 0;
		var _g4_array = evs;
		while(_g4_current < _g4_array.length) {
			var _g5_value = _g4_array[_g4_current];
			var _g5_key = _g4_current++;
			var index = _g5_key;
			var value = _g5_value;
			if(value != null && value.stringData != null) {
				if(value.stringData.indexOf(GRIViewEquip.equippedViewIdPart) != -1) {
					var index1 = value.intData;
					if(this.equipTypeVisible != index1) {
						this.resetOffsetEquipButtons();
					}
					this.equipTypeVisible = index1;
					this.equipBaseItemVisible = -1;
					if(UIElementManager.latestDevice != Device.MOUSE) {
						this.control.view.ui.enterCursorGroup(this.equipView.cursor_items);
					}
					this.filterControl.changeTypeViewed(this.equipTypeVisible,this.equipBaseItemHas);
				}
				if(value.stringData.indexOf(GRIViewEquip.equipmentViewIdPart) != -1) {
					var index2 = value.intData;
					if(this.mode == EquipMode.EQUIP) {
						bm.ToggleEquipped(index2);
					}
					if(this.mode == EquipMode.SELL) {
						bm.SellEquipment(index2);
					}
					if(this.mode == EquipMode.UPGRADE) {
						bm.UpgradeOrLimitBreakEquipment(index2);
					}
				}
				if(value.stringData == GRIEquipFilterControl.DATAINPUT_CHANGEFILTER) {
					this.equipBaseItemVisible = value.intData;
					this.resetOffsetEquipButtons();
				}
				if(value.stringData == GRIViewEquip.DATA_SELL) {
					this.changeEquipMode(EquipMode.SELL);
					if(UIElementManager.latestDevice != Device.MOUSE) {
						this.control.view.ui.enterCursorGroup(this.equipView.cursor_slots);
					}
				}
				if(value.stringData == GRIViewEquip.DATA_EQUIP) {
					this.changeEquipMode(EquipMode.EQUIP);
					if(UIElementManager.latestDevice != Device.MOUSE) {
						this.control.view.ui.enterCursorGroup(this.equipView.cursor_slots);
					}
				}
				if(value.stringData == GRIViewEquip.DATA_UPGRADE) {
					this.changeEquipMode(EquipMode.UPGRADE);
					if(UIElementManager.latestDevice != Device.MOUSE) {
						this.control.view.ui.enterCursorGroup(this.equipView.cursor_slots);
					}
				}
				if(value.stringData == GRIViewEquip.DATA_SELL_WORSE) {
					bm.DiscardWorseEquipment();
					this.resetOffsetEquipButtons();
				}
				if(value.stringData == GRIView.tagTabEquip) {
					this.changeEquipMode(EquipMode.EQUIP);
					this.equipBaseItemVisible = -1;
					this.filterControl.changeTypeViewed(this.equipTypeVisible,this.equipBaseItemHas);
				}
			}
		}
	}
	,resetOffsetEquipButtons: function() {
		this.equipView.scroll.offset.y = 10;
	}
	,feedEquipHover: function(equipToHover) {
		var bm = this.control.battleManager;
		var equip = bm.wdata.hero.equipment[equipToHover];
		var e = equip;
		this.equipView.hover_Header.text = GRIControlEquip.GetEquipName(equip,bm);
		var vid = 0;
		if(e.outsideSystems != null) {
			if(Object.prototype.hasOwnProperty.call(e.outsideSystems.h,"skillset")) {
				var ss = e.outsideSystems.h["skillset"];
				var ssd = bm.wdata.skillSets[ss];
				var _g = 0;
				var _g1 = ssd.skills.length;
				while(_g < _g1) {
					var s = _g++;
					var actionId = "battleaction_" + s;
					var action = bm.wdata.playerActions.h[actionId];
					if(action.mode == 0) {
						var skillInfo = ssd.skills[s];
						var skillName = GRIControlEquip.getSkillName(skillInfo);
						this.equipView.setEquipmentHoverInfo(skillName,vid);
					}
					if(action.mode == 1) {
						this.equipView.setEquipmentHoverInfo("???",vid);
					}
					++vid;
				}
			}
		}
		var h = equip.attributes.h;
		var _g_h = h;
		var _g_keys = Object.keys(h);
		var _g_length = _g_keys.length;
		var _g_current = 0;
		while(_g_current < _g_length) {
			var key = _g_keys[_g_current++];
			var _g1_key = key;
			var _g1_value = _g_h[key];
			var key1 = _g1_key;
			var value = _g1_value;
			var text = GRIControlEquip.getAttributeAddText(key1,value);
			this.equipView.setEquipmentHoverInfo(text,vid);
			++vid;
		}
		if(equip.attributeMultiplier != null) {
			var h = equip.attributeMultiplier.h;
			var _g_h = h;
			var _g_keys = Object.keys(h);
			var _g_length = _g_keys.length;
			var _g_current = 0;
			while(_g_current < _g_length) {
				var key = _g_keys[_g_current++];
				var _g1_key = key;
				var _g1_value = _g_h[key];
				var key1 = _g1_key;
				var value = _g1_value;
				var text = GRIControlEquip.getAttributeMulText(key1,value);
				this.equipView.setEquipmentHoverInfo(text,vid);
				++vid;
			}
		}
		this.equipView.endEquipmentHoverInfo(vid);
	}
	,__class__: GRIControlEquip
};
var GRIControlRegion = function(control,bm) {
	this.visualizedRegion = 0;
	this.lastAreaVisualized = -1;
	this.lastRegionVisualized = -1;
	this.areaFeed = new UIFeedLists();
	this.regionFeed = new UIFeedLists();
	this.battleManager = bm;
	this.control = control;
	this.regionFeed.initList("STANDARD");
	this.regionFeed.initList("DANGER");
	var initRegion = control.config.regionNameList[0];
	if(initRegion == null) {
		this.regionFeed.set(GRIControlRegion.listStandard,0,"","");
	} else {
		this.regionFeed.set(GRIControlRegion.listStandard,0,initRegion.regionName,initRegion.regionDescription);
	}
	this.regionFeed.setData(GRIControlRegion.listStandard,0,"regionbutton",0);
	this.areaFeed.initList("AREAS OF REGION");
	this.viewRegion = new GRIViewRegion(control.view);
};
$hxClasses["GRIControlRegion"] = GRIControlRegion;
GRIControlRegion.__name__ = "GRIControlRegion";
GRIControlRegion.prototype = {
	update: function() {
		var maxRegion = this.battleManager.config.regions.length;
		var showLocked = 0;
		if(maxRegion < this.control.config.regionNameList.length) {
			showLocked = 1;
		}
		var enemyRegionNames = this.control.config.regionNameList;
		var regionIndex = 0;
		var _g = 1;
		var _g1 = maxRegion;
		while(_g < _g1) {
			var i = _g++;
			this.regionFeed.set(GRIControlRegion.listDanger,regionIndex,enemyRegionNames[i].regionName,enemyRegionNames[i].regionDescription,true,this.battleManager.getRegionProgress(i).seen > 0);
			this.regionFeed.setData(GRIControlRegion.listDanger,regionIndex,GRIControlRegion.dataRegionB,i);
			++regionIndex;
		}
		if(showLocked > 0) {
			this.regionFeed.set(GRIControlRegion.listDanger,regionIndex,"Unreached","",false);
			this.regionFeed.setData(GRIControlRegion.listDanger,regionIndex,null,-1);
			++regionIndex;
		}
		this.viewRegion.feedRegionButtons(this.regionFeed);
		var regionChanged = this.lastRegionVisualized != this.visualizedRegion;
		var hoverArea = this.viewRegion.getHoveredArea(GRIControlRegion.dataAreaB);
		var hoverRegion = this.viewRegion.getHoveredRegion(GRIControlRegion.dataRegionB);
		if(hoverRegion >= 0 && UIElementManager.latestDevice != Device.MOUSE) {
			this.visualizedRegion = hoverRegion;
		}
		var areaChanged = this.lastAreaVisualized != hoverArea;
		var enemy = null;
		if(hoverRegion >= 0) {
			hoverArea = -1;
			this.control.view.ui.tagVisibility(this.viewRegion.actorView.tagId,false);
			this.viewRegion.enemyName.text = "";
			this.viewRegion.enemyHeader.text = "";
		}
		if((areaChanged || regionChanged) && hoverArea >= 0) {
			this.lastRegionVisualized = this.visualizedRegion;
			this.lastAreaVisualized = hoverArea;
			if(this.control.battleManager.isBattleAreaVerify(this.visualizedRegion,hoverArea)) {
				enemy = this.control.battleManager.CreateEnemy(this.visualizedRegion,hoverArea);
				this.viewRegion.enemyName.text = this.control.getEnemyName(hoverArea,this.visualizedRegion);
				this.viewRegion.enemyHeader.text = "ENEMY DATA     " + enemyRegionNames[this.visualizedRegion].regionName + " /  " + this.areaFeed.feedLists[0].feedList[this.lastAreaVisualized].text;
			} else {
				this.viewRegion.enemyName.text = "";
				this.viewRegion.enemyHeader.text = "";
			}
			this.control.view.ui.tagVisibility(this.viewRegion.actorView.tagId,enemy != null);
		}
		if(enemy != null) {
			ActorViewLogic.feed(enemy,this.viewRegion.actorView,this.control.view);
		}
		var evs = this.control.view.ui.dataEvents;
		var _g2_current = 0;
		var _g2_array = evs;
		while(_g2_current < _g2_array.length) {
			var _g3_value = _g2_array[_g2_current];
			var _g3_key = _g2_current++;
			var index = _g3_key;
			var value = _g3_value;
			if(value != null && value.stringData != null) {
				if(value.stringData == GRIControlRegion.dataRegionB) {
					this.visualizedRegion = value.intData;
					this.viewRegion.resetAreaScroll();
				}
				if(value.stringData == GRIControlRegion.dataAreaB) {
					var tmp = this.visualizedRegion >= 0;
					this.battleManager.changeRegion(this.visualizedRegion);
					this.battleManager.ChangeBattleArea(value.intData);
					this.control.view.showTab(GRIView.tagTabBattle);
				}
			}
		}
	}
	,setupView: function() {
		this.viewRegion.setup();
	}
	,updateAreaNames: function(areaNames,currentArea) {
		var len = 0;
		var _g_current = 0;
		var _g_array = areaNames;
		while(_g_current < _g_array.length) {
			var _g1_value = _g_array[_g_current];
			var _g1_key = _g_current++;
			var index = _g1_key;
			var value = _g1_value;
			if(value != null && value.areaName != "") {
				this.areaFeed.set(0,index,value.areaName,value.areaDescription,true);
				this.areaFeed.setData(0,index,GRIControlRegion.dataAreaB,index);
				++len;
			}
		}
		this.areaFeed.feedLists[0].invisibleAfterCap(len);
		this.viewRegion.feedAreaButtons(this.areaFeed);
	}
	,__class__: GRIControlRegion
};
var GRITalentControl = function(control) {
	this.currentTalent = -1;
	this.view = control.view;
	this.viewTalent = new GRIViewTalent();
	this.viewTalent.view = this.view;
	this.talentModel = new TalentModel();
	this.control = control;
};
$hxClasses["GRITalentControl"] = GRITalentControl;
GRITalentControl.__name__ = "GRITalentControl";
GRITalentControl.prototype = {
	update: function() {
		var _g_current = 0;
		var _g_array = this.view.ui.dataEvents;
		while(_g_current < _g_array.length) {
			var _g1_value = _g_array[_g_current];
			var _g1_key = _g_current++;
			var index = _g1_key;
			var value = _g1_value;
			if(value.stringData == GRIViewTalent.DATA_STARTPRACTICE) {
				this.currentTalent = value.intData;
				this.viewTalent.practiceModeStart(this.talentModel.talents[this.currentTalent].talentName);
			}
			if(value.stringData == GRIViewTalent.DATA_STUDY) {
				this.talentModel.study(value.intData);
			}
			if(value.stringData == GRIViewTalent.DATA_REROLLFORM) {
				this.talentModel.rerollAndTrain(value.intData,value.intData2);
			}
			if(value.stringData == GRIViewTalent.DATA_RETURNFROMPRACTICE) {
				this.viewTalent.talentModeStart();
			}
		}
		if(this.view.currentTab == GRIView.tagTabVillage) {
			var _g_current = 0;
			var _g_array = this.talentModel.talents;
			while(_g_current < _g_array.length) {
				var _g1_value = _g_array[_g_current];
				var _g1_key = _g_current++;
				var index = _g1_key;
				var value = _g1_value;
				var talentP = this.talentModel.talentSharedPers.talents[index];
				var xp = talentP.xp;
				this.viewTalent.feedTalentView(index,index,value.talentName,talentP.level,xp,this.talentModel.getMaxXP(index,talentP.level),this.talentModel.canStudy(index),talentP.level > 0,talentP.level < this.talentModel.getMaxLevelOfTalent(index));
				if(value.setData != null) {
					this.viewTalent.feedTalentView_PracticeInfo(index,this.talentModel.currency.getCurrency(value.getCurrencyOnTrain_key),this.talentModel.currency.getMax(value.getCurrencyOnTrain_key));
				}
			}
			if(this.viewTalent.currentTagMode == GRIViewTalent.TAG_PRACTICEMODE) {
				if(this.currentTalent >= 0) {
					var nSets = BattleManager.NUMBER_OF_EQUIPMENT_SETS;
					if(this.control.battleManager.wdata.playerActions.h["equipset_battle"].visible == false) {
						nSets = 1;
					}
					var _g = 0;
					var _g1 = nSets;
					while(_g < _g1) {
						var i = _g++;
						var set = this.talentModel.talentPers.talentToSet[this.currentTalent].sets[i];
						var rollBonus = set.rollBonus;
						var rollBonusText = GRIViewUtilities.getBonusText(rollBonus," ",GRIViewTalent.FORMRANKNAMES);
						var canChangeForm = this.talentModel.canChangeForm(this.currentTalent);
						this.viewTalent.feedTalentSingleSet(i,this.currentTalent,set.pointLevel,set.pointXP,this.talentModel.getPointMaxXP(this.currentTalent,i),rollBonusText,"",canChangeForm,WeightedDistributionView.getDistributionSpreadAsText(this.talentModel.getDistribution(this.currentTalent,i),GRIViewTalent.FORMRANKNAMES),set.pointLevel < this.talentModel.getMaxLevelOfTalentPracticeSet(this.currentTalent,i));
					}
					var pointKey = this.talentModel.talents[this.currentTalent].getCurrencyOnTrain_key;
					this.viewTalent.feedPracticeModeCommons(this.talentModel.currency.getCurrency(pointKey),this.talentModel.currency.getMax(pointKey));
				}
				if(Buttons.buttons.buttonsPressed.indexOf(DefaultButtons.CANCEL) != -1) {
					this.viewTalent.talentModeStart();
				}
			}
			this.view.ui.genUI.extendLayoutWidth(GRIViewTalent.LAYOUT_TALENTSETWIDGETS,0);
		}
	}
	,initialize: function(control) {
		var talentControl = this;
		talentControl.talentModel.battleManager = control.battleManager;
		talentControl.talentModel.currency = control.battleManager.currencyModel;
		GRITalentContent.feedContent(this.talentModel);
		this.talentModel.initializeRuntime();
		talentControl.talentModel.initializeData();
		talentControl.talentModel.recalculateConditionalBonuses();
		talentControl.initializeCurrency(control);
	}
	,initializeCurrency: function(control) {
		var _g_current = 0;
		var _g_array = this.talentModel.talents;
		while(_g_current < _g_array.length) {
			var _g1_value = _g_array[_g_current];
			var _g1_key = _g_current++;
			var index = _g1_key;
			var value = _g1_value;
			control.battleManager.currencyModel.initializeCurrency(value.getCurrencyOnTrain_key,500);
		}
	}
	,setupUI: function() {
		this.viewTalent.setupUI();
	}
	,__class__: GRITalentControl
};
var TitleMode = $hxEnums["TitleMode"] = { __ename__:true,__constructs__:null
	,ACCEPT: {_hx_name:"ACCEPT",_hx_index:0,__enum__:"TitleMode",toString:$estr}
	,NORMAL: {_hx_name:"NORMAL",_hx_index:1,__enum__:"TitleMode",toString:$estr}
	,DIMENSION_SELECT: {_hx_name:"DIMENSION_SELECT",_hx_index:2,__enum__:"TitleMode",toString:$estr}
};
TitleMode.__constructs__ = [TitleMode.ACCEPT,TitleMode.NORMAL,TitleMode.DIMENSION_SELECT];
var GRIControlTitle = function(battleManager) {
	this.desiredMode = -1;
	this.characterSelectNeeded = true;
	this.waitReset = false;
	this.saveImportError = { title : "Save Import Error", buttonYes : "Close", buttonFalse : null, description : "Something was wrong with the imported save"};
	this.characterSelectNeeded = CrossTarget.GetLocalStorageItem(GRIControlTitle.CHARACTER_SELECTION_HAPPENED_KEY) == null;
};
$hxClasses["GRIControlTitle"] = GRIControlTitle;
GRIControlTitle.__name__ = "GRIControlTitle";
GRIControlTitle.prototype = {
	changeMode: function(mode) {
		this.titleView.changeMode(mode);
	}
	,setupView: function(control,dimensions) {
		this.resetWarning = { title : "Reset data", description : "You will lose your save data completely", buttonYes : "Confirm", buttonFalse : "Cancel"};
		this.importWarning = { title : "Import Save", description : "You can use this to load an external save file. Be careful. Your previous save file will be erased.", buttonYes : "Confirm", buttonFalse : "Cancel"};
		this.control = control;
		this.titleView = new GRIViewTitle();
		this.titleView.view = control.view;
		this.titleView.setupUI();
		if(this.characterSelectNeeded) {
			this.titleView.addMainButton(GRIViewTitle.DATA_GOTOCHARACTER,"START",0,"Start the game");
			var _g_current = 0;
			var _g_array = dimensions;
			while(_g_current < _g_array.length) {
				var _g1_value = _g_array[_g_current];
				var _g1_key = _g_current++;
				var index = _g1_key;
				var value = _g1_value;
				this.titleView.addDimensionCharacterWidget(value.description_title,value.description_text,GRIViewTitle.DATA_CONTINUE,value.name,index,value.description_sprite);
			}
		} else {
			var _g_current = 0;
			var _g_array = dimensions;
			while(_g_current < _g_array.length) {
				var _g1_value = _g_array[_g_current];
				var _g1_key = _g_current++;
				var index = _g1_key;
				var value = _g1_value;
				this.titleView.addMainButton(GRIViewTitle.DATA_CONTINUE,value.name,index,value.description_text);
			}
		}
		this.titleView.setupButtons();
	}
	,update: function() {
		var continueV = this.control.gameStartedAfterTitle == false;
		if(this.characterSelectNeeded == false) {
			if(this.control.config.dimensionSave < 0) {
				this.control.view.ui.getElementWithDataInt(GRIViewTitle.DATA_CONTINUE,1).enabled = continueV;
			} else {
				this.control.view.ui.elementEnabled(GRIViewTitle.DATA_CONTINUE,continueV);
			}
		}
		if(continueV == false) {
			this.titleView.cursorGroup.firstElement = this.control.view.ui.getElement(GRIViewTitle.DATA_DISCORD);
		}
		if(this.waitImport) {
			if(this.control.view.dialogResult == ConfirmResult.NO) {
				this.waitImport = false;
				this.control.warningActive = true;
				this.control.view.endDialog();
			}
			if(this.control.view.dialogResult == ConfirmResult.YES) {
				this.waitImport = false;
				this.control.warningActive = true;
				this.control.view.endDialog();
				var file = CrossTarget.userExternalFileContent();
				if(file != null) {
					var saveSafe = this.control.validateSave(file);
					if(saveSafe) {
						this.control.saveEnabled = false;
						CrossTarget.SetLocalStorageItem(GRIControl.key,file);
						CrossTarget.reload();
					} else {
						this.control.view.showDialog(this.saveImportError,true);
					}
				}
			}
		}
		if(this.waitReset) {
			if(this.control.view.dialogResult == ConfirmResult.NO) {
				this.waitReset = false;
				this.control.warningActive = true;
				this.control.view.endDialog();
			}
			if(this.control.view.dialogResult == ConfirmResult.YES) {
				this.control.battleManager = new BattleManager();
				var bm = this.control.battleManager;
				bm.ForceSkillSetDrop(-1,null,{ skills : [{ id : "Slash", level : 1},{ id : "Cure", level : 1},{ id : "Protect", level : 3}]},false);
				bm.wdata.hero.equipmentSets[bm.wdata.hero.chosenEquipSet].equipmentSlots[2] = 0;
				CrossTarget.resetLocalStorage(GRIControl.key);
				CrossTarget.reload();
			}
		}
		var _g = 0;
		var _g1 = this.control.view.ui.dataEvents;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			if(data.stringData == GRIViewTitle.DATA_GOTOCHARACTER) {
				this.titleView.changeMode(TitleMode.DIMENSION_SELECT);
			}
			if(data.stringData == GRIViewTitle.DATA_DISCORD) {
				CrossTarget.OpenURL("https://discord.gg/AtGrxpM");
			}
			if(data.stringData == GRIViewTitle.DATA_STEAM) {
				CrossTarget.OpenURL("https://store.steampowered.com/app/1858120/Generic_RPG_Idle/");
			}
			if(data.stringData == GRIViewTitle.DATA_RESET) {
				this.control.view.showDialog(this.resetWarning);
				this.control.warningActive = false;
				this.waitReset = true;
			}
			if(data.stringData == GRIViewTitle.DATA_EXTERNALSAVE) {
				this.control.view.showDialog(this.importWarning);
				this.control.warningActive = false;
				this.waitImport = true;
			}
			if(data.stringData == GRIViewTitle.DATA_EXIT) {
				this.wantToExit = true;
			}
			if(data.stringData == GRIViewTitle.DATA_CONTINUE) {
				this.desiredMode = data.intData;
				CrossTarget.SetLocalStorageItem(GRIControlTitle.CHARACTER_SELECTION_HAPPENED_KEY,"happen",false);
			}
			if(data.stringData == GRIViewTitle.DATA_ACCEPT) {
				var privacyAcceptance = "accepted";
				CrossTarget.SetLocalStorageItem(GRIControl.PRIVACY_ACCEPTANCE_KEY,privacyAcceptance,false);
				this.changeMode(TitleMode.NORMAL);
			}
			if(data.stringData == GRIViewTitle.DATA_PRIVACYSEE) {
				CrossTarget.OpenURL("https://github.com/Pidroh/TOS_Privacy");
			}
		}
	}
	,__class__: GRIControlTitle
};
var GRIControlVillage = function(control) {
	this.arcaniaControl = new GRIArcaniaControl();
	this.villageView = new GRIVillageView();
	this.control = control;
	this.talentControl = new GRITalentControl(control);
};
$hxClasses["GRIControlVillage"] = GRIControlVillage;
GRIControlVillage.__name__ = "GRIControlVillage";
GRIControlVillage.prototype = {
	loadVillage: function(persistenceMaster,villageDimensionSave) {
		var jsonVillageShared = persistenceMaster.jsonVillageShared;
		if(jsonVillageShared == null) {
			this.talentControl.talentModel.talentSharedPers = { talents : []};
			this.arcaniaControl.noSaveData();
		} else {
			var villageData = JsonMainTypes.jsonparservillageS.fromJson(jsonVillageShared);
			var arcania = villageData.arcania;
			this.arcaniaControl.loadData(arcania);
			this.talentControl.talentModel.talentSharedPers = villageData.talentGeneral;
		}
		if(persistenceMaster.jsonVillageDimensions != null) {
			var jsonDimensions = JsonMainTypes.jsonparservillageD.fromJson(persistenceMaster.jsonVillageDimensions);
			if(jsonDimensions != null) {
				this.talentControl.talentModel.talentPers = jsonDimensions.talentDimension;
			} else {
				this.talentControl.talentModel.talentPers = { talentToSet : []};
				haxe_Log.trace(json2object_ErrorUtils.convertErrorArray(JsonMainTypes.jsonparservillageD.errors),{ fileName : "Sources\\GRI/GRIControlVillage.hx", lineNumber : 41, className : "GRIControlVillage", methodName : "loadVillage"});
			}
		} else {
			this.talentControl.talentModel.talentPers = { talentToSet : []};
		}
		this.talentControl.initialize(this.control);
	}
	,setupUI: function() {
		this.arcaniaControl.setupUI(this.control);
	}
	,update: function(miliseconds) {
		this.arcaniaControl.update(miliseconds);
	}
	,getSharedSaveJson: function() {
		var shared = { talentGeneral : this.talentControl.talentModel.talentSharedPers, arcania : this.arcaniaControl.arcaniaModel.persistence};
		return JsonMainTypes.jsonwritervillageS.write(shared);
	}
	,getDimensionsSaveJson: function() {
		var shared = { talentDimension : this.talentControl.talentModel.talentPers};
		return JsonMainTypes.jsonwritervillageD.write(shared);
	}
	,overlayRender: function() {
		this.arcaniaControl.overlayRender();
	}
	,__class__: GRIControlVillage
};
var GRIVillageView = function() {
};
$hxClasses["GRIVillageView"] = GRIVillageView;
GRIVillageView.__name__ = "GRIVillageView";
GRIVillageView.prototype = {
	update: function(view,viewTalent) {
		view.ui.updateBarVisibility(this.timeBar,view.currentTab == GRIView.tagTabBattle || view.currentTab == GRIView.tagTabVillage && viewTalent.currentTagMode == GRIViewTalent.TAG_TALENTMODE);
	}
	,__class__: GRIVillageView
};
var EffectUnit = function() {
	this.elements = [];
};
$hxClasses["EffectUnit"] = EffectUnit;
EffectUnit.__name__ = "EffectUnit";
EffectUnit.prototype = {
	__class__: EffectUnit
};
var GRIEffects = function(spine,view) {
	this.xpEffectShown_Variator = 0;
	this.textEffects = [];
	this.random = new seedyrng_Random();
	view.uiCreation.singleTag(GRIView.tagTabBattle);
	view.uiCreation.activeLayer = GRIView.LAYER_EFFECT;
	var _g = 0;
	while(_g < 3) {
		var i = _g++;
		var eu = new EffectUnit();
		var t = view.addText("","EFFECT",GRIView.ARCHETYPE_TEXT_ACTION,null);
		t.style.color = 16777215;
		var image = new UIElement();
		image.style.sprite = Sprite.create("purpleback",44,39);
		var self = image.transform.position;
		self.x = 200;
		self.y = 200;
		var self1 = image.transform.size;
		self1.x = 44;
		self1.y = 39;
		view.uiCreation.addElement(image);
		view.uiCreation.addElement(t);
		eu.elements.push(image);
		eu.elements.push(t);
		eu.skeletonUnit = spine.loadSkeletonUnit(GRIEffects.SPINE_TEXT_EFFECT);
		eu.skeletonUnit.bind("text",t.offsetAnimationTransform);
		eu.skeletonUnit.bind("root",image.offsetAnimationTransform,"background");
		this.textEffects.push(eu);
	}
	view.uiCreation.activeLayer = GRIView.LAYER_DEFAULT;
};
$hxClasses["GRIEffects"] = GRIEffects;
GRIEffects.__name__ = "GRIEffects";
GRIEffects.prototype = {
	update: function() {
		var _g_current = 0;
		var _g_array = this.textEffects;
		while(_g_current < _g_array.length) {
			var _g1_value = _g_array[_g_current];
			var _g1_key = _g_current++;
			var index = _g1_key;
			var value = _g1_value;
			var _g2_current = 0;
			var _g2_array = value.elements;
			while(_g2_current < _g2_array.length) {
				var _g3_value = _g2_array[_g2_current];
				var _g3_key = _g2_current++;
				var index1 = _g3_key;
				var ele = _g3_value;
				ele.visible = !value.skeletonUnit.isIdle() && ele.offsetAnimationTransform.active;
			}
		}
	}
	,getFreeEffect: function(array) {
		var _g_current = 0;
		var _g_array = array;
		while(_g_current < _g_array.length) {
			var _g1_value = _g_array[_g_current];
			var _g1_key = _g_current++;
			var index = _g1_key;
			var value = _g1_value;
			if(value.skeletonUnit.isIdle()) {
				return value;
			}
		}
		return array[0];
	}
	,showXP: function(xp,target,type) {
		this.xpEffectShown_Variator++;
		this.xpEffectShown_Variator %= 2;
		var effect = this.getFreeEffect(this.textEffects);
		var xR = this.random.random() * 30 - 15;
		var yR = this.random.random() * 10 + this.xpEffectShown_Variator * 20;
		var _g_current = 0;
		var _g_array = effect.elements;
		while(_g_current < _g_array.length) {
			var _g1_value = _g_array[_g_current];
			var _g1_key = _g_current++;
			var index = _g1_key;
			var value = _g1_value;
			value.transform.centerIn(target.transform.get_centerX() + xR,target.transform.get_centerY() + yR);
		}
		effect.elements[1].text = xp + "XP";
		if(type == "special") {
			effect.skeletonUnit.startAnimation("down_slideleft2");
		} else {
			effect.skeletonUnit.startAnimation("down_slideleft");
		}
	}
	,showText: function(text,target) {
		var effect = this.getFreeEffect(this.textEffects);
		var xR = 0;
		var yR = 0;
		var _g_current = 0;
		var _g_array = effect.elements;
		while(_g_current < _g_array.length) {
			var _g1_value = _g_array[_g_current];
			var _g1_key = _g_current++;
			var index = _g1_key;
			var value = _g1_value;
			value.transform.centerIn(target.transform.get_centerX() + xR,target.transform.get_centerY() + yR);
		}
		effect.elements[1].text = text;
		effect.skeletonUnit.startAnimation("popinfast");
	}
	,showDamageNumber: function(damage,target,extraText) {
		var effect = this.getFreeEffect(this.textEffects);
		var xR = 0;
		var yR = 0;
		var _g_current = 0;
		var _g_array = effect.elements;
		while(_g_current < _g_array.length) {
			var _g1_value = _g_array[_g_current];
			var _g1_key = _g_current++;
			var index = _g1_key;
			var value = _g1_value;
			value.transform.centerIn(target.transform.get_centerX() + xR,target.transform.get_centerY() + yR);
		}
		if(extraText == null) {
			effect.elements[1].text = damage + "";
		} else {
			effect.elements[1].text = extraText + "\n" + damage;
		}
		effect.skeletonUnit.startAnimation("popin");
	}
	,__class__: GRIEffects
};
var EnemySheets = function() {
	var _g = new haxe_ds_StringMap();
	_g.h["Attack"] = 1.4;
	_g.h["Speed"] = 0.8;
	_g.h["LifeMax"] = 2.3;
	var _g1 = new haxe_ds_StringMap();
	_g1.h["Speed"] = 0.1;
	this.troll = { speciesMultiplier : { attributesBase : _g}, speciesAdd : null, speciesLevelStats : { attributesBase : _g1}};
	var _g = new haxe_ds_StringMap();
	_g.h["Attack"] = 1.3;
	_g.h["Speed"] = 1.0;
	_g.h["LifeMax"] = 0.8;
	var _g1 = new haxe_ds_StringMap();
	_g1.h["Speed"] = 0.1;
	this.nutkin = { speciesMultiplier : { attributesBase : _g}, speciesAdd : null, speciesLevelStats : { attributesBase : _g1}};
	var _g = new haxe_ds_StringMap();
	_g.h["Attack"] = 0.9;
	_g.h["Speed"] = 1.1;
	_g.h["LifeMax"] = 1.3;
	var _g1 = new haxe_ds_StringMap();
	_g1.h["Defense"] = 0.11;
	this.toad = { speciesMultiplier : { attributesBase : _g}, speciesAdd : null, speciesLevelStats : { attributesBase : _g1}};
	var _g = new haxe_ds_StringMap();
	_g.h["Attack"] = 0.8;
	_g.h["Speed"] = 0.4;
	_g.h["LifeMax"] = 0.8;
	this.rat = { speciesMultiplier : { attributesBase : _g}, speciesAdd : null, speciesLevelStats : null};
	var _g = new haxe_ds_StringMap();
	_g.h["Attack"] = 0.9;
	_g.h["Speed"] = 1.6;
	_g.h["LifeMax"] = 0.3;
	var _g1 = new haxe_ds_StringMap();
	_g1.h["Speed"] = 0.7;
	this.cat = { speciesMultiplier : { attributesBase : _g}, speciesAdd : null, speciesLevelStats : { attributesBase : _g1}};
	var _g = new haxe_ds_StringMap();
	_g.h["Attack"] = 1.8;
	_g.h["Speed"] = 0.3;
	_g.h["LifeMax"] = 1.2;
	var _g1 = new haxe_ds_StringMap();
	_g1.h["Speed"] = 0.05;
	_g1.h["Defense"] = 0.05;
	this.giant = { speciesMultiplier : { attributesBase : _g}, speciesAdd : null, speciesLevelStats : { attributesBase : _g1}};
	var _g = new haxe_ds_StringMap();
	_g.h["Attack"] = 0.6;
	_g.h["Speed"] = 1.3;
	_g.h["LifeMax"] = 0.85;
	var _g1 = new haxe_ds_StringMap();
	_g1.h["Speed"] = 0.6;
	this.dog = { speciesMultiplier : { attributesBase : _g}, speciesAdd : null, speciesLevelStats : { attributesBase : _g1}};
	this.goblin = { speciesMultiplier : null, speciesLevelStats : null, speciesAdd : null};
};
$hxClasses["EnemySheets"] = EnemySheets;
EnemySheets.__name__ = "EnemySheets";
EnemySheets.prototype = {
	__class__: EnemySheets
};
var GRIEquipFilterControl = function(control) {
	this.buttons = [];
	this.uiFeed = new UIFeedList();
	this.control = control;
};
$hxClasses["GRIEquipFilterControl"] = GRIEquipFilterControl;
GRIEquipFilterControl.__name__ = "GRIEquipFilterControl";
GRIEquipFilterControl.prototype = {
	changeTypeViewed: function(itemType,itemBasePossession) {
		var view = this.control.view;
		view.uiCreation.singleTag(GRIView.tagTabEquip);
		var pos = this.control.protoItemMaker.itemGenerationBaseByType.getList(itemType);
		var abv = this.control.protoItemMaker.itemAbbreviationByType.getList(itemType);
		var e = this.uiFeed.element(0);
		e.data.intData = -1;
		e.data.stringData = GRIEquipFilterControl.DATAINPUT_CHANGEFILTER;
		e.infoText = "Show all";
		e.text = "ALL";
		e.visible = true;
		var _g_current = 0;
		var _g_array = abv;
		while(_g_current < _g_array.length) {
			var _g1_value = _g_array[_g_current];
			var _g1_key = _g_current++;
			var index = _g1_key;
			var value = _g1_value;
			var e = this.uiFeed.element(index + 1);
			e.text = abv[index];
			e.data.intData = pos[index];
			e.data.stringData = GRIEquipFilterControl.DATAINPUT_CHANGEFILTER;
			e.infoText = "Show only " + this.control.protoItemMaker.items[pos[index]].name;
			e.visible = itemBasePossession == null || itemBasePossession[pos[index]];
		}
		this.uiFeed.invisibleAfterCap(pos.length + 1);
		this.buttons.length = this.uiFeed.feedList.length;
		var _g_current = 0;
		var _g_array = this.uiFeed.feedList;
		while(_g_current < _g_array.length) {
			var _g1_value = _g_array[_g_current];
			var _g1_key = _g_current++;
			var index = _g1_key;
			var value = _g1_value;
			if(this.buttons[index] == null) {
				this.buttons[index] = this.control.view.addButton("","XXX",GRIView.ARCHETYPE_BUTTON_SMALL,GRIEquipFilterControl.LAYOUT_ID);
			}
			view.ui.feedElement(this.buttons[index],value);
		}
	}
	,updateSelected: function(baseItem) {
		var _g = 0;
		var _g1 = this.buttons;
		while(_g < _g1.length) {
			var element = _g1[_g];
			++_g;
			element.selected = element.data.intData == baseItem;
		}
	}
	,__class__: GRIEquipFilterControl
};
var GRIEquipFilterView = function() { };
$hxClasses["GRIEquipFilterView"] = GRIEquipFilterView;
GRIEquipFilterView.__name__ = "GRIEquipFilterView";
var GRISetView = function(nButtons,layoutId,view,cursorGroup) {
	this.buttons = [];
	var header = view.addText("","EQUIPMENT SETS",GRIView.ARCHETYPE_HEADER_HOVER,null,GRISetView.SETVIEWTAG);
	view.uiCreation.offsetToLayoutViewport(header,layoutId,0,-20);
	var _g = 0;
	var _g1 = nButtons;
	while(_g < _g1) {
		var i = _g++;
		var b = view.addButton("set",i + 1 + "",GRIView.ARCHETYPE_BUTTON_SMALL,layoutId,GRISetView.SETVIEWTAG,cursorGroup);
		b.data.intData = i;
		this.buttons.push(b);
		if(cursorGroup != null) {
			cursorGroup.elements.push(b);
		}
	}
};
$hxClasses["GRISetView"] = GRISetView;
GRISetView.__name__ = "GRISetView";
GRISetView.prototype = {
	highlight: function(set) {
		var _g_current = 0;
		var _g_array = this.buttons;
		while(_g_current < _g_array.length) {
			var _g1_value = _g_array[_g_current];
			var _g1_key = _g_current++;
			var index = _g1_key;
			var value = _g1_value;
			value.selected = index == set;
		}
	}
	,__class__: GRISetView
};
var Sprite = function(spriteN,imageSize) {
	this.rect = new Rect(0,0,0,0);
	this.spriteName = spriteN;
	this.rect.width = imageSize;
	this.rect.height = imageSize;
};
$hxClasses["Sprite"] = Sprite;
Sprite.__name__ = "Sprite";
Sprite.create = function(spriteN,w,h) {
	var sprite = new Sprite(spriteN,w);
	sprite.rect.height = h;
	return sprite;
};
Sprite.prototype = {
	__class__: Sprite
};
var TurnOrderData = function() { };
$hxClasses["TurnOrderData"] = TurnOrderData;
TurnOrderData.__name__ = "TurnOrderData";
var TurnOrderView = function() {
	this.images = [];
};
$hxClasses["TurnOrderView"] = TurnOrderView;
TurnOrderView.__name__ = "TurnOrderView";
TurnOrderView.prototype = {
	__class__: TurnOrderView
};
var TurnOrderControl = function() { };
$hxClasses["TurnOrderControl"] = TurnOrderControl;
TurnOrderControl.__name__ = "TurnOrderControl";
TurnOrderControl.feed = function(view,bm,viewGRI,sprites) {
	var turnList = bm.turnList;
	while(turnList.length > view.images.length) {
		var im = viewGRI.uiCreation.createImageElement(null,36,36);
		viewGRI.uiCreation.addElementInLayoutId(im,view.layoutId);
		im.style.alpha = 80;
		if(view.images.length == 0) {
			var size = im.transform.size.x;
			var b = 6;
			var border = viewGRI.uiCreation.createBorder(size + b,size + b);
			viewGRI.uiCreation.addWithOffset(border,im,0,0,-b / 2,-b / 2);
		}
		view.images.push(im);
	}
	var _g_current = 0;
	var _g_array = view.images;
	while(_g_current < _g_array.length) {
		var _g1_value = _g_array[_g_current];
		var _g1_key = _g_current++;
		var index = _g1_key;
		var value = _g1_value;
		if(turnList.length > index) {
			value.style.sprite = sprites[turnList[index]];
			value.visible = true;
			if(value.style.sprite == null) {
				value.style.sprite = Sprite.create("heroicon",512,512);
			}
		} else {
			value.visible = false;
		}
	}
};
var ConfirmResult = $hxEnums["ConfirmResult"] = { __ename__:true,__constructs__:null
	,IDLE: {_hx_name:"IDLE",_hx_index:0,__enum__:"ConfirmResult",toString:$estr}
	,WAIT: {_hx_name:"WAIT",_hx_index:1,__enum__:"ConfirmResult",toString:$estr}
	,YES: {_hx_name:"YES",_hx_index:2,__enum__:"ConfirmResult",toString:$estr}
	,NO: {_hx_name:"NO",_hx_index:3,__enum__:"ConfirmResult",toString:$estr}
};
ConfirmResult.__constructs__ = [ConfirmResult.IDLE,ConfirmResult.WAIT,ConfirmResult.YES,ConfirmResult.NO];
var TabMisc = function() {
};
$hxClasses["TabMisc"] = TabMisc;
TabMisc.__name__ = "TabMisc";
TabMisc.prototype = {
	__class__: TabMisc
};
var EventView = function() {
	this.activeEventCount = 5;
	this.eventElements = [];
};
$hxClasses["EventView"] = EventView;
EventView.__name__ = "EventView";
EventView.prototype = {
	initEventElements: function(number,layout,ui) {
		var e = new UIElement();
		var self = e.transform.size;
		self.x = 145;
		self.y = 14;
		e.text = "Dropped Equipment";
		e.textFont = "main14";
		e.style.color = GRIView.COLOR_TEXT_NORMAL;
		ui.addElementInLayoutId(e,layout);
		while(this.eventElements.length < number) {
			var e = new UIElement();
			var self = e.transform.size;
			self.x = 145;
			self.y = 14;
			e.text = "";
			e.style.color = GRIView.COLOR_TEXT_NORMAL;
			ui.addElementInLayoutId(e,layout);
			this.eventElements.push(e);
		}
	}
	,addEvent: function(text,ui) {
		var _g = 0;
		var _g1 = this.eventElements.length;
		while(_g < _g1) {
			var i = _g++;
			if(i == this.eventElements.length - 1) {
				ui.elementText(this.eventElements[this.eventElements.length - i - 1],text,true);
			} else {
				ui.elementText(this.eventElements[this.eventElements.length - i - 1],this.eventElements[this.eventElements.length - i - 2].text,true);
			}
		}
	}
	,__class__: EventView
};
var GRIView = function() {
	this.timeAccumulated = 0;
	this.mainCharacterName = "You";
	this.spine = new SpineManager();
	this.dialogMiscTag = "dialogmisc";
	this.lootList = new EventView();
	this.tabTags = [];
	this.tabMisc = new haxe_ds_StringMap();
	this.tabCursorGroup = new CursorGroup(true);
	this.setCursorGroup = new CursorGroup();
	this.dialogCursorGroup = new CursorGroup();
	this.upperCursorGroup = new CursorGroup();
	this.mainCursorGroup = new CursorGroup();
	this.highlightedImages = [];
	this.highlightedButtons = [];
	this.cursorTransform = new XTransform();
	this.ui = new UIElementManager(6);
	this.uiCreation = new UICreation(this.ui);
	this.equipView = new GRIViewEquip(this);
	var v = this.upperCursorGroup;
	this.mainCursorGroup.noElementActivateGroup.set(Direction.NORTH,v);
	var v = this.setCursorGroup;
	this.mainCursorGroup.noElementActivateGroup.set(Direction.SOUTH,v);
	var v = this.mainCursorGroup;
	this.setCursorGroup.noElementActivateGroup.set(Direction.NORTH,v);
	var v = this.mainCursorGroup;
	this.upperCursorGroup.noElementActivateGroup.set(Direction.SOUTH,v);
	var v = this.tabCursorGroup;
	this.upperCursorGroup.noElementActivateGroup.set(Direction.NORTH,v);
	this.upperCursorGroup.cancelGroup = this.tabCursorGroup;
	this.mainCursorGroup.cancelGroup = this.tabCursorGroup;
	this.griEffects = new GRIEffects(this.spine,this);
};
$hxClasses["GRIView"] = GRIView;
GRIView.__name__ = "GRIView";
GRIView.prototype = {
	update: function(miliseconds,mouse) {
		this.ui.Update(miliseconds,mouse);
		this.timeAccumulated += miliseconds;
		var _g_current = 0;
		var _g_array = this.highlightedButtons;
		while(_g_current < _g_array.length) {
			var _g1_value = _g_array[_g_current];
			var _g1_key = _g_current++;
			var index = _g1_key;
			var value = _g1_value;
			var period = 400;
			var active = this.timeAccumulated % period < period / 2;
			if(active) {
				value.style.border = 5;
				value.style.borderColor = GRIView.COLOR_ACTIVE_RED;
				value.style.colorText = GRIView.COLOR_ACTIVE_RED;
			} else {
				value.style.border = 0;
				value.style.colorText = GRIView.COLOR_ACTIVE_PINK;
			}
		}
		var _g_current = 0;
		var _g_array = this.highlightedImages;
		while(_g_current < _g_array.length) {
			var _g1_value = _g_array[_g_current];
			var _g1_key = _g_current++;
			var index = _g1_key;
			var value = _g1_value;
			var period = 400;
			var active = this.timeAccumulated % period < period / 2;
			if(active) {
				value.style.color = GRIView.COLOR_ACTIVE_RED;
			} else {
				value.style.color = GRIView.COLOR_ACTIVE_PINK;
			}
		}
		this.spine.update(miliseconds / 1000);
		this.griEffects.update();
		var _g = 0;
		var _g1 = this.ui.dataEvents;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			if(data.stringData == "dialogyes") {
				this.dialogResult = ConfirmResult.YES;
				if(this.automaticCloseDialog) {
					this.automaticCloseDialog = false;
					this.endDialog();
				}
			}
			if(data.stringData == "dialogno") {
				this.dialogResult = ConfirmResult.NO;
				if(this.automaticCloseDialog) {
					this.automaticCloseDialog = false;
					this.endDialog();
				}
			}
			if(this.tabTags.indexOf(data.stringData) != -1) {
				this.showTab(data.stringData);
			}
		}
		var biggest = this.ui.biggestHoveredElement;
		if(biggest != null) {
			var speed = 2.5;
			if(UIElementManager.latestDeviceThatHovered == Device.MOUSE) {
				speed = 300;
			}
			var this1 = this.cursorTransform.position;
			var targetX = biggest.transform.position.x - 1;
			var targetY = biggest.transform.position.y - 1;
			var distance = miliseconds * speed;
			var disX = targetX - this1.x;
			var disY = targetY - this1.y;
			var disSq = disX * disX + disY * disY;
			if(disSq < distance * distance) {
				this1.x = targetX;
				this1.y = targetY;
			} else {
				var dis = Math.sqrt(disSq);
				var dirX = disX / dis;
				var dirY = disY / dis;
				this1.x += dirX * distance;
				this1.y += dirY * distance;
			}
			this.cursorTransform.size.x = biggest.transform.size.x + 2;
			this.cursorTransform.size.y = biggest.transform.size.y + 2;
		}
	}
	,showTab: function(tab) {
		this.currentTab = tab;
		this.tabCursorGroup.firstElement = this.ui.getElement(tab);
		var v = null;
		this.tabCursorGroup.noElementActivateGroup.set(Direction.SOUTH,v);
		var _g_current = 0;
		var _g_array = this.tabTags;
		while(_g_current < _g_array.length) {
			var _g1_value = _g_array[_g_current];
			var _g1_key = _g_current++;
			var index = _g1_key;
			var value = _g1_value;
			this.ui.tagVisibility(value,value == tab);
			this.ui.getElement(value).selected = value == tab;
		}
		if(Object.prototype.hasOwnProperty.call(this.tabMisc.h,tab)) {
			if(this.tabMisc.h[tab].initialCursorGroup != null) {
				this.ui.enterCursorGroup(this.tabMisc.h[tab].initialCursorGroup);
				var v = this.tabMisc.h[tab].initialCursorGroup;
				this.tabCursorGroup.noElementActivateGroup.set(Direction.SOUTH,v);
			}
		}
	}
	,tabAccessible: function(tab,access) {
		this.ui.elementVisibility(tab,access);
	}
	,render: function(buttonBindings) {
		if(this.loading) {
			XTextRender.drawTextSingleLine("LOADING","main16",Renderer.width / 2,Renderer.height / 2,0.5,0.5,GRIView.COLOR_TEXT_NORMAL,null,0,-1);
			return;
		}
		this.ui.renderElementsInLayer(0);
		this.ui.renderElementsInLayer(1);
		var biggest = this.ui.biggestHoveredElement;
		if(biggest != null) {
			if(biggest.tags.indexOf(GRIViewTitle.TAG_TITLE_LOGO) == -1) {
				Renderer.drawRect(this.cursorTransform,GRIView.COLOR_TEXT_NORMAL,1,null);
			}
		}
		var map = this.ui.keyboardManager.buttonPressToElementTrigger;
		var _g_map = map;
		var _g_keys = map.keys();
		while(_g_keys.hasNext()) {
			var key = _g_keys.next();
			var _g1_value = _g_map.get(key);
			var _g1_key = key;
			var index = _g1_key;
			var value = _g1_value;
			if(this.ui.isVisible(value) && value.enabled) {
				var _this = value.transform;
				var x = _this.position.x + _this.size.x - 7;
				var _this1 = value.transform;
				var y = _this1.position.y + _this1.size.y + 5;
				Renderer.NinePatchS(new NinePatch(12,"buttonkey",32),x - 16,y - 16,32,32,16777215,12,null);
				var _g = 0;
				var _g1 = buttonBindings.bindings;
				while(_g < _g1.length) {
					var binding = _g1[_g];
					++_g;
					if(binding.button == index) {
						var key1 = binding.key;
						if(key1 < 10000) {
							var fromCode = String.fromCodePoint(key1);
							XTextRender.drawTextSingleLine(fromCode,"main",x,y - 3,0.5,0.5,GRIView.COLOR_TEXT_NORMAL,null,0,-1);
						}
					}
				}
			}
		}
	}
	,postRender: function() {
		this.ui.renderElementsInLayer(2);
		this.ui.renderElementsInLayer(3);
		this.ui.renderElementsInLayer(4);
	}
	,backgroundElement: function(layoutId,archetype,tag,fitChildren) {
		if(fitChildren == null) {
			fitChildren = true;
		}
		if(archetype == null) {
			archetype = "";
		}
		var e = new UIElement();
		var margin = null;
		if(archetype == GRIView.ARCHETYPE_BG_DEFAULT) {
			e.style.color = GRIView.COLOR_BACKGROUND;
			e.style.border = 2;
			e.style.fill = true;
			e.style.borderColor = GRIView.COLOR_OUTLINE;
			margin = new Rect(10,20,10,20);
		}
		if(archetype == GRIView.ARCHETYPE_BG_SIMPLE) {
			e.style.color = GRIView.COLOR_BACKGROUND_GRAY;
			e.style.fill = true;
		}
		if(tag != null) {
			e.tags.push(tag);
		}
		this.uiCreation.addBackground(e,layoutId,margin,fitChildren);
		return e;
	}
	,setupMisc: function() {
		this.uiCreation.tags.length = 0;
		this.uiCreation.activeLayer = GRIView.LAYER_HOVER;
		this.backgroundElement(GRIView.LAYOUT_HOVER,GRIView.ARCHETYPE_BG_DEFAULT,GRIView.LAYOUT_HOVER);
		var header = this.addText("","Header",GRIView.ARCHETYPE_HEADER_HOVER,GRIView.LAYOUT_HOVER,GRIView.LAYOUT_HOVER,true);
		var mainText = this.addText("","Info",GRIView.ARCHETYPE_IMPORTANT_TIMID,GRIView.LAYOUT_HOVER,GRIView.LAYOUT_HOVER,true);
		this.ui.hover.hoverView = new HoverView(header,mainText,GRIView.LAYOUT_HOVER,GRIView.LAYOUT_HOVER);
		this.ui.tagVisibility(GRIView.LAYOUT_HOVER,false);
		this.actorHoverView = new ActorView(GRIView.LAYOUT_HOVER_ACTOR);
		this.actorHoverView.tagId = GRIView.TAG_HOVER_ACTOR;
		this.backgroundElement(GRIView.LAYOUT_HOVER_ACTOR,GRIView.ARCHETYPE_BG_DEFAULT,GRIView.TAG_HOVER_ACTOR);
		this.ui.tagVisibility(GRIView.TAG_HOVER_ACTOR,false);
		this.uiCreation.activeLayer = GRIView.LAYER_DEFAULT;
		this.uiCreation.tags.length = 0;
		this.errorButton = this.addButton("error","Error Happened\n( click to show )",null,"lowerbuttons");
	}
	,setupTitleTabButtons: function() {
		this.uiCreation.tags.length = 0;
		var button = this.addButton(GRIView.tagTabTitle,"Title",GRIView.ARCHETYPE_BUTTON_TAB,"tabbutton",GRIView.TAG_TAB_BUTTON,this.tabCursorGroup);
		this.tabTags.push(GRIView.tagTabTitle);
		var _g_current = 0;
		var _g_array = this.tabTags;
		while(_g_current < _g_array.length) {
			var _g1_value = _g_array[_g_current];
			var _g1_key = _g_current++;
			var index = _g1_key;
			var value = _g1_value;
			if(Object.prototype.hasOwnProperty.call(this.tabMisc.h,value) == false) {
				var this1 = this.tabMisc;
				var v = new TabMisc();
				this1.h[value] = v;
			}
		}
	}
	,setupTabButtons: function() {
		this.addButton(GRIView.tagTabRegion,"Region",GRIView.ARCHETYPE_BUTTON_TAB,"tabbutton",GRIView.TAG_TAB_BUTTON,this.tabCursorGroup);
		this.addButton(GRIView.tagTabBattle,"Battle",GRIView.ARCHETYPE_BUTTON_TAB,"tabbutton",GRIView.TAG_TAB_BUTTON,this.tabCursorGroup);
		this.addButton(GRIView.tagTabEquip,"Equipment",GRIView.ARCHETYPE_BUTTON_TAB,"tabbutton",GRIView.TAG_TAB_BUTTON,this.tabCursorGroup);
		this.addButton(GRIView.tagTabMemory,"Memory",GRIView.ARCHETYPE_BUTTON_TAB,"tabbutton",GRIView.TAG_TAB_BUTTON,this.tabCursorGroup);
		this.addButton(GRIView.tagTabCharacter,"Achievement",GRIView.ARCHETYPE_BUTTON_TAB,"tabbutton",GRIView.TAG_TAB_BUTTON,this.tabCursorGroup);
		this.addButton(GRIView.tagTabVillage,"Unknown",GRIView.ARCHETYPE_BUTTON_TAB,"tabbutton",GRIView.TAG_TAB_BUTTON,this.tabCursorGroup);
		this.tabTags.push(GRIView.tagTabVillage);
		this.tabTags.push(GRIView.tagTabRegion);
		this.tabTags.push(GRIView.tagTabBattle);
		this.tabTags.push(GRIView.tagTabEquip);
		this.tabTags.push(GRIView.tagTabMemory);
		this.tabTags.push(GRIView.tagTabCharacter);
		var _g_current = 0;
		var _g_array = this.tabTags;
		while(_g_current < _g_array.length) {
			var _g1_value = _g_array[_g_current];
			var _g1_key = _g_current++;
			var index = _g1_key;
			var value = _g1_value;
			if(Object.prototype.hasOwnProperty.call(this.tabMisc.h,value) == false) {
				var this1 = this.tabMisc;
				var v = new TabMisc();
				this1.h[value] = v;
			}
		}
	}
	,setupBattleActors: function() {
		var heroX = 69;
		var heroY = 121;
		var enemyX = 600;
		var enemyY = 100;
		this.heroBattleView = this.addActorViewBattleHero(heroX,heroY);
		this.enemyBattleView = this.addActorViewBattleEnemy(enemyX,enemyY);
		this.heroBattleView.skeleton.xDirection = 0.3;
		this.enemyBattleView.skeleton.xDirection = -0.3;
		this.levelLabel = this.addText("levellabel","Level Z",GRIView.ARCHETYPE_HEADER_TIMID,null);
		this.xpBar = this.addBar(heroX + 52,heroY + 120,"xp",GRIView.ARCHETYPE_BAR_TIMID,"heroBattleXPbar",null);
		this.uiCreation.addElement(this.levelLabel);
		var self = this.levelLabel.transform.position;
		self.x = heroX + 255;
		self.y = heroY + 105;
		this.areaMessage = this.addText("areamessage","TEST",GRIView.ARCHETYPE_SIMPLE_LARGE,null);
		this.uiCreation.addElement(this.areaMessage);
		var self = this.areaMessage.transform.position;
		self.x = enemyX + 20;
		self.y = enemyY + 40;
		var self = this.areaMessage.transform.size;
		self.x = 300;
		self.y = 80;
	}
	,FeedAreaNames: function(areaNames,currentArea) {
	}
	,setupMiscBattle: function() {
		this.uiCreation.tags.length = 0;
		this.littleBattle = new LittleBattleWidget(this);
		this.uiCreation.tags.push(GRIView.tagTabBattle);
		this.lootList.initEventElements(5,"log",this.uiCreation);
		var e = this.backgroundElement("area",GRIView.ARCHETYPE_BG_SIMPLE,null,false);
		var retreat = this.addButtonImage("retreat",Sprite.create("arrowleft",25,13),GRIView.ARCHETYPE_BUTTON_SMALL,null,null,null,this.upperCursorGroup);
		this.uiCreation.offsetElement(retreat,e,0,0,0,0,false,false);
		var advance = this.addButtonImage("advance",Sprite.create("arrowleft",25,13),GRIView.ARCHETYPE_BUTTON_SMALL,null,null,true,this.upperCursorGroup);
		this.uiCreation.offsetElement(advance,e,1,0,0,0,false,false);
		this.advanceButton = advance;
		this.advanceButtonImage = this.ui.getElement("advance-image");
		this.upperCursorGroup.firstElement = advance;
		var repeat = this.addButtonImage("repeat",Sprite.create("arrowrepeat",20,17),GRIView.ARCHETYPE_BUTTON_SMALL,"subbuttons",null,true,this.upperCursorGroup);
		var autoRepeat = this.addButtonImage("autorepeat",Sprite.create("arrowrepeatauto",20,17),GRIView.ARCHETYPE_BUTTON_SMALL,"subbuttons",null,true,this.upperCursorGroup);
		this.areaElement = this.addText("areatext","AREA",GRIView.ARCHETYPE_HEADER_TIMID,null,null,false);
		this.areaElement.textPivot.x = 0.5;
		this.areaProgressElement = this.addText("areatext","AREAPROG",GRIView.ARCHETYPE_SIMPLE_TIMID,null,null,false);
		this.uiCreation.addWithOffset(this.areaElement,e,0.5,0,0,2);
		this.uiCreation.addWithOffset(this.areaProgressElement,e,0.5,0,0,15);
		var autoAdv = this.addButtonImage("autoadvance",Sprite.create("arrowlefttriple",30,13),GRIView.ARCHETYPE_BUTTON_SMALL,"subbuttons",null,true,this.upperCursorGroup);
		this.ui.hover.setHoverGeneric(autoAdv,"Auto Advance","Automatically advance to the next area\n once complete","LOCKED","Your level is not high enough to use this");
		this.ui.hover.setHoverGeneric(autoRepeat,"Auto Repeat","Automatically repeat the area once there are no more enemies","LOCKED","Your level is not high enough to use this");
		this.setView = new GRISetView(5,GRIView.LAYOUT_SET,this,this.setCursorGroup);
	}
	,setupDialog: function() {
		var e = this.addText("dialogtitle","Title",GRIView.ARCHETYPE_HEADER,"dialogbutton");
		e.textFont = "main16";
		e.tags.push("dialog");
		this.addText("dialogdesc","Description",GRIView.ARCHETYPE_SIMPLE_MEDIUM,"dialogbutton").tags.push("dialog");
		var byes = this.addButton("dialogyes","Soul\nCrush","mainbutton","dialogbutton");
		byes.tags.push("dialog");
		var bno = this.addButton("dialogno","Cancel","mainbutton","dialogbutton");
		bno.tags.push("dialog");
		this.dialogCursorGroup.elements.push(byes);
		this.dialogCursorGroup.elements.push(bno);
		this.ui.invisibleTags.push("dialog");
	}
	,showDialog: function(warning,automaticClose) {
		if(automaticClose == null) {
			automaticClose = false;
		}
		this.automaticCloseDialog = automaticClose;
		this.ui.elementTextId("dialogdesc",warning.description,true);
		this.ui.elementTextId("dialogtitle",warning.title,true);
		this.ui.elementTextId("dialogyes",warning.buttonYes);
		this.ui.elementTextId("dialogno",warning.buttonFalse);
		this.ui.elementVisibility("dialogno",warning.buttonFalse != null);
		this.ui.hogInput("dialog");
		this.ui.hogVisibility("dialog");
		this.dialogResult = ConfirmResult.WAIT;
		HxOverrides.remove(this.ui.invisibleTags,"dialog");
		HxOverrides.remove(this.ui.invisibleTags,"dialog");
		this.ui.genUI.updateAll();
		this.dialogData = null;
		this.ui.enterCursorGroup(this.dialogCursorGroup);
	}
	,endDialog: function() {
		this.ui.endInputHog();
		this.ui.endVisibilityHog();
		this.dialogResult = ConfirmResult.IDLE;
		if(this.ui.invisibleTags.indexOf("dialog") != -1 == false) {
			this.ui.invisibleTags.push("dialog");
		}
		haxe_Log.trace("END DIALOG",{ fileName : "Sources\\GRI/GRIView.hx", lineNumber : 530, className : "GRIView", methodName : "endDialog"});
		if(this.ui.keyboardManager.currentCursorGroup == this.dialogCursorGroup) {
			this.ui.returnCursorGroup();
		}
	}
	,addText: function(id,label,archetype,layoutId,tag,fitLayoutWidth) {
		if(fitLayoutWidth == null) {
			fitLayoutWidth = false;
		}
		var text = new UIElement();
		text.id = id;
		text.data.stringData = id;
		text.text = label;
		text.transform.size.y = 12;
		if(archetype == GRIView.ARCHETYPE_HEADER_HOVER || archetype == GRIView.ARCHETYPE_IMPORTANT_TIMID || archetype == GRIView.ARCHETYPE_SIMPLE_MEDIUM || archetype == GRIView.ARCHETYPE_HEADER_TIMID) {
			text.textFont = "main14";
			var self = text.textPivot;
			self.x = 0;
			self.y = 0.5;
		}
		if(archetype == GRIView.ARCHETYPE_SIMPLE_LARGE) {
			text.textFont = "main16";
		}
		text.style.color = GRIView.COLOR_TEXT_NORMAL;
		if(archetype == GRIView.ARCHETYPE_HEADER) {
			text.style.color = GRIView.COLOR_TEXT_HEADER;
		}
		if(archetype == GRIView.ARCHETYPE_TEXT_ACTION) {
			text.style.color = GRIView.COLOR_TEXT_ACTION;
		}
		if(tag != null) {
			text.tags.push(tag);
		}
		if(layoutId != null) {
			this.uiCreation.addElementInLayoutId(text,layoutId,fitLayoutWidth);
		}
		return text;
	}
	,addActorViewBattleHero: function(x,y) {
		var tag = "herobattleview";
		var mainElementsOffsetX = 15;
		var mainElementsOffsetY = 16;
		return this.addActorViewBattle(x,y,mainElementsOffsetX,mainElementsOffsetY,tag,268,0);
	}
	,addActorViewBattleEnemy: function(x,y) {
		var tag = "enemybattleview";
		var mainElementsOffsetX = 15;
		var mainElementsOffsetY = 24;
		return this.addActorViewBattle(x,y,mainElementsOffsetX,mainElementsOffsetY,tag,-120,0);
	}
	,addActorViewBattle: function(x,y,mainElementsOffsetX,mainElementsOffsetY,tag,iconXOff,iconYOff) {
		var mainX = x + mainElementsOffsetX;
		var mainY = y + mainElementsOffsetY;
		var header;
		var e = new UIElement();
		e.tags.push(tag);
		e.transform.set(mainX,mainY,-1,20);
		e.text = this.mainCharacterName;
		e.textFont = "main16";
		var self = e.textPivot;
		self.x = 0;
		self.y = 0;
		this.uiCreation.addElement(e);
		header = e;
		var actorIcon;
		var actorIconText;
		var im = this.uiCreation.createImageElement(null,107,107);
		this.uiCreation.addElement(im);
		im.transform.set_x(x + iconXOff);
		im.transform.set_y(y + iconYOff);
		actorIcon = im;
		var txt = this.addText("","",GRIView.ARCHETYPE_HEADER,null);
		this.uiCreation.addElement(txt);
		var self = txt.textPivot;
		self.x = 0.5;
		self.y = 0.5;
		var this1 = txt.transform.position;
		var x = im.transform.get_x() + 53.5;
		var y = im.transform.get_y() + 53.5;
		var self = this1;
		self.x = x;
		self.y = y;
		actorIconText = txt;
		var hpBar = this.addBar(mainX,mainY + 24,"hp","heroBattleHPbar","heroBattleHPbar",tag);
		var mpBar = this.addBar(mainX,mainY + 24 + 31,"mp","heroBattleMPbar","heroBattleMPbar",tag);
		this.ui.hover.setHoverGeneric(mpBar.barBack,"MP",ActorViewLogic.AttributeExplanation.h["MPMax"],"","");
		this.ui.hover.setHoverGeneric(hpBar.barBack,"Life",ActorViewLogic.AttributeExplanation.h["LifeMax"],"","");
		var skeletonU = this.spine.addAndBind(actorIcon,GRIEffects.SPINE_ACTOR,"root",null);
		return { mainName : header, hpBar : hpBar, mpBar : mpBar, tag : tag, buffs : [], icon : actorIcon, iconText : actorIconText, skeleton : skeletonU};
	}
	,addBar: function(x,y,leftText,archetype,tag,parentTag,offsetParent) {
		var w = 230;
		var h = 26;
		var border = 3;
		var BAR_MEDIUM_WIDTH = 120;
		var BAR_SMALL_HEIGHT = 12;
		var colorFill = -1;
		if(archetype == GRIView.ARCHETYPE_BAR_MINI) {
			w = 110;
			h = 9;
			border = 1;
		}
		if(archetype == GRIView.ARCHETYPE_BAR_TIMID) {
			h = 12;
			w = 250;
			border = 3;
			colorFill = GRIView.COLOR_BAR_XP;
		}
		if(archetype == GRIView.ARCHETYPE_BAR_XP2) {
			h = BAR_SMALL_HEIGHT;
			w = BAR_MEDIUM_WIDTH;
			colorFill = GRIView.COLOR_BAR_XP;
			var border1 = 3;
		}
		if(archetype == GRIView.ARCHETYPE_BAR_TIME) {
			h = BAR_SMALL_HEIGHT;
			w = BAR_MEDIUM_WIDTH;
			colorFill = GRIView.COLOR_BAR_TIME;
			var border1 = 3;
		}
		if(archetype == GRIView.ARCHETYPE_BAR_POINT) {
			h = BAR_SMALL_HEIGHT;
			w = BAR_MEDIUM_WIDTH;
			colorFill = GRIView.COLOR_BACKGROUND_GRAY;
			var border1 = 3;
		}
		var barView = { barTag : tag, barMaxSize : w - border * 2};
		var e = new UIElement();
		e.tags.push(tag);
		e.tags.push(parentTag);
		e.transform.set(x,y,w,h);
		e.style.color = GRIView.COLOR_BLACK;
		e.style.fill = true;
		barView.barBack = e;
		if(offsetParent == null) {
			this.uiCreation.addElement(e);
		} else {
			this.uiCreation.addWithOffset(e,offsetParent,0,0,e.transform.position.x,e.transform.position.y);
		}
		var e = new UIElement();
		e.tags.push(parentTag);
		e.tags.push(tag);
		e.transform.set(x + border,y + border,w - border * 2,h - border * 2);
		e.style.sprite = GRIView.SPRITE_GREENGRAD;
		if(archetype == "heroBattleMPbar") {
			e.style.sprite = GRIView.SPRITE_BLUEGRAD;
		}
		if(colorFill >= 0) {
			e.style.sprite = null;
			e.style.fill = true;
			e.style.color = colorFill;
		}
		barView.barPortion = e;
		if(offsetParent == null) {
			this.uiCreation.addElement(e);
		} else {
			this.uiCreation.addWithOffset(e,offsetParent,0,0,e.transform.position.x,e.transform.position.y);
		}
		var e = new UIElement();
		e.tags.push(parentTag);
		e.tags.push(tag);
		e.transform.set(x + border + 4,y,w,h);
		var self = e.textPivot;
		self.x = 0;
		self.y = 0.5;
		e.text = leftText;
		barView.leftText = e;
		if(offsetParent == null) {
			this.uiCreation.addElement(e);
		} else {
			this.uiCreation.addWithOffset(e,offsetParent,0,0,e.transform.position.x,e.transform.position.y);
		}
		var e = new UIElement();
		e.tags.push(parentTag);
		e.tags.push(tag);
		e.transform.set(x,y,w,h);
		e.text = "";
		e.textFont = "main14";
		var self = e.textPivot;
		self.x = 0.5;
		self.y = 0.5;
		if(archetype == GRIView.ARCHETYPE_BAR_TIMID) {
			e.style.color = GRIView.COLOR_TEXT_NORMAL;
			e.textFont = "main";
		}
		barView.mainText = e;
		if(offsetParent == null) {
			this.uiCreation.addElement(e);
		} else {
			this.uiCreation.addWithOffset(e,offsetParent,0,0,e.transform.position.x,e.transform.position.y);
		}
		return barView;
	}
	,addButtonImage: function(id,img,archetype,layoutId,tag,horizontalInvert,cursorGroup,widthIcon,heightIcon) {
		if(heightIcon == null) {
			heightIcon = -1;
		}
		if(widthIcon == null) {
			widthIcon = -1;
		}
		if(horizontalInvert == null) {
			horizontalInvert = false;
		}
		var button = new UIElement();
		var button = this.addButton(id,"",archetype,layoutId,tag,cursorGroup);
		var icon = new UIElement();
		icon.id = id + "-image";
		icon.managedState = false;
		icon.style.sprite = img;
		icon.styleHover = new Style();
		icon.styleDisabled = new Style();
		icon.styleSelected = new Style();
		icon.style.color = GRIView.COLOR_ACTIVE_PINK;
		icon.styleDisabled.color = GRIView.COLOR_DISABLED_BUTTON;
		icon.styleSelected.color = GRIView.COLOR_ACTIVE_BLUE;
		icon.styleHover.color = GRIView.COLOR_ACTIVE_BLUE;
		icon.styleHover.sprite = img;
		icon.styleDisabled.sprite = img;
		icon.styleSelected.sprite = img;
		if(tag != null) {
			icon.tags.push(tag);
		}
		icon.transform.size.x = img.rect.width;
		if(horizontalInvert) {
			icon.transform.size.x *= -1;
		}
		icon.transform.size.y = img.rect.height;
		if(widthIcon > 0) {
			icon.transform.size.x = widthIcon;
		}
		if(heightIcon > 0) {
			icon.transform.size.y = heightIcon;
		}
		this.uiCreation.offsetElement(icon,button,0.5,0.5,0,0,false,true);
		this.uiCreation.addElement(icon);
		return button;
	}
	,addButton: function(id,label,archetype,layoutId,tag,cursorGroup) {
		var button = new UIElement();
		button.id = id;
		button.data.stringData = id;
		button.style.ninePatch = new NinePatch(4,"button9a",32);
		var self = button.transform.size;
		self.x = 145;
		self.y = 45;
		if(archetype == "equipbutton") {
			var self = button.transform.size;
			self.x = 240;
			self.y = 40;
		}
		if(archetype == GRIView.ARCHETYPE_BUTTON_SMALL) {
			var self = button.transform.size;
			self.x = 45;
			self.y = 30;
		}
		if(archetype == GRIView.ARCHETYPE_BUTTON_MEDIUM) {
			button.textFont = "main14";
			button.transform.size.x += 20;
			button.transform.size.y += 10;
		}
		button.style.colorText = GRIView.COLOR_ACTIVE_PINK;
		button.styleHover = new Style();
		button.styleHover.ninePatch = new NinePatch(4,"button9a",32);
		button.styleHover.colorText = GRIView.COLOR_ACTIVE_PINK2;
		button.styleHover.sprite = Sprite.create("buttonback_h",32,32);
		if(archetype == GRIView.ARCHETYPE_BUTTON_TAB) {
			var self = button.transform.size;
			self.x = 140;
			self.y = 35;
			button.styleHover.ninePatch = null;
			button.style.ninePatch = null;
			button.styleSelected = new Style();
			button.styleSelected.color = GRIView.COLOR_TAB_HOVER;
			button.styleSelected.sprite = new Sprite("tabback",32);
			button.styleSelectedHover = button.styleHover.clone();
			button.styleSelectedHover.color = 16777215;
		} else {
			button.style.sprite = Sprite.create("buttonback",32,32);
		}
		button.text = label;
		button.styleDisabled = new Style();
		button.styleDisabled.border = 2;
		button.styleDisabled.borderColor = GRIView.COLOR_DISABLED_BUTTON;
		button.styleDisabled.colorText = GRIView.COLOR_DISABLED_BUTTON;
		button.styleDisabledHover = button.styleDisabled.clone();
		button.styleDisabledHover.sprite = Sprite.create("buttonback_h_disabled",32,32);
		if(button.styleSelected == null) {
			button.styleSelected = new Style();
			button.styleSelected.color = GRIView.COLOR_TAB_HOVER;
			button.styleSelected.ninePatch = new NinePatch(4,"buttonselec9a",32);
			button.styleSelectedHover = button.styleSelected.clone();
			button.styleSelectedHover.sprite = Sprite.create("buttonback_h",32,32);
			button.styleSelected.sprite = Sprite.create("buttonback",32,32);
		}
		if(tag != null) {
			button.tags.push(tag);
		}
		if(button.stylePressed == null) {
			button.stylePressed = new Style();
			button.stylePressed.borderColor = button.style.borderColor;
			button.stylePressed.border = button.style.border;
			button.stylePressed.fill = true;
			button.stylePressed.color = button.style.colorText;
			button.stylePressed.colorText = GRIView.COLOR_BACKGROUND;
		}
		if(layoutId != null) {
			this.uiCreation.addElementInLayoutId(button,layoutId);
		} else {
			this.uiCreation.addElement(button);
		}
		if(cursorGroup != null) {
			cursorGroup.elements.push(button);
		}
		return button;
	}
	,renderError: function(message) {
		XTextRender.drawTextMultiLine(message,"main",4,4,Renderer.width - 20);
	}
	,massClickable: function(arg0,massClickable) {
		if(massClickable) {
			arg0.massEventStartTime = 400;
		} else {
			arg0.massEventStartTime = -1;
		}
	}
	,__class__: GRIView
};
var StatView = function() {
};
$hxClasses["StatView"] = StatView;
StatView.__name__ = "StatView";
StatView.prototype = {
	__class__: StatView
};
var StatMetaInfo = function(intAsText) {
	this.intAsText = intAsText;
};
$hxClasses["StatMetaInfo"] = StatMetaInfo;
StatMetaInfo.__name__ = "StatMetaInfo";
StatMetaInfo.prototype = {
	__class__: StatMetaInfo
};
var StatViewCreatorGRI = function() { };
$hxClasses["StatViewCreatorGRI"] = StatViewCreatorGRI;
StatViewCreatorGRI.__name__ = "StatViewCreatorGRI";
StatViewCreatorGRI.create = function(griView,layoutId,withIcon) {
	if(withIcon == null) {
		withIcon = false;
	}
	var uiCreation = griView.uiCreation;
	var headerX = 3;
	if(withIcon) {
		headerX += 13;
	}
	var sv = new StatView();
	sv.parent = UICreation.createEmptyElement(275,14);
	sv.parent.style.fill = true;
	sv.parent.style.color = 131586;
	sv.headerText = griView.addText("","Header",GRIView.ARCHETYPE_HEADER_STAT,null);
	var self = sv.headerText.transform.size;
	self.x = 300;
	self.y = 12;
	var self = sv.headerText.textPivot;
	self.x = 0;
	self.y = 0.5;
	sv.statText = griView.addText("","998","statvalue",null);
	var self = sv.statText.transform.size;
	self.x = 60;
	self.y = 12;
	var self = sv.statText.textPivot;
	self.x = 1;
	self.y = 0.5;
	sv.statTextAfter = griView.addText("","999","statvalueafter",null);
	var self = sv.statTextAfter.transform.size;
	self.x = 0;
	self.y = 80;
	var self = sv.statTextAfter.textPivot;
	self.x = 1;
	self.y = 0.5;
	if(withIcon) {
		sv.headerIcon = griView.uiCreation.createImageElement(null,11,11);
	}
	uiCreation.addElementInLayoutId(sv.parent,layoutId);
	uiCreation.addWithOffset(sv.headerText,sv.parent,0,0.5,headerX,0,false,false);
	uiCreation.addWithOffset(sv.statText,sv.parent,0,0.5,180,0,false,false);
	uiCreation.addWithOffset(sv.statTextAfter,sv.parent,0,0.5,270,0,false,false);
	if(sv.headerIcon != null) {
		uiCreation.addWithOffset(sv.headerIcon,sv.parent,0,0.5,3,0);
	}
	return sv;
};
var ActorView = function(layoutId) {
	this.tagId = null;
	this.stats = [];
	this.layoutId = layoutId;
};
$hxClasses["ActorView"] = ActorView;
ActorView.__name__ = "ActorView";
ActorView.prototype = {
	__class__: ActorView
};
var ActorViewLogic = function() { };
$hxClasses["ActorViewLogic"] = ActorViewLogic;
ActorViewLogic.__name__ = "ActorViewLogic";
ActorViewLogic.feed = function(actor,actorView,griView,afterStats,setEquipNames,bm) {
	if(setEquipNames == null) {
		setEquipNames = -1;
	}
	var uiCreation = griView.uiCreation;
	if(actorView.tagId != null) {
		uiCreation.tags.push(actorView.tagId);
	}
	var statPos = 0;
	var h = actor.attributesCalculated.h;
	var _g_h = h;
	var _g_keys = Object.keys(h);
	var _g_length = _g_keys.length;
	var _g_current = 0;
	while(_g_current < _g_length) {
		var key = _g_keys[_g_current++];
		var _g1_key = key;
		var _g1_value = _g_h[key];
		var key1 = _g1_key;
		var attr = _g1_value;
		if(ActorViewLogic.ignoredStats.indexOf(key1) != -1) {
			continue;
		}
		var badStat = -103213;
		var afterStat = badStat;
		if(afterStats != null && Object.prototype.hasOwnProperty.call(afterStats.h,key1)) {
			afterStat = afterStats.h[key1];
		}
		if(attr == 0 && (afterStat == badStat || afterStat == 0)) {
			continue;
		}
		while(statPos >= actorView.stats.length) {
			var sv = StatViewCreatorGRI.create(griView,actorView.layoutId);
			actorView.stats.push(sv);
		}
		var attrText = null;
		var afterText = null;
		if(Object.prototype.hasOwnProperty.call(ActorViewLogic.attributeMetaData.h,key1)) {
			var meta = ActorViewLogic.attributeMetaData.h[key1];
			var text = meta.intAsText[attr];
			attrText = text;
			if(afterStat != badStat) {
				afterText = meta.intAsText[afterStat];
			}
		}
		if(attrText == null) {
			attrText = "" + attr;
		}
		if(afterText == null && afterStat != badStat) {
			afterText = "" + afterStat;
		}
		var sv1 = actorView.stats[statPos];
		sv1.headerText.text = key1;
		sv1.statText.text = attrText;
		sv1.headerText.visible = true;
		sv1.statText.visible = true;
		sv1.statTextAfter.visible = attr != afterStat && afterStat != badStat;
		if(Object.prototype.hasOwnProperty.call(ActorViewLogic.AttributeExplanation.h,key1)) {
			griView.ui.hover.setHoverGeneric(sv1.parent,key1,ActorViewLogic.AttributeExplanation.h[key1]);
		} else {
			griView.ui.hover.removeHover(sv1.parent);
		}
		if(sv1.statTextAfter.visible) {
			sv1.statTextAfter.text = afterText;
			if(attr > afterStat) {
				sv1.statTextAfter.style.color = 13245982;
			} else {
				sv1.statTextAfter.style.color = 11004149;
			}
		}
		++statPos;
	}
	if(setEquipNames >= 0) {
		while(statPos >= actorView.stats.length) {
			var sv = StatViewCreatorGRI.create(griView,actorView.layoutId);
			actorView.stats.push(sv);
		}
		var sv = actorView.stats[statPos];
		sv.headerText.text = "";
		sv.headerText.visible = false;
		sv.statText.visible = false;
		sv.statTextAfter.visible = false;
		++statPos;
		var es = actor.equipmentSets[setEquipNames].equipmentSlots;
		var _g_current = 0;
		var _g_array = es;
		while(_g_current < _g_array.length) {
			var _g1_value = _g_array[_g_current];
			var _g1_key = _g_current++;
			var index = _g1_key;
			var value = _g1_value;
			if(value >= 0) {
				while(statPos >= actorView.stats.length) {
					var sv = StatViewCreatorGRI.create(griView,actorView.layoutId);
					actorView.stats.push(sv);
				}
				var e = actor.equipment[value];
				var name = GRIControlEquip.GetEquipName(e,bm);
				var sv1 = actorView.stats[statPos];
				sv1.headerText.text = name;
				sv1.headerText.visible = true;
				sv1.statText.visible = false;
				sv1.statTextAfter.visible = false;
				++statPos;
			}
		}
	}
	var _g = statPos;
	var _g1 = actorView.stats.length;
	while(_g < _g1) {
		var i = _g++;
		var sv = actorView.stats[i];
		actorView.stats[i].headerText.visible = false;
		actorView.stats[i].statText.visible = false;
		actorView.stats[i].statTextAfter.visible = false;
		griView.ui.hover.removeHover(sv.parent);
	}
	if(actorView.tagId != null) {
		HxOverrides.remove(uiCreation.tags,actorView.tagId);
	}
};
var GRIViewCharacterTab = function() {
	this.achievementView = new GRIAchievementView(GRIViewCharacterTab.LAYOUT_ACHIEVEMENT);
};
$hxClasses["GRIViewCharacterTab"] = GRIViewCharacterTab;
GRIViewCharacterTab.__name__ = "GRIViewCharacterTab";
GRIViewCharacterTab.prototype = {
	setupView: function() {
	}
	,__class__: GRIViewCharacterTab
};
var CurrencyView = function() {
	this.currencies = [];
};
$hxClasses["CurrencyView"] = CurrencyView;
CurrencyView.__name__ = "CurrencyView";
CurrencyView.prototype = {
	__class__: CurrencyView
};
var CurrencyViewLogic = function() { };
$hxClasses["CurrencyViewLogic"] = CurrencyViewLogic;
CurrencyViewLogic.__name__ = "CurrencyViewLogic";
CurrencyViewLogic.update = function(view,viewGRI,bm) {
	var layoutId = view.layoutId;
	var currencyPos = 0;
	var h = bm.wdata.currency.currencies.h;
	var _g_h = h;
	var _g_keys = Object.keys(h);
	var _g_length = _g_keys.length;
	var _g_current = 0;
	while(_g_current < _g_length) {
		var key = _g_keys[_g_current++];
		var _g1_key = key;
		var _g1_value = _g_h[key];
		var key1 = _g1_key;
		var value = _g1_value;
		if(CurrencyViewLogic.visibleCurrencies.indexOf(key1) != -1) {
			while(view.currencies.length < currencyPos + 1) view.currencies.push(StatViewCreatorGRI.create(viewGRI,layoutId,true));
			view.currencies[currencyPos].headerText.text = key1;
			view.currencies[currencyPos].statText.text = value.value + "";
			view.currencies[currencyPos].statTextAfter.text = "";
			view.currencies[currencyPos].headerIcon.style.sprite = CurrencyViewLogic.currencyToSprite.h[key1];
			view.currencies[currencyPos].headerIcon.style.color = view.currencies[currencyPos].headerText.style.color;
			++currencyPos;
		}
	}
};
var GRIViewEquip = function(view) {
	this.equipment_MaxNumberPage = 1;
	this.equipment_CurrentPage = 0;
	this.cursor_sets = new CursorGroup();
	this.cursor_slots = new CursorGroup();
	this.cursor_items = new CursorGroup();
	this.cursor_mainAction = new CursorGroup();
	this.hover_tag = "equiphover";
	this.hover_Texts = [];
	this.equippedViews = [];
	this.equipmentViews = [];
	this.view = view;
};
$hxClasses["GRIViewEquip"] = GRIViewEquip;
GRIViewEquip.__name__ = "GRIViewEquip";
GRIViewEquip.prototype = {
	setup: function() {
		this.scroll = this.view.uiCreation.addScrollToLayout(GRIViewEquip.layoutIdEquip);
		this.scroll.viewport.style.color = 11184810;
		this.actorEquipView = new ActorView("equipactorview");
		this.currencyView = new CurrencyView();
		this.currencyView.layoutId = "equipcurrencyview";
		this.cursor_mainAction.cancelGroup = this.view.tabCursorGroup;
		this.view.tabMisc.h[GRIView.tagTabEquip].initialCursorGroup = this.cursor_mainAction;
		this.cursor_items.cancelGroup = this.cursor_mainAction;
		this.cursor_slots.cancelGroup = this.cursor_mainAction;
		var v = this.cursor_slots;
		this.cursor_items.noElementActivateGroup.set(Direction.WEST,v);
		var v = this.cursor_items;
		this.cursor_slots.noElementActivateGroup.set(Direction.EAST,v);
		var v = this.cursor_sets;
		this.cursor_mainAction.noElementActivateGroup.set(Direction.EAST,v);
		var v = this.cursor_slots;
		this.cursor_sets.noElementActivateGroup.set(Direction.SOUTH,v);
		var v = this.cursor_mainAction;
		this.cursor_sets.noElementActivateGroup.set(Direction.WEST,v);
		var v = this.cursor_slots;
		this.cursor_mainAction.noElementActivateGroup.set(Direction.SOUTH,v);
		var v = this.view.tabCursorGroup;
		this.cursor_mainAction.noElementActivateGroup.set(Direction.NORTH,v);
		var v = this.cursor_mainAction;
		this.cursor_slots.noElementActivateGroup.set(Direction.NORTH,v);
		var v = this.cursor_mainAction;
		this.cursor_items.noElementActivateGroup.set(Direction.NORTH,v);
		this.setView = new GRISetView(5,GRIViewEquip.layoutIdEquipSets,this.view,this.cursor_sets);
		this.view.uiCreation.tags.push(this.hover_tag);
		this.view.uiCreation.activeLayer = GRIView.LAYER_HOVER;
		this.view.backgroundElement(GRIViewEquip.layoutIdEquipHover,GRIView.ARCHETYPE_BG_DEFAULT);
		this.hover_Header = this.view.addText("hoverheader","HEADER",GRIView.ARCHETYPE_HEADER_HOVER,GRIViewEquip.layoutIdEquipHover,GRIViewEquip.layoutIdEquipHover);
		this.view.ui.genUI.fitWidthOfLayout(this.hover_Header,GRIViewEquip.layoutIdEquipHover);
		HxOverrides.remove(this.view.uiCreation.tags,this.hover_tag);
		this.view.uiCreation.activeLayer = GRIView.LAYER_DEFAULT;
		this.view.addButton(GRIViewEquip.DATA_EQUIP,"Equip",null,GRIViewEquip.LAYOUT_EQUIP_BUTTON_MISC,null,this.cursor_mainAction);
		this.view.addButton(GRIViewEquip.DATA_SELL,"Sell",null,GRIViewEquip.LAYOUT_EQUIP_BUTTON_MISC,null,this.cursor_mainAction);
		this.view.addButton(GRIViewEquip.DATA_SELL_WORSE,"Sell worse equipment",null,GRIViewEquip.LAYOUT_EQUIP_BUTTON_MISC,null,this.cursor_mainAction);
		this.view.addButton(GRIViewEquip.DATA_UPGRADE,"Upgrade",null,GRIViewEquip.LAYOUT_EQUIP_BUTTON_MISC,null,this.cursor_mainAction);
	}
	,equipmentTags: function() {
		this.view.uiCreation.tags.length = 0;
		this.view.uiCreation.tags.push(GRIView.tagTabEquip);
	}
	,feedEquipmentTypeNames: function(equipTypeNames) {
		this.equipmentTags();
		var _g = 0;
		var _g1 = equipTypeNames.length;
		while(_g < _g1) {
			var i = _g++;
			var e = this.view.addButton(GRIViewEquip.equippedViewIdPart + i,equipTypeNames[i],"equipbutton","equippedbuttons",null,this.cursor_slots);
			e.data.intData = i;
			this.equippedViews.push({ mainName : e, mainButton : e, specialElementIcon : null, specialHeader : null, specialElementText : null, tag : GRIViewEquip.equippedViewIdPart + i});
		}
	}
	,isSelected: function(absoluteEquipPos) {
		var fixedPos = this.EquipmentPosPageFix(absoluteEquipPos);
		if(fixedPos >= 0) {
			var equipV = this.equipmentViews[fixedPos];
			return equipV.mainButton.hovered.state;
		}
		return false;
	}
	,isEquippedSelectedThisFrame: function(slot) {
		var equipV = this.equippedViews[slot];
		return equipV.mainButton.hovered.trueThisFrame();
	}
	,isEquippedSelected: function(slot) {
		var equipV = this.equippedViews[slot];
		return equipV.mainButton.hovered.state;
	}
	,hoverOnEquippedButton: function(equippedPos) {
		var equipV = this.equippedViews[equippedPos];
		this.view.ui.genUI.layoutAsHover(equipV.mainButton,GRIViewEquip.layoutIdEquipHover);
		this.view.ui.tagVisibility(GRIViewEquip.layoutIdEquipHover,true);
	}
	,hoverOn: function(absoluteEquipPos) {
		var fixedPos = this.EquipmentPosPageFix(absoluteEquipPos);
		if(fixedPos >= 0) {
			var equipV = this.equipmentViews[fixedPos];
			this.view.ui.genUI.layoutAsHover(equipV.mainButton,GRIViewEquip.layoutIdEquipHover);
		}
		this.view.ui.tagVisibility(GRIViewEquip.layoutIdEquipHover,fixedPos >= 0);
	}
	,setEquipmentHoverInfo: function(text,pos) {
		this.view.uiCreation.tags.length = 0;
		while(this.hover_Texts.length <= pos) {
			this.equipmentTags();
			this.view.uiCreation.tags.push(this.hover_tag);
			this.view.uiCreation.activeLayer = GRIView.LAYER_HOVER;
			var e = this.view.addText("","Attr",GRIView.ARCHETYPE_IMPORTANT_TIMID,GRIViewEquip.layoutIdEquipHover,GRIViewEquip.layoutIdEquipHover);
			this.view.ui.genUI.fitWidthOfLayout(e,GRIViewEquip.layoutIdEquipHover);
			this.view.uiCreation.activeLayer = GRIView.LAYER_DEFAULT;
			this.hover_Texts.push(e);
		}
		var e = this.hover_Texts[pos];
		e.visible = true;
		e.text = text;
		haxe_Log.trace(e.text,{ fileName : "Sources\\GRI/GRIViewEquip.hx", lineNumber : 164, className : "GRIViewEquip", methodName : "setEquipmentHoverInfo"});
		this.view.uiCreation.tags.length = 0;
	}
	,endEquipmentHoverInfo: function(pos) {
		var _g = pos;
		var _g1 = this.hover_Texts.length;
		while(_g < _g1) {
			var i = _g++;
			this.hover_Texts[i].visible = false;
		}
		haxe_Log.trace(pos,{ fileName : "Sources\\GRI/GRIViewEquip.hx", lineNumber : 172, className : "GRIViewEquip", methodName : "endEquipmentHoverInfo"});
	}
	,feedEquipment: function(equipId,absoluteEquipPos,equipmentName,selected) {
		var fixedPos = this.EquipmentPosPageFix(absoluteEquipPos);
		if(fixedPos >= 0) {
			while(this.equipmentViews.length <= fixedPos) {
				this.equipmentTags();
				var viewTag = "equipview_" + this.equipmentViews.length;
				this.view.uiCreation.tags.push(viewTag);
				var element = this.view.addButton(GRIViewEquip.equipmentViewIdPart + this.equipmentViews.length,"Equipment","equipbutton",GRIViewEquip.layoutIdEquip,null,this.cursor_items);
				var specialHeader;
				var specialHeaderText;
				var specialHeaderIcon;
				this.view.uiCreation.tags.push(GRIViewEquip.TAG_EQUIPBUTTON_SPECIALWIDGET);
				this.view.uiCreation.activeLayer = GRIView.LAYER_DEFAULT + 1;
				var greyXpos = 70;
				var grayW = 160;
				var e = new UIElement();
				e.style.fill = true;
				e.style.color = GRIView.COLOR_BACKGROUND_GRAY;
				var self = e.transform.size;
				self.x = grayW;
				self.y = 20;
				e.mask = this.scroll.viewport.transform;
				this.view.uiCreation.addWithOffset(e,element,0,0,greyXpos,-10);
				var e1 = new UIElement();
				e1.text = "Sell:";
				var self1 = e1.textPivot;
				self1.x = 0;
				self1.y = 0;
				var self2 = e1.transform.size;
				self2.x = grayW;
				self2.y = 20;
				e1.mask = this.scroll.viewport.transform;
				this.view.uiCreation.addWithOffset(e1,element,0,0,greyXpos + 5,-10);
				specialHeader = e1;
				var e2 = new UIElement();
				e2.text = "-10";
				var self3 = e2.textPivot;
				self3.x = 1;
				self3.y = 0;
				var self4 = e2.transform.size;
				self4.x = 100;
				self4.y = 20;
				e2.mask = this.scroll.viewport.transform;
				this.view.uiCreation.addWithOffset(e2,element,0,0,115,-10);
				specialHeaderText = e2;
				var e3 = new UIElement();
				var self5 = e3.transform.size;
				self5.x = 11;
				self5.y = 11;
				var self6 = e3.textPivot;
				self6.x = 1;
				self6.y = 0;
				e3.mask = this.scroll.viewport.transform;
				e3.style.color = 11184810;
				this.view.uiCreation.addWithOffset(e3,element,0,0,217,-8);
				specialHeaderIcon = e3;
				this.view.uiCreation.activeLayer = GRIView.LAYER_DEFAULT;
				this.equipmentViews.push({ mainName : element, mainButton : element, specialElementIcon : specialHeaderIcon, specialElementText : specialHeaderText, specialHeader : specialHeader, tag : viewTag});
				this.equipmentTags();
			}
			var equipV = this.equipmentViews[fixedPos];
			this.feedEquipmentView(equipId,equipmentName,equipV);
			equipV.mainButton.selected = selected;
		}
	}
	,visibilityOfEquipViewCutoff: function(cutOffIndex) {
		var _g_current = 0;
		var _g_array = this.equipmentViews;
		while(_g_current < _g_array.length) {
			var _g1_value = _g_array[_g_current];
			var _g1_key = _g_current++;
			var index = _g1_key;
			var value = _g1_value;
			this.view.ui.tagVisibility(value.tag,index < cutOffIndex);
		}
	}
	,feedEquipped: function(equipId,equippedPos,equipmentName,selected,interactable) {
		var fixedPos = equippedPos;
		if(fixedPos >= 0) {
			var equipV = this.equippedViews[fixedPos];
			equipV.mainButton.selected = selected;
			equipV.mainButton.enabled = interactable;
			this.feedEquipmentView(fixedPos,equipmentName,equipV);
		}
	}
	,feedEquipmentView: function(intData,equipmentName,equipV) {
		equipV.mainName.text = equipmentName;
		equipV.mainButton.data.intData = intData;
	}
	,EquipmentPosPageFix: function(absolutepos) {
		var minPos = this.equipment_CurrentPage * GRIViewEquip.equipment_MaxInPage;
		var maxPos = (this.equipment_CurrentPage + 1) * GRIViewEquip.equipment_MaxInPage;
		if(absolutepos < minPos || absolutepos >= maxPos) {
			return -1;
		}
		var pos = absolutepos - minPos;
		return pos;
	}
	,__class__: GRIViewEquip
};
var LittleBattleWidget = function(view) {
	this.TAG_LITTLE = "tag_little";
	this.LAYOUT_LITTLE = "layout_little";
	this.view = view;
	this.bigBG = view.uiCreation.createBorder(150,30,GRIView.COLOR_TEXT_HEADER);
	this.bigBG.style.setFill(GRIView.COLOR_BACKGROUND);
	this.statusText = view.uiCreation.createBorder(80,30,GRIView.COLOR_TEXT_HEADER);
	view.uiCreation.addWithOffset(this.statusText,this.bigBG,0,0,155,0,false,false);
	view.uiCreation.addElementInLayoutId(this.bigBG,this.LAYOUT_LITTLE);
	this.hpBar = view.addBar(7,5,"",GRIView.ARCHETYPE_BAR_MINI,null,this.TAG_LITTLE,this.bigBG);
	this.mpBar = view.addBar(7,16,"",GRIView.ARCHETYPE_BAR_MINI,null,this.TAG_LITTLE,this.bigBG);
	this.statusText.textFont = "main";
	this.icon = view.uiCreation.createImageElement(Sprite.create("heroicon",512,512),25,25);
	view.uiCreation.addWithOffset(this.icon,this.bigBG,0,0.5,120,0);
	this.leftText = view.addText("","BLABLA",GRIView.ARCHETYPE_SIMPLE_LARGE,null);
	this.leftText.style.colorText = this.leftText.style.color;
	this.leftText.transform.size.y = 30;
	this.leftText.transform.size.x = 300;
	this.leftText.style.setFill(GRIView.COLOR_BACKGROUND);
	this.leftText.textPivot.x = 0.9;
	view.uiCreation.addWithOffset(this.leftText,this.bigBG,0,0.5,-300,0);
};
$hxClasses["LittleBattleWidget"] = LittleBattleWidget;
LittleBattleWidget.__name__ = "LittleBattleWidget";
LittleBattleWidget.prototype = {
	feed: function(hp,maxHP,mp,maxMP,mode,mpCharge,heroSprite) {
		this.view.ui.updateBarValue(this.hpBar,hp,maxHP);
		this.hpBar.mainText.text = "";
		this.view.ui.updateBarValue(this.mpBar,mp,maxMP);
		this.mpBar.mainText.text = "";
		var modeN = mode;
		this.statusText.text = LittleBattleWidget.stateTexts[modeN];
		this.statusText.style.color = LittleBattleWidget.colors[modeN];
		if(mpCharge) {
			this.mpBar.barPortion.style.sprite = GRIView.SPRITE_PINKGRAD;
		} else {
			this.mpBar.barPortion.style.sprite = GRIView.SPRITE_BLUEGRAD;
		}
		this.icon.style.sprite = heroSprite;
		this.icon.style.color = 11184810;
	}
	,__class__: LittleBattleWidget
};
var MemoryWidget = function() {
};
$hxClasses["MemoryWidget"] = MemoryWidget;
MemoryWidget.__name__ = "MemoryWidget";
MemoryWidget.prototype = {
	__class__: MemoryWidget
};
var GRIViewMemoryTab = function() {
	this.cursorGroup = new CursorGroup();
	this.memoryWidgets = [];
};
$hxClasses["GRIViewMemoryTab"] = GRIViewMemoryTab;
GRIViewMemoryTab.__name__ = "GRIViewMemoryTab";
GRIViewMemoryTab.prototype = {
	setup: function(view) {
		this.scroll = view.uiCreation.addScrollToLayout(GRIViewMemoryTab.LAYOUT_MEMORY_BUTTONS);
		this.cursorGroup.cancelGroup = view.tabCursorGroup;
		var v = view.tabCursorGroup;
		this.cursorGroup.noElementActivateGroup.set(Direction.NORTH,v);
		view.tabMisc.h[GRIView.tagTabMemory].initialCursorGroup = this.cursorGroup;
	}
	,storyButtonHide: function(index) {
		if(this.memoryWidgets.length <= index) {
			return;
		}
		this.memoryWidgets[index].parent.visible = false;
	}
	,storyButtonFeed: function(buttonPos,label,cleared,resumable,newLabel,newLabelText,view,storyId) {
		while(this.memoryWidgets.length <= buttonPos) {
			var mw = new MemoryWidget();
			var parent = new UIElement();
			var self = parent.transform.size;
			self.x = -1;
			self.y = 50;
			mw.parent = parent;
			view.uiCreation.addElementInLayoutId(parent,GRIViewMemoryTab.LAYOUT_MEMORY_BUTTONS,true);
			mw.button1 = view.addButton("","Button1",GRIView.ARCHETYPE_BUTTON_REGION,null,null,this.cursorGroup);
			view.uiCreation.offsetElement(mw.button1,parent,0,0.5,440,0,false,false);
			mw.button2 = view.addButton("","Resume",GRIView.ARCHETYPE_BUTTON_REGION,null,null,this.cursorGroup);
			view.uiCreation.offsetElement(mw.button2,parent,0,0.5,280,0,false,false);
			mw.cutsceneTitle = view.addText("","Cutscene",GRIView.ARCHETYPE_HEADER_TIMID,null);
			var self1 = mw.cutsceneTitle.textPivot;
			self1.x = 0;
			self1.y = 0.5;
			view.uiCreation.addWithOffset(mw.cutsceneTitle,parent,0,0.5,20,0);
			mw.button1.mask = this.scroll.viewport.transform;
			mw.button2.mask = this.scroll.viewport.transform;
			mw.cutsceneTitle.mask = this.scroll.viewport.transform;
			mw.button2.visible = false;
			this.memoryWidgets.push(mw);
		}
		this.memoryWidgets[buttonPos].cutsceneTitle.text = label;
		this.memoryWidgets[buttonPos].button2.visible = resumable;
		this.memoryWidgets[buttonPos].button2.enabled = resumable;
		this.memoryWidgets[buttonPos].button2.data.stringData = GRIViewMemoryTab.DATA_RESUME;
		this.memoryWidgets[buttonPos].button2.data.intData = storyId;
		this.memoryWidgets[buttonPos].button1.data.intData = storyId;
		this.memoryWidgets[buttonPos].button1.text = "Start";
		this.memoryWidgets[buttonPos].button1.data.stringData = GRIViewMemoryTab.DATA_START;
		if(resumable) {
			this.memoryWidgets[buttonPos].button1.text = "Restart";
			this.memoryWidgets[buttonPos].button1.data.stringData = GRIViewMemoryTab.DATA_RESTART;
		}
	}
	,__class__: GRIViewMemoryTab
};
var GRIRegionInfo = function() { };
$hxClasses["GRIRegionInfo"] = GRIRegionInfo;
GRIRegionInfo.__name__ = "GRIRegionInfo";
var GRIViewRegion = function(view) {
	this.scrolls = [];
	this.areaCursorGroup = new CursorGroup();
	this.regionCursorGroup = new CursorGroup();
	this.actorView = new ActorView(GRIViewRegion.LAYOUT_REGION_MONSTER_STAT);
	this.areaButtons = new ArrayOfArray();
	this.regionButtons = new ArrayOfArray();
	this.view = view;
};
$hxClasses["GRIViewRegion"] = GRIViewRegion;
GRIViewRegion.__name__ = "GRIViewRegion";
GRIViewRegion.prototype = {
	setup: function() {
		this.view.tabMisc.h[GRIView.tagTabRegion].initialCursorGroup = this.regionCursorGroup;
		var v = this.areaCursorGroup;
		this.regionCursorGroup.noElementActivateGroup.set(Direction.EAST,v);
		var v = this.regionCursorGroup;
		this.areaCursorGroup.noElementActivateGroup.set(Direction.WEST,v);
		var v = this.view.tabCursorGroup;
		this.regionCursorGroup.noElementActivateGroup.set(Direction.NORTH,v);
		var v = this.view.tabCursorGroup;
		this.areaCursorGroup.noElementActivateGroup.set(Direction.NORTH,v);
		this.regionCursorGroup.cancelGroup = this.view.tabCursorGroup;
		this.areaCursorGroup.cancelGroup = this.regionCursorGroup;
		this.view.uiCreation.singleTag(GRIView.tagTabRegion);
		this.scrolls.push(this.view.uiCreation.addScrollToLayout(GRIViewRegion.LAYOUT_REGION_AREAS));
		this.scrolls.push(this.view.uiCreation.addScrollToLayout(GRIViewRegion.LAYOUT_REGION_REGIONS));
		this.actorView.layoutId = GRIViewRegion.LAYOUT_REGION_MONSTER_STAT;
		this.actorView.tagId = GRIViewRegion.LAYOUT_REGION_MONSTER_STAT;
		this.enemyHeader = this.view.addText("","",GRIView.ARCHETYPE_HEADER_STAT,GRIViewRegion.LAYOUT_REGION_MONSTER);
		this.enemyName = this.view.addText("","",GRIView.ARCHETYPE_TEXT_ENEMYNAME,GRIViewRegion.LAYOUT_REGION_MONSTER);
		var self = this.enemyHeader.textPivot;
		self.x = 0;
		self.y = 0.5;
		var self = this.enemyName.textPivot;
		self.x = 0;
		self.y = 0.5;
	}
	,resetAreaScroll: function() {
		this.scrolls[0].offset.y = 10;
	}
	,getHoveredRegion: function(regionData) {
		var _g = 0;
		var _g1 = this.regionButtons.get_length();
		while(_g < _g1) {
			var i = _g++;
			var _g_current = 0;
			var _g_array = this.regionButtons.arrays[i];
			while(_g_current < _g_array.length) {
				var _g1_value = _g_array[_g_current];
				var _g1_key = _g_current++;
				var index = _g1_key;
				var value = _g1_value;
				if(value.hovered.trueThisFrame()) {
					if(value.data.stringData == regionData) {
						return value.data.intData;
					}
				}
			}
		}
		return -1;
	}
	,getHoveredArea: function(areaData) {
		var _g = 0;
		var _g1 = this.areaButtons.get_length();
		while(_g < _g1) {
			var i = _g++;
			var _g_current = 0;
			var _g_array = this.areaButtons.arrays[i];
			while(_g_current < _g_array.length) {
				var _g1_value = _g_array[_g_current];
				var _g1_key = _g_current++;
				var index = _g1_key;
				var value = _g1_value;
				if(value.hovered.state) {
					if(value.data.stringData == areaData) {
						return value.data.intData;
					}
				}
			}
		}
		return -1;
	}
	,feedRegionButtons: function(feed) {
		this.regionButtons.adjustLength(feed.feedLists.length * 2);
		this.view.uiCreation.singleTag(GRIView.tagTabRegion);
		var _g_current = 0;
		var _g_array = feed.feedLists;
		while(_g_current < _g_array.length) {
			var _g1_value = _g_array[_g_current];
			var _g1_key = _g_current++;
			var dataIndex = _g1_key;
			var feedlist = _g1_value;
			var viewIndex = dataIndex * 2;
			var elementViewIndex = viewIndex + 1;
			this.regionButtons.adjustLengthOfList(elementViewIndex,feedlist.feedList.length);
			var _g2_current = 0;
			var _g2_array = feedlist.feedList;
			while(_g2_current < _g2_array.length) {
				var _g3_value = _g2_array[_g2_current];
				var _g3_key = _g2_current++;
				var elementIndex = _g3_key;
				var element = _g3_value;
				var eb = this.regionButtons.getElement(elementViewIndex,elementIndex);
				if(eb == null) {
					eb = this.regionButtons.setElement(elementViewIndex,elementIndex,this.view.addButton("","",GRIView.ARCHETYPE_BUTTON_MEDIUM,null,null,this.regionCursorGroup));
				}
				this.view.ui.feedElement(eb,element);
			}
		}
		this.view.ui.genUI.arraysToLayout(this.regionButtons,GRIViewRegion.LAYOUT_REGION_REGIONS);
	}
	,feedAreaButtons: function(feed) {
		var buttons = this.areaButtons;
		buttons.adjustLength(feed.feedLists.length * 2);
		this.view.uiCreation.singleTag(GRIView.tagTabRegion);
		var _g_current = 0;
		var _g_array = feed.feedLists;
		while(_g_current < _g_array.length) {
			var _g1_value = _g_array[_g_current];
			var _g1_key = _g_current++;
			var dataIndex = _g1_key;
			var feedlist = _g1_value;
			var viewIndex = dataIndex * 2;
			var elementViewIndex = viewIndex + 1;
			buttons.adjustLengthOfList(elementViewIndex,feedlist.feedList.length);
			var _g2_current = 0;
			var _g2_array = feedlist.feedList;
			while(_g2_current < _g2_array.length) {
				var _g3_value = _g2_array[_g2_current];
				var _g3_key = _g2_current++;
				var elementIndex = _g3_key;
				var element = _g3_value;
				var eb = buttons.getElement(elementViewIndex,elementIndex);
				if(eb == null) {
					eb = buttons.setElement(elementViewIndex,elementIndex,this.view.addButton("","",GRIView.ARCHETYPE_BUTTON_SMALL_LABEL,null,null,this.areaCursorGroup));
				}
				this.view.ui.feedElement(eb,element);
			}
		}
		this.view.ui.genUI.arraysToLayout(buttons,GRIViewRegion.LAYOUT_REGION_AREAS);
		var _g = 0;
		var _g1 = this.scrolls;
		while(_g < _g1.length) {
			var scroll = _g1[_g];
			++_g;
			this.view.ui.extendElementHeight(scroll.viewport,95);
		}
	}
	,__class__: GRIViewRegion
};
var MessageView = function() {
};
$hxClasses["MessageView"] = MessageView;
MessageView.__name__ = "MessageView";
MessageView.prototype = {
	__class__: MessageView
};
var GRIViewStory = function(view) {
	this.cursorGroup = new CursorGroup();
	this.amountOfStoryMessagesShownByType = [];
	this.amountOfStoryMessagesShown = 0;
	this.messages = [];
	this.view = view;
	this.messages.push([]);
	this.messages.push([]);
	this.amountOfStoryMessagesShownByType.push(0);
	this.amountOfStoryMessagesShownByType.push(0);
};
$hxClasses["GRIViewStory"] = GRIViewStory;
GRIViewStory.__name__ = "GRIViewStory";
GRIViewStory.prototype = {
	startStory: function() {
		this.amountOfStoryMessagesShown = 0;
		this.amountOfStoryMessagesShownByType.length = 0;
		this.amountOfStoryMessagesShownByType.push(0);
		this.amountOfStoryMessagesShownByType.push(0);
		var _g = 0;
		var _g1 = this.messages;
		while(_g < _g1.length) {
			var array = _g1[_g];
			++_g;
			var _g2 = 0;
			while(_g2 < array.length) {
				var view = array[_g2];
				++_g2;
				view.parent.visible = false;
			}
		}
		this.view.ui.enterCursorGroup(this.cursorGroup);
	}
	,setup: function() {
		this.view.addButton(GRIViewStory.DATA_BUTTON_ADVANCE,"Advance",GRIView.ARCHETYPE_BUTTON_REGION,GRIViewStory.LAYOUT_BUTTON_A,null,this.cursorGroup);
		this.view.addButton(GRIViewStory.DATA_BUTTON_SKIP,"Skip",GRIView.ARCHETYPE_BUTTON_REGION,GRIViewStory.LAYOUT_BUTTON_B,null,this.cursorGroup);
		this.view.addButton(GRIViewStory.DATA_BUTTON_LATER,"Watch Later",GRIView.ARCHETYPE_BUTTON_REGION,GRIViewStory.LAYOUT_BUTTON_B,null,this.cursorGroup);
		this.scroll = this.view.uiCreation.addScrollToLayout(GRIViewStory.LAYOUT_STORY);
	}
	,latestMessageUpdate: function(message,speaker,sprite,messagePos,leftRight) {
		if(speaker == null) {
			speaker = "";
		}
		if(messagePos >= this.amountOfStoryMessagesShown) {
			this.amountOfStoryMessagesShown = messagePos + 1;
			this.amountOfStoryMessagesShownByType[leftRight]++;
			while(this.messages[leftRight].length < this.amountOfStoryMessagesShownByType[leftRight]) {
				var mv = new MessageView();
				var mainE = new UIElement();
				var self = mainE.transform.size;
				self.x = -1;
				self.y = 150;
				this.view.uiCreation.addElementInLayoutId(mainE,GRIViewStory.LAYOUT_STORY,true);
				mv.parent = mainE;
				var text = this.view.addText("","Speaker",GRIView.ARCHETYPE_TEXT_STORYSPEAKER,null);
				var self1 = text.textPivot;
				self1.x = 0;
				self1.y = 0;
				this.view.uiCreation.addWithOffset(text,mv.parent,0,0,214,37,false,true);
				mv.speaker = text;
				mv.text = this.view.addText("","Text",GRIView.ARCHETYPE_TEXT_STORYMESSAGE,null);
				var self2 = mv.text.textPivot;
				self2.x = 0;
				self2.y = 0;
				mv.text.transform.size.x = 350;
				this.view.uiCreation.addWithOffset(mv.text,mv.parent,0,0,214,58,false,true);
				mv.image = this.view.uiCreation.createImageElement(null,128,128);
				this.view.uiCreation.addWithOffset(mv.image,mv.parent,0,0.5,0,0,false,true);
				this.messages[leftRight].push(mv);
			}
			var mV = this.messages[leftRight][this.amountOfStoryMessagesShownByType[leftRight] - 1];
			mV.speaker.text = speaker;
			mV.text.text = message;
			mV.image.style.sprite = sprite;
			mV.parent.visible = true;
			this.view.ui.genUI.updateAll();
			if(messagePos > 0) {
				UIScrollLogic.scrollDown(this.scroll);
			} else {
				UIScrollLogic.scrollUp(this.scroll);
			}
		}
	}
	,__class__: GRIViewStory
};
var TalentWidget = function() {
};
$hxClasses["TalentWidget"] = TalentWidget;
TalentWidget.__name__ = "TalentWidget";
TalentWidget.prototype = {
	__class__: TalentWidget
};
var TalentSingleSetWidget = function() {
};
$hxClasses["TalentSingleSetWidget"] = TalentSingleSetWidget;
TalentSingleSetWidget.__name__ = "TalentSingleSetWidget";
TalentSingleSetWidget.prototype = {
	__class__: TalentSingleSetWidget
};
var CursorGroup = function(firstElementToCursorElement) {
	if(firstElementToCursorElement == null) {
		firstElementToCursorElement = false;
	}
	this.noElementActivateGroup = new haxe_ds_EnumValueMap();
	this.updateFirstElementToCurrentElement = false;
	this.elements = [];
	this.updateFirstElementToCurrentElement = firstElementToCursorElement;
};
$hxClasses["CursorGroup"] = CursorGroup;
CursorGroup.__name__ = "CursorGroup";
CursorGroup.prototype = {
	__class__: CursorGroup
};
var GRIViewTalent = function() {
	this.currentTagMode = GRIViewTalent.TAG_TALENTMODE;
	this.talentSetWidgets = [];
	this.talentWidgets = [];
};
$hxClasses["GRIViewTalent"] = GRIViewTalent;
GRIViewTalent.__name__ = "GRIViewTalent";
GRIViewTalent.prototype = {
	getCursorGroup: function(tag) {
		return GRIViewTalent.CURSORGROUPMODES[GRIViewTalent.MODETAGS.indexOf(tag)];
	}
	,feedTalentView: function(pos,talentId,talentName,level,xp,maxXP,canStudy,practiceVisible,showBar) {
		this.view.uiCreation.singleTag(GRIView.tagTabVillage);
		this.view.uiCreation.tags.push(GRIViewTalent.TAG_TALENTMODE);
		while(this.talentWidgets.length <= pos) {
			var widget = this.view.uiCreation.addEmptyElement(250,145,GRIViewTalent.LAYOUT_TALENTWIDGETS);
			var tw = new TalentWidget();
			this.talentWidgets.push(tw);
			tw.practiceButton = this.view.addButton(GRIViewTalent.DATA_STARTPRACTICE,"Practice",null,null);
			tw.studyButton = this.view.addButton(GRIViewTalent.DATA_STUDY,"Study",null,null);
			this.view.uiCreation.offsetElement(tw.studyButton,widget,0,0,0,44,false,false);
			this.view.uiCreation.offsetElement(tw.practiceButton,widget,0,0,0,108,false,false);
			tw.xpBar = this.view.addBar(117,19,"xp",GRIView.ARCHETYPE_BAR_XP2,null,null,widget);
			tw.pointBar = this.view.addBar(117,89,"pp",GRIView.ARCHETYPE_BAR_POINT,null,null,widget);
			tw.talentTitle = this.view.addText("","talentname",GRIView.ARCHETYPE_HEADER_LARGE,null);
			tw.talentLevel = this.view.addText("","talentlevel",GRIView.ARCHETYPE_HEADER_LARGE,null);
			this.view.uiCreation.addWithOffset(tw.talentTitle,widget,0,0,0,0,false,false);
			this.view.uiCreation.addWithOffset(tw.talentLevel,widget,0,0,0,17,false,false);
			this.view.ui.hover.setHoverGeneric(tw.pointBar.barBack,"Practice Points","Used to change your form when using the equipment");
			this.view.ui.hover.setHoverGeneric(tw.xpBar.barBack,"Experience Points","When full your talent levels up.");
			this.getCursorGroup(GRIViewTalent.TAG_TALENTMODE).elements.push(tw.studyButton);
			this.getCursorGroup(GRIViewTalent.TAG_TALENTMODE).elements.push(tw.practiceButton);
		}
		this.talentWidgets[pos].studyButton.enabled = canStudy;
		this.talentWidgets[pos].practiceButton.data.intData = talentId;
		this.talentWidgets[pos].practiceButton.visible = practiceVisible;
		this.talentWidgets[pos].studyButton.data.intData = talentId;
		this.talentWidgets[pos].talentTitle.text = talentName;
		this.talentWidgets[pos].talentLevel.text = "Level " + level;
		var tw = this.talentWidgets[pos];
		this.view.ui.updateBarVisibility(tw.xpBar,showBar);
		this.view.ui.updateBarValue(tw.xpBar,xp,maxXP);
		this.view.ui.hover.setHoverGeneric(tw.studyButton,"Study " + talentName,"cost\nTime: 50\n\nget\nTalent XP\nPractice Points based on talent level");
		this.view.ui.hover.setHoverGeneric(tw.practiceButton,"Practice " + talentName,"Change your form when using the piece of equipment\nBonuses are only applied when equipping the weapon\nThey are also exclusive to the equipment set they were learned in\nThis allows you to have different forms for different equipment sets when using that weapon.");
	}
	,feedTalentView_PracticeInfo: function(pos,points,maxPoints) {
		var tw = this.talentWidgets[pos];
		this.view.ui.updateBarValue(tw.pointBar,points,maxPoints);
	}
	,talentModeStart: function() {
		this.currentTagMode = GRIViewTalent.TAG_TALENTMODE;
		this.updateModeTag();
	}
	,practiceModeStart: function(talentName) {
		this.currentTagMode = GRIViewTalent.TAG_PRACTICEMODE;
		this.practiceTitle.text = talentName;
		this.updateModeTag();
	}
	,feedPracticeModeCommons: function(points,maxPoints) {
		this.view.ui.updateBarValue(this.practiceModePointBar,points,maxPoints);
	}
	,feedTalentSingleSet: function(setPos,talentPos,stage,stageXP,maxStageXP,formText,focusText,canChangeForm,distributionText,showXPBar) {
		this.view.uiCreation.singleTag(GRIView.tagTabVillage);
		this.view.uiCreation.tags.push(GRIViewTalent.TAG_PRACTICEMODE);
		while(this.talentSetWidgets.length <= setPos) {
			var tw = new TalentSingleSetWidget();
			var widget = this.view.uiCreation.addEmptyElement(315,145,GRIViewTalent.LAYOUT_TALENTSETWIDGETS);
			this.talentSetWidgets.push(tw);
			tw.changeFormButton = this.view.addButton(GRIViewTalent.DATA_REROLLFORM,"Change Form",null,null);
			this.view.uiCreation.offsetElement(tw.changeFormButton,widget,0,0,0,92,false,false);
			tw.bonusText = this.view.addText("","BONUS",null,null);
			var self = tw.bonusText.textPivot;
			self.x = 0;
			self.y = 0;
			this.view.uiCreation.addWithOffset(tw.bonusText,widget,0,0,56,28);
			tw.bar = this.view.addBar(105,9,"xp",GRIView.ARCHETYPE_BAR_XP2,null,null,widget);
			tw.setTitle = this.view.addText("","SET " + this.talentSetWidgets.length,GRIView.ARCHETYPE_HEADER_LARGE,null);
			this.view.uiCreation.addWithOffset(tw.setTitle,widget,0,0,0,0,false,false);
			this.getCursorGroup(GRIViewTalent.TAG_PRACTICEMODE).elements.push(tw.changeFormButton);
		}
		var tw = this.talentSetWidgets[setPos];
		tw.setTitle.text = "SET " + (setPos + 1) + (" Stage " + stage);
		tw.changeFormButton.data.intData = talentPos;
		tw.changeFormButton.data.intData2 = setPos;
		tw.changeFormButton.enabled = canChangeForm;
		this.view.ui.hover.setHoverGeneric(tw.changeFormButton,"Change Form","Stage " + stage + " \n" + distributionText);
		this.view.ui.updateBarValue(tw.bar,stageXP,maxStageXP);
		this.view.ui.updateBarVisibility(tw.bar,showXPBar);
		tw.bonusText.text = formText;
	}
	,updateModeTag: function() {
		var _g_current = 0;
		var _g_array = GRIViewTalent.MODETAGS;
		while(_g_current < _g_array.length) {
			var _g1_value = _g_array[_g_current];
			var _g1_key = _g_current++;
			var index = _g1_key;
			var value = _g1_value;
			this.view.ui.tagVisibility(value,value == this.currentTagMode);
		}
		this.view.ui.keyboardManager.enterCursorGroup(this.getCursorGroup(this.currentTagMode),this.view.ui);
	}
	,setupUI: function() {
		this.view.tabMisc.h[GRIView.tagTabVillage].initialCursorGroup = this.getCursorGroup(GRIViewTalent.TAG_TALENTMODE);
		this.getCursorGroup(GRIViewTalent.TAG_TALENTMODE).cancelGroup = this.view.tabCursorGroup;
		var this1 = this.getCursorGroup(GRIViewTalent.TAG_TALENTMODE).noElementActivateGroup;
		var v = this.view.tabCursorGroup;
		this1.set(Direction.NORTH,v);
		var this1 = this.getCursorGroup(GRIViewTalent.TAG_PRACTICEMODE).noElementActivateGroup;
		var v = this.view.tabCursorGroup;
		this1.set(Direction.NORTH,v);
		this.view.uiCreation.singleTag(GRIView.tagTabVillage);
		this.view.uiCreation.tags.push(GRIViewTalent.TAG_PRACTICEMODE);
		var returnB = this.view.addButton(GRIViewTalent.DATA_RETURNFROMPRACTICE,"Return",null,null);
		var self = returnB.transform.position;
		self.x = 250;
		self.y = 80;
		this.getCursorGroup(GRIViewTalent.TAG_PRACTICEMODE).elements.push(returnB);
		this.practiceModePointBar = this.view.addBar(20,105,"pp",GRIView.ARCHETYPE_BAR_POINT,null,null,null);
		this.practiceTitle = this.view.addText("","PRACTICE TITLE",GRIView.ARCHETYPE_HEADER_LARGE,null);
		this.view.uiCreation.addElement(this.practiceTitle);
		var self = this.practiceTitle.transform.position;
		self.x = 20;
		self.y = 75;
	}
	,__class__: GRIViewTalent
};
var GRIViewTitle = function() {
	this.cursorGroup = new CursorGroup();
};
$hxClasses["GRIViewTitle"] = GRIViewTitle;
GRIViewTitle.__name__ = "GRIViewTitle";
GRIViewTitle.prototype = {
	changeMode: function(mode) {
		this.view.ui.tagVisibility(GRIViewTitle.TAG_TITLE_MAIN,mode == TitleMode.NORMAL);
		this.view.ui.tagVisibility(GRIViewTitle.TAG_TITLE_ACCEPT,mode == TitleMode.ACCEPT);
		this.view.ui.tagVisibility(GRIViewTitle.TAG_TITLE_DIMENSION,mode == TitleMode.DIMENSION_SELECT);
		this.view.ui.tagVisibility(GRIViewTitle.TAG_TITLE_LOGO,mode != TitleMode.DIMENSION_SELECT);
		this.view.ui.genUI.updateAll();
	}
	,addMainButtonToTop: function(id,label) {
	}
	,setupUI: function() {
		this.view.tabMisc.h[GRIView.tagTabTitle].initialCursorGroup = this.cursorGroup;
		this.cursorGroup.cancelGroup = this.view.tabCursorGroup;
		var v = this.view.tabCursorGroup;
		this.cursorGroup.noElementActivateGroup.set(Direction.NORTH,v);
		this.view.uiCreation.singleTag(GRIView.tagTabTitle);
		this.view.uiCreation.tags.push(GRIViewTitle.TAG_TITLE_LOGO);
		var logo = this.view.uiCreation.createImageElement(Sprite.create("logo",420,360),420,360);
		this.view.uiCreation.addElementInLayoutId(logo,"titlelogo");
		var e = this.view.addText("","Version: 0.16r",GRIView.ARCHETYPE_HEADER_TIMID,null);
		e.text = "DEMO " + e.text;
		this.view.uiCreation.addWithOffset(e,logo,1,1,-100,-130);
		var e = this.view.addText("","Developed by Pedro Gabriel Fonteles Furtado",GRIView.ARCHETYPE_HEADER_TIMID,null);
		this.view.uiCreation.addWithOffset(e,logo,1,1,-100,-110);
		HxOverrides.remove(this.view.uiCreation.tags,GRIViewTitle.TAG_TITLE_LOGO);
	}
	,addMainButton: function(id,label,intData,description) {
		this.view.uiCreation.singleTag(GRIView.tagTabTitle);
		this.view.uiCreation.tags.push(GRIViewTitle.TAG_TITLE_MAIN);
		var a = this.view.addButton(id,label,null,GRIViewTitle.LAYOUT_BUTTON_TITLE,null,this.cursorGroup);
		a.data.intData = intData;
	}
	,addDimensionCharacterWidget: function(desc_title,desc_text,button_id,button_text,button_data1,sprite) {
		this.view.uiCreation.singleTag(GRIViewTitle.TAG_TITLE_DIMENSION);
		var e = new UIElement();
		var self = e.transform.size;
		self.x = 550;
		self.y = 130;
		this.view.uiCreation.addElementInLayoutId(e,GRIViewTitle.LAYOUT_CHARACTER_SELECTION);
		var icon = this.view.uiCreation.createImageElement(sprite,94,94);
		this.view.uiCreation.addWithOffset(icon,e,0,0,0,0);
		var description_t = this.view.addText("",desc_title,GRIView.ARCHETYPE_SIMPLE_LARGE,null);
		var self = description_t.textPivot;
		self.x = 0;
		self.y = 0;
		var self = description_t.transform.size;
		self.x = 432;
		self.y = 44;
		this.view.uiCreation.addWithOffset(description_t,e,0,0,108,-4);
		var description_tex = this.view.addText("",desc_text,GRIView.ARCHETYPE_SIMPLE_MEDIUM,null);
		var self = description_tex.textPivot;
		self.x = 0;
		self.y = 0;
		var self = description_tex.transform.size;
		self.x = 432;
		self.y = 44;
		this.view.uiCreation.addWithOffset(description_tex,e,0,0,108,19);
		var b = this.view.addButton(button_id,button_text,null,null,null,this.cursorGroup);
		b.data.intData = button_data1;
		this.view.uiCreation.offsetElement(b,e,0,0,405,80,false,false);
	}
	,setupButtons: function() {
		this.view.uiCreation.singleTag(GRIView.tagTabTitle);
		this.view.uiCreation.tags.push(GRIViewTitle.TAG_TITLE_MAIN);
		this.view.addButtonImage("discord",Sprite.create("discord",91,31),null,GRIViewTitle.LAYOUT_BUTTON_TITLE,null,false,this.cursorGroup);
		var steamButton = this.view.addButton(GRIViewTitle.DATA_STEAM,"",null,GRIViewTitle.LAYOUT_BUTTON_TITLE,null,this.cursorGroup);
		var self = steamButton.transform.size;
		self.x = steamButton.transform.size.x;
		self.y = 60;
		var img = this.view.uiCreation.createImageElement(Sprite.create("steam",81,24),81,24);
		this.view.uiCreation.addWithOffset(img,steamButton,0.5,0.5,0,8);
		var text = this.view.addText("","Wishlist now",GRIView.ARCHETYPE_TEXT_ACTION,null,null,false);
		this.view.uiCreation.addWithOffset(text,steamButton,0.5,0.5,0,-14);
		this.view.addButton(GRIViewTitle.DATA_RESET,"Reset",null,GRIViewTitle.LAYOUT_BUTTON_TITLE,null,this.cursorGroup);
		this.view.uiCreation.singleTag(GRIView.tagTabTitle);
		this.view.uiCreation.tags.push(GRIViewTitle.TAG_TITLE_ACCEPT);
		this.view.addButton(GRIViewTitle.DATA_ACCEPT,"Start & Accept",null,GRIViewTitle.LAYOUT_BUTTON_TITLE);
		this.view.addText("","We collect log data to make the game better",GRIView.ARCHETYPE_HEADER_TIMID,GRIViewTitle.LAYOUT_BUTTON_TITLE);
		var self = this.view.addText("","Please accept our privacy policy and terms of use",null,GRIViewTitle.LAYOUT_BUTTON_TITLE).textPivot;
		self.x = 0;
		self.y = 0.5;
		this.view.addButton(GRIViewTitle.DATA_PRIVACYSEE,"Privacy policy\n& terms of use",null,GRIViewTitle.LAYOUT_BUTTON_TITLE);
	}
	,__class__: GRIViewTitle
};
var GRIViewUtilities = function() { };
$hxClasses["GRIViewUtilities"] = GRIViewUtilities;
GRIViewUtilities.__name__ = "GRIViewUtilities";
GRIViewUtilities.getBonusText = function(rollBonus,sep,formRankNames) {
	var text = "";
	var h = rollBonus.attributes.h;
	var _g_h = h;
	var _g_keys = Object.keys(h);
	var _g_length = _g_keys.length;
	var _g_current = 0;
	while(_g_current < _g_length) {
		var key = _g_keys[_g_current++];
		var _g1_key = key;
		var _g1_value = _g_h[key];
		var key1 = _g1_key;
		var value = _g1_value;
		if(text.length > 0) {
			text += sep;
		}
		text += GRIControlEquip.getAttributeAddText(key1,value);
	}
	var h = rollBonus.attributeMultiplier.h;
	var _g_h = h;
	var _g_keys = Object.keys(h);
	var _g_length = _g_keys.length;
	var _g_current = 0;
	while(_g_current < _g_length) {
		var key = _g_keys[_g_current++];
		var _g1_key = key;
		var _g1_value = _g_h[key];
		var key1 = _g1_key;
		var value = _g1_value;
		if(text.length > 0) {
			text += sep;
		}
		text += GRIControlEquip.getAttributeMulText(key1,value);
	}
	var rankN = formRankNames[rollBonus.rank];
	text += " rank " + rankN;
	return text;
};
var GameAnalyticsIntegration = function() { };
$hxClasses["GameAnalyticsIntegration"] = GameAnalyticsIntegration;
GameAnalyticsIntegration.__name__ = "GameAnalyticsIntegration";
GameAnalyticsIntegration.InitializeCheck = function() {
	var gameKey = "3465b32dba81c3effc66d8193e69e762";
	var secretKey = "0542cc0026b566e59c853ee0a8b7b67680858018";
	var platform = "gitphaser";
	
        if(gameanalytics.GameAnalytics != null && gaInited == false){
            gaInited = true;
            gameanalytics.GameAnalytics.configureBuild(("0.16r" + platform));
            gameanalytics.GameAnalytics.initialize(gameKey,secretKey); 
            
        }
        ;
};
GameAnalyticsIntegration.SendDesignEvent = function(eventName,value) {
	
        gameanalytics.GameAnalytics.addDesignEvent(eventName, value);
        ;
};
GameAnalyticsIntegration.SendProgressStartEvent = function(prog1,prog2,prog3) {
	if(prog3 == null) {
		prog3 = "";
	}
	if(prog2 == null) {
		prog2 = "";
	}
	
        gameanalytics.GameAnalytics.addProgressionEvent(gameanalytics.EGAProgressionStatus.Start, prog1, prog2, prog3);
        ;
};
GameAnalyticsIntegration.SendProgressCompleteEvent = function(prog1,prog2,prog3) {
	if(prog3 == null) {
		prog3 = "";
	}
	if(prog2 == null) {
		prog2 = "";
	}
	
        gameanalytics.GameAnalytics.addProgressionEvent(gameanalytics.EGAProgressionStatus.Complete, prog1, prog2, prog3);
        ;
};
GameAnalyticsIntegration.SendProgressFailEvent = function(prog1,prog2,prog3) {
	if(prog3 == null) {
		prog3 = "";
	}
	if(prog2 == null) {
		prog2 = "";
	}
	
        gameanalytics.GameAnalytics.addProgressionEvent(gameanalytics.EGAProgressionStatus.Fail, prog1, prog2, prog3);
        ;
};
var GenUIIntegration = function() {
	this.layoutIntegs = new haxe_ds_StringMap();
};
$hxClasses["GenUIIntegration"] = GenUIIntegration;
GenUIIntegration.__name__ = "GenUIIntegration";
GenUIIntegration.prototype = {
	updateAll: function() {
		var h = this.layoutIntegs.h;
		var manager_h = h;
		var manager_keys = Object.keys(h);
		var manager_length = manager_keys.length;
		var manager_current = 0;
		while(manager_current < manager_length) {
			var manager = manager_h[manager_keys[manager_current++]];
			this.updateWithScroll(manager);
		}
	}
	,updateWithScroll: function(manager) {
		var yScroll = 0;
		if(manager.scroll != null) {
			yScroll = manager.scroll.offset.y;
			var self = manager.scroll.offset;
			self.x = 0;
			self.y = 0;
		}
		this.update(manager);
		if(manager.scroll != null) {
			if(GenUIIntegration.scrollDebug == null || GenUIIntegration.scrollDebug == manager.scroll) {
				UIScrollLogic.recalculateContentRect(manager.scroll,this.ui);
				var this1 = manager.scroll.viewport.transform.position;
				var x = manager.layout.element.x + this.getXCorrection(manager.layout);
				var y = manager.layout.element.y + this.getYCorrection(manager.layout);
				var self = this1;
				self.x = x;
				self.y = y;
				manager.scroll.viewport.transform.size.x = manager.scroll.content.width;
				manager.scroll.offset.y = yScroll;
				this.update(manager);
			}
		}
	}
	,getXCorrection: function(layout) {
		return layout.element.screenPivotX * Renderer.width - layout.element.screenPivotX * layout.element.width;
	}
	,getYCorrection: function(layout) {
		return layout.element.screenPivotY * Renderer.height - layout.element.screenPivotY * layout.element.height;
	}
	,update: function(manager) {
		var layout = manager.layout;
		var x = layout.element.x;
		var y = layout.element.y;
		var yoffset = 0;
		if(manager.scroll != null) {
			yoffset += manager.scroll.offset.y;
		}
		var lx = 999999;
		var ly = 999999;
		var lxm = -10;
		var lym = -10;
		var _g_current = 0;
		var _g_array = manager.elements;
		while(_g_current < _g_array.length) {
			var _g1_value = _g_array[_g_current];
			var _g1_key = _g_current++;
			var index = _g1_key;
			var value = _g1_value;
			if(this.ui.isVisible(value) == false) {
				continue;
			}
			if(value.visible == false) {
				continue;
			}
			if(layout.horizontal) {
				if(value.transform.size.x + x > layout.element.width + layout.element.x && layout.element.width > 0) {
					x = layout.element.x;
					y += value.transform.size.y + layout.separationY;
				}
			} else if(value.transform.size.y + y > layout.element.height + layout.element.y && layout.element.height > 0) {
				y = layout.element.y;
				x += value.transform.size.x + layout.separationX;
			}
			var tmp = x + this.getXCorrection(layout);
			value.transform.position.x = tmp - layout.childPivotX * value.transform.size.x;
			var tmp1 = y + this.getYCorrection(layout);
			value.transform.position.y = tmp1 - layout.childPivotY * value.transform.size.y + yoffset;
			var tX = value.transform.position.x;
			var tY = value.transform.position.y;
			var _this = value.transform;
			var tXm = _this.position.x + _this.size.x;
			var _this1 = value.transform;
			var tYm = _this1.position.y + _this1.size.y;
			if(lx > tX) {
				lx = tX;
			}
			if(ly > tY) {
				ly = tY;
			}
			if(lxm < tXm) {
				lxm = tXm;
			}
			if(lym < tYm) {
				lym = tYm;
			}
			if(layout.horizontal) {
				x += value.transform.size.x + layout.separationX;
			} else {
				y += value.transform.size.y + layout.separationY;
			}
		}
		if(manager.bgElement != null) {
			if(manager.bgFitChildren) {
				var self = manager.bgElement.transform.position;
				self.x = lx;
				self.y = ly;
				var self = manager.bgElement.transform.size;
				self.x = lxm - lx;
				self.y = lym - ly;
				if(manager.margin != null) {
					var self = manager.bgElement.transform.position;
					self.x = lx - manager.margin.x;
					self.y = ly - manager.margin.y;
					var self = manager.bgElement.transform.size;
					self.x = lxm - lx + manager.margin.width + manager.margin.height;
					self.y = lym - ly + manager.margin.height + manager.margin.y;
				}
			} else {
				var self = manager.bgElement.transform.position;
				self.x = layout.element.x;
				self.y = layout.element.y;
				var self = manager.bgElement.transform.size;
				self.x = layout.element.width;
				self.y = layout.element.height;
			}
		}
	}
	,readUIMaster: function(json) {
		this.genMaster = JSON.parse(json);
		this.genMasterAccess = new GenMasterAccess(this.genMaster);
	}
	,extendLayoutWidth: function(layoutId,leeway) {
		var li = this.getLayout(layoutId);
		li.layout.element.width = Renderer.width - li.layout.element.x - leeway;
		this.updateWithScroll(li);
	}
	,fitWidthOfLayout: function(e,layoutId) {
		var li = this.getLayout(layoutId);
		e.transform.size.x = li.layout.element.width;
		this.updateWithScroll(li);
	}
	,layoutAsHover: function(e,layoutId) {
		var hoverDistance = 60;
		var li = this.getLayout(layoutId);
		var _this = e.transform;
		li.layout.element.x = _this.position.x + _this.size.x | 0;
		li.layout.element.y = e.transform.position.y | 0;
		if(li.margin != null) {
			var _this = e.transform;
			li.layout.element.x = _this.position.x + _this.size.x + li.margin.x + hoverDistance | 0;
		}
		if(li.layout.element.x + li.layout.element.width > Renderer.width) {
			li.layout.element.x = (e.transform.position.x | 0) - li.layout.element.width;
			if(li.margin != null) {
				li.layout.element.x = e.transform.position.x - li.layout.element.width - li.margin.x - hoverDistance * 2 | 0;
			}
		}
		this.updateWithScroll(li);
	}
	,getLayout: function(layoutId) {
		var li = this.layoutIntegs.h[layoutId];
		if(li == null) {
			li = new LayoutIntegManager();
			this.layoutIntegs.h[layoutId] = li;
			li.layout = this.genMasterAccess.getLinearLayout(layoutId);
		}
		return li;
	}
	,addScrollToLayout: function(layoutId) {
		var li = this.getLayout(layoutId);
		var scroll = new UIScroll(li.elements);
		scroll.positionElements = false;
		scroll.viewport = new UIElement();
		scroll.viewport.id = layoutId + "-scroll";
		li.scroll = scroll;
		return scroll;
	}
	,addElementToLayout: function(uiElement,layoutId) {
		var li = this.getLayout(layoutId);
		li.elements.push(uiElement);
		this.updateWithScroll(li);
	}
	,arraysToLayout: function(uiElement,layoutId) {
		var li = this.getLayout(layoutId);
		li.elements.length = 0;
		var _g = 0;
		var _g1 = uiElement.arrays;
		while(_g < _g1.length) {
			var array = _g1[_g];
			++_g;
			var _g2 = 0;
			while(_g2 < array.length) {
				var element = array[_g2];
				++_g2;
				li.elements.push(element);
			}
		}
		this.updateWithScroll(li);
	}
	,__class__: GenUIIntegration
};
var LayoutIntegManager = function() {
	this.elements = [];
};
$hxClasses["LayoutIntegManager"] = LayoutIntegManager;
LayoutIntegManager.__name__ = "LayoutIntegManager";
LayoutIntegManager.prototype = {
	__class__: LayoutIntegManager
};
var GlobalData = function() {
	this.data = new haxe_ds_StringMap();
};
$hxClasses["GlobalData"] = GlobalData;
GlobalData.__name__ = "GlobalData";
GlobalData.prototype = {
	__class__: GlobalData
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.dateStr = function(date) {
	var m = date.getMonth() + 1;
	var d = date.getDate();
	var h = date.getHours();
	var mi = date.getMinutes();
	var s = date.getSeconds();
	return date.getFullYear() + "-" + (m < 10 ? "0" + m : "" + m) + "-" + (d < 10 ? "0" + d : "" + d) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (mi < 10 ? "0" + mi : "" + mi) + ":" + (s < 10 ? "0" + s : "" + s);
};
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k = s.split("-");
		return new Date(k[0],k[1] - 1,k[2],0,0,0);
	case 19:
		var k = s.split(" ");
		var y = k[0].split("-");
		var t = k[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw haxe_Exception.thrown("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var Mouse = function() {
	this.deltaWheelY = 0;
	this.mousePressed = new BoolProperty();
	var this1 = new Vector2Default(-1,-1);
	this.mouseMoved = this1;
	var this1 = new Vector2Default(-1,-1);
	this.mousePositionLastFrame = this1;
	var this1 = new Vector2Default(-1,-1);
	this.mousePosition = this1;
};
$hxClasses["Mouse"] = Mouse;
Mouse.__name__ = "Mouse";
Mouse.prototype = {
	__class__: Mouse
};
var Keyboard = function() {
	this.charsUp = [];
	this.charsPressed = [];
	this.charsDown = [];
};
$hxClasses["Keyboard"] = Keyboard;
Keyboard.__name__ = "Keyboard";
Keyboard.prototype = {
	__class__: Keyboard
};
var IntIterator = function(min,max) {
	this.min = min;
	this.max = max;
};
$hxClasses["IntIterator"] = IntIterator;
IntIterator.__name__ = "IntIterator";
IntIterator.prototype = {
	hasNext: function() {
		return this.min < this.max;
	}
	,next: function() {
		return this.min++;
	}
	,__class__: IntIterator
};
var JSKeyboard = function() {
	var _g = new haxe_ds_IntMap();
	_g.h[37] = Keyboard.KEY_LEFT;
	_g.h[39] = Keyboard.KEY_RIGHT;
	_g.h[40] = Keyboard.KEY_DOWN;
	_g.h[38] = Keyboard.KEY_UP;
	_g.h[13] = Keyboard.KEY_ENTER;
	_g.h[27] = Keyboard.KEY_ESCAPE;
	_g.h[32] = Keyboard.KEY_SPACE;
	_g.h[9] = Keyboard.KEY_TAB;
	this.mapToSpecialKey = _g;
	this.charsUp = [];
	this.charsPressed = [];
	this.charsDown = [];
	var _gthis = this;
	window.document.onkeydown = function(ev) {
		var eve = ev;
		var toAdd = -1;
		toAdd = _gthis.getCode(eve);
		if(toAdd >= 0) {
			_gthis.charsDown.push(toAdd);
			if(_gthis.charsPressed.indexOf(toAdd) != -1 == false) {
				_gthis.charsPressed.push(toAdd);
			}
		}
	};
	window.document.onkeyup = function(ev) {
		var eve = ev;
		var charCode = _gthis.getCode(ev);
		if(charCode >= 0) {
			_gthis.charsUp.push(charCode);
			HxOverrides.remove(_gthis.charsPressed,charCode);
		}
	};
};
$hxClasses["JSKeyboard"] = JSKeyboard;
JSKeyboard.__name__ = "JSKeyboard";
JSKeyboard.prototype = {
	getCode: function(eve) {
		var toAdd = -1;
		if(eve.key.length == 1) {
			var charCode = eve.key.charCodeAt(0);
			haxe_Log.trace(charCode + " char code!",{ fileName : "Sources\\JS/JSKeyboard.hx", lineNumber : 24, className : "JSKeyboard", methodName : "getCode"});
			toAdd = charCode;
		} else if(eve.keyCode != null) {
			if(this.mapToSpecialKey.h.hasOwnProperty(eve.keyCode)) {
				toAdd = this.mapToSpecialKey.h[eve.keyCode];
			}
			haxe_Log.trace(eve.keyCode + " keycode",{ fileName : "Sources\\JS/JSKeyboard.hx", lineNumber : 31, className : "JSKeyboard", methodName : "getCode"});
		}
		return toAdd;
	}
	,__class__: JSKeyboard
};
var JSMouse = function() {
	this.pressed = false;
	this.deltaWheelY = 0;
	this.y = 0;
	this.x = 0;
	var _gthis = this;
	window.document.onmousemove = function(ev) {
		var me = ev;
		_gthis.x = me.pageX;
		return _gthis.y = me.pageY;
	};
	window.document.onmousedown = function(ev) {
		return _gthis.pressed = true;
	};
	window.document.onmouseup = function(ev) {
		return _gthis.pressed = false;
	};
	window.document.ontouchstart = function(ev) {
		var me = ev;
		_gthis.x = me.touches[0].pageX;
		_gthis.y = me.touches[0].pageY;
		haxe_Log.trace("TOUCH START " + _gthis.x + " " + _gthis.y,{ fileName : "Sources\\JS/JSMouse.hx", lineNumber : 26, className : "JSMouse", methodName : "new"});
		return _gthis.pressed = true;
	};
	window.document.ontouchend = function(ev) {
		haxe_Log.trace("TOUCH END",{ fileName : "Sources\\JS/JSMouse.hx", lineNumber : 30, className : "JSMouse", methodName : "new"});
		return _gthis.pressed = false;
	};
	window.document.ontouchmove = function(ev) {
		var me = ev;
		_gthis.x = me.touches[0].pageX;
		_gthis.y = me.touches[0].pageY;
		haxe_Log.trace("TOUCH MOVE " + _gthis.x + " " + _gthis.y,{ fileName : "Sources\\JS/JSMouse.hx", lineNumber : 37, className : "JSMouse", methodName : "new"});
		return _gthis.pressed = true;
	};
};
$hxClasses["JSMouse"] = JSMouse;
JSMouse.__name__ = "JSMouse";
JSMouse.prototype = {
	__class__: JSMouse
};
var json2object_reader_BaseParser = function(errors,putils,errorType) {
	this.errors = errors;
	this.putils = putils;
	this.errorType = errorType;
};
$hxClasses["json2object.reader.BaseParser"] = json2object_reader_BaseParser;
json2object_reader_BaseParser.__name__ = "json2object.reader.BaseParser";
json2object_reader_BaseParser.prototype = {
	fromJson: function(jsonString,filename) {
		if(filename == null) {
			filename = "";
		}
		this.putils = new json2object_PositionUtils(jsonString);
		this.errors = [];
		try {
			var json = new hxjsonast_Parser(jsonString,filename).doParse();
			this.loadJson(json);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(((_g1) instanceof hxjsonast_Error)) {
				var e = _g1;
				this.errors.push(json2object_Error.ParserError(e.message,this.putils.convertPosition(e.pos)));
			} else {
				throw _g;
			}
		}
		return this.value;
	}
	,loadJson: function(json,variable) {
		if(variable == null) {
			variable = "";
		}
		var pos = this.putils.convertPosition(json.pos);
		var _g = json.value;
		switch(_g._hx_index) {
		case 0:
			var s = _g.s;
			this.loadJsonString(s,pos,variable);
			break;
		case 1:
			var n = _g.s;
			this.loadJsonNumber(n,pos,variable);
			break;
		case 2:
			var o = _g.fields;
			this.loadJsonObject(o,pos,variable);
			break;
		case 3:
			var a = _g.values;
			this.loadJsonArray(a,pos,variable);
			break;
		case 4:
			var b = _g.b;
			this.loadJsonBool(b,pos,variable);
			break;
		case 5:
			this.loadJsonNull(pos,variable);
			break;
		}
		return this.value;
	}
	,loadJsonNull: function(pos,variable) {
		this.onIncorrectType(pos,variable);
	}
	,loadJsonString: function(s,pos,variable) {
		this.onIncorrectType(pos,variable);
	}
	,loadString: function(s,pos,variable,validValues,defaultValue) {
		if(validValues.indexOf(s) != -1) {
			return s;
		}
		this.onIncorrectType(pos,variable);
		return defaultValue;
	}
	,loadJsonNumber: function(f,pos,variable) {
		this.onIncorrectType(pos,variable);
	}
	,loadJsonUInt: function(f,pos,variable,value) {
		var uint = 0;
		f = StringTools.trim(f);
		var neg = f.charAt(0) == "-";
		if(neg) {
			f = HxOverrides.substr(f,1,null);
		}
		var hex = StringTools.startsWith(f,"0x");
		if(hex) {
			f = HxOverrides.substr(f,2,null);
		}
		var base = hex ? 16 : 10;
		var pow = 1;
		var i = f.length - 1;
		while(i >= 0) {
			var cur = hex ? Std.parseInt("0x" + f.charAt(i)) : Std.parseInt(f.charAt(i));
			if(cur == null) {
				this.onIncorrectType(pos,variable);
				return value;
			}
			uint = uint + pow * cur;
			pow *= base;
			--i;
		}
		return uint;
	}
	,loadJsonInt: function(f,pos,variable,value) {
		if(Std.parseInt(f) != null && Std.parseInt(f) == parseFloat(f)) {
			return Std.parseInt(f);
		}
		this.onIncorrectType(pos,variable);
		return value;
	}
	,loadJsonFloat: function(f,pos,variable,value) {
		if(Std.parseInt(f) != null) {
			return parseFloat(f);
		}
		this.onIncorrectType(pos,variable);
		return value;
	}
	,loadJsonBool: function(b,pos,variable) {
		this.onIncorrectType(pos,variable);
	}
	,loadJsonArray: function(a,pos,variable) {
		this.onIncorrectType(pos,variable);
	}
	,loadJsonArrayValue: function(a,loadJsonFn,variable) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < a.length) {
			var j = a[_g1];
			++_g1;
			var tmp;
			try {
				tmp = loadJsonFn(j,variable);
			} catch( _g2 ) {
				haxe_NativeStackTrace.lastError = _g2;
				var _g3 = haxe_Exception.caught(_g2).unwrap();
				if(js_Boot.__instanceof(_g3,json2object_InternalError)) {
					var e = _g3;
					if(e != json2object_InternalError.ParsingThrow) {
						throw haxe_Exception.thrown(e);
					}
					continue;
				} else {
					throw _g2;
				}
			}
			_g.push(tmp);
		}
		return _g;
	}
	,loadJsonObject: function(o,pos,variable) {
		this.onIncorrectType(pos,variable);
	}
	,loadObjectField: function(loadJsonFn,field,name,assigned,defaultValue,pos) {
		try {
			var ret = loadJsonFn(field.value,field.name);
			this.mapSet(assigned,name,true);
			return ret;
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(js_Boot.__instanceof(_g1,json2object_InternalError)) {
				var e = _g1;
				if(e != json2object_InternalError.ParsingThrow) {
					throw haxe_Exception.thrown(e);
				}
			} else {
				var e = _g1;
				this.errors.push(json2object_Error.CustomFunctionException(e,pos));
			}
		}
		return defaultValue;
	}
	,loadObjectFieldReflect: function(loadJsonFn,field,name,assigned,pos) {
		try {
			this.value[name] = loadJsonFn(field.value,field.name);
			this.mapSet(assigned,name,true);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(js_Boot.__instanceof(_g1,json2object_InternalError)) {
				var e = _g1;
				if(e != json2object_InternalError.ParsingThrow) {
					throw haxe_Exception.thrown(e);
				}
			} else {
				var e = _g1;
				this.errors.push(json2object_Error.CustomFunctionException(e,pos));
			}
		}
	}
	,objectSetupAssign: function(assigned,keys,values) {
		var _g = 0;
		var _g1 = keys.length;
		while(_g < _g1) {
			var i = _g++;
			this.mapSet(assigned,keys[i],values[i]);
		}
	}
	,objectErrors: function(assigned,pos) {
		var lastPos = this.putils.convertPosition(new hxjsonast_Position(pos.file,pos.max - 1,pos.max - 1));
		var h = assigned.h;
		var s_h = h;
		var s_keys = Object.keys(h);
		var s_length = s_keys.length;
		var s_current = 0;
		while(s_current < s_length) {
			var s = s_keys[s_current++];
			if(!assigned.h[s]) {
				this.errors.push(json2object_Error.UninitializedVariable(s,lastPos));
			}
		}
	}
	,onIncorrectType: function(pos,variable) {
		this.parsingThrow();
	}
	,parsingThrow: function() {
		if(this.errorType != 0) {
			throw haxe_Exception.thrown(json2object_InternalError.ParsingThrow);
		}
	}
	,objectThrow: function(pos,variable) {
		if(this.errorType == 2) {
			throw haxe_Exception.thrown(json2object_InternalError.ParsingThrow);
		}
		if(this.errorType == 1) {
			this.errors.push(json2object_Error.UninitializedVariable(variable,pos));
		}
	}
	,mapSet: function(map,key,value) {
		map.h[key] = value;
	}
	,__class__: json2object_reader_BaseParser
};
var JsonParser_$1 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_1"] = JsonParser_$1;
JsonParser_$1.__name__ = "JsonParser_1";
JsonParser_$1.__super__ = json2object_reader_BaseParser;
JsonParser_$1.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ worldVersion : Int, ?userId : Null<String>, ?timesReviewed : Null<Int>, timeCount : Int, sleeping : Bool, ?skillSets : Null<Array<SkillSet>>, ?retention : Null<RetentionData>, regionProgress : Array<AreaPersistence>, recovering : Bool, prestigeTimes : Int, playerTimesKilled : Int, playerActions : Map<String, PlayerAction>, necessaryToKillInArea : Int, maxArea : Int, killedInArea : Array<Int>, hero : Actor, ?equipLevels : Null<Array<EquipmentLevel>>, enemy : Actor, ?currency : Null<CurrencyHolderPersistent>, battleAreaRegionMax : Int, battleAreaRegion : Int, battleArea : Int, ?autoRepeat : Null<Bool>, ?autoAdvance : Null<Bool> }",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonObject: function(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["autoAdvance","autoRepeat","battleArea","battleAreaRegion","battleAreaRegionMax","currency","enemy","equipLevels","hero","killedInArea","maxArea","necessaryToKillInArea","playerActions","playerTimesKilled","prestigeTimes","recovering","regionProgress","retention","skillSets","sleeping","timeCount","timesReviewed","userId","worldVersion"],[true,true,false,false,false,true,false,true,false,false,false,false,false,false,false,false,false,true,true,false,false,true,true,false]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "autoAdvance":
				this.value.autoAdvance = this.loadObjectField(($_=new JsonParser_$3(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"autoAdvance",assigned,this.value.autoAdvance,pos);
				break;
			case "autoRepeat":
				this.value.autoRepeat = this.loadObjectField(($_=new JsonParser_$3(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"autoRepeat",assigned,this.value.autoRepeat,pos);
				break;
			case "battleArea":
				this.value.battleArea = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"battleArea",assigned,this.value.battleArea,pos);
				break;
			case "battleAreaRegion":
				this.value.battleAreaRegion = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"battleAreaRegion",assigned,this.value.battleAreaRegion,pos);
				break;
			case "battleAreaRegionMax":
				this.value.battleAreaRegionMax = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"battleAreaRegionMax",assigned,this.value.battleAreaRegionMax,pos);
				break;
			case "currency":
				this.value.currency = this.loadObjectField(($_=new JsonParser_$7(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"currency",assigned,this.value.currency,pos);
				break;
			case "enemy":
				this.value.enemy = this.loadObjectField(($_=new JsonParser_$9(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"enemy",assigned,this.value.enemy,pos);
				break;
			case "equipLevels":
				this.value.equipLevels = this.loadObjectField(($_=new JsonParser_$11(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"equipLevels",assigned,this.value.equipLevels,pos);
				break;
			case "hero":
				this.value.hero = this.loadObjectField(($_=new JsonParser_$9(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"hero",assigned,this.value.hero,pos);
				break;
			case "killedInArea":
				this.value.killedInArea = this.loadObjectField(($_=new JsonParser_$12(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"killedInArea",assigned,this.value.killedInArea,pos);
				break;
			case "maxArea":
				this.value.maxArea = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"maxArea",assigned,this.value.maxArea,pos);
				break;
			case "necessaryToKillInArea":
				this.value.necessaryToKillInArea = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"necessaryToKillInArea",assigned,this.value.necessaryToKillInArea,pos);
				break;
			case "playerActions":
				this.value.playerActions = this.loadObjectField(($_=new JsonParser_$14(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"playerActions",assigned,this.value.playerActions,pos);
				break;
			case "playerTimesKilled":
				this.value.playerTimesKilled = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"playerTimesKilled",assigned,this.value.playerTimesKilled,pos);
				break;
			case "prestigeTimes":
				this.value.prestigeTimes = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"prestigeTimes",assigned,this.value.prestigeTimes,pos);
				break;
			case "recovering":
				this.value.recovering = this.loadObjectField(($_=new JsonParser_$15(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"recovering",assigned,this.value.recovering,pos);
				break;
			case "regionProgress":
				this.value.regionProgress = this.loadObjectField(($_=new JsonParser_$16(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"regionProgress",assigned,this.value.regionProgress,pos);
				break;
			case "retention":
				this.value.retention = this.loadObjectField(($_=new JsonParser_$19(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"retention",assigned,this.value.retention,pos);
				break;
			case "skillSets":
				this.value.skillSets = this.loadObjectField(($_=new JsonParser_$21(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"skillSets",assigned,this.value.skillSets,pos);
				break;
			case "sleeping":
				this.value.sleeping = this.loadObjectField(($_=new JsonParser_$15(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"sleeping",assigned,this.value.sleeping,pos);
				break;
			case "timeCount":
				this.value.timeCount = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"timeCount",assigned,this.value.timeCount,pos);
				break;
			case "timesReviewed":
				this.value.timesReviewed = this.loadObjectField(($_=new JsonParser_$23(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"timesReviewed",assigned,this.value.timesReviewed,pos);
				break;
			case "userId":
				this.value.userId = this.loadObjectField(($_=new JsonParser_$25(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"userId",assigned,this.value.userId,pos);
				break;
			case "worldVersion":
				this.value.worldVersion = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"worldVersion",assigned,this.value.worldVersion,pos);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	,getAuto: function() {
		return { autoAdvance : new JsonParser_$3([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), autoRepeat : new JsonParser_$3([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), battleArea : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), battleAreaRegion : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), battleAreaRegionMax : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), currency : new JsonParser_$7([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), enemy : new JsonParser_$9([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), equipLevels : new JsonParser_$11([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), hero : new JsonParser_$9([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), killedInArea : new JsonParser_$12([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), maxArea : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), necessaryToKillInArea : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), playerActions : new JsonParser_$14([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), playerTimesKilled : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), prestigeTimes : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), recovering : new JsonParser_$15([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), regionProgress : new JsonParser_$16([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), retention : new JsonParser_$19([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), skillSets : new JsonParser_$21([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), sleeping : new JsonParser_$15([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), timeCount : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), timesReviewed : new JsonParser_$23([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), userId : new JsonParser_$25([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), worldVersion : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)))};
	}
	,__class__: JsonParser_$1
});
var JsonParser_$101 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_101"] = JsonParser_$101;
JsonParser_$101.__name__ = "JsonParser_101";
JsonParser_$101.__super__ = json2object_reader_BaseParser;
JsonParser_$101.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ rollBonus : AttributeBonus, pointXP : Int, pointLevel : Int, grandBonus : AttributeBonus }",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonObject: function(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["grandBonus","pointLevel","pointXP","rollBonus"],[false,false,false,false]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "grandBonus":
				this.value.grandBonus = this.loadObjectField(($_=new JsonParser_$103(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"grandBonus",assigned,this.value.grandBonus,pos);
				break;
			case "pointLevel":
				this.value.pointLevel = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"pointLevel",assigned,this.value.pointLevel,pos);
				break;
			case "pointXP":
				this.value.pointXP = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"pointXP",assigned,this.value.pointXP,pos);
				break;
			case "rollBonus":
				this.value.rollBonus = this.loadObjectField(($_=new JsonParser_$103(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"rollBonus",assigned,this.value.rollBonus,pos);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	,getAuto: function() {
		return { grandBonus : new JsonParser_$103([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), pointLevel : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), pointXP : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), rollBonus : new JsonParser_$103([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)))};
	}
	,__class__: JsonParser_$101
});
var JsonParser_$103 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_103"] = JsonParser_$103;
JsonParser_$103.__name__ = "JsonParser_103";
JsonParser_$103.__super__ = json2object_reader_BaseParser;
JsonParser_$103.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ rank : Int, attributes : Map<String, Int>, attributeMultiplier : Map<String, Int> }",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonObject: function(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["attributeMultiplier","attributes","rank"],[false,false,false]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "attributeMultiplier":
				this.value.attributeMultiplier = this.loadObjectField(($_=new JsonParser_$43(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"attributeMultiplier",assigned,this.value.attributeMultiplier,pos);
				break;
			case "attributes":
				this.value.attributes = this.loadObjectField(($_=new JsonParser_$43(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"attributes",assigned,this.value.attributes,pos);
				break;
			case "rank":
				this.value.rank = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"rank",assigned,this.value.rank,pos);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	,getAuto: function() {
		return { attributeMultiplier : new JsonParser_$43([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), attributes : new JsonParser_$43([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), rank : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)))};
	}
	,__class__: JsonParser_$103
});
var JsonParser_$105 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_105"] = JsonParser_$105;
JsonParser_$105.__name__ = "JsonParser_105";
JsonParser_$105.__super__ = json2object_reader_BaseParser;
JsonParser_$105.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ talentGeneral : TalentSharedPersistence, arcania : arcania.logic.ArcaniaPersistence }",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonObject: function(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["arcania","talentGeneral"],[false,false]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "arcania":
				this.value.arcania = this.loadObjectField(($_=new JsonParser_$107(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"arcania",assigned,this.value.arcania,pos);
				break;
			case "talentGeneral":
				this.value.talentGeneral = this.loadObjectField(($_=new JsonParser_$109(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"talentGeneral",assigned,this.value.talentGeneral,pos);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	,getAuto: function() {
		return { arcania : new JsonParser_$107([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), talentGeneral : new JsonParser_$109([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)))};
	}
	,__class__: JsonParser_$105
});
var JsonParser_$107 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_107"] = JsonParser_$107;
JsonParser_$107.__name__ = "JsonParser_107";
JsonParser_$107.__super__ = json2object_reader_BaseParser;
JsonParser_$107.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ resources : Map<String, arcania.logic.UnitPersistence>, events : Map<String, arcania.logic.UnitPersistence>, actions : Map<String, arcania.logic.UnitPersistence> }",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonObject: function(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["actions","events","resources"],[false,false,false]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "actions":
				this.value.actions = this.loadObjectField(($_=new JsonParser_$114(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"actions",assigned,this.value.actions,pos);
				break;
			case "events":
				this.value.events = this.loadObjectField(($_=new JsonParser_$114(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"events",assigned,this.value.events,pos);
				break;
			case "resources":
				this.value.resources = this.loadObjectField(($_=new JsonParser_$114(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"resources",assigned,this.value.resources,pos);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	,getAuto: function() {
		return { actions : new JsonParser_$114([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), events : new JsonParser_$114([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), resources : new JsonParser_$114([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)))};
	}
	,__class__: JsonParser_$107
});
var JsonParser_$109 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_109"] = JsonParser_$109;
JsonParser_$109.__name__ = "JsonParser_109";
JsonParser_$109.__super__ = json2object_reader_BaseParser;
JsonParser_$109.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ talents : Array<TalentUnitPersistence> }",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonObject: function(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["talents"],[false]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			if(field.name == "talents") {
				this.value.talents = this.loadObjectField(($_=new JsonParser_$110(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"talents",assigned,this.value.talents,pos);
			} else {
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	,getAuto: function() {
		return { talents : new JsonParser_$110([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)))};
	}
	,__class__: JsonParser_$109
});
var JsonParser_$11 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_11"] = JsonParser_$11;
JsonParser_$11.__name__ = "JsonParser_11";
JsonParser_$11.__super__ = json2object_reader_BaseParser;
JsonParser_$11.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"Array<EquipmentLevel>",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonArray: function(a,pos,variable) {
		this.value = this.loadJsonArrayValue(a,($_=new JsonParser_$41(this.errors,this.putils,2),$bind($_,$_.loadJson)),variable);
	}
	,getAuto: function() {
		return new JsonParser_$11([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)));
	}
	,__class__: JsonParser_$11
});
var JsonParser_$110 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_110"] = JsonParser_$110;
JsonParser_$110.__name__ = "JsonParser_110";
JsonParser_$110.__super__ = json2object_reader_BaseParser;
JsonParser_$110.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"Array<TalentUnitPersistence>",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonArray: function(a,pos,variable) {
		this.value = this.loadJsonArrayValue(a,($_=new JsonParser_$112(this.errors,this.putils,2),$bind($_,$_.loadJson)),variable);
	}
	,getAuto: function() {
		return new JsonParser_$110([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)));
	}
	,__class__: JsonParser_$110
});
var JsonParser_$112 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_112"] = JsonParser_$112;
JsonParser_$112.__name__ = "JsonParser_112";
JsonParser_$112.__super__ = json2object_reader_BaseParser;
JsonParser_$112.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ xp : Int, seen : Int, level : Int }",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonObject: function(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["level","seen","xp"],[false,false,false]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "level":
				this.value.level = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"level",assigned,this.value.level,pos);
				break;
			case "seen":
				this.value.seen = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"seen",assigned,this.value.seen,pos);
				break;
			case "xp":
				this.value.xp = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"xp",assigned,this.value.xp,pos);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	,getAuto: function() {
		return { level : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), seen : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), xp : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)))};
	}
	,__class__: JsonParser_$112
});
var JsonParser_$114 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_114"] = JsonParser_$114;
JsonParser_$114.__name__ = "JsonParser_114";
JsonParser_$114.__super__ = json2object_reader_BaseParser;
JsonParser_$114.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"haxe.ds.Map<String, arcania.logic.UnitPersistence>",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonObject: function(o,pos,variable) {
		this.value = new haxe_ds_StringMap();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			var this1 = this.value;
			var key;
			try {
				var key1 = new JsonParser_$35(this.errors,this.putils,2);
				var _this = this.putils;
				key = key1.loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JString(field.name),new hxjsonast_Position(pos.file,pos.min - 1,pos.max - 1)),variable);
			} catch( _g1 ) {
				haxe_NativeStackTrace.lastError = _g1;
				var _g2 = haxe_Exception.caught(_g1).unwrap();
				if(js_Boot.__instanceof(_g2,json2object_InternalError)) {
					var e = _g2;
					if(e != json2object_InternalError.ParsingThrow) {
						throw haxe_Exception.thrown(e);
					}
					continue;
				} else {
					throw _g1;
				}
			}
			var value;
			try {
				value = new JsonParser_$116(this.errors,this.putils,2).loadJson(field.value,field.name);
			} catch( _g3 ) {
				haxe_NativeStackTrace.lastError = _g3;
				var _g4 = haxe_Exception.caught(_g3).unwrap();
				if(js_Boot.__instanceof(_g4,json2object_InternalError)) {
					var e1 = _g4;
					if(e1 != json2object_InternalError.ParsingThrow) {
						throw haxe_Exception.thrown(e1);
					}
					continue;
				} else {
					throw _g3;
				}
			}
			this1.h[key] = value;
		}
	}
	,getAuto: function() {
		return new JsonParser_$114([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)));
	}
	,__class__: JsonParser_$114
});
var JsonParser_$116 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_116"] = JsonParser_$116;
JsonParser_$116.__name__ = "JsonParser_116";
JsonParser_$116.__super__ = json2object_reader_BaseParser;
JsonParser_$116.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ seen : Int, progressMiliseconds : Int, amount : Int }",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonObject: function(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["amount","progressMiliseconds","seen"],[false,false,false]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "amount":
				this.value.amount = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"amount",assigned,this.value.amount,pos);
				break;
			case "progressMiliseconds":
				this.value.progressMiliseconds = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"progressMiliseconds",assigned,this.value.progressMiliseconds,pos);
				break;
			case "seen":
				this.value.seen = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"seen",assigned,this.value.seen,pos);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	,getAuto: function() {
		return { amount : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), progressMiliseconds : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), seen : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)))};
	}
	,__class__: JsonParser_$116
});
var JsonParser_$118 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_118"] = JsonParser_$118;
JsonParser_$118.__name__ = "JsonParser_118";
JsonParser_$118.__super__ = json2object_reader_BaseParser;
JsonParser_$118.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ worldVersion : Int, progressionData : Map<String, StoryProgress>, currentStoryId : String }",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonObject: function(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["currentStoryId","progressionData","worldVersion"],[false,false,false]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "currentStoryId":
				this.value.currentStoryId = this.loadObjectField(($_=new JsonParser_$35(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"currentStoryId",assigned,this.value.currentStoryId,pos);
				break;
			case "progressionData":
				this.value.progressionData = this.loadObjectField(($_=new JsonParser_$120(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"progressionData",assigned,this.value.progressionData,pos);
				break;
			case "worldVersion":
				this.value.worldVersion = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"worldVersion",assigned,this.value.worldVersion,pos);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	,getAuto: function() {
		return { currentStoryId : new JsonParser_$35([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), progressionData : new JsonParser_$120([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), worldVersion : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)))};
	}
	,__class__: JsonParser_$118
});
var JsonParser_$12 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_12"] = JsonParser_$12;
JsonParser_$12.__name__ = "JsonParser_12";
JsonParser_$12.__super__ = json2object_reader_BaseParser;
JsonParser_$12.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"Array<Int>",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonArray: function(a,pos,variable) {
		this.value = this.loadJsonArrayValue(a,($_=new JsonParser_$4(this.errors,this.putils,2),$bind($_,$_.loadJson)),variable);
	}
	,getAuto: function() {
		return new JsonParser_$12([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)));
	}
	,__class__: JsonParser_$12
});
var JsonParser_$120 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_120"] = JsonParser_$120;
JsonParser_$120.__name__ = "JsonParser_120";
JsonParser_$120.__super__ = json2object_reader_BaseParser;
JsonParser_$120.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"haxe.ds.Map<String, StoryProgress>",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonObject: function(o,pos,variable) {
		this.value = new haxe_ds_StringMap();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			var this1 = this.value;
			var key;
			try {
				var key1 = new JsonParser_$35(this.errors,this.putils,2);
				var _this = this.putils;
				key = key1.loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JString(field.name),new hxjsonast_Position(pos.file,pos.min - 1,pos.max - 1)),variable);
			} catch( _g1 ) {
				haxe_NativeStackTrace.lastError = _g1;
				var _g2 = haxe_Exception.caught(_g1).unwrap();
				if(js_Boot.__instanceof(_g2,json2object_InternalError)) {
					var e = _g2;
					if(e != json2object_InternalError.ParsingThrow) {
						throw haxe_Exception.thrown(e);
					}
					continue;
				} else {
					throw _g1;
				}
			}
			var value;
			try {
				value = new JsonParser_$122(this.errors,this.putils,2).loadJson(field.value,field.name);
			} catch( _g3 ) {
				haxe_NativeStackTrace.lastError = _g3;
				var _g4 = haxe_Exception.caught(_g3).unwrap();
				if(js_Boot.__instanceof(_g4,json2object_InternalError)) {
					var e1 = _g4;
					if(e1 != json2object_InternalError.ParsingThrow) {
						throw haxe_Exception.thrown(e1);
					}
					continue;
				} else {
					throw _g3;
				}
			}
			this1.h[key] = value;
		}
	}
	,getAuto: function() {
		return new JsonParser_$120([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)));
	}
	,__class__: JsonParser_$120
});
var JsonParser_$122 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_122"] = JsonParser_$122;
JsonParser_$122.__name__ = "JsonParser_122";
JsonParser_$122.__super__ = json2object_reader_BaseParser;
JsonParser_$122.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ wantToWatch : Bool, visibleSeen : Bool, visible : Bool, timesCompleted : Int, index : Int }",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonObject: function(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["index","timesCompleted","visible","visibleSeen","wantToWatch"],[false,false,false,false,false]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "index":
				this.value.index = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"index",assigned,this.value.index,pos);
				break;
			case "timesCompleted":
				this.value.timesCompleted = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"timesCompleted",assigned,this.value.timesCompleted,pos);
				break;
			case "visible":
				this.value.visible = this.loadObjectField(($_=new JsonParser_$15(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"visible",assigned,this.value.visible,pos);
				break;
			case "visibleSeen":
				this.value.visibleSeen = this.loadObjectField(($_=new JsonParser_$15(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"visibleSeen",assigned,this.value.visibleSeen,pos);
				break;
			case "wantToWatch":
				this.value.wantToWatch = this.loadObjectField(($_=new JsonParser_$15(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"wantToWatch",assigned,this.value.wantToWatch,pos);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	,getAuto: function() {
		return { index : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), timesCompleted : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), visible : new JsonParser_$15([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), visibleSeen : new JsonParser_$15([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), wantToWatch : new JsonParser_$15([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)))};
	}
	,__class__: JsonParser_$122
});
var JsonParser_$123 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_123"] = JsonParser_$123;
JsonParser_$123.__name__ = "JsonParser_123";
JsonParser_$123.__super__ = json2object_reader_BaseParser;
JsonParser_$123.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"Array<Cutscene>",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonArray: function(a,pos,variable) {
		this.value = this.loadJsonArrayValue(a,($_=new JsonParser_$125(this.errors,this.putils,2),$bind($_,$_.loadJson)),variable);
	}
	,getAuto: function() {
		return new JsonParser_$123([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)));
	}
	,__class__: JsonParser_$123
});
var JsonParser_$125 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_125"] = JsonParser_$125;
JsonParser_$125.__name__ = "JsonParser_125";
JsonParser_$125.__super__ = json2object_reader_BaseParser;
JsonParser_$125.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ visibilityScript : String, title : String, messages : Array<Message>, id : String, actionLabel : String }",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonObject: function(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["actionLabel","id","messages","title","visibilityScript"],[false,false,false,false,false]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "actionLabel":
				this.value.actionLabel = this.loadObjectField(($_=new JsonParser_$35(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"actionLabel",assigned,this.value.actionLabel,pos);
				break;
			case "id":
				this.value.id = this.loadObjectField(($_=new JsonParser_$35(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"id",assigned,this.value.id,pos);
				break;
			case "messages":
				this.value.messages = this.loadObjectField(($_=new JsonParser_$126(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"messages",assigned,this.value.messages,pos);
				break;
			case "title":
				this.value.title = this.loadObjectField(($_=new JsonParser_$35(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"title",assigned,this.value.title,pos);
				break;
			case "visibilityScript":
				this.value.visibilityScript = this.loadObjectField(($_=new JsonParser_$35(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"visibilityScript",assigned,this.value.visibilityScript,pos);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	,getAuto: function() {
		return { actionLabel : new JsonParser_$35([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), id : new JsonParser_$35([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), messages : new JsonParser_$126([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), title : new JsonParser_$35([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), visibilityScript : new JsonParser_$35([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)))};
	}
	,__class__: JsonParser_$125
});
var JsonParser_$126 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_126"] = JsonParser_$126;
JsonParser_$126.__name__ = "JsonParser_126";
JsonParser_$126.__super__ = json2object_reader_BaseParser;
JsonParser_$126.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"Array<Message>",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonArray: function(a,pos,variable) {
		this.value = this.loadJsonArrayValue(a,($_=new JsonParser_$128(this.errors,this.putils,2),$bind($_,$_.loadJson)),variable);
	}
	,getAuto: function() {
		return new JsonParser_$126([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)));
	}
	,__class__: JsonParser_$126
});
var JsonParser_$128 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_128"] = JsonParser_$128;
JsonParser_$128.__name__ = "JsonParser_128";
JsonParser_$128.__super__ = json2object_reader_BaseParser;
JsonParser_$128.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ speaker : String, script : String, body : String }",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonObject: function(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["body","script","speaker"],[false,false,false]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "body":
				this.value.body = this.loadObjectField(($_=new JsonParser_$35(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"body",assigned,this.value.body,pos);
				break;
			case "script":
				this.value.script = this.loadObjectField(($_=new JsonParser_$35(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"script",assigned,this.value.script,pos);
				break;
			case "speaker":
				this.value.speaker = this.loadObjectField(($_=new JsonParser_$35(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"speaker",assigned,this.value.speaker,pos);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	,getAuto: function() {
		return { body : new JsonParser_$35([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), script : new JsonParser_$35([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), speaker : new JsonParser_$35([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)))};
	}
	,__class__: JsonParser_$128
});
var JsonParser_$14 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_14"] = JsonParser_$14;
JsonParser_$14.__name__ = "JsonParser_14";
JsonParser_$14.__super__ = json2object_reader_BaseParser;
JsonParser_$14.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"haxe.ds.Map<String, PlayerAction>",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonObject: function(o,pos,variable) {
		this.value = new haxe_ds_StringMap();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			var this1 = this.value;
			var key;
			try {
				var key1 = new JsonParser_$35(this.errors,this.putils,2);
				var _this = this.putils;
				key = key1.loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JString(field.name),new hxjsonast_Position(pos.file,pos.min - 1,pos.max - 1)),variable);
			} catch( _g1 ) {
				haxe_NativeStackTrace.lastError = _g1;
				var _g2 = haxe_Exception.caught(_g1).unwrap();
				if(js_Boot.__instanceof(_g2,json2object_InternalError)) {
					var e = _g2;
					if(e != json2object_InternalError.ParsingThrow) {
						throw haxe_Exception.thrown(e);
					}
					continue;
				} else {
					throw _g1;
				}
			}
			var value;
			try {
				value = new JsonParser_$39(this.errors,this.putils,2).loadJson(field.value,field.name);
			} catch( _g3 ) {
				haxe_NativeStackTrace.lastError = _g3;
				var _g4 = haxe_Exception.caught(_g3).unwrap();
				if(js_Boot.__instanceof(_g4,json2object_InternalError)) {
					var e1 = _g4;
					if(e1 != json2object_InternalError.ParsingThrow) {
						throw haxe_Exception.thrown(e1);
					}
					continue;
				} else {
					throw _g3;
				}
			}
			this1.h[key] = value;
		}
	}
	,getAuto: function() {
		return new JsonParser_$14([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)));
	}
	,__class__: JsonParser_$14
});
var JsonParser_$15 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
	this.value = false;
};
$hxClasses["JsonParser_15"] = JsonParser_$15;
JsonParser_$15.__name__ = "JsonParser_15";
JsonParser_$15.__super__ = json2object_reader_BaseParser;
JsonParser_$15.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"Bool",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonBool: function(b,pos,variable) {
		this.value = b;
	}
	,getAuto: function() {
		return new JsonParser_$15([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)));
	}
	,__class__: JsonParser_$15
});
var JsonParser_$16 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_16"] = JsonParser_$16;
JsonParser_$16.__name__ = "JsonParser_16";
JsonParser_$16.__super__ = json2object_reader_BaseParser;
JsonParser_$16.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"Array<AreaPersistence>",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonArray: function(a,pos,variable) {
		this.value = this.loadJsonArrayValue(a,($_=new JsonParser_$37(this.errors,this.putils,2),$bind($_,$_.loadJson)),variable);
	}
	,getAuto: function() {
		return new JsonParser_$16([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)));
	}
	,__class__: JsonParser_$16
});
var JsonParser_$19 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_19"] = JsonParser_$19;
JsonParser_$19.__name__ = "JsonParser_19";
JsonParser_$19.__super__ = json2object_reader_BaseParser;
JsonParser_$19.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ reportedRollingRetention : Array<Int>, latestDayRetention : Int, gameStartVersion : Int, gameStartDate : String }",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonObject: function(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["gameStartDate","gameStartVersion","latestDayRetention","reportedRollingRetention"],[false,false,false,false]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "gameStartDate":
				this.value.gameStartDate = this.loadObjectField(($_=new JsonParser_$35(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"gameStartDate",assigned,this.value.gameStartDate,pos);
				break;
			case "gameStartVersion":
				this.value.gameStartVersion = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"gameStartVersion",assigned,this.value.gameStartVersion,pos);
				break;
			case "latestDayRetention":
				this.value.latestDayRetention = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"latestDayRetention",assigned,this.value.latestDayRetention,pos);
				break;
			case "reportedRollingRetention":
				this.value.reportedRollingRetention = this.loadObjectField(($_=new JsonParser_$12(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"reportedRollingRetention",assigned,this.value.reportedRollingRetention,pos);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	,getAuto: function() {
		return { gameStartDate : new JsonParser_$35([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), gameStartVersion : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), latestDayRetention : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), reportedRollingRetention : new JsonParser_$12([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)))};
	}
	,__class__: JsonParser_$19
});
var JsonParser_$21 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_21"] = JsonParser_$21;
JsonParser_$21.__name__ = "JsonParser_21";
JsonParser_$21.__super__ = json2object_reader_BaseParser;
JsonParser_$21.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"Array<SkillSet>",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonArray: function(a,pos,variable) {
		this.value = this.loadJsonArrayValue(a,($_=new JsonParser_$31(this.errors,this.putils,2),$bind($_,$_.loadJson)),variable);
	}
	,getAuto: function() {
		return new JsonParser_$21([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)));
	}
	,__class__: JsonParser_$21
});
var JsonParser_$23 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_23"] = JsonParser_$23;
JsonParser_$23.__name__ = "JsonParser_23";
JsonParser_$23.__super__ = json2object_reader_BaseParser;
JsonParser_$23.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"Int",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonNumber: function(f,pos,variable) {
		this.value = this.loadJsonInt(f,pos,variable,this.value);
	}
	,getAuto: function() {
		return new JsonParser_$23([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)));
	}
	,__class__: JsonParser_$23
});
var JsonParser_$25 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_25"] = JsonParser_$25;
JsonParser_$25.__name__ = "JsonParser_25";
JsonParser_$25.__super__ = json2object_reader_BaseParser;
JsonParser_$25.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"String",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonString: function(s,pos,variable) {
		this.value = s;
	}
	,getAuto: function() {
		return new JsonParser_$25([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)));
	}
	,__class__: JsonParser_$25
});
var JsonParser_$3 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_3"] = JsonParser_$3;
JsonParser_$3.__name__ = "JsonParser_3";
JsonParser_$3.__super__ = json2object_reader_BaseParser;
JsonParser_$3.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"Bool",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonBool: function(b,pos,variable) {
		this.value = b;
	}
	,getAuto: function() {
		return new JsonParser_$3([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)));
	}
	,__class__: JsonParser_$3
});
var JsonParser_$31 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_31"] = JsonParser_$31;
JsonParser_$31.__name__ = "JsonParser_31";
JsonParser_$31.__super__ = json2object_reader_BaseParser;
JsonParser_$31.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ skills : Array<SkillUsable> }",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonObject: function(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["skills"],[false]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			if(field.name == "skills") {
				this.value.skills = this.loadObjectField(($_=new JsonParser_$32(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"skills",assigned,this.value.skills,pos);
			} else {
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	,getAuto: function() {
		return { skills : new JsonParser_$32([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)))};
	}
	,__class__: JsonParser_$31
});
var JsonParser_$32 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_32"] = JsonParser_$32;
JsonParser_$32.__name__ = "JsonParser_32";
JsonParser_$32.__super__ = json2object_reader_BaseParser;
JsonParser_$32.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"Array<SkillUsable>",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonArray: function(a,pos,variable) {
		this.value = this.loadJsonArrayValue(a,($_=new JsonParser_$34(this.errors,this.putils,2),$bind($_,$_.loadJson)),variable);
	}
	,getAuto: function() {
		return new JsonParser_$32([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)));
	}
	,__class__: JsonParser_$32
});
var JsonParser_$34 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_34"] = JsonParser_$34;
JsonParser_$34.__name__ = "JsonParser_34";
JsonParser_$34.__super__ = json2object_reader_BaseParser;
JsonParser_$34.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ level : Int, id : String }",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonObject: function(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["id","level"],[false,false]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "id":
				this.value.id = this.loadObjectField(($_=new JsonParser_$35(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"id",assigned,this.value.id,pos);
				break;
			case "level":
				this.value.level = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"level",assigned,this.value.level,pos);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	,getAuto: function() {
		return { id : new JsonParser_$35([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), level : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)))};
	}
	,__class__: JsonParser_$34
});
var JsonParser_$35 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_35"] = JsonParser_$35;
JsonParser_$35.__name__ = "JsonParser_35";
JsonParser_$35.__super__ = json2object_reader_BaseParser;
JsonParser_$35.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"String",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonString: function(s,pos,variable) {
		this.value = s;
	}
	,getAuto: function() {
		return new JsonParser_$35([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)));
	}
	,__class__: JsonParser_$35
});
var JsonParser_$37 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_37"] = JsonParser_$37;
JsonParser_$37.__name__ = "JsonParser_37";
JsonParser_$37.__super__ = json2object_reader_BaseParser;
JsonParser_$37.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ seen : Int, maxAreaRecord : Int, maxAreaOnPrestigeRecord : Array<Int>, maxArea : Int, area : Int, amountEnemyKilledInArea : Int }",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonObject: function(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["amountEnemyKilledInArea","area","maxArea","maxAreaOnPrestigeRecord","maxAreaRecord","seen"],[false,false,false,false,false,false]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "amountEnemyKilledInArea":
				this.value.amountEnemyKilledInArea = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"amountEnemyKilledInArea",assigned,this.value.amountEnemyKilledInArea,pos);
				break;
			case "area":
				this.value.area = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"area",assigned,this.value.area,pos);
				break;
			case "maxArea":
				this.value.maxArea = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"maxArea",assigned,this.value.maxArea,pos);
				break;
			case "maxAreaOnPrestigeRecord":
				this.value.maxAreaOnPrestigeRecord = this.loadObjectField(($_=new JsonParser_$12(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"maxAreaOnPrestigeRecord",assigned,this.value.maxAreaOnPrestigeRecord,pos);
				break;
			case "maxAreaRecord":
				this.value.maxAreaRecord = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"maxAreaRecord",assigned,this.value.maxAreaRecord,pos);
				break;
			case "seen":
				this.value.seen = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"seen",assigned,this.value.seen,pos);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	,getAuto: function() {
		return { amountEnemyKilledInArea : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), area : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), maxArea : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), maxAreaOnPrestigeRecord : new JsonParser_$12([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), maxAreaRecord : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), seen : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)))};
	}
	,__class__: JsonParser_$37
});
var JsonParser_$39 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_39"] = JsonParser_$39;
JsonParser_$39.__name__ = "JsonParser_39";
JsonParser_$39.__super__ = json2object_reader_BaseParser;
JsonParser_$39.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ visible : Bool, timesUsed : Int, mode : Int, enabled : Bool }",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonObject: function(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["enabled","mode","timesUsed","visible"],[false,false,false,false]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "enabled":
				this.value.enabled = this.loadObjectField(($_=new JsonParser_$15(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"enabled",assigned,this.value.enabled,pos);
				break;
			case "mode":
				this.value.mode = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"mode",assigned,this.value.mode,pos);
				break;
			case "timesUsed":
				this.value.timesUsed = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"timesUsed",assigned,this.value.timesUsed,pos);
				break;
			case "visible":
				this.value.visible = this.loadObjectField(($_=new JsonParser_$15(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"visible",assigned,this.value.visible,pos);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	,getAuto: function() {
		return { enabled : new JsonParser_$15([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), mode : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), timesUsed : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), visible : new JsonParser_$15([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)))};
	}
	,__class__: JsonParser_$39
});
var JsonParser_$4 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
	this.value = 0;
};
$hxClasses["JsonParser_4"] = JsonParser_$4;
JsonParser_$4.__name__ = "JsonParser_4";
JsonParser_$4.__super__ = json2object_reader_BaseParser;
JsonParser_$4.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"Int",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNumber: function(f,pos,variable) {
		this.value = this.loadJsonInt(f,pos,variable,this.value);
	}
	,getAuto: function() {
		return new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)));
	}
	,__class__: JsonParser_$4
});
var JsonParser_$41 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_41"] = JsonParser_$41;
JsonParser_$41.__name__ = "JsonParser_41";
JsonParser_$41.__super__ = json2object_reader_BaseParser;
JsonParser_$41.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ limitbreak : Int, level : Int, ascension : Int }",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonObject: function(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["ascension","level","limitbreak"],[false,false,false]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "ascension":
				this.value.ascension = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"ascension",assigned,this.value.ascension,pos);
				break;
			case "level":
				this.value.level = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"level",assigned,this.value.level,pos);
				break;
			case "limitbreak":
				this.value.limitbreak = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"limitbreak",assigned,this.value.limitbreak,pos);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	,getAuto: function() {
		return { ascension : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), level : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), limitbreak : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)))};
	}
	,__class__: JsonParser_$41
});
var JsonParser_$43 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_43"] = JsonParser_$43;
JsonParser_$43.__name__ = "JsonParser_43";
JsonParser_$43.__super__ = json2object_reader_BaseParser;
JsonParser_$43.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"haxe.ds.Map<String, Int>",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonObject: function(o,pos,variable) {
		this.value = new haxe_ds_StringMap();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			var this1 = this.value;
			var key;
			try {
				var key1 = new JsonParser_$35(this.errors,this.putils,2);
				var _this = this.putils;
				key = key1.loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JString(field.name),new hxjsonast_Position(pos.file,pos.min - 1,pos.max - 1)),variable);
			} catch( _g1 ) {
				haxe_NativeStackTrace.lastError = _g1;
				var _g2 = haxe_Exception.caught(_g1).unwrap();
				if(js_Boot.__instanceof(_g2,json2object_InternalError)) {
					var e = _g2;
					if(e != json2object_InternalError.ParsingThrow) {
						throw haxe_Exception.thrown(e);
					}
					continue;
				} else {
					throw _g1;
				}
			}
			var value;
			try {
				value = new JsonParser_$4(this.errors,this.putils,2).loadJson(field.value,field.name);
			} catch( _g3 ) {
				haxe_NativeStackTrace.lastError = _g3;
				var _g4 = haxe_Exception.caught(_g3).unwrap();
				if(js_Boot.__instanceof(_g4,json2object_InternalError)) {
					var e1 = _g4;
					if(e1 != json2object_InternalError.ParsingThrow) {
						throw haxe_Exception.thrown(e1);
					}
					continue;
				} else {
					throw _g3;
				}
			}
			this1.h[key] = value;
		}
	}
	,getAuto: function() {
		return new JsonParser_$43([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)));
	}
	,__class__: JsonParser_$43
});
var JsonParser_$45 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_45"] = JsonParser_$45;
JsonParser_$45.__name__ = "JsonParser_45";
JsonParser_$45.__super__ = json2object_reader_BaseParser;
JsonParser_$45.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"Array<Buff>",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonArray: function(a,pos,variable) {
		this.value = this.loadJsonArrayValue(a,($_=new JsonParser_$79(this.errors,this.putils,2),$bind($_,$_.loadJson)),variable);
	}
	,getAuto: function() {
		return new JsonParser_$45([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)));
	}
	,__class__: JsonParser_$45
});
var JsonParser_$46 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_46"] = JsonParser_$46;
JsonParser_$46.__name__ = "JsonParser_46";
JsonParser_$46.__super__ = json2object_reader_BaseParser;
JsonParser_$46.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"Array<Equipment>",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonArray: function(a,pos,variable) {
		this.value = this.loadJsonArrayValue(a,($_=new JsonParser_$61(this.errors,this.putils,2),$bind($_,$_.loadJson)),variable);
	}
	,getAuto: function() {
		return new JsonParser_$46([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)));
	}
	,__class__: JsonParser_$46
});
var JsonParser_$48 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_48"] = JsonParser_$48;
JsonParser_$48.__name__ = "JsonParser_48";
JsonParser_$48.__super__ = json2object_reader_BaseParser;
JsonParser_$48.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"Array<EquipmentSet>",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonArray: function(a,pos,variable) {
		this.value = this.loadJsonArrayValue(a,($_=new JsonParser_$59(this.errors,this.putils,2),$bind($_,$_.loadJson)),variable);
	}
	,getAuto: function() {
		return new JsonParser_$48([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)));
	}
	,__class__: JsonParser_$48
});
var JsonParser_$49 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_49"] = JsonParser_$49;
JsonParser_$49.__name__ = "JsonParser_49";
JsonParser_$49.__super__ = json2object_reader_BaseParser;
JsonParser_$49.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"ActorReference",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonObject: function(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["type","pos"],[false,false]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "pos":
				this.value.pos = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"pos",assigned,this.value.pos,pos);
				break;
			case "type":
				this.value.type = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"type",assigned,this.value.type,pos);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	,getAuto: function() {
		var value = Object.create(ActorReference.prototype);
		value.type = new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)));
		value.pos = new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)));
		return value;
	}
	,__class__: JsonParser_$49
});
var JsonParser_$51 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_51"] = JsonParser_$51;
JsonParser_$51.__name__ = "JsonParser_51";
JsonParser_$51.__super__ = json2object_reader_BaseParser;
JsonParser_$51.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"Array<Int>",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonArray: function(a,pos,variable) {
		this.value = this.loadJsonArrayValue(a,($_=new JsonParser_$4(this.errors,this.putils,2),$bind($_,$_.loadJson)),variable);
	}
	,getAuto: function() {
		return new JsonParser_$51([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)));
	}
	,__class__: JsonParser_$51
});
var JsonParser_$53 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_53"] = JsonParser_$53;
JsonParser_$53.__name__ = "JsonParser_53";
JsonParser_$53.__super__ = json2object_reader_BaseParser;
JsonParser_$53.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"Array<SkillUsable>",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonArray: function(a,pos,variable) {
		this.value = this.loadJsonArrayValue(a,($_=new JsonParser_$34(this.errors,this.putils,2),$bind($_,$_.loadJson)),variable);
	}
	,getAuto: function() {
		return new JsonParser_$53([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)));
	}
	,__class__: JsonParser_$53
});
var JsonParser_$55 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_55"] = JsonParser_$55;
JsonParser_$55.__name__ = "JsonParser_55";
JsonParser_$55.__super__ = json2object_reader_BaseParser;
JsonParser_$55.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ value : Int, scaling : Scaling, lastUsedBaseAttribute : Int, cap : Int, calculatedMax : Int }",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonObject: function(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["calculatedMax","cap","lastUsedBaseAttribute","scaling","value"],[false,false,false,false,false]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "calculatedMax":
				this.value.calculatedMax = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"calculatedMax",assigned,this.value.calculatedMax,pos);
				break;
			case "cap":
				this.value.cap = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"cap",assigned,this.value.cap,pos);
				break;
			case "lastUsedBaseAttribute":
				this.value.lastUsedBaseAttribute = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"lastUsedBaseAttribute",assigned,this.value.lastUsedBaseAttribute,pos);
				break;
			case "scaling":
				this.value.scaling = this.loadObjectField(($_=new JsonParser_$57(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"scaling",assigned,this.value.scaling,pos);
				break;
			case "value":
				this.value.value = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"value",assigned,this.value.value,pos);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	,getAuto: function() {
		return { calculatedMax : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), cap : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), lastUsedBaseAttribute : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), scaling : new JsonParser_$57([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), value : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)))};
	}
	,__class__: JsonParser_$55
});
var JsonParser_$57 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_57"] = JsonParser_$57;
JsonParser_$57.__name__ = "JsonParser_57";
JsonParser_$57.__super__ = json2object_reader_BaseParser;
JsonParser_$57.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ minimumIncrement : Int, initialMultiplication : Bool, initial : Int, exponential : Bool, data1 : Int }",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonObject: function(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["data1","exponential","initial","initialMultiplication","minimumIncrement"],[false,false,false,false,false]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "data1":
				this.value.data1 = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"data1",assigned,this.value.data1,pos);
				break;
			case "exponential":
				this.value.exponential = this.loadObjectField(($_=new JsonParser_$15(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"exponential",assigned,this.value.exponential,pos);
				break;
			case "initial":
				this.value.initial = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"initial",assigned,this.value.initial,pos);
				break;
			case "initialMultiplication":
				this.value.initialMultiplication = this.loadObjectField(($_=new JsonParser_$15(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"initialMultiplication",assigned,this.value.initialMultiplication,pos);
				break;
			case "minimumIncrement":
				this.value.minimumIncrement = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"minimumIncrement",assigned,this.value.minimumIncrement,pos);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	,getAuto: function() {
		return { data1 : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), exponential : new JsonParser_$15([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), initial : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), initialMultiplication : new JsonParser_$15([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), minimumIncrement : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)))};
	}
	,__class__: JsonParser_$57
});
var JsonParser_$59 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_59"] = JsonParser_$59;
JsonParser_$59.__name__ = "JsonParser_59";
JsonParser_$59.__super__ = json2object_reader_BaseParser;
JsonParser_$59.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ equipmentSlots : Array<Int> }",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonObject: function(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["equipmentSlots"],[false]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			if(field.name == "equipmentSlots") {
				this.value.equipmentSlots = this.loadObjectField(($_=new JsonParser_$12(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"equipmentSlots",assigned,this.value.equipmentSlots,pos);
			} else {
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	,getAuto: function() {
		return { equipmentSlots : new JsonParser_$12([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)))};
	}
	,__class__: JsonParser_$59
});
var JsonParser_$61 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_61"] = JsonParser_$61;
JsonParser_$61.__name__ = "JsonParser_61";
JsonParser_$61.__super__ = json2object_reader_BaseParser;
JsonParser_$61.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ type : Int, seen : Int, requiredAttributes : Map<String, Int>, ?outsideSystems : Null<Map<String, Int>>, ?generationVariationsMultiplier : Null<Map<String, Int>>, ?generationVariations : Null<Map<String, Int>>, ?generationSuffixModSeed : Null<Int>, ?generationSuffixMod : Null<Int>, ?generationPrefixModSeed : Null<Int>, ?generationPrefixMod : Null<Int>, ?generationLevel : Null<Int>, ?generationBaseItem : Null<Int>, attributes : Map<String, Int>, ?attributeMultiplier : Null<Map<String, Int>> }",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonObject: function(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["attributeMultiplier","attributes","generationBaseItem","generationLevel","generationPrefixMod","generationPrefixModSeed","generationSuffixMod","generationSuffixModSeed","generationVariations","generationVariationsMultiplier","outsideSystems","requiredAttributes","seen","type"],[true,false,true,true,true,true,true,true,true,true,true,false,false,false]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "attributeMultiplier":
				this.value.attributeMultiplier = this.loadObjectField(($_=new JsonParser_$43(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"attributeMultiplier",assigned,this.value.attributeMultiplier,pos);
				break;
			case "attributes":
				this.value.attributes = this.loadObjectField(($_=new JsonParser_$43(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"attributes",assigned,this.value.attributes,pos);
				break;
			case "generationBaseItem":
				this.value.generationBaseItem = this.loadObjectField(($_=new JsonParser_$23(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"generationBaseItem",assigned,this.value.generationBaseItem,pos);
				break;
			case "generationLevel":
				this.value.generationLevel = this.loadObjectField(($_=new JsonParser_$23(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"generationLevel",assigned,this.value.generationLevel,pos);
				break;
			case "generationPrefixMod":
				this.value.generationPrefixMod = this.loadObjectField(($_=new JsonParser_$23(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"generationPrefixMod",assigned,this.value.generationPrefixMod,pos);
				break;
			case "generationPrefixModSeed":
				this.value.generationPrefixModSeed = this.loadObjectField(($_=new JsonParser_$23(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"generationPrefixModSeed",assigned,this.value.generationPrefixModSeed,pos);
				break;
			case "generationSuffixMod":
				this.value.generationSuffixMod = this.loadObjectField(($_=new JsonParser_$23(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"generationSuffixMod",assigned,this.value.generationSuffixMod,pos);
				break;
			case "generationSuffixModSeed":
				this.value.generationSuffixModSeed = this.loadObjectField(($_=new JsonParser_$23(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"generationSuffixModSeed",assigned,this.value.generationSuffixModSeed,pos);
				break;
			case "generationVariations":
				this.value.generationVariations = this.loadObjectField(($_=new JsonParser_$43(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"generationVariations",assigned,this.value.generationVariations,pos);
				break;
			case "generationVariationsMultiplier":
				this.value.generationVariationsMultiplier = this.loadObjectField(($_=new JsonParser_$43(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"generationVariationsMultiplier",assigned,this.value.generationVariationsMultiplier,pos);
				break;
			case "outsideSystems":
				this.value.outsideSystems = this.loadObjectField(($_=new JsonParser_$43(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"outsideSystems",assigned,this.value.outsideSystems,pos);
				break;
			case "requiredAttributes":
				this.value.requiredAttributes = this.loadObjectField(($_=new JsonParser_$43(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"requiredAttributes",assigned,this.value.requiredAttributes,pos);
				break;
			case "seen":
				this.value.seen = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"seen",assigned,this.value.seen,pos);
				break;
			case "type":
				this.value.type = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"type",assigned,this.value.type,pos);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	,getAuto: function() {
		return { attributeMultiplier : new JsonParser_$43([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), attributes : new JsonParser_$43([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), generationBaseItem : new JsonParser_$23([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), generationLevel : new JsonParser_$23([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), generationPrefixMod : new JsonParser_$23([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), generationPrefixModSeed : new JsonParser_$23([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), generationSuffixMod : new JsonParser_$23([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), generationSuffixModSeed : new JsonParser_$23([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), generationVariations : new JsonParser_$43([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), generationVariationsMultiplier : new JsonParser_$43([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), outsideSystems : new JsonParser_$43([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), requiredAttributes : new JsonParser_$43([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), seen : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), type : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)))};
	}
	,__class__: JsonParser_$61
});
var JsonParser_$7 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_7"] = JsonParser_$7;
JsonParser_$7.__name__ = "JsonParser_7";
JsonParser_$7.__super__ = json2object_reader_BaseParser;
JsonParser_$7.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ currencies : Map<String, CurrencyPersistent> }",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonObject: function(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["currencies"],[false]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			if(field.name == "currencies") {
				this.value.currencies = this.loadObjectField(($_=new JsonParser_$81(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"currencies",assigned,this.value.currencies,pos);
			} else {
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	,getAuto: function() {
		return { currencies : new JsonParser_$81([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)))};
	}
	,__class__: JsonParser_$7
});
var JsonParser_$79 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_79"] = JsonParser_$79;
JsonParser_$79.__name__ = "JsonParser_79";
JsonParser_$79.__super__ = json2object_reader_BaseParser;
JsonParser_$79.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ uniqueId : String, strength : Int, ?noble : Null<Bool>, mulStats : Map<String, Int>, duration : Int, ?debuff : Null<Bool>, addStats : Map<String, Int> }",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonObject: function(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["addStats","debuff","duration","mulStats","noble","strength","uniqueId"],[false,true,false,false,true,false,false]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "addStats":
				this.value.addStats = this.loadObjectField(($_=new JsonParser_$43(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"addStats",assigned,this.value.addStats,pos);
				break;
			case "debuff":
				this.value.debuff = this.loadObjectField(($_=new JsonParser_$3(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"debuff",assigned,this.value.debuff,pos);
				break;
			case "duration":
				this.value.duration = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"duration",assigned,this.value.duration,pos);
				break;
			case "mulStats":
				this.value.mulStats = this.loadObjectField(($_=new JsonParser_$43(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"mulStats",assigned,this.value.mulStats,pos);
				break;
			case "noble":
				this.value.noble = this.loadObjectField(($_=new JsonParser_$3(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"noble",assigned,this.value.noble,pos);
				break;
			case "strength":
				this.value.strength = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"strength",assigned,this.value.strength,pos);
				break;
			case "uniqueId":
				this.value.uniqueId = this.loadObjectField(($_=new JsonParser_$35(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"uniqueId",assigned,this.value.uniqueId,pos);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	,getAuto: function() {
		return { addStats : new JsonParser_$43([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), debuff : new JsonParser_$3([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), duration : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), mulStats : new JsonParser_$43([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), noble : new JsonParser_$3([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), strength : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), uniqueId : new JsonParser_$35([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)))};
	}
	,__class__: JsonParser_$79
});
var JsonParser_$81 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_81"] = JsonParser_$81;
JsonParser_$81.__name__ = "JsonParser_81";
JsonParser_$81.__super__ = json2object_reader_BaseParser;
JsonParser_$81.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"haxe.ds.Map<String, CurrencyPersistent>",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonObject: function(o,pos,variable) {
		this.value = new haxe_ds_StringMap();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			var this1 = this.value;
			var key;
			try {
				var key1 = new JsonParser_$35(this.errors,this.putils,2);
				var _this = this.putils;
				key = key1.loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JString(field.name),new hxjsonast_Position(pos.file,pos.min - 1,pos.max - 1)),variable);
			} catch( _g1 ) {
				haxe_NativeStackTrace.lastError = _g1;
				var _g2 = haxe_Exception.caught(_g1).unwrap();
				if(js_Boot.__instanceof(_g2,json2object_InternalError)) {
					var e = _g2;
					if(e != json2object_InternalError.ParsingThrow) {
						throw haxe_Exception.thrown(e);
					}
					continue;
				} else {
					throw _g1;
				}
			}
			var value;
			try {
				value = new JsonParser_$83(this.errors,this.putils,2).loadJson(field.value,field.name);
			} catch( _g3 ) {
				haxe_NativeStackTrace.lastError = _g3;
				var _g4 = haxe_Exception.caught(_g3).unwrap();
				if(js_Boot.__instanceof(_g4,json2object_InternalError)) {
					var e1 = _g4;
					if(e1 != json2object_InternalError.ParsingThrow) {
						throw haxe_Exception.thrown(e1);
					}
					continue;
				} else {
					throw _g3;
				}
			}
			this1.h[key] = value;
		}
	}
	,getAuto: function() {
		return new JsonParser_$81([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)));
	}
	,__class__: JsonParser_$81
});
var JsonParser_$83 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_83"] = JsonParser_$83;
JsonParser_$83.__name__ = "JsonParser_83";
JsonParser_$83.__super__ = json2object_reader_BaseParser;
JsonParser_$83.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ visible : Bool, value : Int }",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonObject: function(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["value","visible"],[false,false]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "value":
				this.value.value = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"value",assigned,this.value.value,pos);
				break;
			case "visible":
				this.value.visible = this.loadObjectField(($_=new JsonParser_$15(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"visible",assigned,this.value.visible,pos);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	,getAuto: function() {
		return { value : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), visible : new JsonParser_$15([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)))};
	}
	,__class__: JsonParser_$83
});
var JsonParser_$85 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_85"] = JsonParser_$85;
JsonParser_$85.__name__ = "JsonParser_85";
JsonParser_$85.__super__ = json2object_reader_BaseParser;
JsonParser_$85.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ achievementData : AchievementsPersistence }",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonObject: function(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["achievementData"],[false]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			if(field.name == "achievementData") {
				this.value.achievementData = this.loadObjectField(($_=new JsonParser_$87(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"achievementData",assigned,this.value.achievementData,pos);
			} else {
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	,getAuto: function() {
		return { achievementData : new JsonParser_$87([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)))};
	}
	,__class__: JsonParser_$85
});
var JsonParser_$87 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_87"] = JsonParser_$87;
JsonParser_$87.__name__ = "JsonParser_87";
JsonParser_$87.__super__ = json2object_reader_BaseParser;
JsonParser_$87.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ achievs : Map<String, AchievementPersistence> }",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonObject: function(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["achievs"],[false]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			if(field.name == "achievs") {
				this.value.achievs = this.loadObjectField(($_=new JsonParser_$89(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"achievs",assigned,this.value.achievs,pos);
			} else {
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	,getAuto: function() {
		return { achievs : new JsonParser_$89([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)))};
	}
	,__class__: JsonParser_$87
});
var JsonParser_$89 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_89"] = JsonParser_$89;
JsonParser_$89.__name__ = "JsonParser_89";
JsonParser_$89.__super__ = json2object_reader_BaseParser;
JsonParser_$89.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"haxe.ds.Map<String, AchievementPersistence>",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonObject: function(o,pos,variable) {
		this.value = new haxe_ds_StringMap();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			var this1 = this.value;
			var key;
			try {
				var key1 = new JsonParser_$35(this.errors,this.putils,2);
				var _this = this.putils;
				key = key1.loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JString(field.name),new hxjsonast_Position(pos.file,pos.min - 1,pos.max - 1)),variable);
			} catch( _g1 ) {
				haxe_NativeStackTrace.lastError = _g1;
				var _g2 = haxe_Exception.caught(_g1).unwrap();
				if(js_Boot.__instanceof(_g2,json2object_InternalError)) {
					var e = _g2;
					if(e != json2object_InternalError.ParsingThrow) {
						throw haxe_Exception.thrown(e);
					}
					continue;
				} else {
					throw _g1;
				}
			}
			var value;
			try {
				value = new JsonParser_$91(this.errors,this.putils,2).loadJson(field.value,field.name);
			} catch( _g3 ) {
				haxe_NativeStackTrace.lastError = _g3;
				var _g4 = haxe_Exception.caught(_g3).unwrap();
				if(js_Boot.__instanceof(_g4,json2object_InternalError)) {
					var e1 = _g4;
					if(e1 != json2object_InternalError.ParsingThrow) {
						throw haxe_Exception.thrown(e1);
					}
					continue;
				} else {
					throw _g3;
				}
			}
			this1.h[key] = value;
		}
	}
	,getAuto: function() {
		return new JsonParser_$89([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)));
	}
	,__class__: JsonParser_$89
});
var JsonParser_$9 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_9"] = JsonParser_$9;
JsonParser_$9.__name__ = "JsonParser_9";
JsonParser_$9.__super__ = json2object_reader_BaseParser;
JsonParser_$9.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ xp : ScalingResource, viewAux : Int, ?usableSkills : Null<Array<SkillUsable>>, ?turnRecharge : Null<Array<Int>>, reference : ActorReference, level : Int, ?equipmentSets : Null<Array<EquipmentSet>>, equipment : Array<Equipment>, ?chosenEquipSet : Null<Int>, ?buffs : Null<Array<Buff>>, attributesCalculated : Map<String, Int>, attributesBase : Map<String, Int> }",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonObject: function(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["attributesBase","attributesCalculated","buffs","chosenEquipSet","equipment","equipmentSets","level","reference","turnRecharge","usableSkills","viewAux","xp"],[false,false,true,true,false,true,false,false,true,true,false,false]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "attributesBase":
				this.value.attributesBase = this.loadObjectField(($_=new JsonParser_$43(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"attributesBase",assigned,this.value.attributesBase,pos);
				break;
			case "attributesCalculated":
				this.value.attributesCalculated = this.loadObjectField(($_=new JsonParser_$43(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"attributesCalculated",assigned,this.value.attributesCalculated,pos);
				break;
			case "buffs":
				this.value.buffs = this.loadObjectField(($_=new JsonParser_$45(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"buffs",assigned,this.value.buffs,pos);
				break;
			case "chosenEquipSet":
				this.value.chosenEquipSet = this.loadObjectField(($_=new JsonParser_$23(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"chosenEquipSet",assigned,this.value.chosenEquipSet,pos);
				break;
			case "equipment":
				this.value.equipment = this.loadObjectField(($_=new JsonParser_$46(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"equipment",assigned,this.value.equipment,pos);
				break;
			case "equipmentSets":
				this.value.equipmentSets = this.loadObjectField(($_=new JsonParser_$48(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"equipmentSets",assigned,this.value.equipmentSets,pos);
				break;
			case "level":
				this.value.level = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"level",assigned,this.value.level,pos);
				break;
			case "reference":
				this.value.reference = this.loadObjectField(($_=new JsonParser_$49(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"reference",assigned,this.value.reference,pos);
				break;
			case "turnRecharge":
				this.value.turnRecharge = this.loadObjectField(($_=new JsonParser_$51(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"turnRecharge",assigned,this.value.turnRecharge,pos);
				break;
			case "usableSkills":
				this.value.usableSkills = this.loadObjectField(($_=new JsonParser_$53(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"usableSkills",assigned,this.value.usableSkills,pos);
				break;
			case "viewAux":
				this.value.viewAux = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"viewAux",assigned,this.value.viewAux,pos);
				break;
			case "xp":
				this.value.xp = this.loadObjectField(($_=new JsonParser_$55(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"xp",assigned,this.value.xp,pos);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	,getAuto: function() {
		return { attributesBase : new JsonParser_$43([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), attributesCalculated : new JsonParser_$43([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), buffs : new JsonParser_$45([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), chosenEquipSet : new JsonParser_$23([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), equipment : new JsonParser_$46([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), equipmentSets : new JsonParser_$48([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), level : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), reference : new JsonParser_$49([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), turnRecharge : new JsonParser_$51([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), usableSkills : new JsonParser_$53([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), viewAux : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), xp : new JsonParser_$55([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)))};
	}
	,__class__: JsonParser_$9
});
var JsonParser_$91 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_91"] = JsonParser_$91;
JsonParser_$91.__name__ = "JsonParser_91";
JsonParser_$91.__super__ = json2object_reader_BaseParser;
JsonParser_$91.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ state : Int }",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonObject: function(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["state"],[false]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			if(field.name == "state") {
				this.value.state = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"state",assigned,this.value.state,pos);
			} else {
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	,getAuto: function() {
		return { state : new JsonParser_$4([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)))};
	}
	,__class__: JsonParser_$91
});
var JsonParser_$93 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_93"] = JsonParser_$93;
JsonParser_$93.__name__ = "JsonParser_93";
JsonParser_$93.__super__ = json2object_reader_BaseParser;
JsonParser_$93.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ talentDimension : TalentDimensionPersistence }",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonObject: function(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["talentDimension"],[false]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			if(field.name == "talentDimension") {
				this.value.talentDimension = this.loadObjectField(($_=new JsonParser_$95(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"talentDimension",assigned,this.value.talentDimension,pos);
			} else {
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	,getAuto: function() {
		return { talentDimension : new JsonParser_$95([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)))};
	}
	,__class__: JsonParser_$93
});
var JsonParser_$95 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_95"] = JsonParser_$95;
JsonParser_$95.__name__ = "JsonParser_95";
JsonParser_$95.__super__ = json2object_reader_BaseParser;
JsonParser_$95.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ talentToSet : Array<TalentSetPersistence> }",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonObject: function(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["talentToSet"],[false]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			if(field.name == "talentToSet") {
				this.value.talentToSet = this.loadObjectField(($_=new JsonParser_$96(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"talentToSet",assigned,this.value.talentToSet,pos);
			} else {
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	,getAuto: function() {
		return { talentToSet : new JsonParser_$96([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)))};
	}
	,__class__: JsonParser_$95
});
var JsonParser_$96 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_96"] = JsonParser_$96;
JsonParser_$96.__name__ = "JsonParser_96";
JsonParser_$96.__super__ = json2object_reader_BaseParser;
JsonParser_$96.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"Array<TalentSetPersistence>",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonArray: function(a,pos,variable) {
		this.value = this.loadJsonArrayValue(a,($_=new JsonParser_$98(this.errors,this.putils,2),$bind($_,$_.loadJson)),variable);
	}
	,getAuto: function() {
		return new JsonParser_$96([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)));
	}
	,__class__: JsonParser_$96
});
var JsonParser_$98 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_98"] = JsonParser_$98;
JsonParser_$98.__name__ = "JsonParser_98";
JsonParser_$98.__super__ = json2object_reader_BaseParser;
JsonParser_$98.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ sets : Array<TalentSetPersistenceUnit> }",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonObject: function(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["sets"],[false]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			if(field.name == "sets") {
				this.value.sets = this.loadObjectField(($_=new JsonParser_$99(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"sets",assigned,this.value.sets,pos);
			} else {
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	,getAuto: function() {
		return { sets : new JsonParser_$99([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)))};
	}
	,__class__: JsonParser_$98
});
var JsonParser_$99 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_99"] = JsonParser_$99;
JsonParser_$99.__name__ = "JsonParser_99";
JsonParser_$99.__super__ = json2object_reader_BaseParser;
JsonParser_$99.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"Array<TalentSetPersistenceUnit>",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonArray: function(a,pos,variable) {
		this.value = this.loadJsonArrayValue(a,($_=new JsonParser_$101(this.errors,this.putils,2),$bind($_,$_.loadJson)),variable);
	}
	,getAuto: function() {
		return new JsonParser_$99([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)));
	}
	,__class__: JsonParser_$99
});
var JsonWriter_$106 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_106"] = JsonWriter_$106;
JsonWriter_$106.__name__ = "JsonWriter_106";
JsonWriter_$106.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var decl = [indent + space + "\"currentStoryId\": " + new JsonWriter_$21(this.ignoreNullOptionals)._write(o.currentStoryId,space,level + 1,false,onAllOptionalNull),indent + space + "\"progressionData\": " + new JsonWriter_$108(this.ignoreNullOptionals)._write(o.progressionData,space,level + 1,false,onAllOptionalNull),indent + space + "\"worldVersion\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.worldVersion,space,level + 1,false,onAllOptionalNull)];
		if(this.ignoreNullOptionals) {
			var skips = [false,false,false];
			if(skips.indexOf(false) == -1) {
				decl = onAllOptionalNull != null ? [onAllOptionalNull()] : [];
			} else {
				var _g = [];
				var _g1 = 0;
				var _g2 = decl.length;
				while(_g1 < _g2) {
					var i = _g1++;
					var decl1;
					if(skips[i]) {
						continue;
					} else {
						decl1 = decl[i];
					}
					_g.push(decl1);
				}
				decl = _g;
			}
		}
		var newLine = space != "" && decl.length > 0 ? "\n" : "";
		var json = firstIndent + "{" + newLine;
		json += decl.join("," + newLine) + newLine;
		json += indent + "}";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$106
};
var JsonStoryTypes = function() { };
$hxClasses["JsonStoryTypes"] = JsonStoryTypes;
JsonStoryTypes.__name__ = "JsonStoryTypes";
var JsonWriter_$73 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_73"] = JsonWriter_$73;
JsonWriter_$73.__name__ = "JsonWriter_73";
JsonWriter_$73.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var decl = [indent + space + "\"achievementData\": " + new JsonWriter_$75(this.ignoreNullOptionals)._write(o.achievementData,space,level + 1,false,onAllOptionalNull)];
		if(this.ignoreNullOptionals) {
			var skips = [false];
			if(skips.indexOf(false) == -1) {
				decl = onAllOptionalNull != null ? [onAllOptionalNull()] : [];
			} else {
				var _g = [];
				var _g1 = 0;
				var _g2 = decl.length;
				while(_g1 < _g2) {
					var i = _g1++;
					var decl1;
					if(skips[i]) {
						continue;
					} else {
						decl1 = decl[i];
					}
					_g.push(decl1);
				}
				decl = _g;
			}
		}
		var newLine = space != "" && decl.length > 0 ? "\n" : "";
		var json = firstIndent + "{" + newLine;
		json += decl.join("," + newLine) + newLine;
		json += indent + "}";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$73
};
var JsonWriter_$81 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_81"] = JsonWriter_$81;
JsonWriter_$81.__name__ = "JsonWriter_81";
JsonWriter_$81.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var decl = [indent + space + "\"talentDimension\": " + new JsonWriter_$83(this.ignoreNullOptionals)._write(o.talentDimension,space,level + 1,false,onAllOptionalNull)];
		if(this.ignoreNullOptionals) {
			var skips = [false];
			if(skips.indexOf(false) == -1) {
				decl = onAllOptionalNull != null ? [onAllOptionalNull()] : [];
			} else {
				var _g = [];
				var _g1 = 0;
				var _g2 = decl.length;
				while(_g1 < _g2) {
					var i = _g1++;
					var decl1;
					if(skips[i]) {
						continue;
					} else {
						decl1 = decl[i];
					}
					_g.push(decl1);
				}
				decl = _g;
			}
		}
		var newLine = space != "" && decl.length > 0 ? "\n" : "";
		var json = firstIndent + "{" + newLine;
		json += decl.join("," + newLine) + newLine;
		json += indent + "}";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$81
};
var JsonWriter_$93 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_93"] = JsonWriter_$93;
JsonWriter_$93.__name__ = "JsonWriter_93";
JsonWriter_$93.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var decl = [indent + space + "\"arcania\": " + new JsonWriter_$95(this.ignoreNullOptionals)._write(o.arcania,space,level + 1,false,onAllOptionalNull),indent + space + "\"talentGeneral\": " + new JsonWriter_$101(this.ignoreNullOptionals)._write(o.talentGeneral,space,level + 1,false,onAllOptionalNull)];
		if(this.ignoreNullOptionals) {
			var skips = [false,false];
			if(skips.indexOf(false) == -1) {
				decl = onAllOptionalNull != null ? [onAllOptionalNull()] : [];
			} else {
				var _g = [];
				var _g1 = 0;
				var _g2 = decl.length;
				while(_g1 < _g2) {
					var i = _g1++;
					var decl1;
					if(skips[i]) {
						continue;
					} else {
						decl1 = decl[i];
					}
					_g.push(decl1);
				}
				decl = _g;
			}
		}
		var newLine = space != "" && decl.length > 0 ? "\n" : "";
		var json = firstIndent + "{" + newLine;
		json += decl.join("," + newLine) + newLine;
		json += indent + "}";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$93
};
var JsonWriter_$1 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_1"] = JsonWriter_$1;
JsonWriter_$1.__name__ = "JsonWriter_1";
JsonWriter_$1.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var decl = [indent + space + "\"autoAdvance\": " + new JsonWriter_$3(this.ignoreNullOptionals)._write(o.autoAdvance,space,level + 1,false,onAllOptionalNull),indent + space + "\"autoRepeat\": " + new JsonWriter_$3(this.ignoreNullOptionals)._write(o.autoRepeat,space,level + 1,false,onAllOptionalNull),indent + space + "\"battleArea\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.battleArea,space,level + 1,false,onAllOptionalNull),indent + space + "\"battleAreaRegion\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.battleAreaRegion,space,level + 1,false,onAllOptionalNull),indent + space + "\"battleAreaRegionMax\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.battleAreaRegionMax,space,level + 1,false,onAllOptionalNull),indent + space + "\"currency\": " + new JsonWriter_$7(this.ignoreNullOptionals)._write(o.currency,space,level + 1,false,onAllOptionalNull),indent + space + "\"enemy\": " + new JsonWriter_$14(this.ignoreNullOptionals)._write(o.enemy,space,level + 1,false,onAllOptionalNull),indent + space + "\"equipLevels\": " + new JsonWriter_$52(this.ignoreNullOptionals)._write(o.equipLevels,space,level + 1,false,onAllOptionalNull),indent + space + "\"hero\": " + new JsonWriter_$14(this.ignoreNullOptionals)._write(o.hero,space,level + 1,false,onAllOptionalNull),indent + space + "\"killedInArea\": " + new JsonWriter_$39(this.ignoreNullOptionals)._write(o.killedInArea,space,level + 1,false,onAllOptionalNull),indent + space + "\"maxArea\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.maxArea,space,level + 1,false,onAllOptionalNull),indent + space + "\"necessaryToKillInArea\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.necessaryToKillInArea,space,level + 1,false,onAllOptionalNull),indent + space + "\"playerActions\": " + new JsonWriter_$56(this.ignoreNullOptionals)._write(o.playerActions,space,level + 1,false,onAllOptionalNull),indent + space + "\"playerTimesKilled\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.playerTimesKilled,space,level + 1,false,onAllOptionalNull),indent + space + "\"prestigeTimes\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.prestigeTimes,space,level + 1,false,onAllOptionalNull),indent + space + "\"recovering\": " + new JsonWriter_$12(this.ignoreNullOptionals)._write(o.recovering,space,level + 1,false,onAllOptionalNull),indent + space + "\"regionProgress\": " + new JsonWriter_$59(this.ignoreNullOptionals)._write(o.regionProgress,space,level + 1,false,onAllOptionalNull),indent + space + "\"retention\": " + new JsonWriter_$64(this.ignoreNullOptionals)._write(o.retention,space,level + 1,false,onAllOptionalNull),indent + space + "\"skillSets\": " + new JsonWriter_$66(this.ignoreNullOptionals)._write(o.skillSets,space,level + 1,false,onAllOptionalNull),indent + space + "\"sleeping\": " + new JsonWriter_$12(this.ignoreNullOptionals)._write(o.sleeping,space,level + 1,false,onAllOptionalNull),indent + space + "\"timeCount\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.timeCount,space,level + 1,false,onAllOptionalNull),indent + space + "\"timesReviewed\": " + new JsonWriter_$23(this.ignoreNullOptionals)._write(o.timesReviewed,space,level + 1,false,onAllOptionalNull),indent + space + "\"userId\": " + new JsonWriter_$71(this.ignoreNullOptionals)._write(o.userId,space,level + 1,false,onAllOptionalNull),indent + space + "\"worldVersion\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.worldVersion,space,level + 1,false,onAllOptionalNull)];
		if(this.ignoreNullOptionals) {
			var skips = [o.autoAdvance == null,o.autoRepeat == null,false,false,false,o.currency == null,false,o.equipLevels == null,false,false,false,false,false,false,false,false,false,o.retention == null,o.skillSets == null,false,false,o.timesReviewed == null,o.userId == null,false];
			if(skips.indexOf(false) == -1) {
				decl = onAllOptionalNull != null ? [onAllOptionalNull()] : [];
			} else {
				var _g = [];
				var _g1 = 0;
				var _g2 = decl.length;
				while(_g1 < _g2) {
					var i = _g1++;
					var decl1;
					if(skips[i]) {
						continue;
					} else {
						decl1 = decl[i];
					}
					_g.push(decl1);
				}
				decl = _g;
			}
		}
		var newLine = space != "" && decl.length > 0 ? "\n" : "";
		var json = firstIndent + "{" + newLine;
		json += decl.join("," + newLine) + newLine;
		json += indent + "}";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$1
};
var JsonMainTypes = function() { };
$hxClasses["JsonMainTypes"] = JsonMainTypes;
JsonMainTypes.__name__ = "JsonMainTypes";
var JsonWriter_$101 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_101"] = JsonWriter_$101;
JsonWriter_$101.__name__ = "JsonWriter_101";
JsonWriter_$101.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var decl = [indent + space + "\"talents\": " + new JsonWriter_$102(this.ignoreNullOptionals)._write(o.talents,space,level + 1,false,onAllOptionalNull)];
		if(this.ignoreNullOptionals) {
			var skips = [false];
			if(skips.indexOf(false) == -1) {
				decl = onAllOptionalNull != null ? [onAllOptionalNull()] : [];
			} else {
				var _g = [];
				var _g1 = 0;
				var _g2 = decl.length;
				while(_g1 < _g2) {
					var i = _g1++;
					var decl1;
					if(skips[i]) {
						continue;
					} else {
						decl1 = decl[i];
					}
					_g.push(decl1);
				}
				decl = _g;
			}
		}
		var newLine = space != "" && decl.length > 0 ? "\n" : "";
		var json = firstIndent + "{" + newLine;
		json += decl.join("," + newLine) + newLine;
		json += indent + "}";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$101
};
var JsonWriter_$102 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_102"] = JsonWriter_$102;
JsonWriter_$102.__name__ = "JsonWriter_102";
JsonWriter_$102.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var valueWriter = new JsonWriter_$104(this.ignoreNullOptionals);
		var _g = [];
		var _g1 = 0;
		while(_g1 < o.length) {
			var element = o[_g1];
			++_g1;
			_g.push(valueWriter._write(element,space,level + 1,true,onAllOptionalNull));
		}
		var values = _g;
		var newLine = space != "" && o.length > 0 ? "\n" : "";
		var json = firstIndent + "[" + newLine;
		json += values.join("," + newLine) + newLine;
		json += indent + "]";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$102
};
var JsonWriter_$104 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_104"] = JsonWriter_$104;
JsonWriter_$104.__name__ = "JsonWriter_104";
JsonWriter_$104.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var decl = [indent + space + "\"level\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.level,space,level + 1,false,onAllOptionalNull),indent + space + "\"seen\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.seen,space,level + 1,false,onAllOptionalNull),indent + space + "\"xp\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.xp,space,level + 1,false,onAllOptionalNull)];
		if(this.ignoreNullOptionals) {
			var skips = [false,false,false];
			if(skips.indexOf(false) == -1) {
				decl = onAllOptionalNull != null ? [onAllOptionalNull()] : [];
			} else {
				var _g = [];
				var _g1 = 0;
				var _g2 = decl.length;
				while(_g1 < _g2) {
					var i = _g1++;
					var decl1;
					if(skips[i]) {
						continue;
					} else {
						decl1 = decl[i];
					}
					_g.push(decl1);
				}
				decl = _g;
			}
		}
		var newLine = space != "" && decl.length > 0 ? "\n" : "";
		var json = firstIndent + "{" + newLine;
		json += decl.join("," + newLine) + newLine;
		json += indent + "}";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$104
};
var JsonWriter_$108 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_108"] = JsonWriter_$108;
JsonWriter_$108.__name__ = "JsonWriter_108";
JsonWriter_$108.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var valueWriter = new JsonWriter_$110(this.ignoreNullOptionals);
		var _g = [];
		var h = o.h;
		var key_h = h;
		var key_keys = Object.keys(h);
		var key_length = key_keys.length;
		var key_current = 0;
		while(key_current < key_length) {
			var key = key_keys[key_current++];
			_g.push(indent + space + "\"" + key + "\": " + valueWriter._write(o.h[key],space,level + 1,false,onAllOptionalNull));
		}
		var values = _g;
		var newLine = space != "" && values.length > 0 ? "\n" : "";
		var json = firstIndent + "{" + newLine;
		json += values.join("," + newLine) + newLine;
		json += indent + "}";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$108
};
var JsonWriter_$11 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_11"] = JsonWriter_$11;
JsonWriter_$11.__name__ = "JsonWriter_11";
JsonWriter_$11.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var decl = [indent + space + "\"value\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.value,space,level + 1,false,onAllOptionalNull),indent + space + "\"visible\": " + new JsonWriter_$12(this.ignoreNullOptionals)._write(o.visible,space,level + 1,false,onAllOptionalNull)];
		if(this.ignoreNullOptionals) {
			var skips = [false,false];
			if(skips.indexOf(false) == -1) {
				decl = onAllOptionalNull != null ? [onAllOptionalNull()] : [];
			} else {
				var _g = [];
				var _g1 = 0;
				var _g2 = decl.length;
				while(_g1 < _g2) {
					var i = _g1++;
					var decl1;
					if(skips[i]) {
						continue;
					} else {
						decl1 = decl[i];
					}
					_g.push(decl1);
				}
				decl = _g;
			}
		}
		var newLine = space != "" && decl.length > 0 ? "\n" : "";
		var json = firstIndent + "{" + newLine;
		json += decl.join("," + newLine) + newLine;
		json += indent + "}";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$11
};
var JsonWriter_$110 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_110"] = JsonWriter_$110;
JsonWriter_$110.__name__ = "JsonWriter_110";
JsonWriter_$110.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var decl = [indent + space + "\"index\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.index,space,level + 1,false,onAllOptionalNull),indent + space + "\"timesCompleted\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.timesCompleted,space,level + 1,false,onAllOptionalNull),indent + space + "\"visible\": " + new JsonWriter_$12(this.ignoreNullOptionals)._write(o.visible,space,level + 1,false,onAllOptionalNull),indent + space + "\"visibleSeen\": " + new JsonWriter_$12(this.ignoreNullOptionals)._write(o.visibleSeen,space,level + 1,false,onAllOptionalNull),indent + space + "\"wantToWatch\": " + new JsonWriter_$12(this.ignoreNullOptionals)._write(o.wantToWatch,space,level + 1,false,onAllOptionalNull)];
		if(this.ignoreNullOptionals) {
			var skips = [false,false,false,false,false];
			if(skips.indexOf(false) == -1) {
				decl = onAllOptionalNull != null ? [onAllOptionalNull()] : [];
			} else {
				var _g = [];
				var _g1 = 0;
				var _g2 = decl.length;
				while(_g1 < _g2) {
					var i = _g1++;
					var decl1;
					if(skips[i]) {
						continue;
					} else {
						decl1 = decl[i];
					}
					_g.push(decl1);
				}
				decl = _g;
			}
		}
		var newLine = space != "" && decl.length > 0 ? "\n" : "";
		var json = firstIndent + "{" + newLine;
		json += decl.join("," + newLine) + newLine;
		json += indent + "}";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$110
};
var JsonWriter_$12 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_12"] = JsonWriter_$12;
JsonWriter_$12.__name__ = "JsonWriter_12";
JsonWriter_$12.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		return (indentFirst ? this.buildIndent(space,level) : "") + (o == null ? "null" : "" + o);
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$12
};
var JsonWriter_$14 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_14"] = JsonWriter_$14;
JsonWriter_$14.__name__ = "JsonWriter_14";
JsonWriter_$14.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var decl = [indent + space + "\"attributesBase\": " + new JsonWriter_$16(this.ignoreNullOptionals)._write(o.attributesBase,space,level + 1,false,onAllOptionalNull),indent + space + "\"attributesCalculated\": " + new JsonWriter_$16(this.ignoreNullOptionals)._write(o.attributesCalculated,space,level + 1,false,onAllOptionalNull),indent + space + "\"buffs\": " + new JsonWriter_$18(this.ignoreNullOptionals)._write(o.buffs,space,level + 1,false,onAllOptionalNull),indent + space + "\"chosenEquipSet\": " + new JsonWriter_$23(this.ignoreNullOptionals)._write(o.chosenEquipSet,space,level + 1,false,onAllOptionalNull),indent + space + "\"equipment\": " + new JsonWriter_$24(this.ignoreNullOptionals)._write(o.equipment,space,level + 1,false,onAllOptionalNull),indent + space + "\"equipmentSets\": " + new JsonWriter_$36(this.ignoreNullOptionals)._write(o.equipmentSets,space,level + 1,false,onAllOptionalNull),indent + space + "\"level\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.level,space,level + 1,false,onAllOptionalNull),indent + space + "\"reference\": " + new JsonWriter_$40(this.ignoreNullOptionals)._write(o.reference,space,level + 1,false,onAllOptionalNull),indent + space + "\"turnRecharge\": " + new JsonWriter_$42(this.ignoreNullOptionals)._write(o.turnRecharge,space,level + 1,false,onAllOptionalNull),indent + space + "\"usableSkills\": " + new JsonWriter_$44(this.ignoreNullOptionals)._write(o.usableSkills,space,level + 1,false,onAllOptionalNull),indent + space + "\"viewAux\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.viewAux,space,level + 1,false,onAllOptionalNull),indent + space + "\"xp\": " + new JsonWriter_$48(this.ignoreNullOptionals)._write(o.xp,space,level + 1,false,onAllOptionalNull)];
		if(this.ignoreNullOptionals) {
			var skips = [false,false,o.buffs == null,o.chosenEquipSet == null,false,o.equipmentSets == null,false,false,o.turnRecharge == null,o.usableSkills == null,false,false];
			if(skips.indexOf(false) == -1) {
				decl = onAllOptionalNull != null ? [onAllOptionalNull()] : [];
			} else {
				var _g = [];
				var _g1 = 0;
				var _g2 = decl.length;
				while(_g1 < _g2) {
					var i = _g1++;
					var decl1;
					if(skips[i]) {
						continue;
					} else {
						decl1 = decl[i];
					}
					_g.push(decl1);
				}
				decl = _g;
			}
		}
		var newLine = space != "" && decl.length > 0 ? "\n" : "";
		var json = firstIndent + "{" + newLine;
		json += decl.join("," + newLine) + newLine;
		json += indent + "}";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$14
};
var JsonWriter_$16 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_16"] = JsonWriter_$16;
JsonWriter_$16.__name__ = "JsonWriter_16";
JsonWriter_$16.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var valueWriter = new JsonWriter_$4(this.ignoreNullOptionals);
		var _g = [];
		var h = o.h;
		var key_h = h;
		var key_keys = Object.keys(h);
		var key_length = key_keys.length;
		var key_current = 0;
		while(key_current < key_length) {
			var key = key_keys[key_current++];
			_g.push(indent + space + "\"" + key + "\": " + valueWriter._write(o.h[key],space,level + 1,false,onAllOptionalNull));
		}
		var values = _g;
		var newLine = space != "" && values.length > 0 ? "\n" : "";
		var json = firstIndent + "{" + newLine;
		json += values.join("," + newLine) + newLine;
		json += indent + "}";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$16
};
var JsonWriter_$18 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_18"] = JsonWriter_$18;
JsonWriter_$18.__name__ = "JsonWriter_18";
JsonWriter_$18.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var valueWriter = new JsonWriter_$20(this.ignoreNullOptionals);
		var _g = [];
		var _g1 = 0;
		while(_g1 < o.length) {
			var element = o[_g1];
			++_g1;
			_g.push(valueWriter._write(element,space,level + 1,true,onAllOptionalNull));
		}
		var values = _g;
		var newLine = space != "" && o.length > 0 ? "\n" : "";
		var json = firstIndent + "[" + newLine;
		json += values.join("," + newLine) + newLine;
		json += indent + "]";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$18
};
var JsonWriter_$20 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_20"] = JsonWriter_$20;
JsonWriter_$20.__name__ = "JsonWriter_20";
JsonWriter_$20.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var decl = [indent + space + "\"addStats\": " + new JsonWriter_$16(this.ignoreNullOptionals)._write(o.addStats,space,level + 1,false,onAllOptionalNull),indent + space + "\"debuff\": " + new JsonWriter_$3(this.ignoreNullOptionals)._write(o.debuff,space,level + 1,false,onAllOptionalNull),indent + space + "\"duration\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.duration,space,level + 1,false,onAllOptionalNull),indent + space + "\"mulStats\": " + new JsonWriter_$16(this.ignoreNullOptionals)._write(o.mulStats,space,level + 1,false,onAllOptionalNull),indent + space + "\"noble\": " + new JsonWriter_$3(this.ignoreNullOptionals)._write(o.noble,space,level + 1,false,onAllOptionalNull),indent + space + "\"strength\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.strength,space,level + 1,false,onAllOptionalNull),indent + space + "\"uniqueId\": " + new JsonWriter_$21(this.ignoreNullOptionals)._write(o.uniqueId,space,level + 1,false,onAllOptionalNull)];
		if(this.ignoreNullOptionals) {
			var skips = [false,o.debuff == null,false,false,o.noble == null,false,false];
			if(skips.indexOf(false) == -1) {
				decl = onAllOptionalNull != null ? [onAllOptionalNull()] : [];
			} else {
				var _g = [];
				var _g1 = 0;
				var _g2 = decl.length;
				while(_g1 < _g2) {
					var i = _g1++;
					var decl1;
					if(skips[i]) {
						continue;
					} else {
						decl1 = decl[i];
					}
					_g.push(decl1);
				}
				decl = _g;
			}
		}
		var newLine = space != "" && decl.length > 0 ? "\n" : "";
		var json = firstIndent + "{" + newLine;
		json += decl.join("," + newLine) + newLine;
		json += indent + "}";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$20
};
var JsonWriter_$21 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_21"] = JsonWriter_$21;
JsonWriter_$21.__name__ = "JsonWriter_21";
JsonWriter_$21.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		return (indentFirst ? this.buildIndent(space,level) : "") + (o == null ? "null" : this.shouldQuote ? json2object_writer_StringUtils.quote(o) : o);
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$21
};
var JsonWriter_$23 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_23"] = JsonWriter_$23;
JsonWriter_$23.__name__ = "JsonWriter_23";
JsonWriter_$23.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		return (indentFirst ? this.buildIndent(space,level) : "") + (o == null ? "null" : o + "");
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$23
};
var JsonWriter_$24 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_24"] = JsonWriter_$24;
JsonWriter_$24.__name__ = "JsonWriter_24";
JsonWriter_$24.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var valueWriter = new JsonWriter_$26(this.ignoreNullOptionals);
		var _g = [];
		var _g1 = 0;
		while(_g1 < o.length) {
			var element = o[_g1];
			++_g1;
			_g.push(valueWriter._write(element,space,level + 1,true,onAllOptionalNull));
		}
		var values = _g;
		var newLine = space != "" && o.length > 0 ? "\n" : "";
		var json = firstIndent + "[" + newLine;
		json += values.join("," + newLine) + newLine;
		json += indent + "]";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$24
};
var JsonWriter_$26 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_26"] = JsonWriter_$26;
JsonWriter_$26.__name__ = "JsonWriter_26";
JsonWriter_$26.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var decl = [indent + space + "\"attributeMultiplier\": " + new JsonWriter_$16(this.ignoreNullOptionals)._write(o.attributeMultiplier,space,level + 1,false,onAllOptionalNull),indent + space + "\"attributes\": " + new JsonWriter_$16(this.ignoreNullOptionals)._write(o.attributes,space,level + 1,false,onAllOptionalNull),indent + space + "\"generationBaseItem\": " + new JsonWriter_$23(this.ignoreNullOptionals)._write(o.generationBaseItem,space,level + 1,false,onAllOptionalNull),indent + space + "\"generationLevel\": " + new JsonWriter_$23(this.ignoreNullOptionals)._write(o.generationLevel,space,level + 1,false,onAllOptionalNull),indent + space + "\"generationPrefixMod\": " + new JsonWriter_$23(this.ignoreNullOptionals)._write(o.generationPrefixMod,space,level + 1,false,onAllOptionalNull),indent + space + "\"generationPrefixModSeed\": " + new JsonWriter_$23(this.ignoreNullOptionals)._write(o.generationPrefixModSeed,space,level + 1,false,onAllOptionalNull),indent + space + "\"generationSuffixMod\": " + new JsonWriter_$23(this.ignoreNullOptionals)._write(o.generationSuffixMod,space,level + 1,false,onAllOptionalNull),indent + space + "\"generationSuffixModSeed\": " + new JsonWriter_$23(this.ignoreNullOptionals)._write(o.generationSuffixModSeed,space,level + 1,false,onAllOptionalNull),indent + space + "\"generationVariations\": " + new JsonWriter_$16(this.ignoreNullOptionals)._write(o.generationVariations,space,level + 1,false,onAllOptionalNull),indent + space + "\"generationVariationsMultiplier\": " + new JsonWriter_$16(this.ignoreNullOptionals)._write(o.generationVariationsMultiplier,space,level + 1,false,onAllOptionalNull),indent + space + "\"outsideSystems\": " + new JsonWriter_$16(this.ignoreNullOptionals)._write(o.outsideSystems,space,level + 1,false,onAllOptionalNull),indent + space + "\"requiredAttributes\": " + new JsonWriter_$16(this.ignoreNullOptionals)._write(o.requiredAttributes,space,level + 1,false,onAllOptionalNull),indent + space + "\"seen\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.seen,space,level + 1,false,onAllOptionalNull),indent + space + "\"type\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.type,space,level + 1,false,onAllOptionalNull)];
		if(this.ignoreNullOptionals) {
			var skips = [o.attributeMultiplier == null,false,o.generationBaseItem == null,o.generationLevel == null,o.generationPrefixMod == null,o.generationPrefixModSeed == null,o.generationSuffixMod == null,o.generationSuffixModSeed == null,o.generationVariations == null,o.generationVariationsMultiplier == null,o.outsideSystems == null,false,false,false];
			if(skips.indexOf(false) == -1) {
				decl = onAllOptionalNull != null ? [onAllOptionalNull()] : [];
			} else {
				var _g = [];
				var _g1 = 0;
				var _g2 = decl.length;
				while(_g1 < _g2) {
					var i = _g1++;
					var decl1;
					if(skips[i]) {
						continue;
					} else {
						decl1 = decl[i];
					}
					_g.push(decl1);
				}
				decl = _g;
			}
		}
		var newLine = space != "" && decl.length > 0 ? "\n" : "";
		var json = firstIndent + "{" + newLine;
		json += decl.join("," + newLine) + newLine;
		json += indent + "}";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$26
};
var JsonWriter_$3 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_3"] = JsonWriter_$3;
JsonWriter_$3.__name__ = "JsonWriter_3";
JsonWriter_$3.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		return (indentFirst ? this.buildIndent(space,level) : "") + (o == null ? "null" : (o == null ? "null" : "" + o) + "");
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$3
};
var JsonWriter_$36 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_36"] = JsonWriter_$36;
JsonWriter_$36.__name__ = "JsonWriter_36";
JsonWriter_$36.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var valueWriter = new JsonWriter_$38(this.ignoreNullOptionals);
		var _g = [];
		var _g1 = 0;
		while(_g1 < o.length) {
			var element = o[_g1];
			++_g1;
			_g.push(valueWriter._write(element,space,level + 1,true,onAllOptionalNull));
		}
		var values = _g;
		var newLine = space != "" && o.length > 0 ? "\n" : "";
		var json = firstIndent + "[" + newLine;
		json += values.join("," + newLine) + newLine;
		json += indent + "]";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$36
};
var JsonWriter_$38 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_38"] = JsonWriter_$38;
JsonWriter_$38.__name__ = "JsonWriter_38";
JsonWriter_$38.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var decl = [indent + space + "\"equipmentSlots\": " + new JsonWriter_$39(this.ignoreNullOptionals)._write(o.equipmentSlots,space,level + 1,false,onAllOptionalNull)];
		if(this.ignoreNullOptionals) {
			var skips = [false];
			if(skips.indexOf(false) == -1) {
				decl = onAllOptionalNull != null ? [onAllOptionalNull()] : [];
			} else {
				var _g = [];
				var _g1 = 0;
				var _g2 = decl.length;
				while(_g1 < _g2) {
					var i = _g1++;
					var decl1;
					if(skips[i]) {
						continue;
					} else {
						decl1 = decl[i];
					}
					_g.push(decl1);
				}
				decl = _g;
			}
		}
		var newLine = space != "" && decl.length > 0 ? "\n" : "";
		var json = firstIndent + "{" + newLine;
		json += decl.join("," + newLine) + newLine;
		json += indent + "}";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$38
};
var JsonWriter_$39 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_39"] = JsonWriter_$39;
JsonWriter_$39.__name__ = "JsonWriter_39";
JsonWriter_$39.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var valueWriter = new JsonWriter_$4(this.ignoreNullOptionals);
		var _g = [];
		var _g1 = 0;
		while(_g1 < o.length) {
			var element = o[_g1];
			++_g1;
			_g.push(valueWriter._write(element,space,level + 1,true,onAllOptionalNull));
		}
		var values = _g;
		var newLine = space != "" && o.length > 0 ? "\n" : "";
		var json = firstIndent + "[" + newLine;
		json += values.join("," + newLine) + newLine;
		json += indent + "]";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$39
};
var JsonWriter_$4 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_4"] = JsonWriter_$4;
JsonWriter_$4.__name__ = "JsonWriter_4";
JsonWriter_$4.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		return (indentFirst ? this.buildIndent(space,level) : "") + o;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$4
};
var JsonWriter_$40 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_40"] = JsonWriter_$40;
JsonWriter_$40.__name__ = "JsonWriter_40";
JsonWriter_$40.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var decl = [indent + space + "\"type\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.type,space,level + 1,false,onAllOptionalNull),indent + space + "\"pos\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.pos,space,level + 1,false,onAllOptionalNull)];
		if(this.ignoreNullOptionals) {
			var skips = [false,false];
			if(skips.indexOf(false) == -1) {
				decl = onAllOptionalNull != null ? [onAllOptionalNull()] : [];
			} else {
				var _g = [];
				var _g1 = 0;
				var _g2 = decl.length;
				while(_g1 < _g2) {
					var i = _g1++;
					var decl1;
					if(skips[i]) {
						continue;
					} else {
						decl1 = decl[i];
					}
					_g.push(decl1);
				}
				decl = _g;
			}
		}
		var newLine = space != "" && decl.length > 0 ? "\n" : "";
		var json = firstIndent + "{" + newLine;
		json += decl.join("," + newLine) + newLine;
		json += indent + "}";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$40
};
var JsonWriter_$42 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_42"] = JsonWriter_$42;
JsonWriter_$42.__name__ = "JsonWriter_42";
JsonWriter_$42.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var valueWriter = new JsonWriter_$4(this.ignoreNullOptionals);
		var _g = [];
		var _g1 = 0;
		while(_g1 < o.length) {
			var element = o[_g1];
			++_g1;
			_g.push(valueWriter._write(element,space,level + 1,true,onAllOptionalNull));
		}
		var values = _g;
		var newLine = space != "" && o.length > 0 ? "\n" : "";
		var json = firstIndent + "[" + newLine;
		json += values.join("," + newLine) + newLine;
		json += indent + "]";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$42
};
var JsonWriter_$44 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_44"] = JsonWriter_$44;
JsonWriter_$44.__name__ = "JsonWriter_44";
JsonWriter_$44.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var valueWriter = new JsonWriter_$46(this.ignoreNullOptionals);
		var _g = [];
		var _g1 = 0;
		while(_g1 < o.length) {
			var element = o[_g1];
			++_g1;
			_g.push(valueWriter._write(element,space,level + 1,true,onAllOptionalNull));
		}
		var values = _g;
		var newLine = space != "" && o.length > 0 ? "\n" : "";
		var json = firstIndent + "[" + newLine;
		json += values.join("," + newLine) + newLine;
		json += indent + "]";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$44
};
var JsonWriter_$46 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_46"] = JsonWriter_$46;
JsonWriter_$46.__name__ = "JsonWriter_46";
JsonWriter_$46.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var decl = [indent + space + "\"id\": " + new JsonWriter_$21(this.ignoreNullOptionals)._write(o.id,space,level + 1,false,onAllOptionalNull),indent + space + "\"level\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.level,space,level + 1,false,onAllOptionalNull)];
		if(this.ignoreNullOptionals) {
			var skips = [false,false];
			if(skips.indexOf(false) == -1) {
				decl = onAllOptionalNull != null ? [onAllOptionalNull()] : [];
			} else {
				var _g = [];
				var _g1 = 0;
				var _g2 = decl.length;
				while(_g1 < _g2) {
					var i = _g1++;
					var decl1;
					if(skips[i]) {
						continue;
					} else {
						decl1 = decl[i];
					}
					_g.push(decl1);
				}
				decl = _g;
			}
		}
		var newLine = space != "" && decl.length > 0 ? "\n" : "";
		var json = firstIndent + "{" + newLine;
		json += decl.join("," + newLine) + newLine;
		json += indent + "}";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$46
};
var JsonWriter_$48 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_48"] = JsonWriter_$48;
JsonWriter_$48.__name__ = "JsonWriter_48";
JsonWriter_$48.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var decl = [indent + space + "\"calculatedMax\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.calculatedMax,space,level + 1,false,onAllOptionalNull),indent + space + "\"cap\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.cap,space,level + 1,false,onAllOptionalNull),indent + space + "\"lastUsedBaseAttribute\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.lastUsedBaseAttribute,space,level + 1,false,onAllOptionalNull),indent + space + "\"scaling\": " + new JsonWriter_$50(this.ignoreNullOptionals)._write(o.scaling,space,level + 1,false,onAllOptionalNull),indent + space + "\"value\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.value,space,level + 1,false,onAllOptionalNull)];
		if(this.ignoreNullOptionals) {
			var skips = [false,false,false,false,false];
			if(skips.indexOf(false) == -1) {
				decl = onAllOptionalNull != null ? [onAllOptionalNull()] : [];
			} else {
				var _g = [];
				var _g1 = 0;
				var _g2 = decl.length;
				while(_g1 < _g2) {
					var i = _g1++;
					var decl1;
					if(skips[i]) {
						continue;
					} else {
						decl1 = decl[i];
					}
					_g.push(decl1);
				}
				decl = _g;
			}
		}
		var newLine = space != "" && decl.length > 0 ? "\n" : "";
		var json = firstIndent + "{" + newLine;
		json += decl.join("," + newLine) + newLine;
		json += indent + "}";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$48
};
var JsonWriter_$50 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_50"] = JsonWriter_$50;
JsonWriter_$50.__name__ = "JsonWriter_50";
JsonWriter_$50.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var decl = [indent + space + "\"data1\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.data1,space,level + 1,false,onAllOptionalNull),indent + space + "\"exponential\": " + new JsonWriter_$12(this.ignoreNullOptionals)._write(o.exponential,space,level + 1,false,onAllOptionalNull),indent + space + "\"initial\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.initial,space,level + 1,false,onAllOptionalNull),indent + space + "\"initialMultiplication\": " + new JsonWriter_$12(this.ignoreNullOptionals)._write(o.initialMultiplication,space,level + 1,false,onAllOptionalNull),indent + space + "\"minimumIncrement\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.minimumIncrement,space,level + 1,false,onAllOptionalNull)];
		if(this.ignoreNullOptionals) {
			var skips = [false,false,false,false,false];
			if(skips.indexOf(false) == -1) {
				decl = onAllOptionalNull != null ? [onAllOptionalNull()] : [];
			} else {
				var _g = [];
				var _g1 = 0;
				var _g2 = decl.length;
				while(_g1 < _g2) {
					var i = _g1++;
					var decl1;
					if(skips[i]) {
						continue;
					} else {
						decl1 = decl[i];
					}
					_g.push(decl1);
				}
				decl = _g;
			}
		}
		var newLine = space != "" && decl.length > 0 ? "\n" : "";
		var json = firstIndent + "{" + newLine;
		json += decl.join("," + newLine) + newLine;
		json += indent + "}";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$50
};
var JsonWriter_$52 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_52"] = JsonWriter_$52;
JsonWriter_$52.__name__ = "JsonWriter_52";
JsonWriter_$52.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var valueWriter = new JsonWriter_$54(this.ignoreNullOptionals);
		var _g = [];
		var _g1 = 0;
		while(_g1 < o.length) {
			var element = o[_g1];
			++_g1;
			_g.push(valueWriter._write(element,space,level + 1,true,onAllOptionalNull));
		}
		var values = _g;
		var newLine = space != "" && o.length > 0 ? "\n" : "";
		var json = firstIndent + "[" + newLine;
		json += values.join("," + newLine) + newLine;
		json += indent + "]";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$52
};
var JsonWriter_$54 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_54"] = JsonWriter_$54;
JsonWriter_$54.__name__ = "JsonWriter_54";
JsonWriter_$54.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var decl = [indent + space + "\"ascension\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.ascension,space,level + 1,false,onAllOptionalNull),indent + space + "\"level\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.level,space,level + 1,false,onAllOptionalNull),indent + space + "\"limitbreak\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.limitbreak,space,level + 1,false,onAllOptionalNull)];
		if(this.ignoreNullOptionals) {
			var skips = [false,false,false];
			if(skips.indexOf(false) == -1) {
				decl = onAllOptionalNull != null ? [onAllOptionalNull()] : [];
			} else {
				var _g = [];
				var _g1 = 0;
				var _g2 = decl.length;
				while(_g1 < _g2) {
					var i = _g1++;
					var decl1;
					if(skips[i]) {
						continue;
					} else {
						decl1 = decl[i];
					}
					_g.push(decl1);
				}
				decl = _g;
			}
		}
		var newLine = space != "" && decl.length > 0 ? "\n" : "";
		var json = firstIndent + "{" + newLine;
		json += decl.join("," + newLine) + newLine;
		json += indent + "}";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$54
};
var JsonWriter_$56 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_56"] = JsonWriter_$56;
JsonWriter_$56.__name__ = "JsonWriter_56";
JsonWriter_$56.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var valueWriter = new JsonWriter_$58(this.ignoreNullOptionals);
		var _g = [];
		var h = o.h;
		var key_h = h;
		var key_keys = Object.keys(h);
		var key_length = key_keys.length;
		var key_current = 0;
		while(key_current < key_length) {
			var key = key_keys[key_current++];
			_g.push(indent + space + "\"" + key + "\": " + valueWriter._write(o.h[key],space,level + 1,false,onAllOptionalNull));
		}
		var values = _g;
		var newLine = space != "" && values.length > 0 ? "\n" : "";
		var json = firstIndent + "{" + newLine;
		json += values.join("," + newLine) + newLine;
		json += indent + "}";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$56
};
var JsonWriter_$58 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_58"] = JsonWriter_$58;
JsonWriter_$58.__name__ = "JsonWriter_58";
JsonWriter_$58.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var decl = [indent + space + "\"enabled\": " + new JsonWriter_$12(this.ignoreNullOptionals)._write(o.enabled,space,level + 1,false,onAllOptionalNull),indent + space + "\"mode\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.mode,space,level + 1,false,onAllOptionalNull),indent + space + "\"timesUsed\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.timesUsed,space,level + 1,false,onAllOptionalNull),indent + space + "\"visible\": " + new JsonWriter_$12(this.ignoreNullOptionals)._write(o.visible,space,level + 1,false,onAllOptionalNull)];
		if(this.ignoreNullOptionals) {
			var skips = [false,false,false,false];
			if(skips.indexOf(false) == -1) {
				decl = onAllOptionalNull != null ? [onAllOptionalNull()] : [];
			} else {
				var _g = [];
				var _g1 = 0;
				var _g2 = decl.length;
				while(_g1 < _g2) {
					var i = _g1++;
					var decl1;
					if(skips[i]) {
						continue;
					} else {
						decl1 = decl[i];
					}
					_g.push(decl1);
				}
				decl = _g;
			}
		}
		var newLine = space != "" && decl.length > 0 ? "\n" : "";
		var json = firstIndent + "{" + newLine;
		json += decl.join("," + newLine) + newLine;
		json += indent + "}";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$58
};
var JsonWriter_$59 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_59"] = JsonWriter_$59;
JsonWriter_$59.__name__ = "JsonWriter_59";
JsonWriter_$59.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var valueWriter = new JsonWriter_$61(this.ignoreNullOptionals);
		var _g = [];
		var _g1 = 0;
		while(_g1 < o.length) {
			var element = o[_g1];
			++_g1;
			_g.push(valueWriter._write(element,space,level + 1,true,onAllOptionalNull));
		}
		var values = _g;
		var newLine = space != "" && o.length > 0 ? "\n" : "";
		var json = firstIndent + "[" + newLine;
		json += values.join("," + newLine) + newLine;
		json += indent + "]";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$59
};
var JsonWriter_$61 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_61"] = JsonWriter_$61;
JsonWriter_$61.__name__ = "JsonWriter_61";
JsonWriter_$61.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var decl = [indent + space + "\"amountEnemyKilledInArea\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.amountEnemyKilledInArea,space,level + 1,false,onAllOptionalNull),indent + space + "\"area\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.area,space,level + 1,false,onAllOptionalNull),indent + space + "\"maxArea\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.maxArea,space,level + 1,false,onAllOptionalNull),indent + space + "\"maxAreaOnPrestigeRecord\": " + new JsonWriter_$39(this.ignoreNullOptionals)._write(o.maxAreaOnPrestigeRecord,space,level + 1,false,onAllOptionalNull),indent + space + "\"maxAreaRecord\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.maxAreaRecord,space,level + 1,false,onAllOptionalNull),indent + space + "\"seen\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.seen,space,level + 1,false,onAllOptionalNull)];
		if(this.ignoreNullOptionals) {
			var skips = [false,false,false,false,false,false];
			if(skips.indexOf(false) == -1) {
				decl = onAllOptionalNull != null ? [onAllOptionalNull()] : [];
			} else {
				var _g = [];
				var _g1 = 0;
				var _g2 = decl.length;
				while(_g1 < _g2) {
					var i = _g1++;
					var decl1;
					if(skips[i]) {
						continue;
					} else {
						decl1 = decl[i];
					}
					_g.push(decl1);
				}
				decl = _g;
			}
		}
		var newLine = space != "" && decl.length > 0 ? "\n" : "";
		var json = firstIndent + "{" + newLine;
		json += decl.join("," + newLine) + newLine;
		json += indent + "}";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$61
};
var JsonWriter_$64 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_64"] = JsonWriter_$64;
JsonWriter_$64.__name__ = "JsonWriter_64";
JsonWriter_$64.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var decl = [indent + space + "\"gameStartDate\": " + new JsonWriter_$21(this.ignoreNullOptionals)._write(o.gameStartDate,space,level + 1,false,onAllOptionalNull),indent + space + "\"gameStartVersion\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.gameStartVersion,space,level + 1,false,onAllOptionalNull),indent + space + "\"latestDayRetention\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.latestDayRetention,space,level + 1,false,onAllOptionalNull),indent + space + "\"reportedRollingRetention\": " + new JsonWriter_$39(this.ignoreNullOptionals)._write(o.reportedRollingRetention,space,level + 1,false,onAllOptionalNull)];
		if(this.ignoreNullOptionals) {
			var skips = [false,false,false,false];
			if(skips.indexOf(false) == -1) {
				decl = onAllOptionalNull != null ? [onAllOptionalNull()] : [];
			} else {
				var _g = [];
				var _g1 = 0;
				var _g2 = decl.length;
				while(_g1 < _g2) {
					var i = _g1++;
					var decl1;
					if(skips[i]) {
						continue;
					} else {
						decl1 = decl[i];
					}
					_g.push(decl1);
				}
				decl = _g;
			}
		}
		var newLine = space != "" && decl.length > 0 ? "\n" : "";
		var json = firstIndent + "{" + newLine;
		json += decl.join("," + newLine) + newLine;
		json += indent + "}";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$64
};
var JsonWriter_$66 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_66"] = JsonWriter_$66;
JsonWriter_$66.__name__ = "JsonWriter_66";
JsonWriter_$66.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var valueWriter = new JsonWriter_$68(this.ignoreNullOptionals);
		var _g = [];
		var _g1 = 0;
		while(_g1 < o.length) {
			var element = o[_g1];
			++_g1;
			_g.push(valueWriter._write(element,space,level + 1,true,onAllOptionalNull));
		}
		var values = _g;
		var newLine = space != "" && o.length > 0 ? "\n" : "";
		var json = firstIndent + "[" + newLine;
		json += values.join("," + newLine) + newLine;
		json += indent + "]";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$66
};
var JsonWriter_$68 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_68"] = JsonWriter_$68;
JsonWriter_$68.__name__ = "JsonWriter_68";
JsonWriter_$68.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var decl = [indent + space + "\"skills\": " + new JsonWriter_$69(this.ignoreNullOptionals)._write(o.skills,space,level + 1,false,onAllOptionalNull)];
		if(this.ignoreNullOptionals) {
			var skips = [false];
			if(skips.indexOf(false) == -1) {
				decl = onAllOptionalNull != null ? [onAllOptionalNull()] : [];
			} else {
				var _g = [];
				var _g1 = 0;
				var _g2 = decl.length;
				while(_g1 < _g2) {
					var i = _g1++;
					var decl1;
					if(skips[i]) {
						continue;
					} else {
						decl1 = decl[i];
					}
					_g.push(decl1);
				}
				decl = _g;
			}
		}
		var newLine = space != "" && decl.length > 0 ? "\n" : "";
		var json = firstIndent + "{" + newLine;
		json += decl.join("," + newLine) + newLine;
		json += indent + "}";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$68
};
var JsonWriter_$69 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_69"] = JsonWriter_$69;
JsonWriter_$69.__name__ = "JsonWriter_69";
JsonWriter_$69.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var valueWriter = new JsonWriter_$46(this.ignoreNullOptionals);
		var _g = [];
		var _g1 = 0;
		while(_g1 < o.length) {
			var element = o[_g1];
			++_g1;
			_g.push(valueWriter._write(element,space,level + 1,true,onAllOptionalNull));
		}
		var values = _g;
		var newLine = space != "" && o.length > 0 ? "\n" : "";
		var json = firstIndent + "[" + newLine;
		json += values.join("," + newLine) + newLine;
		json += indent + "]";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$69
};
var JsonWriter_$7 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_7"] = JsonWriter_$7;
JsonWriter_$7.__name__ = "JsonWriter_7";
JsonWriter_$7.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var decl = [indent + space + "\"currencies\": " + new JsonWriter_$9(this.ignoreNullOptionals)._write(o.currencies,space,level + 1,false,onAllOptionalNull)];
		if(this.ignoreNullOptionals) {
			var skips = [false];
			if(skips.indexOf(false) == -1) {
				decl = onAllOptionalNull != null ? [onAllOptionalNull()] : [];
			} else {
				var _g = [];
				var _g1 = 0;
				var _g2 = decl.length;
				while(_g1 < _g2) {
					var i = _g1++;
					var decl1;
					if(skips[i]) {
						continue;
					} else {
						decl1 = decl[i];
					}
					_g.push(decl1);
				}
				decl = _g;
			}
		}
		var newLine = space != "" && decl.length > 0 ? "\n" : "";
		var json = firstIndent + "{" + newLine;
		json += decl.join("," + newLine) + newLine;
		json += indent + "}";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$7
};
var JsonWriter_$71 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_71"] = JsonWriter_$71;
JsonWriter_$71.__name__ = "JsonWriter_71";
JsonWriter_$71.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var tmp = indentFirst ? this.buildIndent(space,level) : "";
		var tmp1;
		if(o == null) {
			tmp1 = "null";
		} else {
			var str = o;
			tmp1 = this.shouldQuote ? json2object_writer_StringUtils.quote(str) : str;
		}
		return tmp + tmp1;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$71
};
var JsonWriter_$75 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_75"] = JsonWriter_$75;
JsonWriter_$75.__name__ = "JsonWriter_75";
JsonWriter_$75.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var decl = [indent + space + "\"achievs\": " + new JsonWriter_$77(this.ignoreNullOptionals)._write(o.achievs,space,level + 1,false,onAllOptionalNull)];
		if(this.ignoreNullOptionals) {
			var skips = [false];
			if(skips.indexOf(false) == -1) {
				decl = onAllOptionalNull != null ? [onAllOptionalNull()] : [];
			} else {
				var _g = [];
				var _g1 = 0;
				var _g2 = decl.length;
				while(_g1 < _g2) {
					var i = _g1++;
					var decl1;
					if(skips[i]) {
						continue;
					} else {
						decl1 = decl[i];
					}
					_g.push(decl1);
				}
				decl = _g;
			}
		}
		var newLine = space != "" && decl.length > 0 ? "\n" : "";
		var json = firstIndent + "{" + newLine;
		json += decl.join("," + newLine) + newLine;
		json += indent + "}";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$75
};
var JsonWriter_$77 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_77"] = JsonWriter_$77;
JsonWriter_$77.__name__ = "JsonWriter_77";
JsonWriter_$77.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var valueWriter = new JsonWriter_$79(this.ignoreNullOptionals);
		var _g = [];
		var h = o.h;
		var key_h = h;
		var key_keys = Object.keys(h);
		var key_length = key_keys.length;
		var key_current = 0;
		while(key_current < key_length) {
			var key = key_keys[key_current++];
			_g.push(indent + space + "\"" + key + "\": " + valueWriter._write(o.h[key],space,level + 1,false,onAllOptionalNull));
		}
		var values = _g;
		var newLine = space != "" && values.length > 0 ? "\n" : "";
		var json = firstIndent + "{" + newLine;
		json += values.join("," + newLine) + newLine;
		json += indent + "}";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$77
};
var JsonWriter_$79 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_79"] = JsonWriter_$79;
JsonWriter_$79.__name__ = "JsonWriter_79";
JsonWriter_$79.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var decl = [indent + space + "\"state\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.state,space,level + 1,false,onAllOptionalNull)];
		if(this.ignoreNullOptionals) {
			var skips = [false];
			if(skips.indexOf(false) == -1) {
				decl = onAllOptionalNull != null ? [onAllOptionalNull()] : [];
			} else {
				var _g = [];
				var _g1 = 0;
				var _g2 = decl.length;
				while(_g1 < _g2) {
					var i = _g1++;
					var decl1;
					if(skips[i]) {
						continue;
					} else {
						decl1 = decl[i];
					}
					_g.push(decl1);
				}
				decl = _g;
			}
		}
		var newLine = space != "" && decl.length > 0 ? "\n" : "";
		var json = firstIndent + "{" + newLine;
		json += decl.join("," + newLine) + newLine;
		json += indent + "}";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$79
};
var JsonWriter_$83 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_83"] = JsonWriter_$83;
JsonWriter_$83.__name__ = "JsonWriter_83";
JsonWriter_$83.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var decl = [indent + space + "\"talentToSet\": " + new JsonWriter_$84(this.ignoreNullOptionals)._write(o.talentToSet,space,level + 1,false,onAllOptionalNull)];
		if(this.ignoreNullOptionals) {
			var skips = [false];
			if(skips.indexOf(false) == -1) {
				decl = onAllOptionalNull != null ? [onAllOptionalNull()] : [];
			} else {
				var _g = [];
				var _g1 = 0;
				var _g2 = decl.length;
				while(_g1 < _g2) {
					var i = _g1++;
					var decl1;
					if(skips[i]) {
						continue;
					} else {
						decl1 = decl[i];
					}
					_g.push(decl1);
				}
				decl = _g;
			}
		}
		var newLine = space != "" && decl.length > 0 ? "\n" : "";
		var json = firstIndent + "{" + newLine;
		json += decl.join("," + newLine) + newLine;
		json += indent + "}";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$83
};
var JsonWriter_$84 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_84"] = JsonWriter_$84;
JsonWriter_$84.__name__ = "JsonWriter_84";
JsonWriter_$84.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var valueWriter = new JsonWriter_$86(this.ignoreNullOptionals);
		var _g = [];
		var _g1 = 0;
		while(_g1 < o.length) {
			var element = o[_g1];
			++_g1;
			_g.push(valueWriter._write(element,space,level + 1,true,onAllOptionalNull));
		}
		var values = _g;
		var newLine = space != "" && o.length > 0 ? "\n" : "";
		var json = firstIndent + "[" + newLine;
		json += values.join("," + newLine) + newLine;
		json += indent + "]";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$84
};
var JsonWriter_$86 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_86"] = JsonWriter_$86;
JsonWriter_$86.__name__ = "JsonWriter_86";
JsonWriter_$86.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var decl = [indent + space + "\"sets\": " + new JsonWriter_$87(this.ignoreNullOptionals)._write(o.sets,space,level + 1,false,onAllOptionalNull)];
		if(this.ignoreNullOptionals) {
			var skips = [false];
			if(skips.indexOf(false) == -1) {
				decl = onAllOptionalNull != null ? [onAllOptionalNull()] : [];
			} else {
				var _g = [];
				var _g1 = 0;
				var _g2 = decl.length;
				while(_g1 < _g2) {
					var i = _g1++;
					var decl1;
					if(skips[i]) {
						continue;
					} else {
						decl1 = decl[i];
					}
					_g.push(decl1);
				}
				decl = _g;
			}
		}
		var newLine = space != "" && decl.length > 0 ? "\n" : "";
		var json = firstIndent + "{" + newLine;
		json += decl.join("," + newLine) + newLine;
		json += indent + "}";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$86
};
var JsonWriter_$87 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_87"] = JsonWriter_$87;
JsonWriter_$87.__name__ = "JsonWriter_87";
JsonWriter_$87.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var valueWriter = new JsonWriter_$89(this.ignoreNullOptionals);
		var _g = [];
		var _g1 = 0;
		while(_g1 < o.length) {
			var element = o[_g1];
			++_g1;
			_g.push(valueWriter._write(element,space,level + 1,true,onAllOptionalNull));
		}
		var values = _g;
		var newLine = space != "" && o.length > 0 ? "\n" : "";
		var json = firstIndent + "[" + newLine;
		json += values.join("," + newLine) + newLine;
		json += indent + "]";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$87
};
var JsonWriter_$89 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_89"] = JsonWriter_$89;
JsonWriter_$89.__name__ = "JsonWriter_89";
JsonWriter_$89.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var decl = [indent + space + "\"grandBonus\": " + new JsonWriter_$91(this.ignoreNullOptionals)._write(o.grandBonus,space,level + 1,false,onAllOptionalNull),indent + space + "\"pointLevel\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.pointLevel,space,level + 1,false,onAllOptionalNull),indent + space + "\"pointXP\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.pointXP,space,level + 1,false,onAllOptionalNull),indent + space + "\"rollBonus\": " + new JsonWriter_$91(this.ignoreNullOptionals)._write(o.rollBonus,space,level + 1,false,onAllOptionalNull)];
		if(this.ignoreNullOptionals) {
			var skips = [false,false,false,false];
			if(skips.indexOf(false) == -1) {
				decl = onAllOptionalNull != null ? [onAllOptionalNull()] : [];
			} else {
				var _g = [];
				var _g1 = 0;
				var _g2 = decl.length;
				while(_g1 < _g2) {
					var i = _g1++;
					var decl1;
					if(skips[i]) {
						continue;
					} else {
						decl1 = decl[i];
					}
					_g.push(decl1);
				}
				decl = _g;
			}
		}
		var newLine = space != "" && decl.length > 0 ? "\n" : "";
		var json = firstIndent + "{" + newLine;
		json += decl.join("," + newLine) + newLine;
		json += indent + "}";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$89
};
var JsonWriter_$9 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_9"] = JsonWriter_$9;
JsonWriter_$9.__name__ = "JsonWriter_9";
JsonWriter_$9.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var valueWriter = new JsonWriter_$11(this.ignoreNullOptionals);
		var _g = [];
		var h = o.h;
		var key_h = h;
		var key_keys = Object.keys(h);
		var key_length = key_keys.length;
		var key_current = 0;
		while(key_current < key_length) {
			var key = key_keys[key_current++];
			_g.push(indent + space + "\"" + key + "\": " + valueWriter._write(o.h[key],space,level + 1,false,onAllOptionalNull));
		}
		var values = _g;
		var newLine = space != "" && values.length > 0 ? "\n" : "";
		var json = firstIndent + "{" + newLine;
		json += values.join("," + newLine) + newLine;
		json += indent + "}";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$9
};
var JsonWriter_$91 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_91"] = JsonWriter_$91;
JsonWriter_$91.__name__ = "JsonWriter_91";
JsonWriter_$91.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var decl = [indent + space + "\"attributeMultiplier\": " + new JsonWriter_$16(this.ignoreNullOptionals)._write(o.attributeMultiplier,space,level + 1,false,onAllOptionalNull),indent + space + "\"attributes\": " + new JsonWriter_$16(this.ignoreNullOptionals)._write(o.attributes,space,level + 1,false,onAllOptionalNull),indent + space + "\"rank\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.rank,space,level + 1,false,onAllOptionalNull)];
		if(this.ignoreNullOptionals) {
			var skips = [false,false,false];
			if(skips.indexOf(false) == -1) {
				decl = onAllOptionalNull != null ? [onAllOptionalNull()] : [];
			} else {
				var _g = [];
				var _g1 = 0;
				var _g2 = decl.length;
				while(_g1 < _g2) {
					var i = _g1++;
					var decl1;
					if(skips[i]) {
						continue;
					} else {
						decl1 = decl[i];
					}
					_g.push(decl1);
				}
				decl = _g;
			}
		}
		var newLine = space != "" && decl.length > 0 ? "\n" : "";
		var json = firstIndent + "{" + newLine;
		json += decl.join("," + newLine) + newLine;
		json += indent + "}";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$91
};
var JsonWriter_$95 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_95"] = JsonWriter_$95;
JsonWriter_$95.__name__ = "JsonWriter_95";
JsonWriter_$95.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var decl = [indent + space + "\"actions\": " + new JsonWriter_$97(this.ignoreNullOptionals)._write(o.actions,space,level + 1,false,onAllOptionalNull),indent + space + "\"events\": " + new JsonWriter_$97(this.ignoreNullOptionals)._write(o.events,space,level + 1,false,onAllOptionalNull),indent + space + "\"resources\": " + new JsonWriter_$97(this.ignoreNullOptionals)._write(o.resources,space,level + 1,false,onAllOptionalNull)];
		if(this.ignoreNullOptionals) {
			var skips = [false,false,false];
			if(skips.indexOf(false) == -1) {
				decl = onAllOptionalNull != null ? [onAllOptionalNull()] : [];
			} else {
				var _g = [];
				var _g1 = 0;
				var _g2 = decl.length;
				while(_g1 < _g2) {
					var i = _g1++;
					var decl1;
					if(skips[i]) {
						continue;
					} else {
						decl1 = decl[i];
					}
					_g.push(decl1);
				}
				decl = _g;
			}
		}
		var newLine = space != "" && decl.length > 0 ? "\n" : "";
		var json = firstIndent + "{" + newLine;
		json += decl.join("," + newLine) + newLine;
		json += indent + "}";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$95
};
var JsonWriter_$97 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_97"] = JsonWriter_$97;
JsonWriter_$97.__name__ = "JsonWriter_97";
JsonWriter_$97.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var valueWriter = new JsonWriter_$99(this.ignoreNullOptionals);
		var _g = [];
		var h = o.h;
		var key_h = h;
		var key_keys = Object.keys(h);
		var key_length = key_keys.length;
		var key_current = 0;
		while(key_current < key_length) {
			var key = key_keys[key_current++];
			_g.push(indent + space + "\"" + key + "\": " + valueWriter._write(o.h[key],space,level + 1,false,onAllOptionalNull));
		}
		var values = _g;
		var newLine = space != "" && values.length > 0 ? "\n" : "";
		var json = firstIndent + "{" + newLine;
		json += values.join("," + newLine) + newLine;
		json += indent + "}";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$97
};
var JsonWriter_$99 = function(ignoreNullOptionals) {
	if(ignoreNullOptionals == null) {
		ignoreNullOptionals = false;
	}
	this.shouldQuote = true;
	this.ignoreNullOptionals = ignoreNullOptionals;
};
$hxClasses["JsonWriter_99"] = JsonWriter_$99;
JsonWriter_$99.__name__ = "JsonWriter_99";
JsonWriter_$99.prototype = {
	quote: function(str) {
		if(this.shouldQuote) {
			return json2object_writer_StringUtils.quote(str);
		} else {
			return str;
		}
	}
	,dontQuote: function() {
		this.shouldQuote = false;
		return this;
	}
	,buildIndent: function(space,level) {
		if(level == 0) {
			return "";
		}
		var buff_b = "";
		var _g = 0;
		var _g1 = level;
		while(_g < _g1) {
			var i = _g++;
			buff_b += space == null ? "null" : "" + space;
		}
		return buff_b;
	}
	,_write: function(o,space,level,indentFirst,onAllOptionalNull) {
		if(indentFirst == null) {
			indentFirst = false;
		}
		if(level == null) {
			level = 0;
		}
		if(space == null) {
			space = "";
		}
		var indent = this.buildIndent(space,level);
		var firstIndent = indentFirst ? indent : "";
		if(o == null) {
			return firstIndent + "null";
		}
		var decl = [indent + space + "\"amount\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.amount,space,level + 1,false,onAllOptionalNull),indent + space + "\"progressMiliseconds\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.progressMiliseconds,space,level + 1,false,onAllOptionalNull),indent + space + "\"seen\": " + new JsonWriter_$4(this.ignoreNullOptionals)._write(o.seen,space,level + 1,false,onAllOptionalNull)];
		if(this.ignoreNullOptionals) {
			var skips = [false,false,false];
			if(skips.indexOf(false) == -1) {
				decl = onAllOptionalNull != null ? [onAllOptionalNull()] : [];
			} else {
				var _g = [];
				var _g1 = 0;
				var _g2 = decl.length;
				while(_g1 < _g2) {
					var i = _g1++;
					var decl1;
					if(skips[i]) {
						continue;
					} else {
						decl1 = decl[i];
					}
					_g.push(decl1);
				}
				decl = _g;
			}
		}
		var newLine = space != "" && decl.length > 0 ? "\n" : "";
		var json = firstIndent + "{" + newLine;
		json += decl.join("," + newLine) + newLine;
		json += indent + "}";
		return json;
	}
	,write: function(o,space) {
		if(space == null) {
			space = "";
		}
		return this._write(o,space,0,false);
	}
	,__class__: JsonWriter_$99
};
var JsonX = function() { };
$hxClasses["JsonX"] = JsonX;
JsonX.__name__ = "JsonX";
JsonX.stringify = function(value) {
	return JSON.stringify(value);
};
JsonX.parse = function(json) {
	return JSON.parse(json);
};
var MyMacro = function() { };
$hxClasses["MyMacro"] = MyMacro;
MyMacro.__name__ = "MyMacro";
var Main = function() { };
$hxClasses["Main"] = Main;
Main.__name__ = "Main";
Main.main = function() {
	Main.start_game();
};
Main.start_game = function() {
	var physics = { arcade : { gravity : { y : 0}, debug : false}};
	physics["default"] = "arcade";
	var scaleConfig_mode = 5;
	var config = { parent : "game_canvas", physics : physics, width : window.innerWidth, height : window.innerHeight, backgroundColor : "#0f1522", pixelArt : true, scale : { mode : 5}, scene : [PlayScene]};
	var game = new Phaser.Game(config);
};
var ImageRunner = function() {
	this.index = 0;
	this.images = [];
};
$hxClasses["ImageRunner"] = ImageRunner;
ImageRunner.__name__ = "ImageRunner";
ImageRunner.prototype = {
	__class__: ImageRunner
};
var PhaserRenderer = function() { };
$hxClasses["PhaserRenderer"] = PhaserRenderer;
PhaserRenderer.__name__ = "PhaserRenderer";
PhaserRenderer.startFrame = function() {
	PhaserRenderer.z = 0;
	var h = PhaserRenderer.images.h;
	var _g_h = h;
	var _g_keys = Object.keys(h);
	var _g_length = _g_keys.length;
	var _g_current = 0;
	while(_g_current < _g_length) {
		var key = _g_keys[_g_current++];
		var _g1_key = key;
		var _g1_value = _g_h[key];
		var key1 = _g1_key;
		var value = _g1_value;
		value.index = 0;
		var _g = 0;
		var _g1 = value.images;
		while(_g < _g1.length) {
			var image = _g1[_g];
			++_g;
			image.visible = false;
		}
	}
};
PhaserRenderer.getImage = function(imageId) {
	var ir = PhaserRenderer.images.h[imageId];
	if(ir == null) {
		ir = new ImageRunner();
		PhaserRenderer.images.h[imageId] = ir;
	}
	while(ir.images.length <= ir.index) {
		var im = PhaserRenderer.scene.add.image(0,0,imageId);
		im.originX = 0;
		im.originY = 0;
		ir.images.push(im);
	}
	var image = ir.images[ir.index];
	ir.index++;
	image.visible = true;
	return image;
};
PhaserRenderer.drawImage = function(imageId,sx,sy,sw,sh,dx,dy,dw,dh,alpha,color) {
	if(color == null) {
		color = 16777215;
	}
	if(alpha == null) {
		alpha = 1;
	}
	var im = PhaserRenderer.getImage(imageId);
	im.tint = color;
	im.alpha = alpha;
	im.scaleX = dw / sw;
	im.scaleY = dh / sh;
	im.setDepth(PhaserRenderer.z);
	PhaserRenderer.z++;
	if(dw == sw && dh == sh) {
		im.setScale(1,1);
	} else {
		im.setScale(im.scaleX,im.scaleY);
	}
	im.setCrop(sx,sy,sw,sh);
	var fy = im.height - sy * 2;
	im.x = dx + (im.width - sx * 2) * im.scaleX / 2;
	im.y = dy + fy * im.scaleY / 2;
	im.x = im.x | 0;
	im.y = im.y | 0;
};
var Pivot = function() { };
$hxClasses["Pivot"] = Pivot;
Pivot.__name__ = "Pivot";
Pivot.calculateDimension = function(pivotS,pivotD,dimensionS,dimensionD) {
	return -pivotS * dimensionS + dimensionD * pivotD;
};
var PlayScene = function(config) {
	this.saveCount = 5;
	this.saveFileImporterSetup = false;
	Phaser.Scene.call(this,config);
};
$hxClasses["PlayScene"] = PlayScene;
PlayScene.__name__ = "PlayScene";
PlayScene.__super__ = Phaser.Scene;
PlayScene.prototype = $extend(Phaser.Scene.prototype,{
	create: function() {
		var _gthis = this;
		Renderer.width = this.sys.canvas.width;
		Renderer.height = this.sys.canvas.height;
		this.engineMouse = new JSMouse();
		this.input.on("wheel",function(pointer,gameObjects,deltaX,deltaY,deltaZ) {
			_gthis.engineMouse.deltaWheelY = deltaY;
		});
		this.griDimension = new GRIConfigurer();
		this.engineKeyboard = new JSKeyboard();
		PhaserRenderer.scene = this;
		this.graphics = this.add.graphics();
		FileAccessJS.createImportElement();
	}
	,preload: function() {
		this.load.image("button9a","Assets/button9a.png");
		this.load.image("buttonselec9a","Assets/buttonselec9a.png");
		this.load.image("Unnamed_0","Assets/Unnamed_0.png");
		this.load.image("lato13","Assets/lato13.png");
		this.load.image("lato15","Assets/lato15.png");
		this.load.image("lato17","Assets/lato17.png");
		this.load.image("font12_0","Assets/font12_0.png");
		this.load.image("font14_0","Assets/font14_0.png");
		this.load.image("font16_0","Assets/font16_0.png");
		this.load.image("whitep","Assets/whitedot.png");
		this.load.image("greengradient","Assets/greengradient.png");
		this.load.image("bluegradient","Assets/bluegradient.png");
		this.load.image("pinkgradient","Assets/pinkgradient.png");
		this.load.image("arrowleft","Assets/arrowleft.png");
		this.load.image("arrowlefttriple","Assets/arrowlefttriple.png");
		this.load.image("arrowup","Assets/arrowup.png");
		this.load.image("arrowdown","Assets/arrowdown.png");
		this.load.image("arrowrepeat","Assets/arrowrepeat.png");
		this.load.image("arrowrepeatauto","Assets/arrowrepeatauto.png");
		this.load.image("tabback","Assets/tabback.png");
		this.load.image("boot","Assets/boot.png");
		this.load.image("leaf","Assets/leaf.png");
		this.load.image("shield","Assets/shield.png");
		this.load.image("skull","Assets/skull.png");
		this.load.image("steam","Assets/steam.png");
		this.load.image("discord","Assets/discord.png");
		this.load.image("circle","Assets/circle.png");
		this.load.image("logo","Assets/logo.png");
		this.load.image("boss","Assets/boss.png");
		this.load.image("bossb","Assets/bossb.png");
		this.load.image("enemyicon","Assets/enemyicon.png");
		this.load.image("heroicon","Assets/heroicon.png");
		this.load.image("isabelicon","Assets/isabelicon.png");
		this.load.image("main_story","Assets/main_story.jpg");
		this.load.image("mom_story","Assets/mom_story.png");
		this.load.image("cid_story","Assets/cid_story.jpg");
		this.load.image("achiev_a1","Assets/achiev_a1.png");
		this.load.image("achiev_a2","Assets/achiev_a2.png");
		this.load.image("achiev_a3","Assets/achiev_a3.png");
		this.load.image("achiev_e1","Assets/achiev_e1.png");
		this.load.image("achiev_e2","Assets/achiev_e2.png");
		this.load.image("achiev_e3","Assets/achiev_e3.png");
		this.load.image("purplegradient","Assets/purplegradient.png");
		this.load.image("cursor","Assets/cursor.png");
		this.load.image("achiev_e3","Assets/achiev_e3.png");
		this.load.image("buttonkey","Assets/buttonkey.png");
		this.load.image("buttonback","Assets/buttonback.png");
		this.load.image("buttonback_h","Assets/buttonback_h.png");
		this.load.image("buttonback_h_disabled","Assets/buttonback_h_disabled.png");
		this.load.image("buttonback_h_selected","Assets/buttonback_h_selected.png");
		this.load.image("purpleback","Assets/purpleback.png");
		this.load.image("isabel_story","Assets/isabel_story.jpeg");
		this.load.image("iracema_story","Assets/iracema_story.jpeg");
		this.load.image("marino_story","Assets/marino_story.jpeg");
		this.load.image("pedroiv_story","Assets/pedroiv_story.jpeg");
		this.load.image("vitor_story","Assets/vitor_story.jpeg");
	}
	,update: function(time,delta) {
		var griControl = this.griDimension.griControl;
		this.griDimension.update();
		var mouse = Mouse.mouse;
		Renderer.width = this.sys.canvas.width;
		Renderer.height = this.sys.canvas.height;
		mouse.mousePressed.startFrame();
		mouse.mousePressed.state = this.engineMouse.pressed;
		var target = mouse.mousePositionLastFrame;
		var self = mouse.mousePosition;
		var self1 = self;
		var value = self1.x;
		var self1 = target;
		self1.x = value;
		var self1 = self;
		var value = self1.y;
		var self = target;
		self.y = value;
		var self = mouse.mousePosition;
		self.x = this.engineMouse.x;
		self.y = this.engineMouse.y;
		var self = mouse.mouseMoved;
		self.x = mouse.mousePosition.x - mouse.mousePositionLastFrame.x;
		self.y = mouse.mousePosition.y - mouse.mousePositionLastFrame.y;
		mouse.deltaWheelY = this.engineMouse.deltaWheelY;
		var key = Keyboard.keyboard;
		ArraysUtilities.copyContentIntArray(key.charsDown,this.engineKeyboard.charsDown);
		ArraysUtilities.copyContentIntArray(key.charsPressed,this.engineKeyboard.charsPressed);
		ArraysUtilities.copyContentIntArray(key.charsUp,this.engineKeyboard.charsUp);
		this.engineKeyboard.charsDown.length = 0;
		this.engineKeyboard.charsUp.length = 0;
		griControl.update(16);
		PhaserRenderer.startFrame();
		griControl.render();
		this.saveFileImporterSetup = this.updateImportExport(this.saveFileImporterSetup);
		this.saveCount -= delta;
		if(this.saveCount < 0) {
			FileAccessJS.feedSave(CrossTarget.latestSave);
			this.saveCount = 5000;
		}
		FileAccessJS.saveImportVisibility(griControl.view.currentTab == GRIView.tagTabTitle);
		this.engineMouse.deltaWheelY = 0;
		KeyboardToButtonsLogic.endButtonFrame();
	}
	,updateImportExport: function(saveFileImporterSetup) {
		var griControl = this.griDimension.griControl;
		var imp = window.document.getElementById("import__");
		if(imp != null && saveFileImporterSetup == false) {
			if(imp != null) {
				var input = imp;
				input.onchange = function(event) {
					FileUtilities.ReadFile(input.files[0],function(json) {
						if(griControl != null) {
							CrossTarget.SetLocalStorageItem(GRIControl.keyBackup,griControl.battleManager.GetJsonPersistentData());
						} else {
							CrossTarget.SetLocalStorageItem(GRIControl.keyBackup,CrossTarget.GetLocalStorageItem(GRIControl.key));
						}
						griControl.validateSave(json);
						CrossTarget.SetLocalStorageItem(GRIControl.key,json);
						CrossTarget.reload();
						griControl = null;
					});
				};
				saveFileImporterSetup = true;
			}
		}
		return saveFileImporterSetup;
	}
	,__class__: PlayScene
});
var EnemyAreaInformation = function() {
	this.viewOverride = -1;
	this.tags = [];
	this.equipment = [];
};
$hxClasses["EnemyAreaInformation"] = EnemyAreaInformation;
EnemyAreaInformation.__name__ = "EnemyAreaInformation";
EnemyAreaInformation.create = function(sheet,level,nEnemies,sheetId,viewOverride) {
	if(viewOverride == null) {
		viewOverride = -1;
	}
	var eai = new EnemyAreaInformation();
	eai.level = level;
	eai.sheet = sheet;
	eai.nEnemies = nEnemies;
	eai.sheetId = sheetId;
	eai.viewOverride = viewOverride;
	return eai;
};
EnemyAreaInformation.prototype = {
	__class__: EnemyAreaInformation
};
var EnemyAreaFromProceduralUnitRepetition = function() {
	this.aux = new EnemyAreaInformation();
	this.equipments = [];
	this.enemySheets = [];
};
$hxClasses["EnemyAreaFromProceduralUnitRepetition"] = EnemyAreaFromProceduralUnitRepetition;
EnemyAreaFromProceduralUnitRepetition.__name__ = "EnemyAreaFromProceduralUnitRepetition";
EnemyAreaFromProceduralUnitRepetition.prototype = {
	GetProceduralUnitRepeated: function(area) {
		area %= this.units.length;
		var u = this.units[area];
		return u;
	}
	,GetEnemyAreaInformation: function(area) {
		var areaOrig = area;
		area %= this.units.length;
		var u = this.units[area];
		var char = u.proceduralUnit.characteristics[0];
		var enemyId = char;
		var es = this.enemySheets[enemyId];
		var extraEquip = null;
		if(es == null) {
			enemyId = u.randomExtra[0] % this.enemySheets.length;
			es = this.enemySheets[enemyId];
		}
		var nEnemies = -1;
		var levelBonus = 0;
		this.aux.viewOverride = 1;
		if(u.position == u.total - 1) {
			nEnemies = 1;
			levelBonus = 1;
			var hpMultiplier = 400;
			var _g = new haxe_ds_StringMap();
			_g.h["LifeMax"] = hpMultiplier;
			extraEquip = { seen : 0, requiredAttributes : null, type : 1, attributes : null, attributeMultiplier : _g, outsideSystems : null};
			extraEquip.attributes = new haxe_ds_StringMap();
			this.aux.viewOverride = 2;
			if(areaOrig > 8) {
				levelBonus = 3;
			}
			if(areaOrig > 15) {
				levelBonus = 5;
				nEnemies = u.randomExtra[1] % 3 + 1;
			}
			if(areaOrig > 20) {
				levelBonus = 15;
			}
			if(areaOrig > 30) {
				levelBonus = 25;
			}
			if(areaOrig > 40) {
				levelBonus = 30;
			}
			if(areaOrig > 50) {
				levelBonus = 40;
			}
			if(areaOrig > 80) {
				levelBonus = 70;
			}
		}
		this.aux.sheet = es;
		this.aux.nEnemies = nEnemies;
		this.aux.level = levelBonus;
		this.aux.equipment.length = 0;
		if(this.equipments[char] != null || extraEquip != null) {
			if(this.equipments[char] != null) {
				this.aux.equipment.push(this.equipments[char]);
			}
			if(extraEquip != null) {
				this.aux.equipment.push(extraEquip);
			}
		}
		this.aux.sheetId = enemyId;
		this.aux.equipId = char;
		return this.aux;
	}
	,__class__: EnemyAreaFromProceduralUnitRepetition
};
var PrototypeItemMaker = function() {
	this.itemGenerationBaseByType = new ArrayOfArray();
	this.itemAbbreviationByType = new ArrayOfArray();
	this.mods = [];
	this.items = [];
};
$hxClasses["PrototypeItemMaker"] = PrototypeItemMaker;
PrototypeItemMaker.__name__ = "PrototypeItemMaker";
PrototypeItemMaker.prototype = {
	R: function(min,max) {
		return { min : min, max : max};
	}
	,MakeItems: function() {
		var initialItemClose = 20;
		var modComplexStart = 25;
		var modComplexStart2 = 35;
		var normalItemStart = 13;
		var _g = new haxe_ds_StringMap();
		_g.h["LifeMax"] = 5;
		this.AddItem("Shirt","shr",PrototypeItemMaker.itemType_Armor,_g);
		var _g = new haxe_ds_StringMap();
		_g.h["LifeMax"] = 3;
		_g.h["Defense"] = 0.6;
		this.AddItem("Vest","ves",PrototypeItemMaker.itemType_Armor,_g);
		var _g = new haxe_ds_StringMap();
		_g.h["Defense"] = 1;
		this.AddItem("Plate","pla",PrototypeItemMaker.itemType_Armor,_g);
		var _g = new haxe_ds_StringMap();
		_g.h["Attack"] = 1;
		this.AddItem("Broad Sword","bro",PrototypeItemMaker.itemType_Weapon,_g);
		var _g = new haxe_ds_StringMap();
		_g.h["Attack"] = 1;
		var _g1 = new haxe_ds_StringMap();
		var value = this.R(115,115);
		_g1.h["Attack"] = value;
		var value = this.R(80,80);
		_g1.h["Speed"] = value;
		var _g2 = new haxe_ds_StringMap();
		_g2.h["Piercing"] = 25;
		this.AddItem("Heavy Sword","hsw",PrototypeItemMaker.itemType_Weapon,_g,_g1,_g2,normalItemStart);
		var _g = new haxe_ds_StringMap();
		_g.h["Attack"] = 1;
		var _g1 = new haxe_ds_StringMap();
		var value = this.R(150,150);
		_g1.h["Attack"] = value;
		var value = this.R(50,50);
		_g1.h["Speed"] = value;
		var _g2 = new haxe_ds_StringMap();
		_g2.h["Piercing"] = 50;
		this.AddItem("Bastard Sword","bas",PrototypeItemMaker.itemType_Weapon,_g,_g1,_g2,normalItemStart);
		var _g = new haxe_ds_StringMap();
		_g.h["Attack"] = 1;
		var _g1 = new haxe_ds_StringMap();
		var value = this.R(70,70);
		_g1.h["Attack"] = value;
		var value = this.R(175,175);
		_g1.h["Speed"] = value;
		this.AddItem("Dagger","dgr",PrototypeItemMaker.itemType_Weapon,_g,_g1,null,normalItemStart);
		var _g = new haxe_ds_StringMap();
		_g.h["Attack"] = 1;
		var _g1 = new haxe_ds_StringMap();
		var value = this.R(80,80);
		_g1.h["Speed"] = value;
		var _g2 = new haxe_ds_StringMap();
		_g2.h[BattleConstants.counterAttack] = 1;
		this.AddItem("Flamedge","fle",PrototypeItemMaker.itemType_Weapon,_g,_g1,_g2,normalItemStart);
		var _g = new haxe_ds_StringMap();
		_g.h["Defense"] = 1;
		var _g1 = new haxe_ds_StringMap();
		var value = this.R(70,70);
		_g1.h["Attack"] = value;
		var value = this.R(140,140);
		_g1.h["Defense"] = value;
		var _g2 = new haxe_ds_StringMap();
		_g2.h[BattleConstants.counterAttack] = 2;
		this.AddItem("Icewall","icw",PrototypeItemMaker.itemType_Weapon,_g,_g1,_g2,normalItemStart);
		var _g = new haxe_ds_StringMap();
		_g.h["LifeMax"] = 3;
		var _g1 = new haxe_ds_StringMap();
		_g1.h[BattleConstants.counterAttack] = 3;
		this.AddItem("Thunderbolt","thb",PrototypeItemMaker.itemType_Weapon,_g,null,_g1,normalItemStart);
		var _g = new haxe_ds_StringMap();
		_g.h["MagicAttack"] = 1;
		var _g1 = new haxe_ds_StringMap();
		var value = this.R(125,125);
		_g1.h[BattleConstants.MPMax] = value;
		var _g2 = new haxe_ds_StringMap();
		_g2.h["fire-boost"] = 150;
		this.AddItem("Firerod","frr",PrototypeItemMaker.itemType_Weapon,_g,_g1,_g2,normalItemStart);
		var _g = new haxe_ds_StringMap();
		_g.h["MagicAttack"] = 1;
		var _g1 = new haxe_ds_StringMap();
		var value = this.R(125,125);
		_g1.h[BattleConstants.MPMax] = value;
		var _g2 = new haxe_ds_StringMap();
		_g2.h["ice-boost"] = 150;
		this.AddItem("Icerod","icr",PrototypeItemMaker.itemType_Weapon,_g,_g1,_g2,normalItemStart);
		var _g = new haxe_ds_StringMap();
		_g.h["MagicAttack"] = 1;
		var _g1 = new haxe_ds_StringMap();
		var value = this.R(125,125);
		_g1.h[BattleConstants.MPMax] = value;
		var _g2 = new haxe_ds_StringMap();
		_g2.h["thunder-boost"] = 150;
		this.AddItem("Thunderod","thr",PrototypeItemMaker.itemType_Weapon,_g,_g1,_g2,normalItemStart);
		var _g = new haxe_ds_StringMap();
		_g.h["Attack"] = 1;
		var _g1 = new haxe_ds_StringMap();
		_g1.h["Speed"] = 15;
		_g1.h["Attack"] = -2;
		this.AddItem("Wood Sword","wsw",PrototypeItemMaker.itemType_Weapon,_g,null,_g1,0,initialItemClose);
		var _g = new haxe_ds_StringMap();
		_g.h["Attack"] = 1;
		var _g1 = new haxe_ds_StringMap();
		_g1.h["Attack"] = 20;
		_g1.h["Speed"] = -15;
		this.AddItem("Treetrunk","trt",PrototypeItemMaker.itemType_Weapon,_g,null,_g1,0,initialItemClose);
		var _g = new haxe_ds_StringMap();
		var value = this.R(105,110);
		_g.h["Attack"] = value;
		this.AddMod("of the Brute","Barbarian's",_g,null,normalItemStart);
		var _g = new haxe_ds_StringMap();
		var value = this.R(120,150);
		_g.h["Defense"] = value;
		this.AddMod("of the Guardian","Golem's",_g,null,normalItemStart);
		var _g = new haxe_ds_StringMap();
		var value = this.R(115,130);
		_g.h["Speed"] = value;
		this.AddMod("of the Thief","Zidane's",_g,null,normalItemStart);
		var _g = new haxe_ds_StringMap();
		var value = this.R(130,150);
		_g.h["LifeMax"] = value;
		this.AddMod("of Nature","Aerith's",_g,null,normalItemStart);
		var _g = new haxe_ds_StringMap();
		var value = this.R(115,125);
		_g.h["Attack"] = value;
		var value = this.R(70,70);
		_g.h["Defense"] = value;
		this.AddMod("of Rage","Beserker's",_g,null,modComplexStart);
		var _g = new haxe_ds_StringMap();
		var value = this.R(1,5);
		_g.h["Blood"] = value;
		this.AddMod("of Blood","Sanguine",null,_g,modComplexStart2);
		var _g = new haxe_ds_StringMap();
		var value = this.R(155,175);
		_g.h["Defense"] = value;
		var value = this.R(60,60);
		_g.h["Speed"] = value;
		this.AddMod("of the Thick","Dense",_g,null,modComplexStart);
		var _g = new haxe_ds_StringMap();
		var value = this.R(155,175);
		_g.h["Defense"] = value;
		var value = this.R(60,60);
		_g.h["Attack"] = value;
		this.AddMod("of Tranquil","Calm",_g,null,modComplexStart);
		var _g = new haxe_ds_StringMap();
		var value = this.R(70,70);
		_g.h["Speed"] = value;
		var value = this.R(120,130);
		_g.h["Attack"] = value;
		this.AddMod("of Intensity","Auron's",_g,null,modComplexStart);
		var _g = new haxe_ds_StringMap();
		var value = this.R(135,150);
		_g.h["Speed"] = value;
		var value = this.R(60,75);
		_g.h["Attack"] = value;
		this.AddMod("of the T.Hunter","Locke's",_g,null,modComplexStart);
		this.itemAbbreviationByType.adjustLength(3);
		this.itemGenerationBaseByType.adjustLength(3);
		var _g43_current = 0;
		var _g43_array = this.items;
		while(_g43_current < _g43_array.length) {
			var _g44_value = _g43_array[_g43_current];
			var _g44_key = _g43_current++;
			var index = _g44_key;
			var value = _g44_value;
			this.itemAbbreviationByType.pushElement(value.type,value.abbrev);
			this.itemGenerationBaseByType.pushElement(value.type,index);
		}
	}
	,AddMod: function(suffix,prefix,statMultipliers,statAdds,minLevel,maxLevel) {
		if(maxLevel == null) {
			maxLevel = 999999;
		}
		if(minLevel == null) {
			minLevel = 0;
		}
		this.mods.push({ prefix : prefix, suffix : suffix, statMultipliers : statMultipliers, statAdds : statAdds, dropRequirement : { minEnemyLevel : minLevel, maxEnemyLevel : maxLevel}});
	}
	,AddItem: function(name,abbrev,type,scalingStats,statMultipliers,statAdd,minLevel,maxLevel) {
		if(maxLevel == null) {
			maxLevel = 999999;
		}
		if(minLevel == null) {
			minLevel = 0;
		}
		this.items.push({ name : name, abbrev : abbrev, type : type, scalingStats : scalingStats, statMultipliers : statMultipliers, statAdd : statAdd, dropRequirement : { minEnemyLevel : minLevel, maxEnemyLevel : maxLevel}});
		return this.items[this.items.length - 1];
	}
	,__class__: PrototypeItemMaker
};
var RangeUtils = function() { };
$hxClasses["RangeUtils"] = RangeUtils;
RangeUtils.__name__ = "RangeUtils";
RangeUtils.R = function(min,max) {
	return { min : min, max : max};
};
var RandomExtender = function() { };
$hxClasses["RandomExtender"] = RandomExtender;
RandomExtender.__name__ = "RandomExtender";
RandomExtender.Range = function(random,range) {
	return random.randomInt(range.min,range.max);
};
var ModBaseUtils = function() { };
$hxClasses["ModBaseUtils"] = ModBaseUtils;
ModBaseUtils.__name__ = "ModBaseUtils";
ModBaseUtils.pureMod = function(statAdds,statMultipliers) {
	return { prefix : null, suffix : null, statMultipliers : statMultipliers, statAdds : statAdds, dropRequirement : null};
};
var PrototypeSkillMaker = function() {
	this.skills = [];
};
$hxClasses["PrototypeSkillMaker"] = PrototypeSkillMaker;
PrototypeSkillMaker.__name__ = "PrototypeSkillMaker";
PrototypeSkillMaker.prototype = {
	AddSkill: function(id,mpCost) {
	}
	,init: function() {
		this.skills.push({ id : "Regen", profession : "Priest", word : "Nature", effects : [{ target : Target.SELF, effectExecution : function(bm,level,actor,array) {
			var strength = level * 3;
			var _g = new haxe_ds_StringMap();
			_g.h["Regen"] = strength;
			bm.AddBuff({ uniqueId : "regen", addStats : _g, mulStats : null, strength : strength, duration : 8},array[0]);
		}}], mpCost : 20});
		this.skills.push({ id : "Light Slash", profession : "Warrior", word : "Red", effects : [{ target : Target.ENEMY, effectExecution : function(bm,level,actor,array) {
			var strength = level * 5;
			bm.AttackExecute(actor,array[0],50,5 + level,100);
		}}], turnRecharge : 1, mpCost : 5});
		this.skills.push({ id : "Slash", profession : "Warrior", word : "Red", effects : [{ target : Target.ENEMY, effectExecution : function(bm,level,actor,array) {
			var strength = level * 10;
			bm.AttackExecute(actor,array[0],90 + strength,strength,100);
		}}], turnRecharge : 1, mpCost : 15});
		this.skills.push({ id : "Heavy Slash", profession : "Warrior", word : "Red", effects : [{ target : Target.ENEMY, effectExecution : function(bm,level,actor,array) {
			bm.AttackExecute(actor,array[0],100 + level * 30,level * 15,100);
		}}], turnRecharge : 1, mpCost : 40});
		this.skills.push({ id : "Fogo", profession : "Wizard", word : "Fire", effects : [{ target : Target.ENEMY, effectExecution : function(bm,level,actor,array) {
			bm.AttackExecute(actor,array[0],100 + level * 30,level * 15,100,true,"fire");
		}}], turnRecharge : 1, mpCost : 10});
		this.skills.push({ id : "Gelo", profession : "Wizard", word : "Ice", effects : [{ target : Target.ENEMY, effectExecution : function(bm,level,actor,array) {
			bm.AttackExecute(actor,array[0],105 + level * 30,level * 15,100,true,"ice");
		}}], turnRecharge : 1, mpCost : 12});
		this.skills.push({ id : "Raio", profession : "Wizard", word : "Thunder", effects : [{ target : Target.ENEMY, effectExecution : function(bm,level,actor,array) {
			bm.AttackExecute(actor,array[0],100 + level * 25,level * 13,100,true,"thunder");
		}}], turnRecharge : 1, mpCost : 9});
		this.skills.push({ id : "DeSpell", profession : "Unbuffer", word : "Witchhunt", effects : [{ target : Target.ENEMY, effectExecution : function(bm,level,actor,array) {
			var strength = level * 30;
			bm.RemoveBuffs(array[0]);
		}}], mpCost : 10});
		this.skills.push({ id : "Cure", profession : "Mage", word : "White", effects : [{ target : Target.SELF, effectExecution : function(bm,level,actor,array) {
			var bonus = 5 + level * 10;
			var strength = level * bonus;
			bm.Heal(array[0],10,bonus);
		}}], mpCost : 15});
		this.skills.push({ id : "Haste", profession : "Wizard", word : "Time", effects : [{ target : Target.SELF, effectExecution : function(bm,level,actor,array) {
			var bonus = 20;
			var multiplier = 90 + level * 10;
			var _g = new haxe_ds_StringMap();
			_g.h["Speed"] = bonus;
			var _g1 = new haxe_ds_StringMap();
			_g1.h["Speed"] = multiplier;
			bm.AddBuff({ uniqueId : "haste", addStats : _g, mulStats : _g1, strength : level, duration : 8},array[0]);
		}}], mpCost : 45});
		this.skills.push({ id : "Bloodlust", profession : "Sanguiner", word : "Blood", effects : [{ target : Target.SELF, effectExecution : function(bm,level,actor,array) {
			var multiplier = 90 + level * 10;
			var _g = new haxe_ds_StringMap();
			_g.h["Blood"] = 3;
			_g.h["Bloodthirst"] = multiplier;
			bm.AddBuff({ uniqueId : "bloodlust", addStats : _g, mulStats : null, strength : level, duration : 3},array[0]);
		}}], mpCost : 5});
		this.skills.push({ id : "Noblesse", profession : "Highborn", word : "Honour", effects : [{ target : Target.SELF, effectExecution : function(bm,level,actor,array) {
			var _g = new haxe_ds_StringMap();
			_g.h["Defense"] = 3 + level * 2;
			var _g1 = new haxe_ds_StringMap();
			_g1.h["Attack"] = 150 + level * 25;
			bm.AddBuff({ uniqueId : "noblesse", addStats : _g, mulStats : _g1, strength : level, duration : 99, noble : true},array[0]);
		}}], mpCost : 5});
		this.skills.push({ id : "Protect", profession : "Defender", word : "Defense", effects : [{ target : Target.SELF, effectExecution : function(bm,level,actor,array) {
			var bonus = level * 5;
			var multiplier = 110;
			var _g = new haxe_ds_StringMap();
			_g.h["Defense"] = bonus;
			var _g1 = new haxe_ds_StringMap();
			_g1.h["Defense"] = multiplier;
			bm.AddBuff({ uniqueId : "protect", addStats : _g, mulStats : _g1, strength : level, duration : 8},array[0]);
		}}], mpCost : 25});
		this.skills.push({ id : "Sharpen", profession : "Smith", word : "Sharpness", effects : [{ target : Target.SELF, effectExecution : function(bm,level,actor,array) {
			var bonus = 100;
			var multiplier = 100 + 5 * level;
			var _g = new haxe_ds_StringMap();
			_g.h["Piercing"] = bonus;
			var _g1 = new haxe_ds_StringMap();
			_g1.h["Attack"] = multiplier;
			bm.AddBuff({ uniqueId : "pierce", addStats : _g, mulStats : _g1, strength : level, duration : 9},array[0]);
		}}], mpCost : 20});
		this.skills.push({ id : "Armor Break", profession : "Breaker", word : "Destruction", effects : [{ target : Target.ENEMY, effectExecution : function(bm,level,actor,array) {
			var _g = new haxe_ds_StringMap();
			_g.h["Defense"] = -level * 10;
			var _g1 = new haxe_ds_StringMap();
			_g1.h["Defense"] = 50;
			bm.AddBuff({ uniqueId : "Armor Break", addStats : _g, mulStats : _g1, strength : level, duration : 5, debuff : true},array[0]);
		}}], mpCost : 10});
		this.skills.push({ id : "Attack Break", profession : "Breaker", word : "Destruction", effects : [{ target : Target.ENEMY, effectExecution : function(bm,level,actor,array) {
			var _g = new haxe_ds_StringMap();
			_g.h["Attack"] = -level * 10;
			var _g1 = new haxe_ds_StringMap();
			_g1.h["Attack"] = 50;
			bm.AddBuff({ uniqueId : "Attack Break", addStats : _g, mulStats : _g1, strength : level, duration : 5, debuff : true},array[0]);
		}}], mpCost : 10});
	}
	,__class__: PrototypeSkillMaker
};
var ResourceLogic = function() { };
$hxClasses["ResourceLogic"] = ResourceLogic;
ResourceLogic.__name__ = "ResourceLogic";
ResourceLogic.recalculateScalingResource = function(base,res) {
	if(res.lastUsedBaseAttribute != base) {
		var data1 = res.scaling.data1 * 0.001;
		var baseValue = res.scaling.initial;
		if(res.scaling.initialMultiplication) {
			baseValue *= base;
		}
		var expBonus = 0;
		if(res.scaling.exponential) {
			expBonus = Math.pow(data1,base);
		}
		if(expBonus > res.cap) {
			expBonus = res.cap;
		}
		var calculated = expBonus + baseValue | 0;
		calculated -= calculated % res.scaling.minimumIncrement;
		if(calculated < 0 && calculated > res.cap) {
			calculated = res.cap;
		}
		res.calculatedMax = calculated;
		res.lastUsedBaseAttribute = base;
	}
};
ResourceLogic.getExponentialResource = function(expBase,minimumIncrement,initial,cap) {
	var res = { scaling : { data1 : expBase * 1000 | 0, initial : initial, minimumIncrement : minimumIncrement, initialMultiplication : true, exponential : true}, value : 0, lastUsedBaseAttribute : 0, calculatedMax : 0, cap : cap};
	ResourceLogic.recalculateScalingResource(1,res);
	return res;
};
var AttributeLogic = function() { };
$hxClasses["AttributeLogic"] = AttributeLogic;
AttributeLogic.__name__ = "AttributeLogic";
AttributeLogic.AddOld = function(attributes,attributeAddition,quantityOfAddition) {
	var h = attributes.h;
	var _g_h = h;
	var _g_keys = Object.keys(h);
	var _g_length = _g_keys.length;
	var _g_current = 0;
	while(_g_current < _g_length) {
		var key = _g_keys[_g_current++];
		var _g1_key = key;
		var _g1_value = _g_h[key];
		var key1 = _g1_key;
		var value = _g1_value;
		var _g = key1;
		var _g1 = attributes;
		var v = _g1.h[_g] + (attributeAddition.h[key1] * quantityOfAddition | 0);
		_g1.h[_g] = v;
	}
};
AttributeLogic.Add = function(attributes,attributeAddition,quantityOfAddition,result) {
	var h = attributes.h;
	var _g_h = h;
	var _g_keys = Object.keys(h);
	var _g_length = _g_keys.length;
	var _g_current = 0;
	while(_g_current < _g_length) {
		var key = _g_keys[_g_current++];
		var _g1_key = key;
		var _g1_value = _g_h[key];
		var key1 = _g1_key;
		var value = _g1_value;
		var addedValue = attributeAddition.h[key1];
		if(addedValue >= 0 == false && addedValue < 0 == false) {
			addedValue = 0;
		}
		var v = value + (addedValue * quantityOfAddition | 0);
		result.h[key1] = v;
	}
	var h = attributeAddition.h;
	var _g_h = h;
	var _g_keys = Object.keys(h);
	var _g_length = _g_keys.length;
	var _g_current = 0;
	while(_g_current < _g_length) {
		var key = _g_keys[_g_current++];
		var _g1_key = key;
		var _g1_value = _g_h[key];
		var key1 = _g1_key;
		var value = _g1_value;
		if(Object.prototype.hasOwnProperty.call(attributes.h,key1) == false) {
			result.h[key1] = value;
		}
	}
};
var BMConditionType = $hxEnums["BMConditionType"] = { __ename__:true,__constructs__:null
	,ITEM_IN_SLOT_IS_OF_ITEM_TYPE: {_hx_name:"ITEM_IN_SLOT_IS_OF_ITEM_TYPE",_hx_index:0,__enum__:"BMConditionType",toString:$estr}
	,CURRENT_SET_NUMBER: {_hx_name:"CURRENT_SET_NUMBER",_hx_index:1,__enum__:"BMConditionType",toString:$estr}
};
BMConditionType.__constructs__ = [BMConditionType.ITEM_IN_SLOT_IS_OF_ITEM_TYPE,BMConditionType.CURRENT_SET_NUMBER];
var BMCondition = function(ctype,data1,data2,dataS1,dataS2) {
	if(data2 == null) {
		data2 = 0;
	}
	if(data1 == null) {
		data1 = 0;
	}
	this.data1 = data1;
	this.data2 = data2;
	this.dataS1 = dataS1;
	this.dataS2 = dataS2;
	this.cType = ctype;
};
$hxClasses["BMCondition"] = BMCondition;
BMCondition.__name__ = "BMCondition";
BMCondition.prototype = {
	__class__: BMCondition
};
var ConditionalAttributeBonus = function() {
	this.condition = new ConditionGroup();
	this.AttributeBonuses = [];
};
$hxClasses["ConditionalAttributeBonus"] = ConditionalAttributeBonus;
ConditionalAttributeBonus.__name__ = "ConditionalAttributeBonus";
ConditionalAttributeBonus.prototype = {
	__class__: ConditionalAttributeBonus
};
var ConditionGroup = function() {
	this.conditions = [];
};
$hxClasses["ConditionGroup"] = ConditionGroup;
ConditionGroup.__name__ = "ConditionGroup";
ConditionGroup.prototype = {
	__class__: ConditionGroup
};
var EventTypes = $hxEnums["EventTypes"] = { __ename__:true,__constructs__:null
	,GameStart: {_hx_name:"GameStart",_hx_index:0,__enum__:"EventTypes",toString:$estr}
	,ActorDead: {_hx_name:"ActorDead",_hx_index:1,__enum__:"EventTypes",toString:$estr}
	,EquipDrop: {_hx_name:"EquipDrop",_hx_index:2,__enum__:"EventTypes",toString:$estr}
	,EquipFullFail: {_hx_name:"EquipFullFail",_hx_index:3,__enum__:"EventTypes",toString:$estr}
	,EquipFullJustNow: {_hx_name:"EquipFullJustNow",_hx_index:4,__enum__:"EventTypes",toString:$estr}
	,ActorAppear: {_hx_name:"ActorAppear",_hx_index:5,__enum__:"EventTypes",toString:$estr}
	,ActorAttack: {_hx_name:"ActorAttack",_hx_index:6,__enum__:"EventTypes",toString:$estr}
	,ActorLevelUp: {_hx_name:"ActorLevelUp",_hx_index:7,__enum__:"EventTypes",toString:$estr}
	,AreaUnlock: {_hx_name:"AreaUnlock",_hx_index:8,__enum__:"EventTypes",toString:$estr}
	,RegionUnlock: {_hx_name:"RegionUnlock",_hx_index:9,__enum__:"EventTypes",toString:$estr}
	,AreaComplete: {_hx_name:"AreaComplete",_hx_index:10,__enum__:"EventTypes",toString:$estr}
	,AreaEnterFirstTime: {_hx_name:"AreaEnterFirstTime",_hx_index:11,__enum__:"EventTypes",toString:$estr}
	,AreaEnter: {_hx_name:"AreaEnter",_hx_index:12,__enum__:"EventTypes",toString:$estr}
	,GetXP: {_hx_name:"GetXP",_hx_index:13,__enum__:"EventTypes",toString:$estr}
	,PermanentStatUpgrade: {_hx_name:"PermanentStatUpgrade",_hx_index:14,__enum__:"EventTypes",toString:$estr}
	,statUpgrade: {_hx_name:"statUpgrade",_hx_index:15,__enum__:"EventTypes",toString:$estr}
	,SkillUse: {_hx_name:"SkillUse",_hx_index:16,__enum__:"EventTypes",toString:$estr}
	,MPRunOut: {_hx_name:"MPRunOut",_hx_index:17,__enum__:"EventTypes",toString:$estr}
	,BuffRemoval: {_hx_name:"BuffRemoval",_hx_index:18,__enum__:"EventTypes",toString:$estr}
	,DebuffBlock: {_hx_name:"DebuffBlock",_hx_index:19,__enum__:"EventTypes",toString:$estr}
	,EquipMaxed: {_hx_name:"EquipMaxed",_hx_index:20,__enum__:"EventTypes",toString:$estr}
	,GameStartOnVersion: {_hx_name:"GameStartOnVersion",_hx_index:21,__enum__:"EventTypes",toString:$estr}
	,DayNRetention: {_hx_name:"DayNRetention",_hx_index:22,__enum__:"EventTypes",toString:$estr}
	,DayNRolling: {_hx_name:"DayNRolling",_hx_index:23,__enum__:"EventTypes",toString:$estr}
	,heal: {_hx_name:"heal",_hx_index:24,__enum__:"EventTypes",toString:$estr}
};
EventTypes.__constructs__ = [EventTypes.GameStart,EventTypes.ActorDead,EventTypes.EquipDrop,EventTypes.EquipFullFail,EventTypes.EquipFullJustNow,EventTypes.ActorAppear,EventTypes.ActorAttack,EventTypes.ActorLevelUp,EventTypes.AreaUnlock,EventTypes.RegionUnlock,EventTypes.AreaComplete,EventTypes.AreaEnterFirstTime,EventTypes.AreaEnter,EventTypes.GetXP,EventTypes.PermanentStatUpgrade,EventTypes.statUpgrade,EventTypes.SkillUse,EventTypes.MPRunOut,EventTypes.BuffRemoval,EventTypes.DebuffBlock,EventTypes.EquipMaxed,EventTypes.GameStartOnVersion,EventTypes.DayNRetention,EventTypes.DayNRolling,EventTypes.heal];
var ActorReference = function(type,pos) {
	this.type = type;
	this.pos = pos;
};
$hxClasses["ActorReference"] = ActorReference;
ActorReference.__name__ = "ActorReference";
ActorReference.prototype = {
	__class__: ActorReference
};
var GameEventTrigger = function(eType) {
	this.necessaryData2 = GameEventTrigger.IGNORE;
	this.necessaryData = GameEventTrigger.IGNORE;
	this.necessaryType = eType;
};
$hxClasses["GameEventTrigger"] = GameEventTrigger;
GameEventTrigger.__name__ = "GameEventTrigger";
GameEventTrigger.prototype = {
	__class__: GameEventTrigger
};
var GameEvent = function(eType) {
	this.dataString2 = null;
	this.dataString = null;
	this.type = eType;
};
$hxClasses["GameEvent"] = GameEvent;
GameEvent.__name__ = "GameEvent";
GameEvent.prototype = {
	__class__: GameEvent
};
var Target = $hxEnums["Target"] = { __ename__:true,__constructs__:null
	,SELF: {_hx_name:"SELF",_hx_index:0,__enum__:"Target",toString:$estr}
	,ENEMY: {_hx_name:"ENEMY",_hx_index:1,__enum__:"Target",toString:$estr}
	,ALL: {_hx_name:"ALL",_hx_index:2,__enum__:"Target",toString:$estr}
};
Target.__constructs__ = [Target.SELF,Target.ENEMY,Target.ALL];
var WeightedPrize = function(prize,weight) {
	this.prizeId = prize;
	this.weight = weight;
};
$hxClasses["WeightedPrize"] = WeightedPrize;
WeightedPrize.__name__ = "WeightedPrize";
WeightedPrize.prototype = {
	__class__: WeightedPrize
};
var WeightedDistribution = function() {
	this.prizes = [];
};
$hxClasses["WeightedDistribution"] = WeightedDistribution;
WeightedDistribution.__name__ = "WeightedDistribution";
WeightedDistribution.prototype = {
	__class__: WeightedDistribution
};
var WeightedDistributionLogic = function() { };
$hxClasses["WeightedDistributionLogic"] = WeightedDistributionLogic;
WeightedDistributionLogic.__name__ = "WeightedDistributionLogic";
WeightedDistributionLogic.getAPrize = function(distribution,random) {
	var totalWeight = 0;
	var _g_current = 0;
	var _g_array = distribution.prizes;
	while(_g_current < _g_array.length) {
		var _g1_value = _g_array[_g_current];
		var _g1_key = _g_current++;
		var index = _g1_key;
		var value = _g1_value;
		totalWeight += value.weight;
	}
	var chosenWeight = random.randomInt(0,totalWeight - 1);
	var initialWeight = chosenWeight;
	var _g_current = 0;
	var _g_array = distribution.prizes;
	while(_g_current < _g_array.length) {
		var _g1_value = _g_array[_g_current];
		var _g1_key = _g_current++;
		var index = _g1_key;
		var value = _g1_value;
		if(chosenWeight < value.weight) {
			return value.prizeId;
		} else {
			chosenWeight -= value.weight;
		}
	}
	haxe_Log.trace("ERROR No prize returned!!! " + initialWeight,{ fileName : "Sources\\Reusable/RandomDistributionDrop.hx", lineNumber : 35, className : "WeightedDistributionLogic", methodName : "getAPrize"});
	return -1;
};
var WeightedDistributionView = function() { };
$hxClasses["WeightedDistributionView"] = WeightedDistributionView;
WeightedDistributionView.__name__ = "WeightedDistributionView";
WeightedDistributionView.getDistributionSpreadAsText = function(distribution,prizeNames) {
	var text = "";
	var total = 0;
	var _g_current = 0;
	var _g_array = distribution.prizes;
	while(_g_current < _g_array.length) {
		var _g1_value = _g_array[_g_current];
		var _g1_key = _g_current++;
		var index = _g1_key;
		var value = _g1_value;
		total += value.weight;
	}
	var _g_current = 0;
	var _g_array = distribution.prizes;
	while(_g_current < _g_array.length) {
		var _g1_value = _g_array[_g_current];
		var _g1_key = _g_current++;
		var index = _g1_key;
		var value = _g1_value;
		var name = prizeNames[value.prizeId];
		var probability = value.weight * 100 / total | 0;
		text += "" + name + ":  " + probability + "%\n";
	}
	return text;
};
var Rect = function(x,y,width,height) {
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["Rect"] = Rect;
Rect.__name__ = "Rect";
Rect.fromTwoPoints = function(pointA,pointB) {
	return new Rect(Math.min(pointA.x,pointB.x),Math.min(pointA.y,pointB.y),Math.abs(pointB.x - pointA.x),Math.abs(pointB.y - pointA.y));
};
Rect.fromRectShape = function(r) {
	return new Rect(r.x,r.y,r.width,r.height);
};
Rect.openRangeContains = function(aStart,aWidth,x) {
	if(x > aStart) {
		return x < aStart + aWidth;
	} else {
		return false;
	}
};
Rect.closedRangeContains = function(aStart,aWidth,x) {
	if(x >= aStart) {
		return x <= aStart + aWidth;
	} else {
		return false;
	}
};
Rect.openRangesIntersect = function(aStart,aWidth,bStart,bWidth) {
	return !(aStart >= bStart + bWidth || bStart >= aStart + aWidth);
};
Rect.prototype = {
	equals: function(r) {
		if(r != null && this.x == r.x && this.y == r.y && this.width == r.width) {
			return this.height == r.height;
		} else {
			return false;
		}
	}
	,clone: function() {
		return new Rect(this.x,this.y,this.width,this.height);
	}
	,copyTo: function(r) {
		r.x = this.x;
		r.y = this.y;
		r.width = this.width;
		r.height = this.height;
	}
	,overlaps: function(r) {
		var aStart = this.x;
		var bStart = r.x;
		if(!(aStart >= bStart + r.width || bStart >= aStart + this.width)) {
			var aStart = this.y;
			var bStart = r.y;
			return !(aStart >= bStart + r.height || bStart >= aStart + this.height);
		} else {
			return false;
		}
	}
	,intersect: function(r) {
		var _this = new Rect(this.x,this.y,this.width,this.height);
		if(_this.x < r.x) {
			_this.width -= r.x - _this.x;
			_this.x = r.x;
		}
		if(_this.y < r.y) {
			_this.height -= r.y - _this.y;
			_this.y = r.y;
		}
		if(_this.x + _this.width > r.x + r.width) {
			_this.width -= _this.x + _this.width - (r.x + r.width);
		}
		if(_this.y + _this.height > r.y + r.height) {
			_this.height -= _this.y + _this.height - (r.y + r.height);
		}
		return _this;
	}
	,intersectWith: function(r) {
		if(this.x < r.x) {
			this.width -= r.x - this.x;
			this.x = r.x;
		}
		if(this.y < r.y) {
			this.height -= r.y - this.y;
			this.y = r.y;
		}
		if(this.x + this.width > r.x + r.width) {
			this.width -= this.x + this.width - (r.x + r.width);
		}
		if(this.y + this.height > r.y + r.height) {
			this.height -= this.y + this.height - (r.y + r.height);
		}
		return this;
	}
	,containsPoint: function(p) {
		var aStart = this.x;
		var x = p.x;
		if(x >= aStart && x <= aStart + this.width) {
			var aStart = this.y;
			var x = p.y;
			if(x >= aStart) {
				return x <= aStart + this.height;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	,distanceToPoint: function(p) {
		var dx = Math.max(Math.abs(p.x - (this.x + 0.5 * this.width)) - 0.5 * this.width,0);
		var dy = Math.max(Math.abs(p.y - (this.y + 0.5 * this.height)) - 0.5 * this.height,0);
		return Math.sqrt(dx * dx + dy * dy);
	}
	,distanceToRect: function(r) {
		var dx = Math.max(Math.abs(r.x + 0.5 * r.width - (this.x + 0.5 * this.width)) - 0.5 * (this.width + r.width),0);
		var dy = Math.max(Math.abs(r.y + 0.5 * r.height - (this.y + 0.5 * this.height)) - 0.5 * (this.height + r.height),0);
		return Math.sqrt(dx * dx + dy * dy);
	}
	,addWith: function(v) {
		if(v.x < 0.0) {
			this.x += v.x;
			this.width -= v.x;
		} else {
			this.width += v.x;
		}
		if(v.y < 0.0) {
			this.y += v.y;
			this.height -= v.y;
		} else {
			this.height += v.y;
		}
		return this;
	}
	,getVertex: function(index) {
		var this1 = new Vector2Default(this.x,this.y);
		var v = this1;
		switch(index) {
		case 0:
			break;
		case 1:
			v.x += this.width;
			break;
		case 2:
			v.x += this.width;
			v.y += this.height;
			break;
		case 3:
			v.y += this.height;
			break;
		default:
			throw haxe_Exception.thrown("Invalid vertex index.");
		}
		return v;
	}
	,get_center: function() {
		var this1 = new Vector2Default(this.x + 0.5 * this.width,this.y + 0.5 * this.height);
		return this1;
	}
	,get_topX: function() {
		return this.x + this.width;
	}
	,get_topY: function() {
		return this.y + this.height;
	}
	,set_topX: function(topX) {
		this.width = topX - this.x;
		return this.x + this.width;
	}
	,set_topY: function(topY) {
		this.height = topY - this.y;
		return this.height + this.y;
	}
	,get_area: function() {
		return this.width * this.height;
	}
	,get_isEmpty: function() {
		if(!(this.width <= 0.0)) {
			return this.height <= 0.0;
		} else {
			return true;
		}
	}
	,__class__: Rect
	,__properties__: {set_topY:"set_topY",get_topY:"get_topY",set_topX:"set_topX",get_topX:"get_topX",get_isEmpty:"get_isEmpty",get_area:"get_area",get_center:"get_center"}
};
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.isObject = function(v) {
	if(v == null) {
		return false;
	}
	var t = typeof(v);
	if(!(t == "string" || t == "object" && v.__enum__ == null)) {
		if(t == "function") {
			return (v.__name__ || v.__ename__) != null;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
Reflect.copy = function(o) {
	if(o == null) {
		return null;
	}
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		o2[f] = Reflect.field(o,f);
	}
	return o2;
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice;
		var a1 = arguments;
		var a2 = a.call(a1);
		return f(a2);
	};
};
var RenderTest = function() { };
$hxClasses["RenderTest"] = RenderTest;
RenderTest.__name__ = "RenderTest";
RenderTest.createTestElement1 = function(uiManager) {
	var button = new UIElement();
	button.id = "test";
	button.data.stringData = "test";
	button.style.ninePatch = new NinePatch(4,"button9a",32);
	var self = button.transform.size;
	self.x = 145;
	self.y = 45;
	var mask = new UIElement();
	mask.style.fill = true;
	mask.style.color = 0;
	var self = mask.transform.size;
	self.x = 300;
	self.y = 50;
	var self = mask.transform.position;
	self.x = 0;
	self.y = 20;
	button.mask = mask.transform;
	return button;
};
var Renderer = function() { };
$hxClasses["Renderer"] = Renderer;
Renderer.__name__ = "Renderer";
Renderer.fillRect = function(transform,color,mask) {
	Renderer.fillRectSimple(color,transform.get_x(),transform.get_y(),transform.size.x,transform.size.y,mask);
};
Renderer.drawRect = function(transform,color,size,mask) {
	transform.feedRect(Renderer.aux);
	var x = Renderer.aux.x;
	var y = Renderer.aux.y;
	var w = Renderer.aux.width;
	var h = Renderer.aux.height;
	Renderer.fillRectSimple(color,x,y,1,h,mask);
	Renderer.fillRectSimple(color,x + w - 1,y,1,h,mask);
	Renderer.fillRectSimple(color,x,y,w,1,mask);
	Renderer.fillRectSimple(color,x,y + h - 1,w,1,mask);
};
Renderer.fillRectSimple = function(color,x,y,w,h,mask) {
	if(mask != null) {
		Renderer.aux.x = x;
		Renderer.aux.y = y;
		Renderer.aux.width = w;
		Renderer.aux.height = h;
		mask.feedRect(Renderer.aux2);
		var _this = Renderer.aux;
		var r = Renderer.aux2;
		if(_this.x < r.x) {
			_this.width -= r.x - _this.x;
			_this.x = r.x;
		}
		if(_this.y < r.y) {
			_this.height -= r.y - _this.y;
			_this.y = r.y;
		}
		if(_this.x + _this.width > r.x + r.width) {
			_this.width -= _this.x + _this.width - (r.x + r.width);
		}
		if(_this.y + _this.height > r.y + r.height) {
			_this.height -= _this.y + _this.height - (r.y + r.height);
		}
		if(Renderer.aux.width <= 0) {
			return;
		}
		if(Renderer.aux.height <= 0) {
			return;
		}
		x = Renderer.aux.x;
		y = Renderer.aux.y;
		w = Renderer.aux.width;
		h = Renderer.aux.height;
	}
	Renderer.drawScaledSubImage("whitep",null,0,0,1,1,x,y,w,h,color);
};
Renderer.NinePatchS = function(ninePatch,x,y,w,h,color,border,mask) {
	var leftX = x;
	var minY = y;
	var rightX = x + w;
	var maxY = y + h;
	var imageName = ninePatch.spriteName;
	var image = ninePatch.rect;
	Renderer.drawScaledSubImage(imageName,mask,border,border,image.width - border * 2,image.height - border * 2,leftX + border,minY + border,w - border * 2,h - border * 2,color);
	Renderer.drawScaledSubImage(imageName,mask,border,0,image.width - border * 2,border,leftX + border,minY,w - border * 2,border,color);
	Renderer.drawScaledSubImage(imageName,mask,border,image.height - border,image.width - border * 2,border,leftX,maxY - border,w,border,color);
	Renderer.drawScaledSubImage(imageName,mask,image.width - border,border,border,image.height - border * 2,rightX - border,minY + border,border,h - border * 2,color);
	Renderer.drawScaledSubImage(imageName,mask,0,border,border,image.height - border * 2,leftX,minY + border,border,h - border * 2,color);
	Renderer.drawSubImage(imageName,mask,leftX,minY,0,0,border,border,color);
	Renderer.drawSubImage(imageName,mask,rightX - border,minY,image.width - border,0,border,border,color);
	Renderer.drawSubImage(imageName,mask,leftX,maxY - border,0,image.height - border,border,border,color);
	Renderer.drawSubImage(imageName,mask,rightX - border,maxY - border,image.width - border,image.height - border,border,border,color);
};
Renderer.sprite = function(sprite,transform,style,mask,offsetX,offsetY) {
	transform.feedRect(Renderer.aux);
	Renderer.drawScaledSubImage(sprite.spriteName,mask,0,0,sprite.rect.width,sprite.rect.height,Renderer.aux.x + offsetX,Renderer.aux.y + offsetY,Renderer.aux.width,Renderer.aux.height,style.color,style.alpha);
};
Renderer.NinePatch = function(ninePatch,transform,style,mask) {
	var border = style.ninePatch.borderSize;
	var leftX = transform.position.x;
	var minY = transform.position.y;
	var rightX = leftX + transform.size.x;
	var maxY = minY + transform.size.y;
	var w = transform.size.x;
	var h = transform.size.y;
	var imageName = ninePatch.spriteName;
	var image = ninePatch.rect;
	var color = style.color;
	Renderer.NinePatchS(ninePatch,leftX,minY,w,h,16777215,12,mask);
};
Renderer.drawScaledSubImage = function(imageName,mask,sx,sy,sw,sh,dx,dy,dw,dh,color,alpha) {
	if(alpha == null) {
		alpha = 255;
	}
	if(color == null) {
		color = 16777215;
	}
	var tmp = color != 0;
	if(mask != null) {
		var destR = Renderer.aux3;
		var maskR = Renderer.aux2;
		var sourceR = Renderer.aux;
		mask.feedRect(maskR);
		sourceR.x = sx;
		sourceR.y = sy;
		sourceR.width = sw;
		sourceR.height = sh;
		destR.x = dx;
		destR.y = dy;
		destR.width = dw;
		destR.height = dh;
		if(destR.x < maskR.x) {
			destR.width -= maskR.x - destR.x;
			destR.x = maskR.x;
		}
		if(destR.y < maskR.y) {
			destR.height -= maskR.y - destR.y;
			destR.y = maskR.y;
		}
		if(destR.x + destR.width > maskR.x + maskR.width) {
			destR.width -= destR.x + destR.width - (maskR.x + maskR.width);
		}
		if(destR.y + destR.height > maskR.y + maskR.height) {
			destR.height -= destR.y + destR.height - (maskR.y + maskR.height);
		}
		if(destR.width <= 0 || destR.height <= 0) {
			return;
		}
		if(destR.width != dw || destR.height != dh) {
			mask.feedRect(Renderer.aux4);
			var scaleX = sw / dw;
			var scaleY = sh / dh;
			Renderer.aux4.x = sx + (Renderer.aux4.x - dx) * scaleX;
			Renderer.aux4.y = sy + (Renderer.aux4.y - dy) * scaleY;
			Renderer.aux4.width *= scaleX;
			Renderer.aux4.height *= scaleY;
			var r = Renderer.aux4;
			if(sourceR.x < r.x) {
				sourceR.width -= r.x - sourceR.x;
				sourceR.x = r.x;
			}
			if(sourceR.y < r.y) {
				sourceR.height -= r.y - sourceR.y;
				sourceR.y = r.y;
			}
			if(sourceR.x + sourceR.width > r.x + r.width) {
				sourceR.width -= sourceR.x + sourceR.width - (r.x + r.width);
			}
			if(sourceR.y + sourceR.height > r.y + r.height) {
				sourceR.height -= sourceR.y + sourceR.height - (r.y + r.height);
			}
			sx = sourceR.x;
			sy = sourceR.y;
			sw = sourceR.width;
			sh = sourceR.height;
			dx = destR.x;
			dy = destR.y;
			dw = destR.width;
			dh = destR.height;
		}
	}
	dx = dx | 0;
	dy = dy | 0;
	PhaserRenderer.drawImage(imageName,sx,sy,sw,sh,dx,dy,dw,dh,alpha / 255,color);
};
Renderer.drawSubImage = function(img,mask,x,y,sx,sy,sw,sh,color) {
	if(color == null) {
		color = 16777215;
	}
	Renderer.drawScaledSubImage(img,mask,sx,sy,sw,sh,x,y,sw,sh);
};
var RetentionLogic = function() {
	this.gameStartDate = null;
};
$hxClasses["RetentionLogic"] = RetentionLogic;
RetentionLogic.__name__ = "RetentionLogic";
RetentionLogic.prototype = {
	calculateDayFromStart: function(rd) {
		if(this.gameStartDate == null) {
			this.gameStartDate = HxOverrides.strDate(rd.gameStartDate);
		}
		var timeMili = new Date().getTime() - this.gameStartDate.getTime();
		var timeDay = timeMili / 86400000;
		return Math.floor(timeDay);
	}
	,checkAndSendRetentionEvents: function(rd) {
		var dfs = this.calculateDayFromStart(rd);
		if(dfs > rd.latestDayRetention) {
			GameAnalyticsIntegration.SendProgressCompleteEvent("retention","day" + dfs);
			var _g = 0;
			var _g1 = RetentionLogic.rollingRetentionDays;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(i <= dfs && rd.reportedRollingRetention.indexOf(i) == -1) {
					rd.reportedRollingRetention.push(i);
					GameAnalyticsIntegration.SendProgressCompleteEvent("rollingretention","day" + i);
				}
			}
			rd.latestDayRetention = dfs;
		} else {
			if(dfs < 0) {
				GameAnalyticsIntegration.SendProgressCompleteEvent("retentionnegative","day" + dfs);
				return;
			}
			if(dfs < rd.latestDayRetention) {
				GameAnalyticsIntegration.SendProgressCompleteEvent("retentionbackintime","day" + dfs,"day" + rd.latestDayRetention);
				return;
			}
		}
	}
	,__class__: RetentionLogic
};
var SaveAssistant = function() { };
$hxClasses["SaveAssistant"] = SaveAssistant;
SaveAssistant.__name__ = "SaveAssistant";
SaveAssistant.GetPersistenceMaster = function(jsonData) {
	if(jsonData != null && jsonData != "" && jsonData != "undefined") {
		var persistenceMaster = null;
		try {
			var parsed = JSON.parse(jsonData);
			persistenceMaster = parsed;
		} catch( _g ) {
			var e = haxe_Exception.caught(_g);
			haxe_Log.trace("save problem!",{ fileName : "Sources\\GRI\\logic/SaveAssistant.hx", lineNumber : 12, className : "SaveAssistant", methodName : "GetPersistenceMaster"});
			ErrorX.exception = e;
		}
		if(persistenceMaster != null) {
			if(persistenceMaster.worldVersion >= 602 == false) {
				persistenceMaster.jsonGameplay = jsonData;
			}
		} else {
			return SaveAssistant.EmptyPersistence();
		}
		return persistenceMaster;
	} else {
		return SaveAssistant.EmptyPersistence();
	}
};
SaveAssistant.EmptyPersistence = function() {
	return { worldVersion : -1, jsonStory : null, jsonGameplay : null, jsonGeneral : null, jsonGameplayDimensions : null, jsonVillageDimensions : null, jsonVillageShared : null};
};
var ScalableDistributionData = function(atZeroValue,baseForExponential) {
	if(baseForExponential == null) {
		baseForExponential = 1;
	}
	if(atZeroValue == null) {
		atZeroValue = 1;
	}
	this.overrideValues = [atZeroValue];
	this.baseForExponential = baseForExponential;
};
$hxClasses["ScalableDistributionData"] = ScalableDistributionData;
ScalableDistributionData.__name__ = "ScalableDistributionData";
ScalableDistributionData.prototype = {
	setOverrideValue: function(index,value) {
		while(this.overrideValues.length <= index) this.overrideValues.push(-99999);
		this.overrideValues[index] = value;
	}
	,__class__: ScalableDistributionData
};
var ScalingLogic = function() { };
$hxClasses["ScalingLogic"] = ScalingLogic;
ScalingLogic.__name__ = "ScalingLogic";
ScalingLogic.getValue = function(value,distribution) {
	var base = 1;
	var overrideV = distribution.overrideValues;
	var expoente = value;
	if(overrideV != null) {
		if(overrideV.length > value) {
			if(overrideV[value] != -99999) {
				return overrideV[value];
			}
		}
		var index = ScalingLogic.findNextSmallerIndexThatIsNotIgnore(overrideV,value);
		if(index >= 0) {
			base = overrideV[index];
			expoente -= index;
		}
	}
	return base * Math.pow(distribution.baseForExponential,expoente) | 0;
};
ScalingLogic.findNextSmallerIndexThatIsNotIgnore = function(array,bigIndex) {
	if(bigIndex > array.length) {
		bigIndex = array.length;
	}
	var _g = 0;
	var _g1 = bigIndex;
	while(_g < _g1) {
		var i = _g++;
		var index = bigIndex - i - 1;
		if(array[index] != -99999) {
			return index;
		}
	}
	return -1;
};
var SkelDataUnit = function() {
};
$hxClasses["SkelDataUnit"] = SkelDataUnit;
SkelDataUnit.__name__ = "SkelDataUnit";
SkelDataUnit.prototype = {
	__class__: SkelDataUnit
};
var SkeletonLoaderX = function() {
	this.skelDatas = new haxe_ds_StringMap();
	this.skelJson = new spine_SkeletonJson(new AttachmentLoaderX());
};
$hxClasses["SkeletonLoaderX"] = SkeletonLoaderX;
SkeletonLoaderX.__name__ = "SkeletonLoaderX";
SkeletonLoaderX.prototype = {
	createSkeletonUnit: function(dataFileName) {
		var sD = this.skelDatas.h[dataFileName];
		if(sD == null) {
			sD = this.readSkeletonData(dataFileName);
		}
		var su = new SkeletonUnit();
		su.skeleton = new spine_Skeleton(sD.skelData);
		su.animationState = new spine_AnimationState(sD.skelAnimData);
		return su;
	}
	,readSkeletonData: function(fileName) {
		var jsonText = CrossTarget.getTextResource(fileName);
		var jsonV = new spine_support_utils_JsonDynamic(JSON.parse(jsonText));
		var skelData = this.skelJson.readSkeletonData(jsonV);
		var sdu = new SkelDataUnit();
		sdu.skelData = skelData;
		sdu.skelAnimData = new spine_AnimationStateData(skelData);
		this.skelDatas.h[fileName] = sdu;
		return sdu;
	}
	,__class__: SkeletonLoaderX
};
var SkeletonToTransform = function() {
};
$hxClasses["SkeletonToTransform"] = SkeletonToTransform;
SkeletonToTransform.__name__ = "SkeletonToTransform";
SkeletonToTransform.prototype = {
	__class__: SkeletonToTransform
};
var SkeletonUnit = function() {
	this.yDirection = 1.0;
	this.xDirection = 1.0;
	this.tBinds = [];
};
$hxClasses["SkeletonUnit"] = SkeletonUnit;
SkeletonUnit.__name__ = "SkeletonUnit";
SkeletonUnit.prototype = {
	startAnimation: function(animName) {
		var _this = this.animationState;
		var animation = _this.data.skeletonData.findAnimation(animName);
		if(animation == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("Animation not found: " + animName));
		}
		if(animation == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("animation cannot be null."));
		}
		var interrupt = true;
		var current;
		if(0 < _this.tracks.length) {
			current = _this.tracks[0];
		} else {
			var this1 = _this.tracks;
			var size = 1;
			var len = this1.length;
			if(len > size) {
				this1.splice(size,size - len);
			} else if(len < size) {
				this1[size - 1] = null;
			}
			current = null;
		}
		if(current != null) {
			if(current.nextTrackLast == -1) {
				_this.tracks[0] = current.mixingFrom;
				var _this1 = _this.queue;
				_this1.objects.push(1);
				_this1.objects.push(current);
				var _this1 = _this.queue;
				_this1.objects.push(2);
				_this1.objects.push(current);
				_this1.AnimationState_this.animationsChanged = true;
				var next = current.next;
				while(next != null) {
					var _this1 = _this.queue;
					_this1.objects.push(3);
					_this1.objects.push(next);
					next = next.next;
				}
				current.next = null;
				current = current.mixingFrom;
				interrupt = false;
			} else {
				var next = current.next;
				while(next != null) {
					var _this1 = _this.queue;
					_this1.objects.push(3);
					_this1.objects.push(next);
					next = next.next;
				}
				current.next = null;
			}
		}
		var entry = _this.trackEntryPool.obtain();
		entry.trackIndex = 0;
		entry.animation = animation;
		entry.loop = false;
		entry.holdPrevious = false;
		entry.eventThreshold = 0;
		entry.attachmentThreshold = 0;
		entry.drawOrderThreshold = 0;
		entry.animationStart = 0;
		entry.animationEnd = animation.getDuration();
		entry.animationLast = -1;
		entry.nextAnimationLast = -1;
		entry.delay = 0;
		entry.trackTime = 0;
		entry.trackLast = -1;
		entry.nextTrackLast = -1;
		entry.trackEnd = 999999999.0;
		entry.timeScale = 1;
		entry.alpha = 1;
		entry.interruptAlpha = 1;
		entry.mixTime = 0;
		var tmp;
		if(current == null) {
			tmp = 0;
		} else {
			var _this1 = _this.data;
			var from = current.animation;
			if(from == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("from cannot be null."));
			}
			if(animation == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("to cannot be null."));
			}
			_this1.tempAnimationStateDataKey.a1 = from;
			_this1.tempAnimationStateDataKey.a2 = animation;
			var this1 = _this1.animationToMixTime;
			var key = _this1.tempAnimationStateDataKey;
			var defaultValue = _this1.defaultMix;
			if(defaultValue == null) {
				defaultValue = 0.0;
			}
			var key1 = key.getHashCode();
			var entries = this1.h[key1];
			var result = defaultValue;
			if(entries != null) {
				var _g = 0;
				var _g1 = entries.length;
				while(_g < _g1) {
					var i = _g++;
					var entry1 = entries[i];
					if(entry1.key.equals(key)) {
						result = entry1.value;
						break;
					}
				}
			}
			tmp = result;
		}
		entry.mixDuration = tmp;
		entry.mixBlend = 2;
		var entry1 = entry;
		var from;
		if(0 < _this.tracks.length) {
			from = _this.tracks[0];
		} else {
			var this1 = _this.tracks;
			var size = 1;
			var len = this1.length;
			if(len > size) {
				this1.splice(size,size - len);
			} else if(len < size) {
				this1[size - 1] = null;
			}
			from = null;
		}
		_this.tracks[0] = entry1;
		entry1.previous = null;
		if(from != null) {
			if(interrupt) {
				var _this1 = _this.queue;
				_this1.objects.push(1);
				_this1.objects.push(from);
			}
			entry1.mixingFrom = from;
			from.mixingTo = entry1;
			entry1.mixTime = 0;
			if(from.mixingFrom != null && from.mixDuration > 0) {
				entry1.interruptAlpha *= Math.min(1,from.mixTime / from.mixDuration | 0);
			}
			var this1 = from.timelinesRotation;
			this1.splice(0,this1.length);
		}
		var _this1 = _this.queue;
		_this1.objects.push(0);
		_this1.objects.push(entry1);
		_this1.AnimationState_this.animationsChanged = true;
		var _this1 = _this.queue;
		if(!_this1.drainDisabled) {
			_this1.drainDisabled = true;
			var listenersArray = _this1.AnimationState_this.listeners;
			var i = 0;
			while(i < _this1.objects.length) {
				var type = _this1.objects[i];
				var result = _this1.objects[i + 1];
				var entry = result;
				var listenersCount = listenersArray.array.length;
				var listeners = listenersArray.begin();
				while(true) {
					var _switchCond2 = type;
					if(_switchCond2 == 0) {
						if(entry.listener != null) {
							entry.listener.start(entry);
						}
						var ii = 0;
						while(ii < listenersCount) {
							var result1 = listeners[ii];
							result1.start(entry);
							++ii;
						}
						break;
					} else if(_switchCond2 == 1) {
						if(entry.listener != null) {
							entry.listener.interrupt(entry);
						}
						var ii1 = 0;
						while(ii1 < listenersCount) {
							var result2 = listeners[ii1];
							result2.interrupt(entry);
							++ii1;
						}
						break;
					} else if(_switchCond2 == 2) {
						if(entry.listener != null) {
							entry.listener.end(entry);
						}
						var ii2 = 0;
						while(ii2 < listenersCount) {
							var result3 = listeners[ii2];
							result3.end(entry);
							++ii2;
						}
						if(entry.listener != null) {
							entry.listener.dispose(entry);
						}
						var ii3 = 0;
						while(ii3 < listenersCount) {
							var result4 = listeners[ii3];
							result4.dispose(entry);
							++ii3;
						}
						_this1.AnimationState_this.trackEntryPool.free(entry);
						break;
					} else if(_switchCond2 == 3) {
						if(entry.listener != null) {
							entry.listener.dispose(entry);
						}
						var ii4 = 0;
						while(ii4 < listenersCount) {
							var result5 = listeners[ii4];
							result5.dispose(entry);
							++ii4;
						}
						_this1.AnimationState_this.trackEntryPool.free(entry);
						break;
					} else if(_switchCond2 == 4) {
						if(entry.listener != null) {
							entry.listener.complete(entry);
						}
						var ii5 = 0;
						while(ii5 < listenersCount) {
							var result6 = listeners[ii5];
							result6.complete(entry);
							++ii5;
						}
						break;
					} else if(_switchCond2 == 5) {
						var result7 = _this1.objects[i++ + 2];
						var event = result7;
						if(entry.listener != null) {
							entry.listener.event(entry,event);
						}
						var ii6 = 0;
						while(ii6 < listenersCount) {
							var result8 = listeners[ii6];
							result8.event(entry,event);
							++ii6;
						}
						break;
					}
					break;
				}
				listenersArray.end();
				i += 2;
			}
			var this1 = _this1.objects;
			this1.splice(0,this1.length);
			_this1.drainDisabled = false;
		}
	}
	,isIdle: function() {
		var _this = this.animationState;
		var track = 0 >= _this.tracks.length ? null : _this.tracks[0];
		if(track == null) {
			return true;
		}
		if(track.trackTime >= track.animationEnd - track.animationStart && track.loop == false) {
			return true;
		}
		return track.animation == null;
	}
	,bind: function(boneName,transform,slotName) {
		var stt = new SkeletonToTransform();
		stt.bone = this.skeleton.findBone(boneName);
		if(slotName != null) {
			stt.slot = this.skeleton.findSlot(slotName);
			if(stt.slot == null) {
				haxe_Log.trace("Slot not found!",{ fileName : "Sources\\SpineUtils/SpineManager.hx", lineNumber : 41, className : "SkeletonUnit", methodName : "bind"});
			}
		}
		stt.transform = transform;
		this.tBinds.push(stt);
	}
	,__class__: SkeletonUnit
};
var SpineManager = function() {
	this.loader = new SkeletonLoaderX();
	this.skeletons = [];
};
$hxClasses["SpineManager"] = SpineManager;
SpineManager.__name__ = "SpineManager";
SpineManager.prototype = {
	loadSkeletonUnit: function(skeletonFile) {
		var su = this.loader.createSkeletonUnit(skeletonFile);
		this.skeletons.push(su);
		return su;
	}
	,update: function(delta) {
		var _g = 0;
		var _g1 = this.skeletons;
		while(_g < _g1.length) {
			var unit = _g1[_g];
			++_g;
			var _this = unit.animationState;
			var delta1 = delta;
			delta1 *= _this.timeScale;
			var tracks = _this.tracks;
			var i = 0;
			var n = _this.tracks.length;
			while(i < n) {
				var result = tracks[i];
				var current = result;
				if(current == null) {
					++i;
					continue;
				}
				current.animationLast = current.nextAnimationLast;
				current.trackLast = current.nextTrackLast;
				var currentDelta = delta1 * current.timeScale;
				if(current.delay > 0) {
					current.delay -= currentDelta;
					if(current.delay > 0) {
						++i;
						continue;
					}
					currentDelta = -current.delay;
					current.delay = 0;
				}
				var next = current.next;
				if(next != null) {
					var nextTime = current.trackLast - next.delay;
					if(nextTime >= 0) {
						next.delay = 0;
						next.trackTime += current.timeScale == 0 ? 0 : (nextTime / current.timeScale + delta1) * next.timeScale;
						current.trackTime += currentDelta;
						var from;
						if(i < _this.tracks.length) {
							from = _this.tracks[i];
						} else {
							var this1 = _this.tracks;
							var size = i + 1;
							var len = this1.length;
							if(len > size) {
								this1.splice(size,size - len);
							} else if(len < size) {
								this1[size - 1] = null;
							}
							from = null;
						}
						_this.tracks[i] = next;
						next.previous = null;
						if(from != null) {
							var _this1 = _this.queue;
							_this1.objects.push(1);
							_this1.objects.push(from);
							next.mixingFrom = from;
							from.mixingTo = next;
							next.mixTime = 0;
							if(from.mixingFrom != null && from.mixDuration > 0) {
								next.interruptAlpha *= Math.min(1,from.mixTime / from.mixDuration | 0);
							}
							var this2 = from.timelinesRotation;
							this2.splice(0,this2.length);
						}
						var _this2 = _this.queue;
						_this2.objects.push(0);
						_this2.objects.push(next);
						_this2.AnimationState_this.animationsChanged = true;
						while(next.mixingFrom != null) {
							next.mixTime += delta1;
							next = next.mixingFrom;
						}
						++i;
						continue;
					}
				} else if(current.trackLast >= current.trackEnd && current.mixingFrom == null) {
					tracks[i] = null;
					var _this3 = _this.queue;
					_this3.objects.push(2);
					_this3.objects.push(current);
					_this3.AnimationState_this.animationsChanged = true;
					var next1 = current.next;
					while(next1 != null) {
						var _this4 = _this.queue;
						_this4.objects.push(3);
						_this4.objects.push(next1);
						next1 = next1.next;
					}
					current.next = null;
					++i;
					continue;
				}
				var tmp;
				if(current.mixingFrom != null) {
					var from1 = current.mixingFrom;
					if(from1 == null) {
						tmp = true;
					} else {
						var from2 = from1.mixingFrom;
						var finished;
						if(from2 == null) {
							finished = true;
						} else {
							var finished1 = _this.updateMixingFrom(from2,delta1);
							from2.animationLast = from2.nextAnimationLast;
							from2.trackLast = from2.nextTrackLast;
							if(from1.mixTime > 0 && from1.mixTime >= from1.mixDuration) {
								if(from2.totalAlpha == 0 || from1.mixDuration == 0) {
									from1.mixingFrom = from2.mixingFrom;
									if(from2.mixingFrom != null) {
										from2.mixingFrom.mixingTo = from1;
									}
									from1.interruptAlpha = from2.interruptAlpha;
									var _this5 = _this.queue;
									_this5.objects.push(2);
									_this5.objects.push(from2);
									_this5.AnimationState_this.animationsChanged = true;
								}
								finished = finished1;
							} else {
								from2.trackTime += delta1 * from2.timeScale;
								from1.mixTime += delta1;
								finished = false;
							}
						}
						from1.animationLast = from1.nextAnimationLast;
						from1.trackLast = from1.nextTrackLast;
						if(current.mixTime > 0 && current.mixTime >= current.mixDuration) {
							if(from1.totalAlpha == 0 || current.mixDuration == 0) {
								current.mixingFrom = from1.mixingFrom;
								if(from1.mixingFrom != null) {
									from1.mixingFrom.mixingTo = current;
								}
								current.interruptAlpha = from1.interruptAlpha;
								var _this6 = _this.queue;
								_this6.objects.push(2);
								_this6.objects.push(from1);
								_this6.AnimationState_this.animationsChanged = true;
							}
							tmp = finished;
						} else {
							from1.trackTime += delta1 * from1.timeScale;
							current.mixTime += delta1;
							tmp = false;
						}
					}
				} else {
					tmp = false;
				}
				if(tmp) {
					var from3 = current.mixingFrom;
					current.mixingFrom = null;
					if(from3 != null) {
						from3.mixingTo = null;
					}
					while(from3 != null) {
						var _this7 = _this.queue;
						_this7.objects.push(2);
						_this7.objects.push(from3);
						_this7.AnimationState_this.animationsChanged = true;
						from3 = from3.mixingFrom;
					}
				}
				current.trackTime += currentDelta;
				++i;
			}
			var _this8 = _this.queue;
			if(!_this8.drainDisabled) {
				_this8.drainDisabled = true;
				var listenersArray = _this8.AnimationState_this.listeners;
				var i1 = 0;
				while(i1 < _this8.objects.length) {
					var type = _this8.objects[i1];
					var result1 = _this8.objects[i1 + 1];
					var entry = result1;
					var listenersCount = listenersArray.array.length;
					var listeners = listenersArray.begin();
					while(true) {
						var _switchCond2 = type;
						if(_switchCond2 == 0) {
							if(entry.listener != null) {
								entry.listener.start(entry);
							}
							var ii = 0;
							while(ii < listenersCount) {
								var result2 = listeners[ii];
								result2.start(entry);
								++ii;
							}
							break;
						} else if(_switchCond2 == 1) {
							if(entry.listener != null) {
								entry.listener.interrupt(entry);
							}
							var ii1 = 0;
							while(ii1 < listenersCount) {
								var result3 = listeners[ii1];
								result3.interrupt(entry);
								++ii1;
							}
							break;
						} else if(_switchCond2 == 2) {
							if(entry.listener != null) {
								entry.listener.end(entry);
							}
							var ii2 = 0;
							while(ii2 < listenersCount) {
								var result4 = listeners[ii2];
								result4.end(entry);
								++ii2;
							}
							if(entry.listener != null) {
								entry.listener.dispose(entry);
							}
							var ii3 = 0;
							while(ii3 < listenersCount) {
								var result5 = listeners[ii3];
								result5.dispose(entry);
								++ii3;
							}
							_this8.AnimationState_this.trackEntryPool.free(entry);
							break;
						} else if(_switchCond2 == 3) {
							if(entry.listener != null) {
								entry.listener.dispose(entry);
							}
							var ii4 = 0;
							while(ii4 < listenersCount) {
								var result6 = listeners[ii4];
								result6.dispose(entry);
								++ii4;
							}
							_this8.AnimationState_this.trackEntryPool.free(entry);
							break;
						} else if(_switchCond2 == 4) {
							if(entry.listener != null) {
								entry.listener.complete(entry);
							}
							var ii5 = 0;
							while(ii5 < listenersCount) {
								var result7 = listeners[ii5];
								result7.complete(entry);
								++ii5;
							}
							break;
						} else if(_switchCond2 == 5) {
							var result8 = _this8.objects[i1++ + 2];
							var event = result8;
							if(entry.listener != null) {
								entry.listener.event(entry,event);
							}
							var ii6 = 0;
							while(ii6 < listenersCount) {
								var result9 = listeners[ii6];
								result9.event(entry,event);
								++ii6;
							}
							break;
						}
						break;
					}
					listenersArray.end();
					i1 += 2;
				}
				var this3 = _this8.objects;
				this3.splice(0,this3.length);
				_this8.drainDisabled = false;
			}
			if(unit.isIdle() == false) {
				unit.animationState.apply(unit.skeleton);
				var _this9 = unit.skeleton;
				var bones = _this9.bones;
				var i2 = 0;
				var n1 = _this9.bones.length;
				while(i2 < n1) {
					var result10 = bones[i2];
					var bone = result10;
					bone.ax = bone.x;
					bone.ay = bone.y;
					bone.arotation = bone.rotation;
					bone.ascaleX = bone.scaleX;
					bone.ascaleY = bone.scaleY;
					bone.ashearX = bone.shearX;
					bone.ashearY = bone.shearY;
					++i2;
				}
				var cache = _this9.cache;
				var i3 = 0;
				var n2 = _this9.cache.length;
				while(i3 < n2) {
					var result11 = cache[i3];
					result11.update();
					++i3;
				}
				var _g_current = 0;
				var _g_array = unit.tBinds;
				while(_g_current < _g_array.length) {
					var _g1_value = _g_array[_g_current];
					var _g1_key = _g_current++;
					var index = _g1_key;
					var value = _g1_value;
					var worldX = value.bone.worldX * unit.xDirection;
					var worldY = -value.bone.worldY * unit.yDirection;
					var self = value.transform.position;
					self.x = worldX;
					self.y = worldY;
					value.transform.active = true;
					if(value.slot != null && value.slot.attachment == null) {
						value.transform.active = false;
					} else {
						var tmp1 = value.slot != null;
					}
				}
			} else {
				var _g_current1 = 0;
				var _g_array1 = unit.tBinds;
				while(_g_current1 < _g_array1.length) {
					var _g1_value1 = _g_array1[_g_current1];
					var _g1_key1 = _g_current1++;
					var index1 = _g1_key1;
					var value1 = _g1_value1;
					value1.transform.active = false;
				}
			}
		}
	}
	,addAndBind: function(icon,skeletonFile,bone,slot) {
		var su = this.loadSkeletonUnit(skeletonFile);
		su.bind(bone,icon.offsetAnimationTransform,slot);
		return su;
	}
	,__class__: SpineManager
};
var GRIStoryControlData = function() {
	this.eventHolder = new DataEventHolder();
	this.requestBattleTab = false;
	this.storyStartedFromAnotherTab = false;
	this.state = StoryControlState.MEMORY;
};
$hxClasses["GRIStoryControlData"] = GRIStoryControlData;
GRIStoryControlData.__name__ = "GRIStoryControlData";
GRIStoryControlData.prototype = {
	__class__: GRIStoryControlData
};
var StoryControlState = $hxEnums["StoryControlState"] = { __ename__:true,__constructs__:null
	,MEMORY: {_hx_name:"MEMORY",_hx_index:0,__enum__:"StoryControlState",toString:$estr}
	,STORY: {_hx_name:"STORY",_hx_index:1,__enum__:"StoryControlState",toString:$estr}
};
StoryControlState.__constructs__ = [StoryControlState.MEMORY,StoryControlState.STORY];
var StoryControlLogic = function() { };
$hxClasses["StoryControlLogic"] = StoryControlLogic;
StoryControlLogic.__name__ = "StoryControlLogic";
StoryControlLogic.createStoryControl = function(view) {
	var scd = new GRIStoryControlData();
	scd.view = view;
	scd.viewTab = new GRIViewMemoryTab();
	scd.viewStory = new GRIViewStory(view);
	return scd;
};
StoryControlLogic.Init = function(jsonStory,runtime) {
	var cutscenes = JsonStoryTypes.jsonparsercutscenes.fromJson(jsonStory);
	runtime.cutscenes = cutscenes;
	var parser = new hscript_Parser();
	var _g = 0;
	var _g1 = cutscenes.length;
	while(_g < _g1) {
		var i = _g++;
		runtime.messageRuntimeInfo[i] = [];
		if(Object.prototype.hasOwnProperty.call(runtime.persistence.progressionData.h,cutscenes[i].id) == false) {
			runtime.persistence.progressionData.h[cutscenes[i].id] = { index : 0, timesCompleted : 0, visible : false, visibleSeen : false, wantToWatch : false};
		}
		var vs = cutscenes[i].visibilityScript;
		if(vs != null) {
			var script = parser.parseString(vs);
			runtime.visibilityConditionScripts.push(script);
		} else {
			runtime.visibilityConditionScripts.push(null);
		}
		var _g2 = 0;
		var _g3 = cutscenes[i].messages.length;
		while(_g2 < _g3) {
			var j = _g2++;
			var sc = cutscenes[i].messages[j].script;
			var script1 = null;
			if(sc != null) {
				script1 = parser.parseString(sc);
			}
			runtime.messageRuntimeInfo[i][j] = { script : script1};
		}
	}
};
StoryControlLogic.updateStoryButtons = function(runtime,view,storyView) {
	var _g = 0;
	var _g1 = runtime.cutscenes.length;
	while(_g < _g1) {
		var i = _g++;
		var prog = runtime.persistence.progressionData.h[runtime.cutscenes[i].id];
		if(runtime.cutsceneStartable == null && prog.timesCompleted == 0 && prog.visible == true && runtime.cutscene == null) {
			runtime.cutsceneStartable = runtime.cutscenes[i];
		}
		if(prog.visible && prog.timesCompleted > 0) {
			var completed = false;
			completed = prog.timesCompleted > 0;
			var resumable = prog.index > 0;
			var newLabel = prog.wantToWatch;
			var newLabelText = "NEW";
			if(prog.timesCompleted > 1) {
				newLabelText = "Watch later";
			}
			storyView.storyButtonFeed(i,runtime.cutscenes[i].title,completed,resumable,newLabel,newLabelText,view,i);
		} else {
			storyView.storyButtonHide(i);
		}
	}
};
StoryControlLogic.setupView = function(controlData) {
	var viewGRI = controlData.view;
	viewGRI.uiCreation.singleTag(GRIView.tagTabMemory);
	viewGRI.uiCreation.tags.push(StoryControlLogic.TAG_STORY_SCREEN);
	controlData.viewStory.setup();
	controlData.viewTab.setup(viewGRI);
	StoryControlLogic.changeStoryState(controlData,StoryControlState.MEMORY);
};
StoryControlLogic.changeStoryState = function(controlData,newState) {
	controlData.state = newState;
	var state = newState;
	controlData.view.ui.tagVisibility(StoryControlLogic.TAG_MEMORY_BUTTON_SCREEN,state == StoryControlState.MEMORY);
	controlData.view.ui.tagVisibility(StoryControlLogic.TAG_STORY_SCREEN,state == StoryControlState.STORY);
	controlData.view.ui.tagVisibility(GRIView.TAG_TAB_BUTTON,state != StoryControlState.STORY);
	if(newState == StoryControlState.MEMORY) {
		controlData.view.ui.enterCursorGroup(controlData.viewTab.cursorGroup);
	}
};
StoryControlLogic.startStory = function(controlData) {
	StoryControlLogic.changeStoryState(controlData,StoryControlState.STORY);
	if(controlData.view.currentTab != GRIView.tagTabMemory) {
		controlData.view.showTab(GRIView.tagTabMemory);
		controlData.storyStartedFromAnotherTab = true;
	} else {
		controlData.storyStartedFromAnotherTab = false;
	}
	controlData.viewStory.startStory();
};
StoryControlLogic.update = function(update,controlData,executer) {
	controlData.eventHolder.dataEvents.length = 0;
	var viewGRI = controlData.view;
	viewGRI.ui.extendElementHeight(controlData.viewTab.scroll.viewport,5);
	viewGRI.ui.extendElementHeight(controlData.viewStory.scroll.viewport,95);
	viewGRI.uiCreation.singleTag(GRIView.tagTabMemory);
	viewGRI.uiCreation.tags.push(StoryControlLogic.TAG_MEMORY_BUTTON_SCREEN);
	controlData.runtime.cutsceneStartable = null;
	StoryControlLogic.updateStoryButtons(controlData.runtime,controlData.view,controlData.viewTab);
	var runtime = controlData.runtime;
	viewGRI.ui.genUI.updateAll();
	if(runtime.cutsceneStartable != null && runtime.cutscene == null) {
		controlData.eventHolder.dataEvents.push(StoryControlLogic.sceneStartedEventNatural(runtime.cutsceneStartable.id));
		StoryLogic.StartStory(runtime.cutsceneStartable.id,runtime);
		StoryControlLogic.startStory(controlData);
		viewGRI.ui.genUI.updateAll();
		haxe_Log.trace("Cutscene Start",{ fileName : "Sources\\GRI/StoryControl.hx", lineNumber : 152, className : "StoryControlLogic", methodName : "update"});
	}
	StoryLogic.Update(runtime);
	StoryLogic.VisibilityUpdate(true,runtime,executer);
	var cutscene = runtime.cutscene;
	viewGRI.uiCreation.singleTag(GRIView.tagTabMemory);
	viewGRI.uiCreation.tags.push(StoryControlLogic.TAG_STORY_SCREEN);
	if(cutscene != null) {
		var view = controlData.viewStory;
		while(view.amountOfStoryMessagesShown <= runtime.currentStoryProgression.index) {
			var m = cutscene.messages[view.amountOfStoryMessagesShown];
			var speakerImage = null;
			if(m.speaker != null) {
				speakerImage = runtime.speakerToImage.h[m.speaker.toLowerCase()];
			}
			view.latestMessageUpdate(m.body,m.speaker,speakerImage,view.amountOfStoryMessagesShown,0);
		}
	} else if(controlData.state == StoryControlState.STORY) {
		if(controlData.storyStartedFromAnotherTab) {
			controlData.storyStartedFromAnotherTab = false;
			controlData.requestBattleTab = true;
		}
		StoryControlLogic.changeStoryState(controlData,StoryControlState.MEMORY);
	}
	var _g_current = 0;
	var _g_array = viewGRI.ui.dataEvents;
	while(_g_current < _g_array.length) {
		var _g1_value = _g_array[_g_current];
		var _g1_key = _g_current++;
		var index = _g1_key;
		var value = _g1_value;
		var argument = value.intData;
		var cutscenes = controlData.runtime.cutscenes;
		if(value.stringData == GRIViewStory.DATA_BUTTON_ADVANCE) {
			StoryLogic.MessageAdvance(runtime);
		}
		if(value.stringData == GRIViewStory.DATA_BUTTON_LATER) {
			StoryLogic.WatchLater(runtime);
		}
		if(value.stringData == GRIViewStory.DATA_BUTTON_SKIP) {
			StoryLogic.SkipStory(runtime);
		}
		if(value.stringData == GRIViewMemoryTab.DATA_START) {
			StoryLogic.StartStory(cutscenes[argument].id,runtime);
			StoryControlLogic.startStory(controlData);
		}
		if(value.stringData == GRIViewMemoryTab.DATA_RESTART) {
			StoryLogic.StartStory(cutscenes[argument].id,runtime);
			StoryControlLogic.startStory(controlData);
		}
		if(value.stringData == GRIViewMemoryTab.DATA_RESUME) {
			StoryLogic.StartStory(cutscenes[argument].id,runtime,true);
			StoryControlLogic.startStory(controlData);
		}
	}
};
StoryControlLogic.ReadJsonPersistentData = function(json) {
	var persistence = JsonStoryTypes.jsonparserstory.fromJson(json);
	return persistence;
};
StoryControlLogic.GetJsonPersistentData = function(runtime) {
	return JsonStoryTypes.jsonwriterstory.write(runtime.persistence);
};
StoryControlLogic.tryStoryVisible = function(cutsceneId,data) {
	StoryLogic.forceCutsceneVisible(cutsceneId,false,data.runtime);
};
StoryControlLogic.sceneStartedEventNatural = function(sceneId) {
	var d = new Data();
	d.stringData = GRIViewStory.EVENT_STORY_START_NATURAL;
	d.stringData2 = sceneId;
	return d;
};
var StoryLogic = function() { };
$hxClasses["StoryLogic"] = StoryLogic;
StoryLogic.__name__ = "StoryLogic";
StoryLogic.Update = function(runtime) {
};
StoryLogic.RunScript = function(executer,script) {
};
StoryLogic.VisibilityUpdate = function(storyButtonsVisible,runtime,executer) {
	var cutsceneExtraDatas = runtime.cutsceneExtra;
	var _g = 0;
	var _g1 = runtime.cutscenes.length;
	while(_g < _g1) {
		var i = _g++;
		var cutsceneExtra = cutsceneExtraDatas[i];
		var cutsceneId = runtime.cutscenes[i].id;
		var prog = runtime.persistence.progressionData.h[cutsceneId];
		if(prog != null) {
			var visible = prog.visible;
			if(visible == false) {
				var autoVisibleOn = true;
				if(cutsceneExtra != null) {
					autoVisibleOn = cutsceneExtra.autoVisibilityOn;
				}
				if(autoVisibleOn) {
					var wantVisible = true;
					if(runtime.visibilityConditionScripts[i] != null) {
						wantVisible = executer.execute(runtime.visibilityConditionScripts[i]);
					}
					if(wantVisible) {
						prog.visible = true;
					}
				}
			}
			if(storyButtonsVisible) {
				if(prog.visible) {
					prog.visibleSeen = true;
				}
			}
		}
	}
};
StoryLogic.forceCutsceneVisible = function(cutsceneId,storyButtonsVisible,runtime) {
	var prog = runtime.persistence.progressionData.h[cutsceneId];
	if(prog != null) {
		var visible = prog.visible;
		if(visible == false) {
			var wantVisible = true;
			if(wantVisible) {
				prog.visible = true;
			}
		}
		if(storyButtonsVisible) {
			if(prog.visible) {
				prog.visibleSeen = true;
			}
		}
	}
};
StoryLogic.StartStory = function(sceneId,runtime,resume) {
	if(resume == null) {
		resume = false;
	}
	var progressionData = runtime.persistence.progressionData;
	if(resume == false) {
		progressionData.h[sceneId].index = 0;
	}
	runtime.currentStoryProgression = progressionData.h[sceneId];
	var _g = 0;
	var _g1 = runtime.cutscenes;
	while(_g < _g1.length) {
		var a = _g1[_g];
		++_g;
		if(a.id == sceneId) {
			runtime.currentCutsceneIndex = runtime.cutscenes.indexOf(a);
			runtime.cutscene = a;
			break;
		}
	}
};
StoryLogic.MessageAdvance = function(runtime) {
	runtime.currentStoryProgression.index++;
	if(runtime.currentStoryProgression.index >= runtime.cutscene.messages.length) {
		runtime.currentStoryProgression.timesCompleted++;
		runtime.currentStoryProgression.index = 0;
		runtime.currentStoryProgression.wantToWatch = false;
		runtime.currentStoryProgression = null;
		runtime.cutscene = null;
	}
};
StoryLogic.SkipStory = function(runtime) {
	if(runtime.currentStoryProgression.timesCompleted <= 0) {
		runtime.currentStoryProgression.timesCompleted++;
	}
	runtime.currentStoryProgression.wantToWatch = false;
	runtime.currentStoryProgression = null;
	runtime.cutscene = null;
};
StoryLogic.WatchLater = function(runtime) {
	if(runtime.currentStoryProgression == null) {
		return;
	}
	if(runtime.currentStoryProgression.timesCompleted <= 0) {
		runtime.currentStoryProgression.timesCompleted++;
	}
	runtime.currentStoryProgression.wantToWatch = true;
	runtime.currentStoryProgression = null;
	runtime.cutscene = null;
};
var CutsceneExtraData = function(autoVisible) {
	this.autoVisibilityOn = true;
	this.autoVisibilityOn = autoVisible;
};
$hxClasses["CutsceneExtraData"] = CutsceneExtraData;
CutsceneExtraData.__name__ = "CutsceneExtraData";
CutsceneExtraData.prototype = {
	__class__: CutsceneExtraData
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var TalentData = function() {
	this.setData = null;
	this.spendCurrencyOnReroll = 50;
	this.getCurrencyOnTrain_valuePerLevel = 25;
	this.getCurrencyOnTrain_valueBase = 50;
	this.getCurrencyOnTrain_key = null;
};
$hxClasses["TalentData"] = TalentData;
TalentData.__name__ = "TalentData";
TalentData.prototype = {
	__class__: TalentData
};
var TalentRuntimeData = function() {
};
$hxClasses["TalentRuntimeData"] = TalentRuntimeData;
TalentRuntimeData.__name__ = "TalentRuntimeData";
TalentRuntimeData.prototype = {
	__class__: TalentRuntimeData
};
var TalentToSetData = function() {
};
$hxClasses["TalentToSetData"] = TalentToSetData;
TalentToSetData.__name__ = "TalentToSetData";
TalentToSetData.prototype = {
	__class__: TalentToSetData
};
var GRITalentContent = function() { };
$hxClasses["GRITalentContent"] = GRITalentContent;
GRITalentContent.__name__ = "GRITalentContent";
GRITalentContent.feedContent = function(model) {
	var _g_current = 0;
	var _g_array = model.battleManager.itemBases;
	while(_g_current < _g_array.length) {
		var _g1_value = _g_array[_g_current];
		var _g1_key = _g_current++;
		var index = _g1_key;
		var value = _g1_value;
		if(value.type == PrototypeItemMaker.itemType_Weapon) {
			var talent = new TalentData();
			talent.talentName = "" + value.name + " Basics";
			talent.getCurrencyOnTrain_key = "" + value.name + " Practice Point";
			talent.setData = new TalentToSetData();
			talent.setData.battleCondition = new BMCondition(BMConditionType.ITEM_IN_SLOT_IS_OF_ITEM_TYPE,PrototypeItemMaker.itemType_Weapon,index);
			model.talents.push(talent);
		}
	}
	var rerollabeModsForEquipTalents = model.rerollabeModsForEquipTalents;
	var _g = new haxe_ds_StringMap();
	var value = RangeUtils.R(104,105);
	_g.h["Attack"] = value;
	rerollabeModsForEquipTalents.push(ModBaseUtils.pureMod(null,_g));
	var _g = new haxe_ds_StringMap();
	var value = RangeUtils.R(104,105);
	_g.h["Defense"] = value;
	rerollabeModsForEquipTalents.push(ModBaseUtils.pureMod(null,_g));
	var _g = new haxe_ds_StringMap();
	var value = RangeUtils.R(104,105);
	_g.h[BattleConstants.MAGICATTACK] = value;
	rerollabeModsForEquipTalents.push(ModBaseUtils.pureMod(null,_g));
	var _g = new haxe_ds_StringMap();
	var value = RangeUtils.R(104,105);
	_g.h[BattleConstants.MAGICDEFENSE] = value;
	rerollabeModsForEquipTalents.push(ModBaseUtils.pureMod(null,_g));
	var _g = new haxe_ds_StringMap();
	var value = RangeUtils.R(104,105);
	_g.h["Speed"] = value;
	rerollabeModsForEquipTalents.push(ModBaseUtils.pureMod(null,_g));
	var _g = new haxe_ds_StringMap();
	var value = RangeUtils.R(6,7);
	_g.h["Attack"] = value;
	rerollabeModsForEquipTalents.push(ModBaseUtils.pureMod(_g,null));
	var _g = new haxe_ds_StringMap();
	var value = RangeUtils.R(4,5);
	_g.h["Speed"] = value;
	rerollabeModsForEquipTalents.push(ModBaseUtils.pureMod(_g,null));
	var _g = new haxe_ds_StringMap();
	var value = RangeUtils.R(4,5);
	_g.h["Defense"] = value;
	rerollabeModsForEquipTalents.push(ModBaseUtils.pureMod(_g,null));
	var _g = new haxe_ds_StringMap();
	var value = RangeUtils.R(6,7);
	_g.h[BattleConstants.MAGICATTACK] = value;
	rerollabeModsForEquipTalents.push(ModBaseUtils.pureMod(_g,null));
	var _g = new haxe_ds_StringMap();
	var value = RangeUtils.R(4,5);
	_g.h[BattleConstants.MAGICDEFENSE] = value;
	rerollabeModsForEquipTalents.push(ModBaseUtils.pureMod(_g,null));
};
var TalentModel = function() {
	this.random = new seedyrng_Random();
	this.formRankDistributionsOfSetRanks = new FormRankDistributionPerSetRank(15);
	this.rerollabeModsForEquipTalents = [];
	this.talentRuntime = [];
	this.talents = [];
};
$hxClasses["TalentModel"] = TalentModel;
TalentModel.__name__ = "TalentModel";
TalentModel.prototype = {
	rerollAndTrain: function(talentPos,set) {
		var talent = this.talents[talentPos];
		var talentPers = this.talentPers.talentToSet[talentPos];
		var key = talent.getCurrencyOnTrain_key;
		this.currency.spend(key,talent.spendCurrencyOnReroll);
		this.changeForm(talentPos,set);
		this.train(talentPos,set);
	}
	,trainOnly: function(talentPos,set) {
		var currencyKey = this.talents[talentPos].getCurrencyOnTrain_key;
		var p = this.talents[talentPos].spendCurrencyOnReroll;
		this.currency.spend(currencyKey,p);
		this.train(talentPos,set);
	}
	,train: function(talentPos,set) {
		var p = this.talents[talentPos].spendCurrencyOnReroll;
		var tSetPers = this.talentPers.talentToSet[talentPos].sets[set];
		tSetPers.pointXP += p;
		var maxXPPoint = this.getPointMaxXP(talentPos,set);
		if(tSetPers.pointXP >= maxXPPoint) {
			if(tSetPers.pointLevel < this.talentRuntime[talentPos].maxLevel) {
				tSetPers.pointXP = 0;
				tSetPers.pointLevel++;
			} else {
				tSetPers.pointXP = maxXPPoint;
			}
		}
	}
	,changeForm: function(talentPos,set) {
		var talentBase = this.talentSharedPers.talents[talentPos];
		var level = talentBase.level;
		var talent = this.talentPers.talentToSet[talentPos];
		var talentSet = talent.sets[set];
		var practiceLevelOfSet = talentSet.pointLevel;
		var distribution = this.formRankDistributionsOfSetRanks.distributions[practiceLevelOfSet];
		var mod = this.rerollabeModsForEquipTalents[this.random.randomInt(0,this.rerollabeModsForEquipTalents.length - 1)];
		var rank = WeightedDistributionLogic.getAPrize(distribution,this.random);
		var multiplier = Math.pow(1.4,rank);
		talentSet.rollBonus.attributes.h = Object.create(null);
		talentSet.rollBonus.attributeMultiplier.h = Object.create(null);
		talentSet.rollBonus.rank = rank;
		if(mod.statAdds != null) {
			var h = mod.statAdds.h;
			var _g_h = h;
			var _g_keys = Object.keys(h);
			var _g_length = _g_keys.length;
			var _g_current = 0;
			while(_g_current < _g_length) {
				var key = _g_keys[_g_current++];
				var _g1_key = key;
				var _g1_value = _g_h[key];
				var key1 = _g1_key;
				var value = _g1_value;
				var v = RandomExtender.Range(this.random,value);
				v = Math.ceil(v * multiplier);
				talentSet.rollBonus.attributes.h[key1] = v;
			}
		}
		if(mod.statMultipliers != null) {
			var h = mod.statMultipliers.h;
			var _g_h = h;
			var _g_keys = Object.keys(h);
			var _g_length = _g_keys.length;
			var _g_current = 0;
			while(_g_current < _g_length) {
				var key = _g_keys[_g_current++];
				var _g1_key = key;
				var _g1_value = _g_h[key];
				var key1 = _g1_key;
				var value = _g1_value;
				var v = RandomExtender.Range(this.random,value);
				var aboveHundred = v - 100;
				aboveHundred = Math.ceil(aboveHundred * multiplier);
				v = aboveHundred + 100;
				talentSet.rollBonus.attributeMultiplier.h[key1] = v;
			}
		}
		this.recalculateConditionalBonuses();
	}
	,recalculateConditionalBonuses: function() {
		if(this.battleManager.wdata == null) {
			return;
		}
		var hero = this.battleManager.wdata.hero;
		if(this.battleManager.heroConditionalBonus == null) {
			this.battleManager.heroConditionalBonus = [];
		}
		this.battleManager.heroConditionalBonus.length = 0;
		var _g_current = 0;
		var _g_array = this.talentPers.talentToSet;
		while(_g_current < _g_array.length) {
			var _g1_value = _g_array[_g_current];
			var _g1_key = _g_current++;
			var index = _g1_key;
			var tSets = _g1_value;
			var tData = this.talents[index];
			if(tData != null) {
				var _g2_current = 0;
				var _g2_array = tSets.sets;
				while(_g2_current < _g2_array.length) {
					var _g3_value = _g2_array[_g2_current];
					var _g3_key = _g2_current++;
					var set = _g3_key;
					var tSet = _g3_value;
					if(tSet.rollBonus != null) {
						var cab = new ConditionalAttributeBonus();
						cab.AttributeBonuses = [tSet.rollBonus];
						if(tSet.grandBonus != null) {
							cab.AttributeBonuses.push(tSet.grandBonus);
						}
						cab.condition.conditions.push(tData.setData.battleCondition);
						cab.condition.conditions.push(TalentModel.setConditions[set]);
						this.battleManager.heroConditionalBonus.push(cab);
					}
				}
			}
		}
		this.battleManager.RecalculateAttributes(this.battleManager.wdata.hero);
	}
	,initializeData: function() {
		while(this.talentSharedPers.talents.length < this.talents.length) this.talentSharedPers.talents.push({ level : 0, xp : 0, seen : 0});
		while(this.talentPers.talentToSet.length < this.talents.length) {
			var tsp = { sets : []};
			var _g = 0;
			var _g1 = BattleManager.NUMBER_OF_EQUIPMENT_SETS;
			while(_g < _g1) {
				var i = _g++;
				tsp.sets.push({ pointXP : 0, grandBonus : { attributes : new haxe_ds_StringMap(), attributeMultiplier : new haxe_ds_StringMap(), rank : 0}, rollBonus : { attributes : new haxe_ds_StringMap(), attributeMultiplier : new haxe_ds_StringMap(), rank : 0}, pointLevel : 0});
			}
			this.talentPers.talentToSet.push(tsp);
		}
	}
	,study: function(talentId) {
		var timeCost = TalentModel.STUDY_COST_IN_TIME;
		this.currency.spend(BattleConstants.CURRENCY_TIME,timeCost);
		var tal = this.talents[talentId];
		var tsp = this.talentSharedPers.talents[talentId];
		this.currency.add(tal.getCurrencyOnTrain_key,tal.getCurrencyOnTrain_valueBase + tal.getCurrencyOnTrain_valuePerLevel * tsp.level);
		this.addXP(talentId,TalentModel.BASE_STUDY_GET_XP,true);
	}
	,canStudy: function(talentPos) {
		return this.currency.canSpend(BattleConstants.CURRENCY_TIME,TalentModel.STUDY_COST_IN_TIME);
	}
	,canChangeForm: function(currentTalent) {
		var tal = this.talents[currentTalent];
		return this.currency.canSpend(tal.getCurrencyOnTrain_key,tal.spendCurrencyOnReroll);
	}
	,initializeRuntime: function() {
		var _g_current = 0;
		var _g_array = this.talents;
		while(_g_current < _g_array.length) {
			var _g1_value = _g_array[_g_current];
			var _g1_key = _g_current++;
			var index = _g1_key;
			var value = _g1_value;
			var trd = new TalentRuntimeData();
			trd.xpResource = new ScalableDistributionData(50,1.2);
			trd.xpResource.setOverrideValue(1,250);
			trd.xpResource.setOverrideValue(2,350);
			trd.xpResource.setOverrideValue(3,500);
			trd.practicePointMax = new ScalableDistributionData(150,1.2);
			trd.xpResource.setOverrideValue(1,200);
			trd.xpResource.setOverrideValue(2,400);
			trd.xpResource.setOverrideValue(3,550);
			trd.maxLevel = 3;
			this.talentRuntime.push(trd);
		}
	}
	,getMaxXP: function(talentId,level) {
		return ScalingLogic.getValue(level,this.talentRuntime[talentId].xpResource);
	}
	,addXP: function(talentId,xp,withLevelUp) {
		if(withLevelUp == null) {
			withLevelUp = false;
		}
		var tp = this.talentSharedPers.talents[talentId];
		var max = this.getMaxXP(talentId,tp.level);
		if(tp.xp > max) {
			tp.xp = max;
		}
		var xpT = tp.xp += xp;
		if(withLevelUp) {
			if(xpT >= max) {
				if(tp.level < this.talentRuntime[talentId].maxLevel) {
					var spill = xpT - max;
					tp.level++;
					tp.xp = spill;
				}
			}
		}
		if(tp.xp > max) {
			tp.xp = max;
		}
	}
	,getDistribution: function(currentTalent,set) {
		var talent = this.talentPers.talentToSet[currentTalent];
		var talentSet = talent.sets[set];
		var practiceLevelOfSet = talentSet.pointLevel;
		return this.formRankDistributionsOfSetRanks.distributions[practiceLevelOfSet];
	}
	,getPointMaxXP: function(talentPos,set) {
		var ppm = this.talentRuntime[talentPos].practicePointMax;
		var tSetPers = this.talentPers.talentToSet[talentPos].sets[set];
		var maxXPPoint = ScalingLogic.getValue(tSetPers.pointLevel,ppm);
		return maxXPPoint;
	}
	,getMaxLevelOfTalent: function(talentPos) {
		return this.talentRuntime[talentPos].maxLevel;
	}
	,getMaxLevelOfTalentPracticeSet: function(talentPos,i) {
		return this.talentSharedPers.talents[talentPos].level;
	}
	,__class__: TalentModel
};
var FormRankDistributionPerSetRank = function(maxRankPrize) {
	this.distributions = [];
	var ceiling = maxRankPrize + 1;
	var wd = new WeightedDistribution();
	wd.prizes.push(new WeightedPrize(0,4));
	wd.prizes.push(new WeightedPrize(1,1));
	this.distributions.push(wd);
	var wd = new WeightedDistribution();
	wd.prizes.push(new WeightedPrize(0,10));
	wd.prizes.push(new WeightedPrize(1,5));
	wd.prizes.push(new WeightedPrize(2,1));
	this.distributions.push(wd);
	var wd = new WeightedDistribution();
	wd.prizes.push(new WeightedPrize(0,5));
	wd.prizes.push(new WeightedPrize(1,10));
	wd.prizes.push(new WeightedPrize(2,3));
	wd.prizes.push(new WeightedPrize(3,1));
	this.distributions.push(wd);
	var wd = new WeightedDistribution();
	wd.prizes.push(new WeightedPrize(1,13));
	wd.prizes.push(new WeightedPrize(2,3));
	wd.prizes.push(new WeightedPrize(3,1));
	this.distributions.push(wd);
	var maxRank = 5;
	var type = 0;
	var length = ceiling;
	var _g = maxRank;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		this.distributions.push(this.createDistribution(i,0));
		this.distributions.push(this.createDistribution(i,1));
	}
};
$hxClasses["FormRankDistributionPerSetRank"] = FormRankDistributionPerSetRank;
FormRankDistributionPerSetRank.__name__ = "FormRankDistributionPerSetRank";
FormRankDistributionPerSetRank.prototype = {
	createDistribution: function(maxRank,type) {
		if(type == 0) {
			var wd = new WeightedDistribution();
			wd.prizes.push(new WeightedPrize(maxRank - 4,20));
			wd.prizes.push(new WeightedPrize(maxRank - 3,60));
			wd.prizes.push(new WeightedPrize(maxRank - 2,10));
			wd.prizes.push(new WeightedPrize(maxRank - 1,3));
			wd.prizes.push(new WeightedPrize(maxRank,1));
			return wd;
		}
		var wd = new WeightedDistribution();
		wd.prizes.push(new WeightedPrize(maxRank - 3,62));
		wd.prizes.push(new WeightedPrize(maxRank - 2,30));
		wd.prizes.push(new WeightedPrize(maxRank - 1,5));
		wd.prizes.push(new WeightedPrize(maxRank,3));
		return wd;
	}
	,__class__: FormRankDistributionPerSetRank
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
Type.createInstance = function(cl,args) {
	var ctor = Function.prototype.bind.apply(cl,[null].concat(args));
	return new (ctor);
};
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		var e = a.__enum__;
		if(e == null || e != b.__enum__) {
			return false;
		}
		if(a._hx_index != b._hx_index) {
			return false;
		}
		var enm = $hxEnums[e];
		var params = enm.__constructs__[a._hx_index].__params__;
		var _g = 0;
		while(_g < params.length) {
			var f = params[_g];
			++_g;
			if(!Type.enumEq(a[f],b[f])) {
				return false;
			}
		}
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		return false;
	}
	return true;
};
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var params = enm.__constructs__[e._hx_index].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
var UICreation = function(manager) {
	this.activeLayer = 1;
	this.defaultLayer = 1;
	this.tags = [];
	this.manager = manager;
};
$hxClasses["UICreation"] = UICreation;
UICreation.__name__ = "UICreation";
UICreation.createEmptyElement = function(w,h) {
	var e = new UIElement();
	var self = e.transform.size;
	self.x = w;
	self.y = h;
	return e;
};
UICreation.prototype = {
	addWithOffset: function(element,parent,pivotX,pivotY,posX,posY,transferColor,transferState) {
		if(transferState == null) {
			transferState = false;
		}
		if(transferColor == null) {
			transferColor = false;
		}
		this.addElement(element);
		this.offsetElement(element,parent,pivotX,pivotY,posX,posY,transferColor,transferState);
	}
	,addBackground: function(element,layoutId,margin,fitChildren) {
		if(fitChildren == null) {
			fitChildren = true;
		}
		var l = this.manager.genUI.getLayout(layoutId);
		l.bgElement = element;
		l.bgFitChildren = fitChildren;
		l.margin = margin;
		this.addElement(element);
		this.manager.genUI.update(l);
	}
	,offsetElement: function(element,parent,pivotX,pivotY,posX,posY,transferColor,transferState) {
		if(transferState == null) {
			transferState = false;
		}
		if(transferColor == null) {
			transferColor = false;
		}
		var this1 = new Vector2Default(posX,posY);
		var this2 = new Vector2Default(pivotX,pivotY);
		var this3 = new Vector2Default(pivotX,pivotY);
		var off = new UIOffset(element,parent,this1,this2,this3);
		if(element.mask == null) {
			element.mask = parent.mask;
		}
		off.transferColor = transferColor;
		off.transferState = transferState;
		this.manager.offsets.push(off);
	}
	,addElementInLayoutId: function(element,layoutId,fitLayoutWidth) {
		if(fitLayoutWidth == null) {
			fitLayoutWidth = false;
		}
		this.addElement(element);
		this.manager.genUI.addElementToLayout(element,layoutId);
		if(fitLayoutWidth) {
			this.manager.genUI.fitWidthOfLayout(element,layoutId);
		}
	}
	,addScrollToLayout: function(layoutId) {
		var scroll = this.manager.genUI.addScrollToLayout(layoutId);
		this.manager.registerScroll(scroll,this.activeLayer);
		return scroll;
	}
	,createImageElement: function(sprite,w,h) {
		var element = new UIElement();
		element.style.sprite = sprite;
		var self = element.transform.size;
		self.x = w;
		self.y = h;
		return element;
	}
	,createBorder: function(w,h,color) {
		if(color == null) {
			color = 0;
		}
		var element = new UIElement();
		var self = element.transform.size;
		self.x = w;
		self.y = h;
		element.style.border = 1;
		element.style.borderColor = color;
		return element;
	}
	,singleTag: function(tag) {
		this.tags.length = 0;
		this.tags.push(tag);
	}
	,addElement: function(element) {
		this.manager.addElement(element,this.activeLayer);
		var _g = 0;
		var _g1 = this.tags;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			element.tags.push(s);
		}
	}
	,addFullScreenRect: function(color,tag) {
		var element = new UIElement();
		var self = element.transform.size;
		self.x = Renderer.width;
		self.y = Renderer.height;
		var self = element.transform.position;
		self.x = 0;
		self.y = 0;
		element.tags.push(tag);
		element.style.color = color;
		element.style.fill = true;
		this.addElement(element);
		return element;
	}
	,addEmptyElement: function(w,h,layout) {
		var element = new UIElement();
		var self = element.transform.size;
		self.x = w;
		self.y = h;
		if(layout == null) {
			this.addElement(element);
		} else {
			this.addElementInLayoutId(element,layout);
		}
		return element;
	}
	,offsetToLayoutViewport: function(header,layoutId,x,y) {
		var lay = this.manager.genUI.getLayout(layoutId);
		if(lay.bgElement == null) {
			lay.bgElement = new UIElement();
		}
		var viewport = lay.bgElement;
		this.addWithOffset(header,viewport,0,0,x,y);
	}
	,__class__: UICreation
};
var Device = $hxEnums["Device"] = { __ename__:true,__constructs__:null
	,MOUSE: {_hx_name:"MOUSE",_hx_index:0,__enum__:"Device",toString:$estr}
	,KEYBOARD: {_hx_name:"KEYBOARD",_hx_index:1,__enum__:"Device",toString:$estr}
	,GAMEPAD: {_hx_name:"GAMEPAD",_hx_index:2,__enum__:"Device",toString:$estr}
};
Device.__constructs__ = [Device.MOUSE,Device.KEYBOARD,Device.GAMEPAD];
var UIElementManager = function(nLayers) {
	this.biggestHoveredElement = null;
	this.visibilityHogTags = [];
	this.inputHogTags = [];
	this.hover = new HoverManager();
	this.invisibleTags = [];
	this.dataEventHolder = new DataEventHolder();
	this.scrolls = [];
	this.offsets = [];
	this.keyboardManager = new UIKeyboardManager();
	this.elementsHolder = [];
	var _g = 0;
	var _g1 = nLayers;
	while(_g < _g1) {
		var i = _g++;
		this.elementsHolder.push([]);
	}
	this.dataEvents = this.dataEventHolder.dataEvents;
};
$hxClasses["UIElementManager"] = UIElementManager;
UIElementManager.__name__ = "UIElementManager";
UIElementManager.fitTextHeight = function(element) {
	var w = element.transform.size.x | 0;
	if(w <= 0) {
		w = 999999;
	}
	var height = XTextRender.textHeight(element.text,element.textFont,w);
	element.transform.size.y = height;
};
UIElementManager.prototype = {
	Update: function(time,mouse) {
		this.biggestHoveredElement = null;
		if(Mouse.mouse.mouseMoved.x != 0 || Mouse.mouse.mouseMoved.y != 0 || Mouse.mouse.mousePressed.trueThisFrame()) {
			UIElementManager.latestDevice = Device.MOUSE;
		}
		if(Keyboard.keyboard.charsDown.length > 0) {
			UIElementManager.latestDevice = Device.KEYBOARD;
		}
		this.dataEvents.length = 0;
		this.keyboardManager.update(this);
		var _g_current = 0;
		var _g_array = this.offsets;
		while(_g_current < _g_array.length) {
			var _g1_value = _g_array[_g_current];
			var _g1_key = _g_current++;
			var index = _g1_key;
			var value = _g1_value;
			var originPos = value.origin.transform.position;
			var b = value.offset;
			var self = originPos;
			var this1 = new Vector2Default(self.x,self.y);
			var self1 = this1;
			self1.x += b.x;
			self1.y += b.y;
			value.target.transform.position = self1;
			if(value.pivotD != null && value.pivotS != null) {
				value.target.transform.position.x += Pivot.calculateDimension(value.pivotS.x,value.pivotD.x,value.target.transform.size.x,value.origin.transform.size.x);
				value.target.transform.position.y += Pivot.calculateDimension(value.pivotS.y,value.pivotD.y,value.target.transform.size.y,value.origin.transform.size.y);
			}
			if(value.transferColor) {
				value.target.style.color = value.origin.style.color;
				if(value.target.styleHover != null && value.origin.styleHover != null) {
					value.target.styleHover.color = value.origin.styleHover.color;
				}
				if(value.target.styleSelected != null && value.origin.styleSelected != null) {
					value.target.styleSelected.color = value.origin.styleSelected.color;
				}
			}
			if(value.transferState) {
				value.target.selected = value.origin.selected;
				value.target.enabled = value.origin.enabled;
				value.target.hovered.state = value.origin.hovered.state;
				value.target.visible = value.origin.visible;
			}
		}
		var _g = 0;
		var _g1 = this.elementsHolder;
		while(_g < _g1.length) {
			var elements = _g1[_g];
			++_g;
			var _g2 = 0;
			while(_g2 < elements.length) {
				var e = elements[_g2];
				++_g2;
				if(this.containTagInGroup(e,this.invisibleTags)) {
					e.hovered.state = false;
					continue;
				}
				if(e.managedState) {
					e.clickedThisFrame = false;
					e.hovered.startFrame();
					e.touch.startFrame();
					if(this.inputHog) {
						if(this.containTagInGroup(e,this.inputHogTags) == false) {
							continue;
						}
					}
					var mouseInside = this.pointInTransform(e.transform,mouse.mousePosition);
					if(e.mask != null && mouseInside) {
						mouseInside = mouseInside && this.pointInTransform(e.mask,mouse.mousePosition);
					}
					e.hovered.state = (mouseInside || this.keyboardManager.cursoredElement == e && this.keyboardManager.selectionOn) && e.visible;
					if(e.hovered.trueThisFrame()) {
						var hovered = this.hover.hoverElement(e,this);
						var tmp;
						if(mouseInside && e.styleHover != null) {
							var self = mouse.mouseMoved;
							tmp = self.x * self.x + self.y * self.y != 0;
						} else {
							tmp = false;
						}
						if(tmp) {
							this.keyboardManager.deselect();
						}
						UIElementManager.latestDeviceThatHovered = UIElementManager.latestDevice;
					}
					if(e.hovered.state && e.visible) {
						if(e.style.sprite != null || e.style.border > 0 || e.style.fill == true) {
							if(this.biggestHoveredElement == null) {
								this.biggestHoveredElement = e;
							} else if(this.biggestHoveredElement.transform.area() < e.transform.area()) {
								this.biggestHoveredElement = e;
							}
						}
					}
					if(mouseInside) {
						if(e.enabled && e.visible) {
							if(e.touch.state == true) {
								if(mouse.mousePressed.falseThisFrame()) {
									e.clickedThisFrame = true;
									e.touch.state = false;
								}
							}
							if(mouse.mousePressed.trueThisFrame()) {
								e.touch.state = true;
							}
						}
					}
					if(mouse.mousePressed.state == false) {
						e.touch.state = false;
					}
					if(e.clickedThisFrame) {
						e.massEventStartTimeCounter = 0;
						this.elementTrigger(e);
					}
					if(e.touch.state == true && e.massEventStartTime > 0 && e.enabled && e.visible) {
						if(e.touch.trueThisFrame()) {
							e.massEventStartTimeCounter = 0;
						}
						if(e.massEventStartTimeCounter > e.massEventStartTime) {
							this.elementTrigger(e);
						} else {
							e.massEventStartTimeCounter += time;
						}
					}
				}
			}
		}
		this.hover.checkHoverElementEnd(this);
		var _g = 0;
		var _g1 = this.scrolls;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			UIScrollLogic.update(s,mouse.mouseMoved);
			if(this.keyboardManager.cursoredElement != null && UIElementManager.latestDevice != Device.MOUSE) {
				UIScrollLogic.acertainVisibility(s,this.keyboardManager.cursoredElement);
			}
			if(this.biggestHoveredElement != null && this.biggestHoveredElement.mask == s.viewport.transform) {
				UIScrollLogic.acertainVisibility(s,this.biggestHoveredElement);
			}
		}
	}
	,enterCursorGroup: function(cursorGroup) {
		this.keyboardManager.enterCursorGroup(cursorGroup,this);
	}
	,returnCursorGroup: function() {
		if(this.keyboardManager.previousCursorGroup != null) {
			haxe_Log.trace("RETURN",{ fileName : "Sources\\UIElements/UIElementManager.hx", lineNumber : 188, className : "UIElementManager", methodName : "returnCursorGroup"});
			this.keyboardManager.enterCursorGroup(this.keyboardManager.previousCursorGroup,this);
		}
	}
	,attemptElementTrigger: function(e) {
		if(this.isVisible(e) && e.enabled) {
			this.elementTrigger(e);
		}
	}
	,elementTrigger: function(e) {
		if(e.data != null) {
			this.dataEvents.push(e.data);
		}
	}
	,renderElementsInLayer: function(l) {
		this.renderElements(this.elementsHolder[l]);
	}
	,renderElements: function(elements) {
		var _g = 0;
		while(_g < elements.length) {
			var element = elements[_g];
			++_g;
			if(this.visibilityHog) {
				if(this.containTagInGroup(element,this.visibilityHogTags) == false) {
					continue;
				}
			}
			if(element.visible) {
				if(this.containTagInGroup(element,this.invisibleTags)) {
					continue;
				}
				var style = element.style;
				if(element.enabled || element.styleDisabled == null) {
					if((element.touch.state || element.buttonActivator.state) && element.stylePressed != null) {
						style = element.stylePressed;
					} else if(element.selected && element.styleSelected != null) {
						style = element.styleSelected;
						if(element.styleSelectedHover != null && element.hovered.state) {
							style = element.styleSelectedHover;
						}
					} else if(element.hovered.state && element.styleHover != null) {
						style = element.styleHover;
					}
				} else {
					style = element.styleDisabled;
					if(element.styleDisabledHover != null && element.hovered.state) {
						style = element.styleDisabledHover;
					}
				}
				this.renderStyle(style,element.transform,element.offsetAnimationTransform,element.mask);
				if(element.text != null) {
					var pivotX = element.textPivot.x;
					var pivotY = element.textPivot.y;
					var bottomX = element.transform.position.x;
					var bottomY = element.transform.position.y;
					var x = bottomX + element.transform.size.x * pivotX;
					var y = bottomY + element.transform.size.y * pivotY;
					if(element.offsetAnimationTransform.active) {
						x += element.offsetAnimationTransform.get_centerX();
						y += element.offsetAnimationTransform.get_centerY();
					}
					var c = style.color;
					if(style.colorText >= 0) {
						c = style.colorText;
					}
					XTextRender.drawTextMultiLine(element.text,element.textFont,x,y,element.transform.size.x,pivotX,pivotY,c,element.mask);
				}
			}
		}
	}
	,render: function() {
		var _g = 0;
		var _g1 = this.elementsHolder;
		while(_g < _g1.length) {
			var elements = _g1[_g];
			++_g;
			this.renderElements(elements);
		}
	}
	,feedElement: function(element,feed) {
		element.data.intData = feed.data.intData;
		element.data.stringData = feed.data.stringData;
		element.enabled = feed.enabled;
		element.text = feed.text;
		element.visible = feed.visible;
		if(feed.infoText != null && feed.infoText != "") {
			this.hover.setHoverGeneric(element,element.text,feed.infoText);
		} else {
			this.hover.removeHover(element);
		}
	}
	,updateBarLeftText: function(bar,text) {
		bar.leftText.text = text;
	}
	,updateBarValue: function(bar,value,maxValue) {
		var sc = value / maxValue;
		if(sc > 1) {
			sc = 1;
		}
		bar.barPortion.transform.size.x = sc * bar.barMaxSize;
		bar.mainText.text = value + "";
	}
	,endInputHog: function() {
		this.inputHog = false;
	}
	,hogInput: function(tag) {
		this.inputHogTags.length = 0;
		this.inputHog = true;
		this.inputHogTags.push(tag);
	}
	,endVisibilityHog: function() {
		this.visibilityHog = false;
	}
	,hogVisibility: function(tag) {
		this.visibilityHogTags.length = 0;
		this.visibilityHog = true;
		this.visibilityHogTags.push(tag);
	}
	,containTagInGroup: function(element,tags) {
		var _g_current = 0;
		var _g_array = element.tags;
		while(_g_current < _g_array.length) {
			var _g1_value = _g_array[_g_current];
			var _g1_key = _g_current++;
			var index = _g1_key;
			var value = _g1_value;
			if(tags.indexOf(value) != -1) {
				return true;
			}
		}
		return false;
	}
	,addElement: function(element,layer) {
		this.elementsHolder[layer].push(element);
	}
	,registerScroll: function(scroll,layer) {
		this.scrolls.push(scroll);
		this.addElement(scroll.viewport,layer);
	}
	,pointInTransform: function(ele,point) {
		var min = ele.position;
		var b = ele.position;
		var self = ele.size;
		var max_x = self.x;
		var max_y = self.y;
		max_x += b.x;
		max_y += b.y;
		if(point.x >= min.x && point.x <= max_x) {
			if(point.y >= min.y && point.y <= max_y) {
				return true;
			}
		}
		return false;
	}
	,extendElementHeight: function(element,offsetBottom) {
		var _this = element.transform;
		_this.size.y = Renderer.height - offsetBottom - _this.position.y;
	}
	,renderStyle: function(style,transform,offsetAnimationTrasnform,mask) {
		var offsetX = 0;
		var offsetY = 0;
		if(offsetAnimationTrasnform.active) {
			offsetX = offsetAnimationTrasnform.get_centerX();
			offsetY = offsetAnimationTrasnform.get_centerY();
		}
		if(style.fill) {
			Renderer.fillRect(transform,style.color,mask);
		}
		if(style.sprite != null) {
			Renderer.sprite(style.sprite,transform,style,mask,offsetX,offsetY);
		}
		if(style.ninePatch != null) {
			Renderer.NinePatch(style.ninePatch,transform,style,mask);
		}
		if(style.border > 0) {
			Renderer.drawRect(transform,style.borderColor,style.border,mask);
		}
	}
	,elementVisibility: function(elementId,visible) {
		this.getElement(elementId).visible = visible;
	}
	,tagVisibility: function(tag,visible) {
		while(HxOverrides.remove(this.invisibleTags,tag)) {
		}
		if(visible == false) {
			this.invisibleTags.push(tag);
		}
	}
	,elementEnabled: function(elementId,enabled) {
		this.getElement(elementId).enabled = enabled;
	}
	,getElement: function(elementId) {
		var _g = 0;
		var _g1 = this.elementsHolder;
		while(_g < _g1.length) {
			var elements = _g1[_g];
			++_g;
			var _g2 = 0;
			while(_g2 < elements.length) {
				var element = elements[_g2];
				++_g2;
				if(element.id == elementId) {
					return element;
				}
			}
		}
		return null;
	}
	,getElementWithDataInt: function(elementId,dataInt) {
		var _g = 0;
		var _g1 = this.elementsHolder;
		while(_g < _g1.length) {
			var elements = _g1[_g];
			++_g;
			var _g2 = 0;
			while(_g2 < elements.length) {
				var element = elements[_g2];
				++_g2;
				if(element.id == elementId && element.data.intData == dataInt) {
					return element;
				}
			}
		}
		return null;
	}
	,elementTextId: function(elementId,text,fitTextHeight) {
		if(fitTextHeight == null) {
			fitTextHeight = false;
		}
		var e = this.getElement(elementId);
		this.elementText(e,text,fitTextHeight);
	}
	,elementText: function(e,text,fitTextHeight,heightBonus) {
		if(heightBonus == null) {
			heightBonus = 0;
		}
		if(fitTextHeight == null) {
			fitTextHeight = false;
		}
		e.text = text;
		if(fitTextHeight) {
			e.transform.size.y = XTextRender.textHeight(text,e.textFont,e.transform.size.x);
		}
		e.transform.size.y += heightBonus;
	}
	,isVisible: function(e) {
		if(e.visible == false) {
			return false;
		}
		var tagInvisible = this.containTagInGroup(e,this.invisibleTags);
		if(tagInvisible == true) {
			return false;
		}
		if(this.visibilityHog) {
			if(this.containTagInGroup(e,this.visibilityHogTags) == false) {
				return false;
			}
		}
		return true;
	}
	,updateBarVisibility: function(bar,visible) {
		bar.barBack.visible = visible;
		bar.barPortion.visible = visible;
		bar.leftText.visible = visible;
		bar.mainText.visible = visible;
	}
	,bindLeftRight: function(left,right) {
		left.noElementActivateGroup.set(Direction.EAST,right);
		right.noElementActivateGroup.set(Direction.WEST,left);
	}
	,drawBarOnTop: function(ui,border,yDis,barHeight,barBackColor,barColor,ratio) {
		var x = ui.transform.position.x;
		var y = ui.transform.position.y - barHeight - yDis;
		var w = ui.transform.size.x;
		var h = barHeight;
		Renderer.fillRectSimple(barBackColor,x,y,w,h,ui.mask);
		Renderer.fillRectSimple(barColor,x + border,y + border,(w - border * 2) * ratio,h - border * 2,ui.mask);
	}
	,__class__: UIElementManager
};
var UIElement = function() {
	this.managedState = true;
	this.selected = false;
	this.visible = true;
	this.enabled = true;
	this.data = new Data();
	this.styleDisabled = null;
	this.styleDisabledHover = null;
	this.styleSelectedHover = null;
	this.styleSelected = null;
	this.styleHover = null;
	this.stylePressed = null;
	this.style = new Style();
	this.buttonActivator = new BoolProperty();
	this.touch = new BoolProperty();
	this.clickedThisFrame = false;
	this.hovered = new BoolProperty();
	this.mask = null;
	var this1 = new Vector2Default(0.5,0.5);
	this.textPivot = this1;
	this.textFont = "main";
	this.massEventStartTimeCounter = 0;
	this.massEventStartTime = -1;
	this.text = null;
	this.offsetAnimationTransform = new XTransform();
	this.transform = new XTransform();
	this.tags = [];
	this.offsetAnimationTransform.active = false;
};
$hxClasses["UIElement"] = UIElement;
UIElement.__name__ = "UIElement";
UIElement.prototype = {
	__class__: UIElement
};
var UIElementFeed = function() {
	this.data = new Data();
	this.infoText = null;
	this.text = null;
	this.visible = true;
	this.enabled = true;
};
$hxClasses["UIElementFeed"] = UIElementFeed;
UIElementFeed.__name__ = "UIElementFeed";
UIElementFeed.prototype = {
	__class__: UIElementFeed
};
var UIFeedList = function() {
	this.header = null;
	this.feedList = [];
};
$hxClasses["UIFeedList"] = UIFeedList;
UIFeedList.__name__ = "UIFeedList";
UIFeedList.prototype = {
	invisibleAfterCap: function(vLength) {
		var _g = vLength;
		var _g1 = this.feedList.length;
		while(_g < _g1) {
			var i = _g++;
			this.feedList[i].visible = false;
		}
	}
	,element: function(index) {
		while(this.feedList.length <= index) {
			var uef = new UIElementFeed();
			this.feedList.push(uef);
		}
		return this.feedList[index];
	}
	,__class__: UIFeedList
};
var UIFeedLists = function() {
	this.feedLists = [];
};
$hxClasses["UIFeedLists"] = UIFeedLists;
UIFeedLists.__name__ = "UIFeedLists";
UIFeedLists.prototype = {
	initList: function(listHeader) {
		var ufl = new UIFeedList();
		ufl.header = listHeader;
		this.feedLists.push(ufl);
	}
	,set: function(list,element,text,infoText,enabled,visible) {
		if(visible == null) {
			visible = true;
		}
		if(enabled == null) {
			enabled = true;
		}
		var feed = this.feedLists[list].element(element);
		feed.text = text;
		feed.enabled = enabled;
		feed.infoText = infoText;
		feed.visible = visible;
	}
	,setData: function(list,element,data,dataN) {
		var feed = this.feedLists[list].element(element);
		feed.data.stringData = data;
		feed.data.intData = dataN;
	}
	,__class__: UIFeedLists
};
var UIOffset = function(target,origin,offset,pivotS,pivotD) {
	this.transferState = false;
	this.transferColor = false;
	this.origin = origin;
	this.target = target;
	this.offset = offset;
	this.pivotS = pivotS;
	this.pivotD = pivotD;
};
$hxClasses["UIOffset"] = UIOffset;
UIOffset.__name__ = "UIOffset";
UIOffset.prototype = {
	__class__: UIOffset
};
var Style = function() {
	this.alpha = 255;
	this.borderColor = 0;
	this.border = 0;
	this.ninePatch = null;
	this.colorText = -1;
	this.color = 16777215;
};
$hxClasses["Style"] = Style;
Style.__name__ = "Style";
Style.prototype = {
	setFill: function(color) {
		this.color = color;
		this.fill = true;
	}
	,clone: function() {
		var style = new Style();
		style.color = this.color;
		style.colorText = this.colorText;
		style.ninePatch = this.ninePatch;
		style.border = this.border;
		style.borderColor = this.borderColor;
		style.sprite = this.sprite;
		return style;
	}
	,__class__: Style
};
var NinePatch = function(borderSize,spriteN,imageSize) {
	this.rect = new Rect(0,0,0,0);
	this.borderSize = 0;
	this.borderSize = borderSize;
	this.spriteName = spriteN;
	this.rect.width = imageSize;
	this.rect.height = imageSize;
};
$hxClasses["NinePatch"] = NinePatch;
NinePatch.__name__ = "NinePatch";
NinePatch.prototype = {
	__class__: NinePatch
};
var XTransform = function() {
	var this1 = new Vector2Default(0,0);
	this.pivot = this1;
	var this1 = new Vector2Default(1,1);
	this.scale = this1;
	var this1 = new Vector2Default(0,0);
	this.size = this1;
	this.rotation = 0;
	var this1 = new Vector2Default(0,0);
	this.position = this1;
	this.active = true;
};
$hxClasses["XTransform"] = XTransform;
XTransform.__name__ = "XTransform";
XTransform.prototype = {
	get_x: function() {
		return this.position.x;
	}
	,set_x: function(x) {
		this.position.x = x;
		return x;
	}
	,get_y: function() {
		return this.position.y;
	}
	,set_y: function(y) {
		this.position.y = y;
		return y;
	}
	,get_centerX: function() {
		return this.position.x + this.size.x / 2;
	}
	,get_centerY: function() {
		return this.position.y + this.size.y / 2;
	}
	,set: function(x,y,w,h) {
		this.position.x = x;
		this.position.y = y;
		this.size.x = w;
		this.size.y = h;
	}
	,centerIn: function(cX,cY) {
		this.position.x = cX - this.size.x / 2;
		this.position.y = cY - this.size.y / 2;
	}
	,feedRect: function(rect) {
		if(rect == null) {
			rect = new Rect(0,0,0,0);
		}
		rect.x = this.position.x;
		rect.y = this.position.y;
		rect.width = this.size.x;
		rect.height = this.size.y;
		return rect;
	}
	,set_topX: function(topX) {
		this.size.x = topX - this.position.x;
		return this.size.x + this.position.x;
	}
	,get_topX: function() {
		return this.position.x + this.size.x;
	}
	,get_topY: function() {
		return this.position.y + this.size.y;
	}
	,set_topY: function(topY) {
		this.size.y = topY - this.position.y;
		return this.size.y + this.position.y;
	}
	,set_bottomX: function(x) {
		this.position.x = x;
		return x;
	}
	,get_bottomX: function() {
		return this.position.x;
	}
	,get_bottomY: function() {
		return this.position.y;
	}
	,set_bottomY: function(y) {
		this.position.y = y;
		return y;
	}
	,area: function() {
		return this.size.x * this.size.y;
	}
	,__class__: XTransform
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",get_bottomY:"get_bottomY",get_bottomX:"get_bottomX",get_centerY:"get_centerY",get_centerX:"get_centerX",set_topY:"set_topY",get_topY:"get_topY",set_topX:"set_topX",get_topX:"get_topX"}
};
var BoolProperty = function() {
	this.previousState = false;
	this.state = false;
};
$hxClasses["BoolProperty"] = BoolProperty;
BoolProperty.__name__ = "BoolProperty";
BoolProperty.prototype = {
	updated: function() {
		return this.state != this.previousState;
	}
	,trueThisFrame: function() {
		if(this.updated()) {
			return this.state == true;
		} else {
			return false;
		}
	}
	,falseThisFrame: function() {
		if(this.updated()) {
			return this.state == false;
		} else {
			return false;
		}
	}
	,startFrame: function() {
		this.previousState = this.state;
	}
	,__class__: BoolProperty
};
var GenMasterAccess = function(gen) {
	this.genMaster = gen;
};
$hxClasses["GenMasterAccess"] = GenMasterAccess;
GenMasterAccess.__name__ = "GenMasterAccess";
GenMasterAccess.prototype = {
	getLinearLayout: function(id) {
		var _g = 0;
		var _g1 = this.genMaster.linearLayouts;
		while(_g < _g1.length) {
			var unknown = _g1[_g];
			++_g;
			if(unknown.element.id == id) {
				return unknown;
			}
		}
		window.alert(Std.string("Layout not found " + id));
		return null;
	}
	,__class__: GenMasterAccess
};
var HoverInformation = function() {
	this.enabled = true;
};
$hxClasses["HoverInformation"] = HoverInformation;
HoverInformation.__name__ = "HoverInformation";
HoverInformation.prototype = {
	__class__: HoverInformation
};
var HoverView = function(header,mainText,layoutId,tag) {
	this.header = header;
	this.mainText = mainText;
	this.layoutId = layoutId;
	this.tag = tag;
};
$hxClasses["HoverView"] = HoverView;
HoverView.__name__ = "HoverView";
HoverView.prototype = {
	__class__: HoverView
};
var HoverManager = function() {
	this.hovers = new haxe_ds_ObjectMap();
};
$hxClasses["HoverManager"] = HoverManager;
HoverManager.__name__ = "HoverManager";
HoverManager.prototype = {
	setHoverGeneric: function(element,header,mainText,headerDisabled,mainTextDisabled) {
		var hover = this.hovers.h[element.__id__];
		if(hover == null) {
			hover = new HoverInformation();
			this.hovers.set(element,hover);
		}
		hover.enabled = true;
		hover.header = header;
		hover.mainText = mainText;
		hover.headerElementDisabled = headerDisabled;
		hover.mainTextElementDisabled = mainTextDisabled;
	}
	,removeHover: function(element) {
		var hover = this.hovers.h[element.__id__];
		if(hover != null) {
			hover.enabled = false;
		}
	}
	,hoverElement: function(element,manager) {
		if(this.hoverView != null) {
			var hover = this.hovers.h[element.__id__];
			if(hover != null && hover.enabled) {
				this.hovered = element;
				if(element.enabled == false && hover.headerElementDisabled != null) {
					manager.elementText(this.hoverView.header,hover.headerElementDisabled,false);
					manager.elementText(this.hoverView.mainText,hover.mainTextElementDisabled,true);
				} else {
					manager.elementText(this.hoverView.header,hover.header,false);
					manager.elementText(this.hoverView.mainText,hover.mainText,true);
				}
				manager.tagVisibility(this.hoverView.tag,true);
				manager.genUI.layoutAsHover(element,this.hoverView.layoutId);
				UIElementManager.fitTextHeight(this.hoverView.mainText);
				return true;
			}
		}
		return false;
	}
	,checkHoverElementEnd: function(manager) {
		if(this.hovered != null) {
			if(this.hovered.hovered.state == false) {
				this.hovered = null;
				manager.tagVisibility(this.hoverView.tag,false);
			}
		}
	}
	,__class__: HoverManager
};
var UIKeyboardManager = function() {
	this.buttonPressToElementTrigger = new haxe_ds_IntMap();
	this.selectionOn = false;
};
$hxClasses["UIKeyboardManager"] = UIKeyboardManager;
UIKeyboardManager.__name__ = "UIKeyboardManager";
UIKeyboardManager.prototype = {
	cursorThisElement: function(e) {
		if(this.cursoredElement != null) {
			this.cursoredElement.hovered.state = false;
			this.cursoredElement.buttonActivator.state = false;
		}
		this.cursoredElement = e;
		if(this.currentCursorGroup.updateFirstElementToCurrentElement) {
			this.currentCursorGroup.firstElement = this.cursoredElement;
		}
		if(UIElementManager.latestDevice != Device.MOUSE) {
			this.selectionOn = true;
		}
	}
	,deselect: function() {
		this.selectionOn = false;
	}
	,enterCursorGroup: function(cg,ui) {
		if(cg != this.currentCursorGroup) {
			this.previousCursorGroup = this.currentCursorGroup;
		}
		this.currentCursorGroup = cg;
		var elementCursor = cg.firstElement;
		if(cg.firstElement == null) {
			if(cg.elements.length > 0) {
				elementCursor = cg.elements[0];
			}
		}
		if(elementCursor != null) {
			if(ui.isVisible(elementCursor) == false) {
				elementCursor = null;
				var _g = 0;
				var _g1 = cg.elements;
				while(_g < _g1.length) {
					var element = _g1[_g];
					++_g;
					if(ui.isVisible(element)) {
						elementCursor = element;
						break;
					}
				}
			}
		}
		if(elementCursor != null) {
			this.cursorThisElement(elementCursor);
		}
	}
	,moveCursor: function(xWeight,yWeight,ui) {
		var currentWeight = 9999999;
		var foundElement = null;
		var xStrong = Math.abs(xWeight) > Math.abs(yWeight);
		var yStrong = !xStrong;
		var _g_current = 0;
		var _g_array = this.currentCursorGroup.elements;
		while(_g_current < _g_array.length) {
			var _g1_value = _g_array[_g_current];
			var _g1_key = _g_current++;
			var index = _g1_key;
			var value = _g1_value;
			if(value != this.cursoredElement) {
				if(ui.isVisible(value)) {
					var xPortion = (value.transform.get_x() - this.cursoredElement.transform.get_x()) * xWeight;
					var yPortion = (value.transform.get_y() - this.cursoredElement.transform.get_y()) * yWeight;
					if(xStrong && yPortion < 0) {
						yPortion *= -1;
					}
					if(yStrong && xPortion < 0) {
						xPortion *= -1;
					}
					var weight = xPortion + yPortion;
					if(xStrong && xPortion == 0) {
						weight = 0;
					}
					if(yStrong && yPortion == 0) {
						weight = 0;
					}
					haxe_Log.trace(weight + "w",{ fileName : "Sources\\UIElements/UIKeyboardManager.hx", lineNumber : 79, className : "UIKeyboardManager", methodName : "moveCursor"});
					if(weight > 0 && weight < currentWeight) {
						currentWeight = weight;
						foundElement = value;
						haxe_Log.trace("gotcha!",{ fileName : "Sources\\UIElements/UIKeyboardManager.hx", lineNumber : 83, className : "UIKeyboardManager", methodName : "moveCursor"});
					}
				}
			}
		}
		return foundElement;
	}
	,update: function(ui) {
		var map = this.buttonPressToElementTrigger;
		var _g_map = map;
		var _g_keys = map.keys();
		while(_g_keys.hasNext()) {
			var key = _g_keys.next();
			var _g1_value = _g_map.get(key);
			var _g1_key = key;
			var button = _g1_key;
			var element = _g1_value;
			element.buttonActivator.startFrame();
			if(Buttons.buttons.buttonsDown.indexOf(button) != -1) {
				ui.attemptElementTrigger(element);
			}
			element.buttonActivator.state = Buttons.buttons.buttonsPressed.indexOf(button) != -1;
		}
		if(this.currentCursorGroup != null) {
			if(this.currentCursorGroup.cancelGroup != null && Buttons.buttons.buttonsDown.indexOf(DefaultButtons.CANCEL) != -1) {
				this.enterCursorGroup(this.currentCursorGroup.cancelGroup,ui);
			}
			if(this.cursoredElement != null) {
				if(ui.isVisible(this.cursoredElement) == false) {
					this.enterCursorGroup(this.currentCursorGroup,ui);
				}
				var xWeight = 0;
				var yWeight = 0;
				var d = null;
				if(Buttons.buttons.buttonsDown.indexOf(DefaultButtons.RIGHT) != -1) {
					xWeight = 10000;
					yWeight = 1;
					d = Direction.EAST;
				}
				if(Buttons.buttons.buttonsDown.indexOf(DefaultButtons.LEFT) != -1) {
					xWeight = -10000;
					yWeight = 1;
					d = Direction.WEST;
				}
				if(Buttons.buttons.buttonsDown.indexOf(DefaultButtons.UP) != -1) {
					xWeight = 1;
					yWeight = -10000;
					d = Direction.NORTH;
				}
				if(Buttons.buttons.buttonsDown.indexOf(DefaultButtons.DOWN) != -1) {
					xWeight = 1;
					yWeight = 10000;
					d = Direction.SOUTH;
				}
				if(xWeight != 0 && yWeight != 0) {
					var newElement = this.moveCursor(xWeight,yWeight,ui);
					if(newElement != null) {
						haxe_Log.trace("CURSOR!",{ fileName : "Sources\\UIElements/UIKeyboardManager.hx", lineNumber : 133, className : "UIKeyboardManager", methodName : "update"});
						this.cursorThisElement(newElement);
					} else {
						var noElementGroup = this.currentCursorGroup.noElementActivateGroup.get(d);
						if(noElementGroup != null) {
							var hasActive = false;
							var _g = 0;
							var _g1 = noElementGroup.elements;
							while(_g < _g1.length) {
								var element = _g1[_g];
								++_g;
								if(ui.isVisible(element)) {
									hasActive = true;
									break;
								}
							}
							if(hasActive) {
								this.enterCursorGroup(noElementGroup,ui);
							}
						}
					}
				}
			}
		}
		var cursoredElementReal = this.cursoredElement != null && this.cursoredElement.hovered.state == true && this.cursoredElement.enabled && ui.isVisible(this.cursoredElement);
		if(cursoredElementReal) {
			this.cursoredElement.buttonActivator.state = Buttons.buttons.buttonsPressed.indexOf(DefaultButtons.CONFIRM) != -1;
		}
		if(Buttons.buttons.buttonsDown.indexOf(DefaultButtons.CONFIRM) != -1) {
			if(cursoredElementReal) {
				ui.elementTrigger(this.cursoredElement);
				this.cursoredElement.touch.state = true;
			}
		}
	}
	,__class__: UIKeyboardManager
};
var UIScroll = function(elementArray) {
	this.positionElements = true;
	this.margin = null;
	var this1 = new Vector2Default(0,10);
	this.offset = this1;
	if(elementArray == null) {
		this.elements = [];
	} else {
		this.elements = elementArray;
	}
};
$hxClasses["UIScroll"] = UIScroll;
UIScroll.__name__ = "UIScroll";
UIScroll.prototype = {
	__class__: UIScroll
};
var UIScrollLogic = function() { };
$hxClasses["UIScrollLogic"] = UIScrollLogic;
UIScrollLogic.__name__ = "UIScrollLogic";
UIScrollLogic.scrollUp = function(scroll) {
	UIScrollLogic.moveScroll(scroll,9999);
};
UIScrollLogic.scrollDown = function(scroll) {
	UIScrollLogic.moveScroll(scroll,-9999);
};
UIScrollLogic.recalculateContentRect = function(scroll,uiManager) {
	if(scroll.content == null) {
		scroll.content = new Rect(9999,9999,0,0);
	}
	scroll.content.x = 9999;
	scroll.content.y = 9999;
	scroll.content.width = 0;
	scroll.content.height = 0;
	var rectAux = new Rect(0,0,0,0);
	var _g = 0;
	var _g1 = scroll.elements;
	while(_g < _g1.length) {
		var e = _g1[_g];
		++_g;
		if(uiManager.isVisible(e) == false) {
			continue;
		}
		e.mask = scroll.viewport.transform;
		e.transform.feedRect(rectAux);
		if(scroll.content.x > rectAux.x) {
			scroll.content.x = rectAux.x;
		}
		if(scroll.content.y > rectAux.y) {
			scroll.content.y = rectAux.y;
		}
		var _this = scroll.content;
		if(_this.x + _this.width < rectAux.x + rectAux.width) {
			var _this1 = scroll.content;
			_this1.width = rectAux.x + rectAux.width - _this1.x;
		}
		var _this2 = scroll.content;
		if(_this2.y + _this2.height < rectAux.y + rectAux.height) {
			var _this3 = scroll.content;
			_this3.height = rectAux.y + rectAux.height - _this3.y;
		}
		if(scroll.content.height < rectAux.height) {
			scroll.content.height = rectAux.height;
		}
	}
};
UIScrollLogic.update = function(scroll,deltaMouseMove) {
	var wantToMove = 0.0;
	if(scroll.viewport.hovered.state && Mouse.mouse.deltaWheelY != 0) {
		wantToMove = -Mouse.mouse.deltaWheelY;
	}
	var tmp;
	if(scroll.viewport.touch.state) {
		var self = deltaMouseMove;
		tmp = self.x * self.x + self.y * self.y > 0;
	} else {
		tmp = false;
	}
	if(tmp) {
		wantToMove = deltaMouseMove.y;
	}
	if(wantToMove != 0) {
		UIScrollLogic.moveScroll(scroll,wantToMove);
	}
};
UIScrollLogic.acertainVisibility = function(scroll,element) {
	if(scroll.elements.indexOf(element) != -1 || scroll.viewport.transform == element.mask) {
		var bottomY = element.transform.position.y;
		if(scroll.viewport.transform.position.y > bottomY) {
			UIScrollLogic.moveScroll(scroll,scroll.viewport.transform.position.y - bottomY);
		}
		var _this = scroll.viewport.transform;
		var _this1 = element.transform;
		if(_this.position.y + _this.size.y < _this1.position.y + _this1.size.y) {
			var _this = scroll.viewport.transform;
			var _this1 = element.transform;
			UIScrollLogic.moveScroll(scroll,_this.position.y + _this.size.y - (_this1.position.y + _this1.size.y));
		}
	}
};
UIScrollLogic.moveScroll = function(scroll,wantToMove) {
	var self_x = 0;
	var self_y = 0;
	var self = scroll.offset;
	var self1 = self;
	var value = self1.x;
	self_x = value;
	var self1 = self;
	var value = self1.y;
	self_y = value;
	scroll.offset.y += wantToMove;
	var subY = 10;
	var addH = 10;
	if(scroll.margin != null) {
		subY = scroll.margin.y;
		addH = scroll.margin.height;
	}
	var _this = scroll.viewport.transform;
	var _this1 = scroll.content;
	var minoffSetY = _this.position.y + _this.size.y - (_this1.y + _this1.height) - subY;
	if(scroll.offset.y < minoffSetY) {
		scroll.offset.y = minoffSetY;
	}
	var maxOffsetY = scroll.viewport.transform.position.y - scroll.content.y + addH;
	if(scroll.offset.y > maxOffsetY) {
		scroll.offset.y = maxOffsetY;
	}
	var deltaY = scroll.offset.y - self_y;
	if(deltaY != 0) {
		if(scroll.positionElements) {
			var _g = 0;
			var _g1 = scroll.elements;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				e.transform.position.y += scroll.offset.y - self_y;
			}
		}
		if(scroll.viewport.id == "story_main-scroll") {
			haxe_Log.trace("sss",{ fileName : "Sources\\UIElements/UIScroll.hx", lineNumber : 121, className : "UIScrollLogic", methodName : "moveScroll"});
		}
	}
	if(scroll.viewport.id == "story_main-scroll") {
		haxe_Log.trace("sss",{ fileName : "Sources\\UIElements/UIScroll.hx", lineNumber : 125, className : "UIScrollLogic", methodName : "moveScroll"});
	}
};
var UInt = {};
UInt.toFloat = function(this1) {
	var int = this1;
	if(int < 0) {
		return 4294967296.0 + int;
	} else {
		return int + 0.0;
	}
};
var Vector2Default = function(x,y) {
	this.x = x;
	this.y = y;
};
$hxClasses["Vector2Default"] = Vector2Default;
Vector2Default.__name__ = "Vector2Default";
Vector2Default.prototype = {
	toString: function() {
		return "(" + this.x + ", " + this.y + ")";
	}
	,__class__: Vector2Default
};
var Vector2 = {};
Vector2.__properties__ = {get_rotatedRight:"get_rotatedRight",get_rotatedLeft:"get_rotatedLeft",get_normal:"get_normal",set_angle:"set_angle",get_angle:"get_angle",get_lengthSq:"get_lengthSq",get_length:"get_length",get_yAxis:"get_yAxis",get_xAxis:"get_xAxis",get_zero:"get_zero"};
Vector2._new = function(x,y) {
	var this1 = new Vector2Default(x,y);
	return this1;
};
Vector2.fromArray = function(rawData) {
	if(rawData.length != 2) {
		throw haxe_Exception.thrown("Invalid rawData.");
	}
	var this1 = new Vector2Default(rawData[0],rawData[1]);
	return this1;
};
Vector2.fromPolar = function(angle,radius) {
	var this1 = new Vector2Default(radius * Math.cos(angle),radius * Math.sin(angle));
	return this1;
};
Vector2.fromVector2Shape = function(other) {
	var this1 = new Vector2Default(other.x,other.y);
	return this1;
};
Vector2.dot = function(a,b) {
	return a.x * b.x + a.y * b.y;
};
Vector2.multiply = function(a,s) {
	var self = a;
	var this1 = new Vector2Default(self.x,self.y);
	var self = this1;
	self.x *= s;
	self.y *= s;
	return self;
};
Vector2.divide = function(a,s) {
	var self = a;
	var this1 = new Vector2Default(self.x,self.y);
	var self = this1;
	self.x /= s;
	self.y /= s;
	return self;
};
Vector2.add = function(a,b) {
	var self = a;
	var this1 = new Vector2Default(self.x,self.y);
	var self = this1;
	self.x += b.x;
	self.y += b.y;
	return self;
};
Vector2.subtract = function(a,b) {
	var self = a;
	var this1 = new Vector2Default(self.x,self.y);
	var self = this1;
	self.x -= b.x;
	self.y -= b.y;
	return self;
};
Vector2.negate = function(a) {
	var this1 = new Vector2Default(-a.x,-a.y);
	return this1;
};
Vector2.equals = function(a,b) {
	if(!(a == null && b == null)) {
		if(a != null && b != null && a.x == b.x) {
			return a.y == b.y;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
Vector2.lerp = function(a,b,t) {
	var this1 = new Vector2Default((1.0 - t) * a.x + t * b.x,(1.0 - t) * a.y + t * b.y);
	return this1;
};
Vector2.max = function(a,b) {
	var self = a;
	var this1 = new Vector2Default(self.x,self.y);
	var self = this1;
	self.x = Math.max(self.x,b.x);
	self.y = Math.max(self.y,b.y);
	return self;
};
Vector2.min = function(a,b) {
	var self = a;
	var this1 = new Vector2Default(self.x,self.y);
	var self = this1;
	self.x = Math.min(self.x,b.x);
	self.y = Math.min(self.y,b.y);
	return self;
};
Vector2.project = function(a,b) {
	var self = a;
	var this1 = new Vector2Default(self.x,self.y);
	var self = this1;
	var s = (self.x * b.x + self.y * b.y) / (b.x * b.x + b.y * b.y);
	var self1 = b;
	var self2 = self1;
	var value = self2.x;
	var self2 = self;
	self2.x = value;
	var self2 = self1;
	var value = self2.y;
	var self1 = self;
	self1.y = value;
	var self1 = self;
	self1.x *= s;
	self1.y *= s;
	return self;
};
Vector2.reflect = function(v,normal) {
	var self = v;
	var this1 = new Vector2Default(self.x,self.y);
	var self = this1;
	var self1 = self;
	var self_x = self1.x;
	var self_y = self1.y;
	var s = (self_x * normal.x + self_y * normal.y) / (normal.x * normal.x + normal.y * normal.y);
	var self1 = normal;
	var self2 = self1;
	var value = self2.x;
	self_x = value;
	var self2 = self1;
	var value = self2.y;
	self_y = value;
	self_x *= s;
	self_y *= s;
	self_x *= 2.0;
	self_y *= 2.0;
	var self1 = self;
	self1.x -= self_x;
	self1.y -= self_y;
	return self;
};
Vector2.orthoNormalize = function(u,v) {
	var self = u;
	var self1 = self;
	var length = Math.sqrt(self1.x * self1.x + self1.y * self1.y);
	if(length > 0.0) {
		var self1 = self;
		self1.x /= length;
		self1.y /= length;
	}
	var self = v;
	var a_x = self.x;
	var a_y = self.y;
	var s = (a_x * u.x + a_y * u.y) / (u.x * u.x + u.y * u.y);
	var self = u;
	var self1 = self;
	var value = self1.x;
	a_x = value;
	var self1 = self;
	var value = self1.y;
	a_y = value;
	a_x *= s;
	a_y *= s;
	var self = v;
	self.x -= a_x;
	self.y -= a_y;
	var self = v;
	var self1 = self;
	var length = Math.sqrt(self1.x * self1.x + self1.y * self1.y);
	if(length > 0.0) {
		var self1 = self;
		self1.x /= length;
		self1.y /= length;
	}
};
Vector2.set = function(this1,x,y) {
	var self = this1;
	self.x = x;
	self.y = y;
	return self;
};
Vector2.multiplyWith = function(this1,s) {
	var self = this1;
	self.x *= s;
	self.y *= s;
	return self;
};
Vector2.divideWith = function(this1,s) {
	var self = this1;
	self.x /= s;
	self.y /= s;
	return self;
};
Vector2.addWith = function(this1,a) {
	var self = this1;
	self.x += a.x;
	self.y += a.y;
	return self;
};
Vector2.subtractWith = function(this1,a) {
	var self = this1;
	self.x -= a.x;
	self.y -= a.y;
	return self;
};
Vector2.maxWith = function(this1,a) {
	var self = this1;
	self.x = Math.max(self.x,a.x);
	self.y = Math.max(self.y,a.y);
	return self;
};
Vector2.minWith = function(this1,a) {
	var self = this1;
	self.x = Math.min(self.x,a.x);
	self.y = Math.min(self.y,a.y);
	return self;
};
Vector2.projectOnto = function(this1,a) {
	var self = this1;
	var s = (self.x * a.x + self.y * a.y) / (a.x * a.x + a.y * a.y);
	var self1 = a;
	var self2 = self1;
	var value = self2.x;
	var self2 = self;
	self2.x = value;
	var self2 = self1;
	var value = self2.y;
	var self1 = self;
	self1.y = value;
	var self1 = self;
	self1.x *= s;
	self1.y *= s;
	return self;
};
Vector2.reflectBy = function(this1,normal) {
	var self = this1;
	var self1 = self;
	var self_x = self1.x;
	var self_y = self1.y;
	var s = (self_x * normal.x + self_y * normal.y) / (normal.x * normal.x + normal.y * normal.y);
	var self1 = normal;
	var self2 = self1;
	var value = self2.x;
	self_x = value;
	var self2 = self1;
	var value = self2.y;
	self_y = value;
	self_x *= s;
	self_y *= s;
	self_x *= 2.0;
	self_y *= 2.0;
	var self1 = self;
	self1.x -= self_x;
	self1.y -= self_y;
	return self;
};
Vector2.copyTo = function(this1,target) {
	var self = this1;
	var self1 = self;
	var value = self1.x;
	var self1 = target;
	self1.x = value;
	var self1 = self;
	var value = self1.y;
	var self = target;
	self.y = value;
};
Vector2.copyToShape = function(this1,target) {
	var self = this1;
	target.x = self.x;
	target.y = self.y;
};
Vector2.copyFromShape = function(this1,source) {
	var self = this1;
	self.x = source.x;
	self.y = source.y;
};
Vector2.clone = function(this1) {
	var self = this1;
	var this1 = new Vector2Default(self.x,self.y);
	return this1;
};
Vector2.getArrayElement = function(this1,i) {
	var self = this1;
	switch(i) {
	case 0:
		return self.x;
	case 1:
		return self.y;
	default:
		throw haxe_Exception.thrown("Invalid element");
	}
};
Vector2.setArrayElement = function(this1,i,value) {
	var self = this1;
	switch(i) {
	case 0:
		return self.x = value;
	case 1:
		return self.y = value;
	default:
		throw haxe_Exception.thrown("Invalid element");
	}
};
Vector2.applyNegate = function(this1) {
	var self = this1;
	self.x = -self.x;
	self.y = -self.y;
	return self;
};
Vector2.applyScalarFunc = function(this1,func) {
	var self = this1;
	var self1 = self;
	var value = func(self1.x);
	var self1 = self;
	self1.x = value;
	var self1 = self;
	var value = func(self1.y);
	var self1 = self;
	self1.y = value;
	return self;
};
Vector2.angleWith = function(this1,b) {
	var self = this1;
	var self1 = self;
	var self2 = b;
	return Math.acos((self.x * b.x + self.y * b.y) / (Math.sqrt(self1.x * self1.x + self1.y * self1.y) * Math.sqrt(self2.x * self2.x + self2.y * self2.y)));
};
Vector2.signedAngleWith = function(this1,b) {
	var self = this1;
	return -1;
};
Vector2.distanceTo = function(this1,b) {
	var self = this1;
	var self1 = self;
	var self_x = self1.x;
	var self_y = self1.y;
	self_x -= b.x;
	self_y -= b.y;
	return Math.sqrt(self_x * self_x + self_y * self_y);
};
Vector2.normalize = function(this1) {
	var self = this1;
	var self1 = self;
	var length = Math.sqrt(self1.x * self1.x + self1.y * self1.y);
	if(length > 0.0) {
		var self1 = self;
		self1.x /= length;
		self1.y /= length;
	}
	return self;
};
Vector2.normalizeTo = function(this1,newLength) {
	var self = this1;
	var self1 = self;
	var self2 = self1;
	var length = Math.sqrt(self2.x * self2.x + self2.y * self2.y);
	if(length > 0.0) {
		var self2 = self1;
		self2.x /= length;
		self2.y /= length;
	}
	var self1 = self;
	self1.x *= newLength;
	self1.y *= newLength;
	return self;
};
Vector2.clamp = function(this1,min,max) {
	var self = this1;
	var self1 = self;
	var length = Math.sqrt(self1.x * self1.x + self1.y * self1.y);
	if(length < min) {
		var self1 = self;
		var self2 = self1;
		var self3 = self2;
		var length1 = Math.sqrt(self3.x * self3.x + self3.y * self3.y);
		if(length1 > 0.0) {
			var self3 = self2;
			self3.x /= length1;
			self3.y /= length1;
		}
		var self2 = self1;
		self2.x *= min;
		self2.y *= min;
	} else if(length > max) {
		var self1 = self;
		var self2 = self1;
		var self3 = self2;
		var length = Math.sqrt(self3.x * self3.x + self3.y * self3.y);
		if(length > 0.0) {
			var self3 = self2;
			self3.x /= length;
			self3.y /= length;
		}
		var self2 = self1;
		self2.x *= max;
		self2.y *= max;
	}
	return self;
};
Vector2.rotate = function(this1,angle,pivot) {
	var self = this1;
	var cosAngle = Math.cos(angle);
	var sinAngle = Math.sin(angle);
	var dx = self.x;
	var dy = self.y;
	if(pivot != null) {
		dx = self.x - pivot.x;
		dy = self.y - pivot.y;
	}
	self.x = dx * cosAngle - dy * sinAngle;
	self.y = dx * sinAngle + dy * cosAngle;
	return self;
};
Vector2.rotateLeft = function(this1) {
	var self = this1;
	var newX = -self.y;
	self.y = self.x;
	self.x = newX;
	return self;
};
Vector2.rotateRight = function(this1) {
	var self = this1;
	var newX = self.y;
	self.y = -self.x;
	self.x = newX;
	return self;
};
Vector2.moveTo = function(this1,targetX,targetY,distance) {
	var disX = targetX - this1.x;
	var disY = targetY - this1.y;
	var disSq = disX * disX + disY * disY;
	if(disSq < distance * distance) {
		this1.x = targetX;
		this1.y = targetY;
	} else {
		var dis = Math.sqrt(disSq);
		var dirX = disX / dis;
		var dirY = disY / dis;
		this1.x += dirX * distance;
		this1.y += dirY * distance;
	}
};
Vector2.get_zero = function() {
	var this1 = new Vector2Default(0.0,0.0);
	return this1;
};
Vector2.get_xAxis = function() {
	var this1 = new Vector2Default(1.0,0.0);
	return this1;
};
Vector2.get_yAxis = function() {
	var this1 = new Vector2Default(0.0,1.0);
	return this1;
};
Vector2.get_length = function(this1) {
	var self = this1;
	return Math.sqrt(self.x * self.x + self.y * self.y);
};
Vector2.get_lengthSq = function(this1) {
	var self = this1;
	return self.x * self.x + self.y * self.y;
};
Vector2.get_angle = function(this1) {
	var self = this1;
	return Math.atan2(self.y,self.x);
};
Vector2.get_normal = function(this1) {
	var self = this1;
	var self1 = self;
	var this1 = new Vector2Default(self1.x,self1.y);
	var self = this1;
	var self1 = self;
	var length = Math.sqrt(self1.x * self1.x + self1.y * self1.y);
	if(length > 0.0) {
		var self1 = self;
		self1.x /= length;
		self1.y /= length;
	}
	return self;
};
Vector2.get_rotatedLeft = function(this1) {
	var self = this1;
	var self1 = self;
	var this1 = new Vector2Default(self1.x,self1.y);
	var self = this1;
	var newX = -self.y;
	self.y = self.x;
	self.x = newX;
	return self;
};
Vector2.get_rotatedRight = function(this1) {
	var self = this1;
	var self1 = self;
	var this1 = new Vector2Default(self1.x,self1.y);
	var self = this1;
	var newX = self.y;
	self.y = -self.x;
	self.x = newX;
	return self;
};
Vector2.set_angle = function(this1,angle) {
	var self = this1;
	var self1 = this1;
	var len = Math.sqrt(self1.x * self1.x + self1.y * self1.y);
	var y = len * Math.sin(angle);
	var self1 = self;
	self1.x = len * Math.cos(angle);
	self1.y = y;
	return angle;
};
var XTextRender = function() { };
$hxClasses["XTextRender"] = XTextRender;
XTextRender.__name__ = "XTextRender";
XTextRender.textHeight = function(text,font,width) {
	if(width == null) {
		width = 9999999;
	}
	var font1 = BitmapText.getFont(font);
	var lineNumber = XTextRender.feedLineInformation(text,XTextRender.auxLines,font1,width);
	return lineNumber * font1.lineHeight;
};
XTextRender.textRectINCOMPLETE = function(rect,text,font) {
	var font1 = BitmapText.getFont(font);
	if(rect == null) {
		rect = XTextRender.aux;
	}
	var cursorX = 0;
	var cursorY = 0;
	var _g = 0;
	var _g1 = text.length;
	while(_g < _g1) {
		var i = _g++;
		var code = HxOverrides.cca(text,i);
		var letter = font1.letters.h[code];
		var x = cursorX + letter.xoffset;
		var y = cursorY + letter.yoffset;
		var w = letter.width;
		var h = letter.height;
	}
};
XTextRender.drawTextMultiLine = function(text,font,x,y,maxWidth,pivotx,pivoty,color,mask) {
	if(color == null) {
		color = -1;
	}
	if(pivoty == null) {
		pivoty = 0;
	}
	if(pivotx == null) {
		pivotx = 0;
	}
	var fontInfo = BitmapText.getFont(font);
	var lineNumber = XTextRender.feedLineInformation(text,XTextRender.auxLines,fontInfo,maxWidth);
	var cursorX = x;
	var cursorY = y - (lineNumber - 1) * fontInfo.lineHeight * pivoty;
	var _g = 0;
	var _g1 = lineNumber;
	while(_g < _g1) {
		var i = _g++;
		var line = XTextRender.auxLines[i];
		XTextRender.drawTextSingleLine(text,font,cursorX,cursorY,pivotx,pivoty,color,mask,line.start,line.end);
		cursorY += fontInfo.lineHeight;
	}
};
XTextRender.drawTextSingleLine = function(text,font,x,y,pivotx,pivoty,color,mask,startIndex,finalIndex) {
	if(finalIndex == null) {
		finalIndex = -1;
	}
	if(startIndex == null) {
		startIndex = 0;
	}
	if(color == null) {
		color = -1;
	}
	if(pivoty == null) {
		pivoty = 0;
	}
	if(pivotx == null) {
		pivotx = 0;
	}
	if(finalIndex < 0) {
		finalIndex = text.length - 1;
	}
	var length = finalIndex + 1;
	var font1 = BitmapText.getFont(font);
	var cursorX = x;
	var cursorY = y;
	if(pivotx != 0 || pivoty != 0) {
		var width = 0;
		var _g = startIndex;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			var code = HxOverrides.cca(text,i);
			var letter = font1.letters.h[code];
			if(letter != null) {
				if(i == text.length - 1) {
					width += letter.width + letter.xoffset;
				} else {
					width += letter.xadvance;
				}
			}
		}
		cursorX = x - width * pivotx | 0;
		cursorY = y - font1.lineHeight * pivoty - 1 | 0;
	}
	var _g = startIndex;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		var code = HxOverrides.cca(text,i);
		var letter = font1.letters.h[code];
		if(letter != null) {
			Renderer.drawScaledSubImage(font1.image,mask,letter.x,letter.y,letter.width,letter.height,cursorX + letter.xoffset,cursorY + letter.yoffset,letter.width,letter.height,color);
			cursorX += letter.xadvance;
		}
	}
};
XTextRender.feedLineInformation = function(text,lines,font,maxWidth) {
	if(maxWidth <= 0) {
		maxWidth = 9999999;
	}
	var line = 0;
	while(lines[line] == null) lines.push({ start : 0, width : 0, end : 0});
	lines[0].start = 0;
	var width = 0;
	var lastWordBreak = -1;
	var widthAtLastWordBreak = -1;
	var newLineInitialWidth = 0;
	var _g = 0;
	var _g1 = text.length;
	while(_g < _g1) {
		var i = _g++;
		var newLine = -1;
		if(HxOverrides.cca(text,i) == 32) {
			lastWordBreak = i;
			widthAtLastWordBreak = width;
		}
		if(HxOverrides.cca(text,i) == 10) {
			lines[line].end = i - 1;
			newLine = i + 1;
		} else {
			var code = HxOverrides.cca(text,i);
			var letter = font.letters.h[code];
			if(letter != null) {
				if(i == text.length - 1) {
					width += letter.width + letter.xoffset;
				} else {
					width += letter.xadvance;
				}
			}
			if(width >= maxWidth) {
				if(lastWordBreak >= 0) {
					lines[line].end = lastWordBreak - 1;
					newLine = lastWordBreak + 1;
					var widthOfLastWord = width - widthAtLastWordBreak;
					newLineInitialWidth = widthOfLastWord;
					lastWordBreak = -1;
				} else {
					lines[line].end = i - 1;
					newLine = i;
				}
			}
		}
		if(newLine >= 0) {
			width = newLineInitialWidth;
			newLineInitialWidth = 0;
			++line;
			while(lines[line] == null) lines.push({ start : 0, width : 0, end : 0});
			lines[line].start = newLine;
			lines[line].width = newLineInitialWidth;
		}
	}
	lines[line].end = text.length - 1;
	return line + 1;
};
var BitmapText = function() { };
$hxClasses["BitmapText"] = BitmapText;
BitmapText.__name__ = "BitmapText";
BitmapText.loadFont = function(fontName,imageName,fontData) {
	var image = imageName;
	var data = fontData;
	var letters = new haxe_ds_IntMap();
	var x = Xml.parse(data.toString()).firstElement();
	if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Invalid nodeType " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
	}
	var this1 = x;
	var xml = this1;
	var spaceWidth = 8;
	var chars = haxe_xml__$Access_NodeAccess.resolve(xml,"chars");
	var _g = 0;
	var _g1 = haxe_xml__$Access_NodeListAccess.resolve(chars,"char");
	while(_g < _g1.length) {
		var char = _g1[_g];
		++_g;
		var letter = { id : Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(char,"id")), x : Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(char,"x")), y : Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(char,"y")), width : Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(char,"width")), height : Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(char,"height")), xoffset : Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(char,"xoffset")), yoffset : Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(char,"yoffset")), xadvance : Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(char,"xadvance")), kernings : new haxe_ds_IntMap()};
		if(letter.id == BitmapText.spaceCharCode) {
			spaceWidth = letter.xadvance;
		}
		letters.h[letter.id] = letter;
	}
	if(haxe_xml__$Access_HasNodeAccess.resolve(xml,"kernings")) {
		var kernings = haxe_xml__$Access_NodeAccess.resolve(xml,"kernings");
		var letter;
		var _g = 0;
		var _g1 = haxe_xml__$Access_NodeListAccess.resolve(kernings,"kerning");
		while(_g < _g1.length) {
			var kerning = _g1[_g];
			++_g;
			var key = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(kerning,"first"));
			letter = letters.h[key];
			var this1 = letter.kernings;
			var key1 = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(kerning,"second"));
			var value = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(kerning,"amount"));
			this1.h[key1] = value;
		}
	}
	if(BitmapText.fontCache == null) {
		BitmapText.fontCache = new haxe_ds_StringMap();
	}
	var font = { size : Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(xml,"info"),"size")), lineHeight : Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(xml,"common"),"lineHeight")), spaceWidth : spaceWidth, image : image, letters : letters};
	BitmapText.fontCache.h[fontName] = font;
};
BitmapText.loadFontFnt = function(fontName,imageName,fontData) {
	var image = imageName;
	var data = fontData;
	var lines = data.split("\n");
	XTextFnt.letters = new haxe_ds_IntMap();
	var font = { size : -1, lineHeight : -1, spaceWidth : -1, image : image, letters : XTextFnt.letters};
	XTextFnt.currentFont = font;
	XTextFnt.currentFont.spaceWidth = 8;
	var _g_current = 0;
	var _g_array = lines;
	while(_g_current < _g_array.length) {
		var _g1_value = _g_array[_g_current];
		var _g1_key = _g_current++;
		var index = _g1_key;
		var value = _g1_value;
		XTextFnt.readLine(value,font);
	}
	var font1 = font;
	if(BitmapText.fontCache == null) {
		BitmapText.fontCache = new haxe_ds_StringMap();
	}
	BitmapText.fontCache.h[fontName] = font1;
};
BitmapText.getFont = function(fontName) {
	return BitmapText.fontCache.h[fontName];
};
BitmapText.processFontFnt = function(name,image,data) {
	var lines = data.split("\n");
	XTextFnt.letters = new haxe_ds_IntMap();
	var font = { size : -1, lineHeight : -1, spaceWidth : -1, image : image, letters : XTextFnt.letters};
	XTextFnt.currentFont = font;
	XTextFnt.currentFont.spaceWidth = 8;
	var _g_current = 0;
	var _g_array = lines;
	while(_g_current < _g_array.length) {
		var _g1_value = _g_array[_g_current];
		var _g1_key = _g_current++;
		var index = _g1_key;
		var value = _g1_value;
		XTextFnt.readLine(value,font);
	}
	var font1 = font;
	if(BitmapText.fontCache == null) {
		BitmapText.fontCache = new haxe_ds_StringMap();
	}
	BitmapText.fontCache.h[name] = font1;
};
BitmapText.processFont = function(name,image,data) {
	var letters = new haxe_ds_IntMap();
	var x = Xml.parse(data.toString()).firstElement();
	if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Invalid nodeType " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
	}
	var this1 = x;
	var xml = this1;
	var spaceWidth = 8;
	var chars = haxe_xml__$Access_NodeAccess.resolve(xml,"chars");
	var _g = 0;
	var _g1 = haxe_xml__$Access_NodeListAccess.resolve(chars,"char");
	while(_g < _g1.length) {
		var char = _g1[_g];
		++_g;
		var letter = { id : Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(char,"id")), x : Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(char,"x")), y : Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(char,"y")), width : Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(char,"width")), height : Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(char,"height")), xoffset : Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(char,"xoffset")), yoffset : Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(char,"yoffset")), xadvance : Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(char,"xadvance")), kernings : new haxe_ds_IntMap()};
		if(letter.id == BitmapText.spaceCharCode) {
			spaceWidth = letter.xadvance;
		}
		letters.h[letter.id] = letter;
	}
	if(haxe_xml__$Access_HasNodeAccess.resolve(xml,"kernings")) {
		var kernings = haxe_xml__$Access_NodeAccess.resolve(xml,"kernings");
		var letter;
		var _g = 0;
		var _g1 = haxe_xml__$Access_NodeListAccess.resolve(kernings,"kerning");
		while(_g < _g1.length) {
			var kerning = _g1[_g];
			++_g;
			var key = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(kerning,"first"));
			letter = letters.h[key];
			var this1 = letter.kernings;
			var key1 = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(kerning,"second"));
			var value = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(kerning,"amount"));
			this1.h[key1] = value;
		}
	}
	if(BitmapText.fontCache == null) {
		BitmapText.fontCache = new haxe_ds_StringMap();
	}
	var font = { size : Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(xml,"info"),"size")), lineHeight : Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(xml,"common"),"lineHeight")), spaceWidth : spaceWidth, image : image, letters : letters};
	BitmapText.fontCache.h[name] = font;
};
var XTextFnt = function() { };
$hxClasses["XTextFnt"] = XTextFnt;
XTextFnt.__name__ = "XTextFnt";
XTextFnt.processFont = function(name,image,data) {
	var lines = data.split("\n");
	XTextFnt.letters = new haxe_ds_IntMap();
	var font = { size : -1, lineHeight : -1, spaceWidth : -1, image : image, letters : XTextFnt.letters};
	XTextFnt.currentFont = font;
	XTextFnt.currentFont.spaceWidth = 8;
	var _g_current = 0;
	var _g_array = lines;
	while(_g_current < _g_array.length) {
		var _g1_value = _g_array[_g_current];
		var _g1_key = _g_current++;
		var index = _g1_key;
		var value = _g1_value;
		XTextFnt.readLine(value,font);
	}
	return font;
};
XTextFnt.readLine = function(str,font) {
	str = StringTools.trim(str);
	var token = str.split(" ").shift();
	switch(token) {
	case "char":
		XTextFnt.readCharStr(str);
		break;
	case "chars":
		XTextFnt.readCharsStr(str);
		break;
	case "common":
		XTextFnt.readCommonStr(str);
		break;
	case "info":
		XTextFnt.readInfoStr(str);
		break;
	case "page":
		XTextFnt.readPagesStr(str);
		break;
	}
};
XTextFnt.readCharStr = function(str) {
	var tokens = str.split(" ");
	tokens.reverse();
	var letter = { id : 0, x : 0, y : 0, width : 0, height : 0, xoffset : 0, yoffset : 0, xadvance : 0, kernings : new haxe_ds_IntMap()};
	while(tokens.length > 0) {
		var t = tokens.pop();
		var datum = t.split("=");
		var data = datum[1];
		switch(datum[0]) {
		case "chnl":
			break;
		case "height":
			letter.height = Std.parseInt(data);
			break;
		case "id":
			letter.id = Std.parseInt(data);
			break;
		case "page":
			break;
		case "width":
			letter.width = Std.parseInt(data);
			break;
		case "x":
			letter.x = Std.parseInt(data);
			break;
		case "xadvance":
			letter.xadvance = Std.parseInt(data);
			break;
		case "xoffset":
			letter.xoffset = Std.parseInt(data);
			break;
		case "y":
			letter.y = Std.parseInt(data);
			break;
		case "yoffset":
			letter.yoffset = Std.parseInt(data);
			break;
		}
	}
	if(letter.id == BitmapText.spaceCharCode) {
		XTextFnt.currentFont.spaceWidth = letter.xadvance;
	}
	XTextFnt.currentFont.letters.h[letter.id] = letter;
};
XTextFnt.readCharsStr = function(str) {
};
XTextFnt.readPagesStr = function(str) {
};
XTextFnt.readCommonStr = function(str) {
	var tokens = str.split(" ");
	tokens.reverse();
	while(tokens.length > 0) {
		var t = tokens.pop();
		var datum = t.split("=");
		var data = datum[1];
		switch(datum[0]) {
		case "base":
			break;
		case "lineHeight":
			XTextFnt.currentFont.lineHeight = Std.parseInt(data);
			break;
		case "packed":
			break;
		case "pages":
			break;
		case "scaleH":
			break;
		case "scaleW":
			break;
		}
	}
};
XTextFnt.readInfoStr = function(str) {
	var tokens = str.split(" ");
	tokens.reverse();
	while(tokens.length > 0) {
		var t = tokens.pop();
		var datum = t.split("=");
		var data = datum[1];
		switch(datum[0]) {
		case "aa":
			break;
		case "bold":
			break;
		case "charset":
			break;
		case "face":
			break;
		case "italic":
			break;
		case "outline":
			break;
		case "padding":
			break;
		case "size":
			XTextFnt.currentFont.size = Std.parseInt(data);
			break;
		case "smooth":
			break;
		case "spacing":
			break;
		case "stretchH":
			break;
		case "unicode":
			break;
		}
	}
};
var XmlType = {};
XmlType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Element";
	case 1:
		return "PCData";
	case 2:
		return "CData";
	case 3:
		return "Comment";
	case 4:
		return "DocType";
	case 5:
		return "ProcessingInstruction";
	case 6:
		return "Document";
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = "Xml";
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return this.attributeMap.h[att];
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		this.attributeMap.h[att] = value;
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return Object.prototype.hasOwnProperty.call(this.attributeMap.h,att);
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return new haxe_ds__$StringMap_StringMapKeyIterator(this.attributeMap.h);
	}
	,elementsNamed: function(name) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			var tmp;
			if(child.nodeType == Xml.Element) {
				if(child.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				tmp = child.nodeName == name;
			} else {
				tmp = false;
			}
			if(tmp) {
				_g.push(child);
			}
		}
		var ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) {
				return child;
			}
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,toString: function() {
		return haxe_xml_Printer.print(this);
	}
	,__class__: Xml
};
var arcania_JsonInterpreter = function() { };
$hxClasses["arcania.JsonInterpreter"] = arcania_JsonInterpreter;
arcania_JsonInterpreter.__name__ = "arcania.JsonInterpreter";
arcania_JsonInterpreter.readChanges = function(dynamicChanges,signal) {
	if(signal == null) {
		signal = 1;
	}
	if(dynamicChanges == null) {
		return null;
	}
	var response = [];
	var access = dynamicChanges;
	var _g_access = access;
	var _g_keys = Reflect.fields(access);
	var _g_index = 0;
	while(_g_index < _g_keys.length) {
		var key = _g_keys[_g_index++];
		var _g1_value = _g_access[key];
		var _g1_key = key;
		var key1 = _g1_key;
		var value = _g1_value;
		var id = key1;
		var rc = new arcania_logic_ResourceChange(id,value * signal);
		response.push(rc);
	}
	return response;
};
arcania_JsonInterpreter.readBasic = function(basicDynamic) {
	var bd = new arcania_logic_BasicData(basicDynamic["id"],basicDynamic["name"]);
	if(Object.prototype.hasOwnProperty.call(basicDynamic,"max")) {
		var max = basicDynamic["max"];
		bd.max = max;
	}
	if(Object.prototype.hasOwnProperty.call(basicDynamic,"initial")) {
		bd.initialValue = basicDynamic["initial"];
	}
	bd.description = basicDynamic["desc"];
	bd.cost = arcania_JsonInterpreter.readChanges(basicDynamic["cost"],-1);
	bd.result = arcania_JsonInterpreter.readChanges(basicDynamic["result"],1);
	bd.requirements = arcania_JsonInterpreter.readRequirement(basicDynamic["require"]);
	bd.needs = arcania_JsonInterpreter.readRequirement(basicDynamic["need"]);
	bd.modPerAmount = arcania_JsonInterpreter.readMod(basicDynamic["mod"]);
	return bd;
};
arcania_JsonInterpreter.readActions = function(json) {
	var master = JSON.parse(json);
	var output = [];
	var _g = 0;
	while(_g < master.length) {
		var a = master[_g];
		++_g;
		var action = new arcania_logic_ActionData(arcania_JsonInterpreter.readBasic(a));
		if(Object.prototype.hasOwnProperty.call(a,"duration")) {
			action.duration = a["duration"];
		}
		if(Object.prototype.hasOwnProperty.call(a,"perpetual")) {
			action.perpetual = a["perpetual"];
		}
		action.effect = arcania_JsonInterpreter.readChanges(a["effect"],1);
		action.run = arcania_JsonInterpreter.readChanges(a["run"],-1);
		output.push(action);
	}
	return output;
};
arcania_JsonInterpreter.addToRequirement = function($require,req) {
	var _g_current = 0;
	var _g_array = arcania_logic_RelationshipComparison.comparisons;
	while(_g_current < _g_array.length) {
		var _g1_value = _g_array[_g_current];
		var _g1_key = _g_current++;
		var index = _g1_key;
		var value = _g1_value;
		var indexOf = $require.indexOf(value);
		if(indexOf >= 0) {
			var parts = $require.split(value);
			req.targetId = new arcania_logic_TargetId(parts[0]);
			req.relationship = value;
			req.targetNumber = Std.parseInt(parts[1]);
			haxe_Log.trace("REQUIREMENT",{ fileName : "Sources/arcania/JsonInterpreter.hx", lineNumber : 69, className : "arcania.JsonInterpreter", methodName : "addToRequirement"});
			haxe_Log.trace($require,{ fileName : "Sources/arcania/JsonInterpreter.hx", lineNumber : 70, className : "arcania.JsonInterpreter", methodName : "addToRequirement"});
			haxe_Log.trace(parts[0],{ fileName : "Sources/arcania/JsonInterpreter.hx", lineNumber : 71, className : "arcania.JsonInterpreter", methodName : "addToRequirement"});
			haxe_Log.trace(req.targetNumber,{ fileName : "Sources/arcania/JsonInterpreter.hx", lineNumber : 72, className : "arcania.JsonInterpreter", methodName : "addToRequirement"});
			haxe_Log.trace(parts[1],{ fileName : "Sources/arcania/JsonInterpreter.hx", lineNumber : 73, className : "arcania.JsonInterpreter", methodName : "addToRequirement"});
			return;
		}
	}
	req.targetId = new arcania_logic_TargetId($require);
	req.relationship = arcania_logic_RelationshipComparison.BIGGER;
	req.targetNumber = 0;
};
arcania_JsonInterpreter.readRequirement = function($require,reqs) {
	if($require == null) {
		return null;
	}
	if(reqs == null) {
		reqs = [];
	}
	var h = arcania_logic_LogicalOperatorString.map.h;
	var _g_h = h;
	var _g_keys = Object.keys(h);
	var _g_length = _g_keys.length;
	var _g_current = 0;
	while(_g_current < _g_length) {
		var key = _g_keys[_g_current++];
		var _g1_key = key;
		var _g1_value = _g_h[key];
		var key1 = _g1_key;
		var value = _g1_value;
		var indexOf = $require.indexOf(key1);
		if(indexOf >= 0) {
			if(reqs.length == 0) {
				reqs.push(new arcania_logic_Requirement());
			}
			var req = reqs[0];
			req.child1 = new arcania_logic_Requirement();
			var part1 = HxOverrides.substr($require,0,indexOf);
			var part2 = HxOverrides.substr($require,indexOf + 1,null);
			haxe_Log.trace("Feeding parent!",{ fileName : "Sources/arcania/JsonInterpreter.hx", lineNumber : 107, className : "arcania.JsonInterpreter", methodName : "readRequirement"});
			arcania_JsonInterpreter.addToRequirement(part1,req);
			haxe_Log.trace("Feeding child!",{ fileName : "Sources/arcania/JsonInterpreter.hx", lineNumber : 109, className : "arcania.JsonInterpreter", methodName : "readRequirement"});
			arcania_JsonInterpreter.addToRequirement(part2,req.child1);
			haxe_Log.trace("logical operator key " + key1 + " v" + Std.string(value),{ fileName : "Sources/arcania/JsonInterpreter.hx", lineNumber : 111, className : "arcania.JsonInterpreter", methodName : "readRequirement"});
			req.logicalOperatorWithChildren = value;
			return reqs;
		}
	}
	var req = new arcania_logic_Requirement();
	arcania_JsonInterpreter.addToRequirement($require,req);
	reqs.push(req);
	return reqs;
};
arcania_JsonInterpreter.readBasicArray = function(jsonResources) {
	var res = [];
	if(jsonResources != null) {
		var master = JSON.parse(jsonResources);
		var _g_current = 0;
		var _g_array = master;
		while(_g_current < _g_array.length) {
			var _g1_value = _g_array[_g_current];
			var _g1_key = _g_current++;
			var index = _g1_key;
			var value = _g1_value;
			res.push(arcania_JsonInterpreter.readBasic(value));
		}
	}
	return res;
};
arcania_JsonInterpreter.readMod = function(json) {
	if(json == null) {
		return null;
	}
	var mods = [];
	var access = json;
	var _g_access = access;
	var _g_keys = Reflect.fields(access);
	var _g_index = 0;
	while(_g_index < _g_keys.length) {
		var key = _g_keys[_g_index++];
		var _g1_value = _g_access[key];
		var _g1_key = key;
		var key1 = _g1_key;
		var value = _g1_value;
		haxe_Log.trace("Reading mod ",{ fileName : "Sources/arcania/JsonInterpreter.hx", lineNumber : 139, className : "arcania.JsonInterpreter", methodName : "readMod"});
		var parts = key1.split(".");
		haxe_Log.trace(key1,{ fileName : "Sources/arcania/JsonInterpreter.hx", lineNumber : 141, className : "arcania.JsonInterpreter", methodName : "readMod"});
		haxe_Log.trace(value,{ fileName : "Sources/arcania/JsonInterpreter.hx", lineNumber : 142, className : "arcania.JsonInterpreter", methodName : "readMod"});
		var type = arcania_logic_ModType.MAX;
		if(parts.length == 2) {
			if(parts[1] == "max") {
				type = arcania_logic_ModType.MAX;
			}
			if(parts[1] == "rate") {
				type = arcania_logic_ModType.RATE;
			}
			if(parts[1] == "result") {
				type = arcania_logic_ModType.RESULT;
			}
		} else {
			window.alert(Std.string("Unsupported mod format! " + key1));
		}
		var mod = new arcania_logic_Mod(type);
		mod.targetId = new arcania_logic_TargetId(parts[0]);
		mod.value = value;
		haxe_Log.trace("Value " + mod.value + " ",{ fileName : "Sources/arcania/JsonInterpreter.hx", lineNumber : 162, className : "arcania.JsonInterpreter", methodName : "readMod"});
		mods.push(mod);
	}
	return mods;
};
var arcania_logic_BasicData = function(id,name) {
	this.initialValue = 0;
	this.max = -1;
	this.id = id;
	this.name = name;
};
$hxClasses["arcania.logic.BasicData"] = arcania_logic_BasicData;
arcania_logic_BasicData.__name__ = "arcania.logic.BasicData";
arcania_logic_BasicData.prototype = {
	__class__: arcania_logic_BasicData
};
var arcania_logic_LogicalOperator = $hxEnums["arcania.logic.LogicalOperator"] = { __ename__:true,__constructs__:null
	,NONE: {_hx_name:"NONE",_hx_index:0,__enum__:"arcania.logic.LogicalOperator",toString:$estr}
	,AND: {_hx_name:"AND",_hx_index:1,__enum__:"arcania.logic.LogicalOperator",toString:$estr}
	,OR: {_hx_name:"OR",_hx_index:2,__enum__:"arcania.logic.LogicalOperator",toString:$estr}
	,XOR: {_hx_name:"XOR",_hx_index:3,__enum__:"arcania.logic.LogicalOperator",toString:$estr}
	,NOT: {_hx_name:"NOT",_hx_index:4,__enum__:"arcania.logic.LogicalOperator",toString:$estr}
};
arcania_logic_LogicalOperator.__constructs__ = [arcania_logic_LogicalOperator.NONE,arcania_logic_LogicalOperator.AND,arcania_logic_LogicalOperator.OR,arcania_logic_LogicalOperator.XOR,arcania_logic_LogicalOperator.NOT];
var arcania_logic_LogicalOperatorString = function() { };
$hxClasses["arcania.logic.LogicalOperatorString"] = arcania_logic_LogicalOperatorString;
arcania_logic_LogicalOperatorString.__name__ = "arcania.logic.LogicalOperatorString";
var arcania_logic_ResourceChange = function(id,amount) {
	this.id = new arcania_logic_TargetId(id);
	this.amount = amount;
};
$hxClasses["arcania.logic.ResourceChange"] = arcania_logic_ResourceChange;
arcania_logic_ResourceChange.__name__ = "arcania.logic.ResourceChange";
arcania_logic_ResourceChange.sync = function(cost,target) {
	if(cost == null) {
		return null;
	}
	var r = target;
	if(r == null) {
		r = [];
	}
	var _g_current = 0;
	var _g_array = cost;
	while(_g_current < _g_array.length) {
		var _g1_value = _g_array[_g_current];
		var _g1_key = _g_current++;
		var index = _g1_key;
		var value = _g1_value;
		r.push(new arcania_logic_ResourceChange(value.id.id,value.amount));
	}
	return r;
};
arcania_logic_ResourceChange.prototype = {
	__class__: arcania_logic_ResourceChange
};
var arcania_logic_TargetId = function(id) {
	this.id = id;
};
$hxClasses["arcania.logic.TargetId"] = arcania_logic_TargetId;
arcania_logic_TargetId.__name__ = "arcania.logic.TargetId";
arcania_logic_TargetId.prototype = {
	__class__: arcania_logic_TargetId
};
var arcania_logic_RelationshipComparison = function() { };
$hxClasses["arcania.logic.RelationshipComparison"] = arcania_logic_RelationshipComparison;
arcania_logic_RelationshipComparison.__name__ = "arcania.logic.RelationshipComparison";
var arcania_logic_Requirement = function() {
};
$hxClasses["arcania.logic.Requirement"] = arcania_logic_Requirement;
arcania_logic_Requirement.__name__ = "arcania.logic.Requirement";
arcania_logic_Requirement.prototype = {
	__class__: arcania_logic_Requirement
};
var arcania_logic_ModType = $hxEnums["arcania.logic.ModType"] = { __ename__:true,__constructs__:null
	,MAX: {_hx_name:"MAX",_hx_index:0,__enum__:"arcania.logic.ModType",toString:$estr}
	,RESULT: {_hx_name:"RESULT",_hx_index:1,__enum__:"arcania.logic.ModType",toString:$estr}
	,RATE: {_hx_name:"RATE",_hx_index:2,__enum__:"arcania.logic.ModType",toString:$estr}
};
arcania_logic_ModType.__constructs__ = [arcania_logic_ModType.MAX,arcania_logic_ModType.RESULT,arcania_logic_ModType.RATE];
var arcania_logic_Mod = function(modType) {
	this.modType = modType;
};
$hxClasses["arcania.logic.Mod"] = arcania_logic_Mod;
arcania_logic_Mod.__name__ = "arcania.logic.Mod";
arcania_logic_Mod.prototype = {
	__class__: arcania_logic_Mod
};
var arcania_logic_TrainingMod = function() {
	this.loop = false;
	this.mods = [];
};
$hxClasses["arcania.logic.TrainingMod"] = arcania_logic_TrainingMod;
arcania_logic_TrainingMod.__name__ = "arcania.logic.TrainingMod";
arcania_logic_TrainingMod.prototype = {
	__class__: arcania_logic_TrainingMod
};
var arcania_logic_ActionData = function(basicData) {
	this.perpetual = false;
	this.duration = 0;
	this.basic = basicData;
};
$hxClasses["arcania.logic.ActionData"] = arcania_logic_ActionData;
arcania_logic_ActionData.__name__ = "arcania.logic.ActionData";
arcania_logic_ActionData.prototype = {
	__class__: arcania_logic_ActionData
};
var arcania_logic_ActionRuntime = function() { };
$hxClasses["arcania.logic.ActionRuntime"] = arcania_logic_ActionRuntime;
arcania_logic_ActionRuntime.__name__ = "arcania.logic.ActionRuntime";
var arcania_logic_ResourceTypeConfiguration = function(name,unlockEvent,selfIsEvent) {
	if(selfIsEvent == null) {
		selfIsEvent = false;
	}
	if(unlockEvent == null) {
		unlockEvent = true;
	}
	this.selfIsEvent = false;
	this.unlockEvent = true;
	this.name = name;
	this.unlockEvent = unlockEvent;
	this.selfIsEvent = selfIsEvent;
};
$hxClasses["arcania.logic.ResourceTypeConfiguration"] = arcania_logic_ResourceTypeConfiguration;
arcania_logic_ResourceTypeConfiguration.__name__ = "arcania.logic.ResourceTypeConfiguration";
arcania_logic_ResourceTypeConfiguration.prototype = {
	__class__: arcania_logic_ResourceTypeConfiguration
};
var arcania_logic_RuntimeUnit = function() {
	this.maxMod = 0;
	this.rateMod = 0;
	this.actionData = null;
};
$hxClasses["arcania.logic.RuntimeUnit"] = arcania_logic_RuntimeUnit;
arcania_logic_RuntimeUnit.__name__ = "arcania.logic.RuntimeUnit";
arcania_logic_RuntimeUnit.prototype = {
	getMax: function() {
		return this.basicData.max + this.maxMod;
	}
	,__class__: arcania_logic_RuntimeUnit
};
var arcania_logic_RuntimeHolder = function() {
	this.events = [];
	this.searchMaps = [];
	this.fixedEventRuntime = [];
	this.resourceRuntime = [];
	this.actionRuntime = [];
	this.unitArrays = [this.actionRuntime,this.resourceRuntime,this.fixedEventRuntime];
	var _g = 0;
	var _g1 = this.unitArrays.length;
	while(_g < _g1) {
		var i = _g++;
		this.searchMaps.push(new haxe_ds_StringMap());
	}
};
$hxClasses["arcania.logic.RuntimeHolder"] = arcania_logic_RuntimeHolder;
arcania_logic_RuntimeHolder.__name__ = "arcania.logic.RuntimeHolder";
arcania_logic_RuntimeHolder.prototype = {
	init: function(model) {
		var persistence = model.persistence;
		var actions = model.actions;
		var resources = model.resources;
		var map = this.searchMaps[0];
		var _g = 0;
		var _g1 = actions.length;
		while(_g < _g1) {
			var i = _g++;
			var runtimeUnit = new arcania_logic_RuntimeUnit();
			runtimeUnit.actionData = actions[i];
			runtimeUnit.basicData = actions[i].basic;
			runtimeUnit.retentionData = persistence.actions.h[runtimeUnit.basicData.id];
			if(runtimeUnit.retentionData == null) {
				runtimeUnit.retentionData = { amount : 0, progressMiliseconds : 0, seen : 0};
				var v = runtimeUnit.retentionData;
				persistence.actions.h[runtimeUnit.basicData.id] = v;
			}
			this.actionRuntime.push(runtimeUnit);
			map.h[runtimeUnit.basicData.id] = runtimeUnit;
		}
		var basicArray = resources;
		var persistenceMap = persistence.resources;
		var runtimeArray = this.resourceRuntime;
		var map = this.searchMaps[1];
		this.readBasicArray(basicArray,persistenceMap,runtimeArray,map);
		this.readBasicArray(model.events,persistence.events,this.fixedEventRuntime,this.searchMaps[2]);
	}
	,findUnit: function(id) {
		var idS = id.id;
		return this.findUnitWithString(idS);
	}
	,findUnitWithString: function(idS) {
		var _g_current = 0;
		var _g_array = this.searchMaps;
		while(_g_current < _g_array.length) {
			var _g1_value = _g_array[_g_current];
			var _g1_key = _g_current++;
			var index = _g1_key;
			var value = _g1_value;
			var v = value.h[idS];
			if(v != null) {
				return v;
			}
		}
		haxe_Log.trace("Error: id not found " + idS,{ fileName : "Sources/arcania/logic/ArcaniaModel.hx", lineNumber : 94, className : "arcania.logic.RuntimeHolder", methodName : "findUnitWithString"});
		return null;
	}
	,readBasicArray: function(basicArray,persistenceMap,runtimeArray,map) {
		var _g = 0;
		var _g1 = basicArray.length;
		while(_g < _g1) {
			var i = _g++;
			var runtimeUnit = new arcania_logic_RuntimeUnit();
			runtimeUnit.basicData = basicArray[i];
			runtimeUnit.retentionData = persistenceMap.h[runtimeUnit.basicData.id];
			if(runtimeUnit.retentionData == null) {
				runtimeUnit.retentionData = { amount : runtimeUnit.basicData.initialValue, progressMiliseconds : 0, seen : 0};
				var v = runtimeUnit.retentionData;
				persistenceMap.h[runtimeUnit.basicData.id] = v;
			}
			runtimeArray.push(runtimeUnit);
			map.h[runtimeUnit.basicData.id] = runtimeUnit;
		}
	}
	,__class__: arcania_logic_RuntimeHolder
};
var arcania_logic_ArcaniaModel = function() {
	this.runtime = new arcania_logic_RuntimeHolder();
};
$hxClasses["arcania.logic.ArcaniaModel"] = arcania_logic_ArcaniaModel;
arcania_logic_ArcaniaModel.__name__ = "arcania.logic.ArcaniaModel";
arcania_logic_ArcaniaModel.prototype = {
	loadJsons: function(jsonActions,jsonResources,jsonEvents) {
		this.actions = arcania_JsonInterpreter.readActions(jsonActions);
		this.resources = arcania_JsonInterpreter.readBasicArray(jsonResources);
		this.events = arcania_JsonInterpreter.readBasicArray(jsonEvents);
	}
	,loadData: function(persistence) {
		this.persistence = persistence;
		this.runtime.init(this);
		var _g_current = 0;
		var _g_array = this.runtime.unitArrays;
		while(_g_current < _g_array.length) {
			var _g1_value = _g_array[_g_current];
			var _g1_key = _g_current++;
			var index = _g1_key;
			var value = _g1_value;
			var _g2_current = 0;
			var _g2_array = value;
			while(_g2_current < _g2_array.length) {
				var _g3_value = _g2_array[_g2_current];
				var _g3_key = _g2_current++;
				var index2 = _g3_key;
				var value2 = _g3_value;
				var finalV = value2.retentionData.amount;
				this.updateValueWithPrevious(value2,0,finalV);
			}
		}
	}
	,isUnitVisible: function(unit,hideMaxed) {
		if(unit.retentionData.seen == 0) {
			return false;
		}
		if(hideMaxed) {
			var max = unit.getMax();
			if(max >= 0) {
				if(max <= unit.retentionData.amount) {
					return false;
				}
			}
		}
		return true;
	}
	,isRuntimeUnitEnabled: function() {
	}
	,isActionEnabled: function(actionPos) {
		var act = this.runtime.actionRuntime[actionPos];
		var cost = act.basicData.cost;
		var enable = true;
		if(!this.meetRequirements(act.basicData.needs,act)) {
			enable = false;
		}
		if(this.canPayCost(cost) == false && act != this.runtime.runningUnit && act.retentionData.progressMiliseconds == 0) {
			enable = false;
		}
		if(this.canPayCost(act.actionData.run) == false) {
			enable = false;
		}
		if(enable) {
			if(this.effectMakesDifference(act.actionData.effect) == false) {
				if(this.effectMakesDifference(act.actionData.basic.result) == false) {
					if(act.actionData.effect != null || act.actionData.basic.result != null) {
						enable = false;
					}
				}
			}
		}
		if(act == this.runtime.restingUnit) {
			this.runtime.restEnabled = enable;
		}
		if(enable == false) {
			if(act == this.runtime.runningUnit) {
				this.runtime.runningUnit = null;
				if(act != this.runtime.restingUnit) {
					if(this.runtime.restEnabled) {
						this.runtime.runningUnit = this.runtime.restingUnit;
						this.runtime.blockedUnit = act;
					}
				} else {
					this.runtime.runningUnit = this.runtime.blockedUnit;
				}
			}
			if(act == this.runtime.runningUnit) {
				this.runtime.runningUnit = null;
			}
		}
		return enable;
	}
	,actionIsInstant: function(actionPos) {
		var action = this.runtime.actionRuntime[actionPos];
		if(action.actionData.duration > 0) {
			return false;
		}
		if(action.actionData.perpetual) {
			return false;
		}
		return true;
	}
	,performAction: function(actionPos) {
		var action = this.runtime.actionRuntime[actionPos];
		var duration = action.actionData.duration;
		var payForCost = true;
		if(duration <= 0) {
			this.actionComplete(action);
		} else {
			this.runtime.blockedUnit = null;
			if(this.runtime.runningUnit == action) {
				this.runtime.runningUnit = null;
				payForCost = false;
			} else {
				this.runtime.runningUnit = action;
				if(this.runtime.runningUnit.retentionData.progressMiliseconds > 0) {
					payForCost = false;
				}
			}
		}
		if(action.actionData.perpetual && duration <= 0) {
			payForCost = false;
			this.runtime.blockedUnit = null;
			if(this.runtime.runningUnit == action) {
				this.runtime.runningUnit = null;
			} else {
				this.runtime.runningUnit = action;
			}
		}
		if(payForCost) {
			this.applyChange(action.basicData.cost,1);
		}
	}
	,canPayCost: function(cost) {
		if(cost != null) {
			var _g_current = 0;
			var _g_array = cost;
			while(_g_current < _g_array.length) {
				var _g1_value = _g_array[_g_current];
				var _g1_key = _g_current++;
				var index = _g1_key;
				var value = _g1_value;
				var id = value.id;
				var runtimeUnit = this.runtime.findUnit(id);
				if(value.amount * -1 > runtimeUnit.retentionData.amount) {
					return false;
				}
			}
		}
		return true;
	}
	,applyChange: function(result,times) {
		if(result != null) {
			var _g_current = 0;
			var _g_array = result;
			while(_g_current < _g_array.length) {
				var _g1_value = _g_array[_g_current];
				var _g1_key = _g_current++;
				var index = _g1_key;
				var value = _g1_value;
				var id = value.id;
				var runtimeUnit = this.runtime.findUnit(id);
				var previous = runtimeUnit.retentionData.amount;
				var after = previous + value.amount * times;
				var max = runtimeUnit.getMax();
				if(max >= 0) {
					if(after > max) {
						after = max;
					}
				}
				this.updateValue(runtimeUnit,after);
			}
		}
	}
	,update: function(miliseconds) {
		if(this.runtime.runningUnit != null) {
			var pm = this.runtime.runningUnit.retentionData.progressMiliseconds;
			var secondsBefore = Math.floor(pm / 1000);
			pm += miliseconds;
			var secondsAfter = Math.floor(pm / 1000);
			if(secondsBefore != secondsAfter) {
				var diff = secondsAfter - secondsBefore;
				if(this.runtime.runningUnit.actionData.effect != null && this.runtime.runningUnit.actionData.duration <= 0) {
					this.updateValue(this.runtime.runningUnit,this.runtime.runningUnit.retentionData.amount + 1);
				}
				this.applyChange(this.runtime.runningUnit.actionData.effect,diff);
				this.applyChange(this.runtime.runningUnit.actionData.run,diff);
			}
			var updateProgress = true;
			if(this.runtime.runningUnit.actionData.duration > 0) {
				if(secondsAfter >= this.runtime.runningUnit.actionData.duration) {
					updateProgress = false;
					this.actionComplete(this.runtime.runningUnit);
					this.runtime.runningUnit.retentionData.progressMiliseconds = 1;
					if(this.runtime.runningUnit.actionData.perpetual == false) {
						this.runtime.runningUnit = null;
					}
				}
			}
			if(this.runtime.runningUnit != null && updateProgress) {
				this.runtime.runningUnit.retentionData.progressMiliseconds = pm;
			}
		}
		var _g_current = 0;
		var _g_array = this.runtime.unitArrays;
		while(_g_current < _g_array.length) {
			var _g1_value = _g_array[_g_current];
			var _g1_key = _g_current++;
			var index = _g1_key;
			var arrays = _g1_value;
			var _g2_current = 0;
			var _g2_array = arrays;
			while(_g2_current < _g2_array.length) {
				var _g3_value = _g2_array[_g2_current];
				var _g3_key = _g2_current++;
				var index2 = _g3_key;
				var value = _g3_value;
				if(value.retentionData.seen == 0) {
					if(this.meetRequirements(value.basicData.requirements,value)) {
						var configuration = arcania_logic_ArcaniaModel.resourceTypeConfiguration[index];
						if(configuration.unlockEvent) {
							if(value.basicData.requirements != null) {
								var resourceTypeName = configuration.name;
								this.addEvent(resourceTypeName + " Unlocked: " + value.basicData.name);
							}
						}
						if(configuration.selfIsEvent) {
							this.runtime.events.push(value);
						}
						value.retentionData.seen = 1;
					}
				}
			}
		}
	}
	,effectMakesDifference: function(rc) {
		if(rc != null) {
			var _g_current = 0;
			var _g_array = rc;
			while(_g_current < _g_array.length) {
				var _g1_value = _g_array[_g_current];
				var _g1_key = _g_current++;
				var index = _g1_key;
				var value = _g1_value;
				var id = value.id;
				var runtimeUnit = this.runtime.findUnit(id);
				var max = runtimeUnit.getMax();
				if(max < 0) {
					return true;
				}
				if(runtimeUnit.retentionData.amount < max) {
					return true;
				}
			}
		}
		return false;
	}
	,meetRequirements: function(arg0,owner) {
		if(arg0 == null) {
			return true;
		}
		var _g_current = 0;
		var _g_array = arg0;
		while(_g_current < _g_array.length) {
			var _g1_value = _g_array[_g_current];
			var _g1_key = _g_current++;
			var index = _g1_key;
			var value = _g1_value;
			var meet = this.meetRequirement(value,owner);
			if(value.child1 != null) {
				if(value.logicalOperatorWithChildren == arcania_logic_LogicalOperator.AND) {
					if(meet == false) {
						return false;
					}
					meet = meet && this.meetRequirement(value.child1,owner);
				}
				if(value.logicalOperatorWithChildren == arcania_logic_LogicalOperator.OR) {
					if(meet == true) {
						return true;
					}
					meet = meet || this.meetRequirement(value.child1,owner);
				}
			}
			if(meet == false) {
				return false;
			}
		}
		return true;
	}
	,maxResources: function() {
		var _g_current = 0;
		var _g_array = this.runtime.resourceRuntime;
		while(_g_current < _g_array.length) {
			var _g1_value = _g_array[_g_current];
			var _g1_key = _g_current++;
			var index = _g1_key;
			var value = _g1_value;
			if(value.getMax() > 0) {
				this.updateValue(value,value.getMax());
			}
		}
	}
	,updateValue: function(runtimeUnit,after) {
		this.updateValueWithPrevious(runtimeUnit,runtimeUnit.retentionData.amount,after);
	}
	,updateValueWithPrevious: function(runtimeUnit,previous,after) {
		var delta = after - previous;
		haxe_Log.trace("delta " + delta,{ fileName : "Sources/arcania/logic/ArcaniaModel.hx", lineNumber : 395, className : "arcania.logic.ArcaniaModel", methodName : "updateValueWithPrevious"});
		if(delta != 0) {
			this.applyMod(runtimeUnit.basicData.modPerAmount,delta);
		}
		runtimeUnit.retentionData.amount = after;
	}
	,applyMod: function(mods,amount) {
		if(mods == null) {
			return;
		}
		haxe_Log.trace("applying mods",{ fileName : "Sources/arcania/logic/ArcaniaModel.hx", lineNumber : 405, className : "arcania.logic.ArcaniaModel", methodName : "applyMod"});
		var _g_current = 0;
		var _g_array = mods;
		while(_g_current < _g_array.length) {
			var _g1_value = _g_array[_g_current];
			var _g1_key = _g_current++;
			var index = _g1_key;
			var value = _g1_value;
			var v = value.value * amount;
			var ru = this.runtime.findUnit(value.targetId);
			haxe_Log.trace("mod " + index,{ fileName : "Sources/arcania/logic/ArcaniaModel.hx", lineNumber : 409, className : "arcania.logic.ArcaniaModel", methodName : "applyMod"});
			haxe_Log.trace("v " + v,{ fileName : "Sources/arcania/logic/ArcaniaModel.hx", lineNumber : 410, className : "arcania.logic.ArcaniaModel", methodName : "applyMod"});
			haxe_Log.trace("targetId " + value.targetId.id,{ fileName : "Sources/arcania/logic/ArcaniaModel.hx", lineNumber : 411, className : "arcania.logic.ArcaniaModel", methodName : "applyMod"});
			switch(value.modType._hx_index) {
			case 0:
				ru.maxMod += v;
				continue;
			case 1:
				break;
			case 2:
				ru.rateMod += v;
				continue;
			}
		}
	}
	,meetRequirement: function(value,owner) {
		var unit = this.runtime.findUnit(value.targetId);
		if(unit != owner && unit.retentionData.seen == 0) {
			return false;
		}
		var v1 = unit.retentionData.amount;
		var v2 = value.targetNumber;
		if(value.relationship == arcania_logic_RelationshipComparison.BIGGER) {
			return v1 > v2;
		}
		if(value.relationship == arcania_logic_RelationshipComparison.BIGGEREQUAL) {
			return v1 >= v2;
		}
		if(value.relationship == arcania_logic_RelationshipComparison.EQUAL) {
			return v1 == v2;
		}
		if(value.relationship == arcania_logic_RelationshipComparison.NOT) {
			return v1 != v2;
		}
		if(value.relationship == arcania_logic_RelationshipComparison.SMALLER) {
			return v1 < v2;
		}
		if(value.relationship == arcania_logic_RelationshipComparison.SMALLEREQUAL) {
			return v1 <= v2;
		}
		return true;
	}
	,addEvent: function(name,description) {
		var bd = new arcania_logic_BasicData("",name);
		bd.description = description;
		var ru = new arcania_logic_RuntimeUnit();
		ru.basicData = bd;
		this.runtime.events.push(ru);
	}
	,actionComplete: function(action) {
		var result = action.basicData.result;
		this.updateValue(action,action.retentionData.amount + 1);
		this.applyChange(result,1);
	}
	,getPercentProgress: function(value,acceptNoDuration) {
		var ru = value;
		var d = ru.actionData.duration;
		if(d > 0) {
			var progress = ru.retentionData.progressMiliseconds;
			var percent = progress * 0.1 / d | 0;
			return percent;
		} else if(ru.actionData.perpetual) {
			if(acceptNoDuration) {
				return (ru.retentionData.progressMiliseconds * 0.1 | 0) % 100;
			}
		} else {
			return -1;
		}
		return -1;
	}
	,__class__: arcania_logic_ArcaniaModel
};
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__:true,__constructs__:null
	,CFunction: {_hx_name:"CFunction",_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="Module",$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="FilePos",$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="Method",$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="LocalFunction",$_.__params__ = ["v"],$_)
};
haxe_StackItem.__constructs__ = [haxe_StackItem.CFunction,haxe_StackItem.Module,haxe_StackItem.FilePos,haxe_StackItem.Method,haxe_StackItem.LocalFunction];
var haxe_CallStack = {};
haxe_CallStack.callStack = function() {
	return haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.callStack());
};
haxe_CallStack.exceptionStack = function(fullStack) {
	if(fullStack == null) {
		fullStack = false;
	}
	var eStack = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.exceptionStack());
	return fullStack ? eStack : haxe_CallStack.subtract(eStack,haxe_CallStack.callStack());
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	var _g1 = stack;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.subtract = function(this1,stack) {
	var startIndex = -1;
	var i = -1;
	while(++i < this1.length) {
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var j = _g++;
			if(haxe_CallStack.equalItems(this1[i],stack[j])) {
				if(startIndex < 0) {
					startIndex = i;
				}
				++i;
				if(i >= this1.length) {
					break;
				}
			} else {
				startIndex = -1;
			}
		}
		if(startIndex >= 0) {
			break;
		}
	}
	if(startIndex >= 0) {
		return this1.slice(0,startIndex);
	} else {
		return this1;
	}
};
haxe_CallStack.equalItems = function(item1,item2) {
	if(item1 == null) {
		if(item2 == null) {
			return true;
		} else {
			return false;
		}
	} else {
		switch(item1._hx_index) {
		case 0:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 0) {
				return true;
			} else {
				return false;
			}
			break;
		case 1:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 1) {
				var m2 = item2.m;
				var m1 = item1.m;
				return m1 == m2;
			} else {
				return false;
			}
			break;
		case 2:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 2) {
				var item21 = item2.s;
				var file2 = item2.file;
				var line2 = item2.line;
				var col2 = item2.column;
				var col1 = item1.column;
				var line1 = item1.line;
				var file1 = item1.file;
				var item11 = item1.s;
				if(file1 == file2 && line1 == line2 && col1 == col2) {
					return haxe_CallStack.equalItems(item11,item21);
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 3:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 3) {
				var class2 = item2.classname;
				var method2 = item2.method;
				var method1 = item1.method;
				var class1 = item1.classname;
				if(class1 == class2) {
					return method1 == method2;
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 4:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 4) {
				var v2 = item2.v;
				var v1 = item1.v;
				return v1 == v2;
			} else {
				return false;
			}
			break;
		}
	}
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s._hx_index) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s.m;
		b.b += "module ";
		b.b += m == null ? "null" : "" + m;
		break;
	case 2:
		var s1 = s.s;
		var file = s.file;
		var line = s.line;
		var col = s.column;
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b += file == null ? "null" : "" + file;
		b.b += " line ";
		b.b += line == null ? "null" : "" + line;
		if(col != null) {
			b.b += " column ";
			b.b += col == null ? "null" : "" + col;
		}
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var cname = s.classname;
		var meth = s.method;
		b.b += Std.string(cname == null ? "<unknown>" : cname);
		b.b += ".";
		b.b += meth == null ? "null" : "" + meth;
		break;
	case 4:
		var n = s.v;
		b.b += "local function #";
		b.b += n == null ? "null" : "" + n;
		break;
	}
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
haxe_IMap.prototype = {
	__class__: haxe_IMap
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
	this.__skipStack = 0;
	var old = Error.prepareStackTrace;
	Error.prepareStackTrace = function(e) { return e.stack; }
	if(((native) instanceof Error)) {
		this.stack = native.stack;
	} else {
		var e = null;
		if(Error.captureStackTrace) {
			Error.captureStackTrace(this,haxe_Exception);
			e = this;
		} else {
			e = new Error();
			if(typeof(e.stack) == "undefined") {
				try { throw e; } catch(_) {}
				this.__skipStack++;
			}
		}
		this.stack = e.stack;
	}
	Error.prepareStackTrace = old;
};
$hxClasses["haxe.Exception"] = haxe_Exception;
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		e.__skipStack++;
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	unwrap: function() {
		return this.__nativeException;
	}
	,toString: function() {
		return this.get_message();
	}
	,details: function() {
		if(this.get_previous() == null) {
			var tmp = "Exception: " + this.toString();
			var tmp1 = this.get_stack();
			return tmp + (tmp1 == null ? "null" : haxe_CallStack.toString(tmp1));
		} else {
			var result = "";
			var e = this;
			var prev = null;
			while(e != null) {
				if(prev == null) {
					var result1 = "Exception: " + e.get_message();
					var tmp = e.get_stack();
					result = result1 + (tmp == null ? "null" : haxe_CallStack.toString(tmp)) + result;
				} else {
					var prevStack = haxe_CallStack.subtract(e.get_stack(),prev.get_stack());
					result = "Exception: " + e.get_message() + (prevStack == null ? "null" : haxe_CallStack.toString(prevStack)) + "\n\nNext " + result;
				}
				prev = e;
				e = e.get_previous();
			}
			return result;
		}
	}
	,__shiftStack: function() {
		this.__skipStack++;
	}
	,get_message: function() {
		return this.message;
	}
	,get_previous: function() {
		return this.__previousException;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,get_stack: function() {
		var _g = this.__exceptionStack;
		if(_g == null) {
			var value = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.normalize(this.stack),this.__skipStack);
			this.setProperty("__exceptionStack",value);
			return value;
		} else {
			var s = _g;
			return s;
		}
	}
	,setProperty: function(name,value) {
		try {
			Object.defineProperty(this,name,{ value : value});
		} catch( _g ) {
			this[name] = value;
		}
	}
	,__class__: haxe_Exception
	,__properties__: {get_native:"get_native",get_previous:"get_previous",get_stack:"get_stack",get_message:"get_message"}
});
var haxe_Int32 = {};
haxe_Int32.ucompare = function(a,b) {
	if(a < 0) {
		if(b < 0) {
			return ~b - ~a | 0;
		} else {
			return 1;
		}
	}
	if(b < 0) {
		return -1;
	} else {
		return a - b | 0;
	}
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_NativeStackTrace = function() { };
$hxClasses["haxe.NativeStackTrace"] = haxe_NativeStackTrace;
haxe_NativeStackTrace.__name__ = "haxe.NativeStackTrace";
haxe_NativeStackTrace.saveStack = function(e) {
	haxe_NativeStackTrace.lastError = e;
};
haxe_NativeStackTrace.callStack = function() {
	var e = new Error("");
	var stack = haxe_NativeStackTrace.tryHaxeStack(e);
	if(typeof(stack) == "undefined") {
		try {
			throw e;
		} catch( _g ) {
		}
		stack = e.stack;
	}
	return haxe_NativeStackTrace.normalize(stack,2);
};
haxe_NativeStackTrace.exceptionStack = function() {
	return haxe_NativeStackTrace.normalize(haxe_NativeStackTrace.tryHaxeStack(haxe_NativeStackTrace.lastError));
};
haxe_NativeStackTrace.toHaxe = function(s,skip) {
	if(skip == null) {
		skip = 0;
	}
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var i = _g++;
			if(skip > i) {
				continue;
			}
			var line = stack[i];
			var matched = line.match(/^    at ([A-Za-z0-9_. ]+) \(([^)]+):([0-9]+):([0-9]+)\)$/);
			if(matched != null) {
				var path = matched[1].split(".");
				if(path[0] == "$hxClasses") {
					path.shift();
				}
				var meth = path.pop();
				var file = matched[2];
				var line1 = Std.parseInt(matched[3]);
				var column = Std.parseInt(matched[4]);
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1,column));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else if(skip > 0 && Array.isArray(s)) {
		return s.slice(skip);
	} else {
		return s;
	}
};
haxe_NativeStackTrace.tryHaxeStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = haxe_NativeStackTrace.prepareHxStackTrace;
	var stack = e.stack;
	Error.prepareStackTrace = oldValue;
	return stack;
};
haxe_NativeStackTrace.prepareHxStackTrace = function(e,callsites) {
	var stack = [];
	var _g = 0;
	while(_g < callsites.length) {
		var site = callsites[_g];
		++_g;
		if(haxe_NativeStackTrace.wrapCallSite != null) {
			site = haxe_NativeStackTrace.wrapCallSite(site);
		}
		var method = null;
		var fullName = site.getFunctionName();
		if(fullName != null) {
			var idx = fullName.lastIndexOf(".");
			if(idx >= 0) {
				var className = fullName.substring(0,idx);
				var methodName = fullName.substring(idx + 1);
				method = haxe_StackItem.Method(className,methodName);
			} else {
				method = haxe_StackItem.Method(null,fullName);
			}
		}
		var fileName = site.getFileName();
		var fileAddr = fileName == null ? -1 : fileName.indexOf("file:");
		if(haxe_NativeStackTrace.wrapCallSite != null && fileAddr > 0) {
			fileName = fileName.substring(fileAddr + 6);
		}
		stack.push(haxe_StackItem.FilePos(method,fileName,site.getLineNumber(),site.getColumnNumber()));
	}
	return stack;
};
haxe_NativeStackTrace.normalize = function(stack,skipItems) {
	if(skipItems == null) {
		skipItems = 0;
	}
	if(Array.isArray(stack) && skipItems > 0) {
		return stack.slice(skipItems);
	} else if(typeof(stack) == "string") {
		switch(stack.substring(0,6)) {
		case "Error\n":case "Error:":
			++skipItems;
			break;
		default:
		}
		return haxe_NativeStackTrace.skipLines(stack,skipItems);
	} else {
		return stack;
	}
};
haxe_NativeStackTrace.skipLines = function(stack,skip,pos) {
	if(pos == null) {
		pos = 0;
	}
	if(skip > 0) {
		pos = stack.indexOf("\n",pos);
		if(pos < 0) {
			return "";
		} else {
			return haxe_NativeStackTrace.skipLines(stack,--skip,pos + 1);
		}
	} else {
		return stack.substring(pos);
	}
};
var haxe_Resource = function() { };
$hxClasses["haxe.Resource"] = haxe_Resource;
haxe_Resource.__name__ = "haxe.Resource";
haxe_Resource.getString = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return x.str;
			}
			var b = haxe_crypto_Base64.decode(x.data);
			return b.toString();
		}
	}
	return null;
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
	this.__skipStack++;
};
$hxClasses["haxe.ValueException"] = haxe_ValueException;
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.prototype = {
	getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,setInt32: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
	,getInt64: function(pos) {
		var this1 = new haxe__$Int64__$_$_$Int64(this.getInt32(pos + 4),this.getInt32(pos));
		return this1;
	}
	,setInt64: function(pos,v) {
		this.setInt32(pos,v.low);
		this.setInt32(pos + 4,v.high);
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__:true,__constructs__:null
	,UTF8: {_hx_name:"UTF8",_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_name:"RawNative",_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = "haxe.crypto.Base64";
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw haxe_Exception.thrown("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = "haxe.crypto.BaseCode";
haxe_crypto_BaseCode.prototype = {
	initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g = 0;
		var _g1 = this.base.length;
		while(_g < _g1) {
			var i = _g++;
			tbl[this.base.b[i]] = i;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw haxe_Exception.thrown("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_crypto_Sha1 = function() {
};
$hxClasses["haxe.crypto.Sha1"] = haxe_crypto_Sha1;
haxe_crypto_Sha1.__name__ = "haxe.crypto.Sha1";
haxe_crypto_Sha1.make = function(b) {
	var h = new haxe_crypto_Sha1().doEncode(haxe_crypto_Sha1.bytes2blks(b));
	var out = new haxe_io_Bytes(new ArrayBuffer(20));
	var p = 0;
	out.b[p++] = h[0] >>> 24;
	out.b[p++] = h[0] >> 16 & 255;
	out.b[p++] = h[0] >> 8 & 255;
	out.b[p++] = h[0] & 255;
	out.b[p++] = h[1] >>> 24;
	out.b[p++] = h[1] >> 16 & 255;
	out.b[p++] = h[1] >> 8 & 255;
	out.b[p++] = h[1] & 255;
	out.b[p++] = h[2] >>> 24;
	out.b[p++] = h[2] >> 16 & 255;
	out.b[p++] = h[2] >> 8 & 255;
	out.b[p++] = h[2] & 255;
	out.b[p++] = h[3] >>> 24;
	out.b[p++] = h[3] >> 16 & 255;
	out.b[p++] = h[3] >> 8 & 255;
	out.b[p++] = h[3] & 255;
	out.b[p++] = h[4] >>> 24;
	out.b[p++] = h[4] >> 16 & 255;
	out.b[p++] = h[4] >> 8 & 255;
	out.b[p++] = h[4] & 255;
	return out;
};
haxe_crypto_Sha1.bytes2blks = function(b) {
	var nblk = (b.length + 8 >> 6) + 1;
	var blks = [];
	var _g = 0;
	var _g1 = nblk * 16;
	while(_g < _g1) {
		var i = _g++;
		blks[i] = 0;
	}
	var _g = 0;
	var _g1 = b.length;
	while(_g < _g1) {
		var i = _g++;
		var p = i >> 2;
		blks[p] |= b.b[i] << 24 - ((i & 3) << 3);
	}
	var i = b.length;
	var p = i >> 2;
	blks[p] |= 128 << 24 - ((i & 3) << 3);
	blks[nblk * 16 - 1] = b.length * 8;
	return blks;
};
haxe_crypto_Sha1.prototype = {
	doEncode: function(x) {
		var w = [];
		var a = 1732584193;
		var b = -271733879;
		var c = -1732584194;
		var d = 271733878;
		var e = -1009589776;
		var i = 0;
		while(i < x.length) {
			var olda = a;
			var oldb = b;
			var oldc = c;
			var oldd = d;
			var olde = e;
			var j = 0;
			while(j < 80) {
				if(j < 16) {
					w[j] = x[i + j];
				} else {
					var num = w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16];
					w[j] = num << 1 | num >>> 31;
				}
				var t = (a << 5 | a >>> 27) + this.ft(j,b,c,d) + e + w[j] + this.kt(j);
				e = d;
				d = c;
				c = b << 30 | b >>> 2;
				b = a;
				a = t;
				++j;
			}
			a += olda;
			b += oldb;
			c += oldc;
			d += oldd;
			e += olde;
			i += 16;
		}
		return [a,b,c,d,e];
	}
	,ft: function(t,b,c,d) {
		if(t < 20) {
			return b & c | ~b & d;
		}
		if(t < 40) {
			return b ^ c ^ d;
		}
		if(t < 60) {
			return b & c | b & d | c & d;
		}
		return b ^ c ^ d;
	}
	,kt: function(t) {
		if(t < 20) {
			return 1518500249;
		}
		if(t < 40) {
			return 1859775393;
		}
		if(t < 60) {
			return -1894007588;
		}
		return -899497514;
	}
	,__class__: haxe_crypto_Sha1
};
var haxe_ds_BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
haxe_ds_BalancedTree.__name__ = "haxe.ds.BalancedTree";
haxe_ds_BalancedTree.__interfaces__ = [haxe_IMap];
haxe_ds_BalancedTree.prototype = {
	set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,keys: function() {
		var ret = [];
		this.keysLoop(this.root,ret);
		return new haxe_iterators_ArrayIterator(ret);
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,keysLoop: function(node,acc) {
		if(node != null) {
			this.keysLoop(node.left,acc);
			acc.push(node.key);
			this.keysLoop(node.right,acc);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this = r.right;
			var _this1 = r.left;
			if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this = this.left;
			tmp = _this == null ? 0 : _this._height;
		} else {
			var _this = this.right;
			tmp = _this == null ? 0 : _this._height;
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
$hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
haxe_ds_TreeNode.__name__ = "haxe.ds.TreeNode";
haxe_ds_TreeNode.prototype = {
	__class__: haxe_ds_TreeNode
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
haxe_ds_EnumValueMap.__name__ = "haxe.ds.EnumValueMap";
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1._hx_index - k2._hx_index;
		if(d != 0) {
			return d;
		}
		var p1 = Type.enumParameters(k1);
		var p2 = Type.enumParameters(k2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g = 0;
		var _g1 = a1.length;
		while(_g < _g1) {
			var i = _g++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if(((v1) instanceof Array) && ((v2) instanceof Array)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_GenericCell = function(elt,next) {
	this.elt = elt;
	this.next = next;
};
$hxClasses["haxe.ds.GenericCell"] = haxe_ds_GenericCell;
haxe_ds_GenericCell.__name__ = "haxe.ds.GenericCell";
haxe_ds_GenericCell.prototype = {
	__class__: haxe_ds_GenericCell
};
var haxe_ds_GenericStack = function() {
};
$hxClasses["haxe.ds.GenericStack"] = haxe_ds_GenericStack;
haxe_ds_GenericStack.__name__ = "haxe.ds.GenericStack";
haxe_ds_GenericStack.prototype = {
	__class__: haxe_ds_GenericStack
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(+key);
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe_iterators_ArrayIterator(a);
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	get: function(key) {
		return this.h[key];
	}
	,set: function(key,value) {
		this.h[key] = value;
	}
	,keys: function() {
		return new haxe_ds__$StringMap_StringMapKeyIterator(this.h);
	}
	,__class__: haxe_ds_StringMap
};
var haxe_ds__$StringMap_StringMapKeyIterator = function(h) {
	this.h = h;
	this.keys = Object.keys(h);
	this.length = this.keys.length;
	this.current = 0;
};
$hxClasses["haxe.ds._StringMap.StringMapKeyIterator"] = haxe_ds__$StringMap_StringMapKeyIterator;
haxe_ds__$StringMap_StringMapKeyIterator.__name__ = "haxe.ds._StringMap.StringMapKeyIterator";
haxe_ds__$StringMap_StringMapKeyIterator.prototype = {
	hasNext: function() {
		return this.current < this.length;
	}
	,next: function() {
		return this.keys[this.current++];
	}
	,__class__: haxe_ds__$StringMap_StringMapKeyIterator
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__:true,__constructs__:null
	,Blocked: {_hx_name:"Blocked",_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_name:"Overflow",_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_name:"OutsideBounds",_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["e"],$_)
};
haxe_io_Error.__constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds,haxe_io_Error.Custom];
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
$hxClasses["haxe.iterators.ArrayIterator"] = haxe_iterators_ArrayIterator;
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var haxe_xml__$Access_NodeAccess = {};
haxe_xml__$Access_NodeAccess.resolve = function(this1,name) {
	var x = this1.elementsNamed(name).next();
	if(x == null) {
		var xname;
		if(this1.nodeType == Xml.Document) {
			xname = "Document";
		} else {
			if(this1.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
			}
			xname = this1.nodeName;
		}
		throw haxe_Exception.thrown(xname + " is missing element " + name);
	}
	if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Invalid nodeType " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
	}
	var this1 = x;
	return this1;
};
var haxe_xml__$Access_AttribAccess = {};
haxe_xml__$Access_AttribAccess.resolve = function(this1,name) {
	if(this1.nodeType == Xml.Document) {
		throw haxe_Exception.thrown("Cannot access document attribute " + name);
	}
	var v = this1.get(name);
	if(v == null) {
		if(this1.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
		}
		throw haxe_Exception.thrown(this1.nodeName + " is missing attribute " + name);
	}
	return v;
};
var haxe_xml__$Access_HasNodeAccess = {};
haxe_xml__$Access_HasNodeAccess.resolve = function(this1,name) {
	return this1.elementsNamed(name).hasNext();
};
var haxe_xml__$Access_NodeListAccess = {};
haxe_xml__$Access_NodeListAccess.resolve = function(this1,name) {
	var l = [];
	var x = this1.elementsNamed(name);
	while(x.hasNext()) {
		var x1 = x.next();
		if(x1.nodeType != Xml.Document && x1.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Invalid nodeType " + (x1.nodeType == null ? "null" : XmlType.toString(x1.nodeType)));
		}
		var this1 = x1;
		l.push(this1);
	}
	return l;
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g = 0;
	var _g1 = position;
	while(_g < _g1) {
		var i = _g++;
		var c = xml.charCodeAt(i);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
$hxClasses["haxe.xml.XmlParserException"] = haxe_xml_XmlParserException;
haxe_xml_XmlParserException.__name__ = "haxe.xml.XmlParserException";
haxe_xml_XmlParserException.prototype = {
	toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__ + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = "haxe.xml.Parser";
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(p < str.length) {
		var c = str.charCodeAt(p);
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				var tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Duplicate attribute [" + aname + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCodePoint(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent == null || parent.nodeType != 0) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected </" + v + ">, tag is not open",str,p));
				}
				if(parent.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
					}
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCodePoint(c1);
				} else if(!Object.prototype.hasOwnProperty.call(haxe_xml_Parser.escapes.h,s)) {
					if(strict) {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
					}
					buf.b += Std.string("&" + s + ";");
				} else {
					buf.b += Std.string(haxe_xml_Parser.escapes.h[s]);
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCodePoint(c),str,p));
				}
				buf.b += String.fromCodePoint(38);
				var len5 = p - start;
				buf.b += len5 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len5);
				--p;
				start = p + 1;
				state = escapeNext;
			}
			break;
		}
		++p;
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(parent.nodeType == 0) {
			if(parent.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
			}
			throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unclosed node <" + parent.nodeName + ">",str,p));
		}
		if(p != start || nsubs == 0) {
			var len = p - start;
			buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
			parent.addChild(Xml.createPCData(buf.b));
			++nsubs;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += String.fromCodePoint(38);
		var len = p - start;
		buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
		parent.addChild(Xml.createPCData(buf.b));
		++nsubs;
		return p;
	}
	throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
$hxClasses["haxe.xml.Printer"] = haxe_xml_Printer;
haxe_xml_Printer.__name__ = "haxe.xml.Printer";
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) {
		pretty = false;
	}
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	writeNode: function(value,tabs) {
		switch(value.nodeType) {
		case 0:
			this.output.b += Std.string(tabs + "<");
			if(value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeName);
			var attribute = value.attributes();
			while(attribute.hasNext()) {
				var attribute1 = attribute.next();
				this.output.b += Std.string(" " + attribute1 + "=\"");
				var input = StringTools.htmlEscape(value.get(attribute1),true);
				this.output.b += Std.string(input);
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				var _g_current = 0;
				var _g_array = value.children;
				while(_g_current < _g_array.length) {
					var child = _g_array[_g_current++];
					this.writeNode(child,this.pretty ? tabs + "\t" : tabs);
				}
				this.output.b += Std.string(tabs + "</");
				if(value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				this.output.b += Std.string(value.nodeName);
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
			} else {
				this.output.b += "/>";
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 1:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				var input = tabs + StringTools.htmlEscape(nodeValue);
				this.output.b += Std.string(input);
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeValue);
			this.output.b += "]]>";
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 3:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var commentContent = value.nodeValue;
			var _this_r = new RegExp("[\n\r\t]+","g".split("u").join(""));
			commentContent = commentContent.replace(_this_r,"");
			commentContent = "<!--" + commentContent + "-->";
			this.output.b += tabs == null ? "null" : "" + tabs;
			var input = StringTools.trim(commentContent);
			this.output.b += Std.string(input);
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 4:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<!DOCTYPE " + value.nodeValue + ">");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 5:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<?" + value.nodeValue + "?>");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 6:
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var _g_current = 0;
			var _g_array = value.children;
			while(_g_current < _g_array.length) {
				var child = _g_array[_g_current++];
				this.writeNode(child,tabs);
			}
			break;
		}
	}
	,hasChildren: function(value) {
		if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
		}
		var _g_current = 0;
		var _g_array = value.children;
		while(_g_current < _g_array.length) {
			var child = _g_array[_g_current++];
			switch(child.nodeType) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(child.nodeType == Xml.Document || child.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				if(StringTools.ltrim(child.nodeValue).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var hscript_Const = $hxEnums["hscript.Const"] = { __ename__:true,__constructs__:null
	,CInt: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"hscript.Const",toString:$estr}; },$_._hx_name="CInt",$_.__params__ = ["v"],$_)
	,CFloat: ($_=function(f) { return {_hx_index:1,f:f,__enum__:"hscript.Const",toString:$estr}; },$_._hx_name="CFloat",$_.__params__ = ["f"],$_)
	,CString: ($_=function(s) { return {_hx_index:2,s:s,__enum__:"hscript.Const",toString:$estr}; },$_._hx_name="CString",$_.__params__ = ["s"],$_)
};
hscript_Const.__constructs__ = [hscript_Const.CInt,hscript_Const.CFloat,hscript_Const.CString];
var hscript_Expr = $hxEnums["hscript.Expr"] = { __ename__:true,__constructs__:null
	,EConst: ($_=function(c) { return {_hx_index:0,c:c,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EConst",$_.__params__ = ["c"],$_)
	,EIdent: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EIdent",$_.__params__ = ["v"],$_)
	,EVar: ($_=function(n,t,e) { return {_hx_index:2,n:n,t:t,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EVar",$_.__params__ = ["n","t","e"],$_)
	,EParent: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EParent",$_.__params__ = ["e"],$_)
	,EBlock: ($_=function(e) { return {_hx_index:4,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EBlock",$_.__params__ = ["e"],$_)
	,EField: ($_=function(e,f) { return {_hx_index:5,e:e,f:f,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EField",$_.__params__ = ["e","f"],$_)
	,EBinop: ($_=function(op,e1,e2) { return {_hx_index:6,op:op,e1:e1,e2:e2,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EBinop",$_.__params__ = ["op","e1","e2"],$_)
	,EUnop: ($_=function(op,prefix,e) { return {_hx_index:7,op:op,prefix:prefix,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EUnop",$_.__params__ = ["op","prefix","e"],$_)
	,ECall: ($_=function(e,params) { return {_hx_index:8,e:e,params:params,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="ECall",$_.__params__ = ["e","params"],$_)
	,EIf: ($_=function(cond,e1,e2) { return {_hx_index:9,cond:cond,e1:e1,e2:e2,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EIf",$_.__params__ = ["cond","e1","e2"],$_)
	,EWhile: ($_=function(cond,e) { return {_hx_index:10,cond:cond,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EWhile",$_.__params__ = ["cond","e"],$_)
	,EFor: ($_=function(v,it,e) { return {_hx_index:11,v:v,it:it,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EFor",$_.__params__ = ["v","it","e"],$_)
	,EBreak: {_hx_name:"EBreak",_hx_index:12,__enum__:"hscript.Expr",toString:$estr}
	,EContinue: {_hx_name:"EContinue",_hx_index:13,__enum__:"hscript.Expr",toString:$estr}
	,EFunction: ($_=function(args,e,name,ret) { return {_hx_index:14,args:args,e:e,name:name,ret:ret,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EFunction",$_.__params__ = ["args","e","name","ret"],$_)
	,EReturn: ($_=function(e) { return {_hx_index:15,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EReturn",$_.__params__ = ["e"],$_)
	,EArray: ($_=function(e,index) { return {_hx_index:16,e:e,index:index,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EArray",$_.__params__ = ["e","index"],$_)
	,EArrayDecl: ($_=function(e) { return {_hx_index:17,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EArrayDecl",$_.__params__ = ["e"],$_)
	,ENew: ($_=function(cl,params) { return {_hx_index:18,cl:cl,params:params,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="ENew",$_.__params__ = ["cl","params"],$_)
	,EThrow: ($_=function(e) { return {_hx_index:19,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EThrow",$_.__params__ = ["e"],$_)
	,ETry: ($_=function(e,v,t,ecatch) { return {_hx_index:20,e:e,v:v,t:t,ecatch:ecatch,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="ETry",$_.__params__ = ["e","v","t","ecatch"],$_)
	,EObject: ($_=function(fl) { return {_hx_index:21,fl:fl,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EObject",$_.__params__ = ["fl"],$_)
	,ETernary: ($_=function(cond,e1,e2) { return {_hx_index:22,cond:cond,e1:e1,e2:e2,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="ETernary",$_.__params__ = ["cond","e1","e2"],$_)
	,ESwitch: ($_=function(e,cases,defaultExpr) { return {_hx_index:23,e:e,cases:cases,defaultExpr:defaultExpr,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="ESwitch",$_.__params__ = ["e","cases","defaultExpr"],$_)
	,EDoWhile: ($_=function(cond,e) { return {_hx_index:24,cond:cond,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EDoWhile",$_.__params__ = ["cond","e"],$_)
	,EMeta: ($_=function(name,args,e) { return {_hx_index:25,name:name,args:args,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EMeta",$_.__params__ = ["name","args","e"],$_)
	,ECheckType: ($_=function(e,t) { return {_hx_index:26,e:e,t:t,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="ECheckType",$_.__params__ = ["e","t"],$_)
};
hscript_Expr.__constructs__ = [hscript_Expr.EConst,hscript_Expr.EIdent,hscript_Expr.EVar,hscript_Expr.EParent,hscript_Expr.EBlock,hscript_Expr.EField,hscript_Expr.EBinop,hscript_Expr.EUnop,hscript_Expr.ECall,hscript_Expr.EIf,hscript_Expr.EWhile,hscript_Expr.EFor,hscript_Expr.EBreak,hscript_Expr.EContinue,hscript_Expr.EFunction,hscript_Expr.EReturn,hscript_Expr.EArray,hscript_Expr.EArrayDecl,hscript_Expr.ENew,hscript_Expr.EThrow,hscript_Expr.ETry,hscript_Expr.EObject,hscript_Expr.ETernary,hscript_Expr.ESwitch,hscript_Expr.EDoWhile,hscript_Expr.EMeta,hscript_Expr.ECheckType];
var hscript_CType = $hxEnums["hscript.CType"] = { __ename__:true,__constructs__:null
	,CTPath: ($_=function(path,params) { return {_hx_index:0,path:path,params:params,__enum__:"hscript.CType",toString:$estr}; },$_._hx_name="CTPath",$_.__params__ = ["path","params"],$_)
	,CTFun: ($_=function(args,ret) { return {_hx_index:1,args:args,ret:ret,__enum__:"hscript.CType",toString:$estr}; },$_._hx_name="CTFun",$_.__params__ = ["args","ret"],$_)
	,CTAnon: ($_=function(fields) { return {_hx_index:2,fields:fields,__enum__:"hscript.CType",toString:$estr}; },$_._hx_name="CTAnon",$_.__params__ = ["fields"],$_)
	,CTParent: ($_=function(t) { return {_hx_index:3,t:t,__enum__:"hscript.CType",toString:$estr}; },$_._hx_name="CTParent",$_.__params__ = ["t"],$_)
	,CTOpt: ($_=function(t) { return {_hx_index:4,t:t,__enum__:"hscript.CType",toString:$estr}; },$_._hx_name="CTOpt",$_.__params__ = ["t"],$_)
	,CTNamed: ($_=function(n,t) { return {_hx_index:5,n:n,t:t,__enum__:"hscript.CType",toString:$estr}; },$_._hx_name="CTNamed",$_.__params__ = ["n","t"],$_)
};
hscript_CType.__constructs__ = [hscript_CType.CTPath,hscript_CType.CTFun,hscript_CType.CTAnon,hscript_CType.CTParent,hscript_CType.CTOpt,hscript_CType.CTNamed];
var hscript_Error = $hxEnums["hscript.Error"] = { __ename__:true,__constructs__:null
	,EInvalidChar: ($_=function(c) { return {_hx_index:0,c:c,__enum__:"hscript.Error",toString:$estr}; },$_._hx_name="EInvalidChar",$_.__params__ = ["c"],$_)
	,EUnexpected: ($_=function(s) { return {_hx_index:1,s:s,__enum__:"hscript.Error",toString:$estr}; },$_._hx_name="EUnexpected",$_.__params__ = ["s"],$_)
	,EUnterminatedString: {_hx_name:"EUnterminatedString",_hx_index:2,__enum__:"hscript.Error",toString:$estr}
	,EUnterminatedComment: {_hx_name:"EUnterminatedComment",_hx_index:3,__enum__:"hscript.Error",toString:$estr}
	,EInvalidPreprocessor: ($_=function(msg) { return {_hx_index:4,msg:msg,__enum__:"hscript.Error",toString:$estr}; },$_._hx_name="EInvalidPreprocessor",$_.__params__ = ["msg"],$_)
	,EUnknownVariable: ($_=function(v) { return {_hx_index:5,v:v,__enum__:"hscript.Error",toString:$estr}; },$_._hx_name="EUnknownVariable",$_.__params__ = ["v"],$_)
	,EInvalidIterator: ($_=function(v) { return {_hx_index:6,v:v,__enum__:"hscript.Error",toString:$estr}; },$_._hx_name="EInvalidIterator",$_.__params__ = ["v"],$_)
	,EInvalidOp: ($_=function(op) { return {_hx_index:7,op:op,__enum__:"hscript.Error",toString:$estr}; },$_._hx_name="EInvalidOp",$_.__params__ = ["op"],$_)
	,EInvalidAccess: ($_=function(f) { return {_hx_index:8,f:f,__enum__:"hscript.Error",toString:$estr}; },$_._hx_name="EInvalidAccess",$_.__params__ = ["f"],$_)
	,ECustom: ($_=function(msg) { return {_hx_index:9,msg:msg,__enum__:"hscript.Error",toString:$estr}; },$_._hx_name="ECustom",$_.__params__ = ["msg"],$_)
};
hscript_Error.__constructs__ = [hscript_Error.EInvalidChar,hscript_Error.EUnexpected,hscript_Error.EUnterminatedString,hscript_Error.EUnterminatedComment,hscript_Error.EInvalidPreprocessor,hscript_Error.EUnknownVariable,hscript_Error.EInvalidIterator,hscript_Error.EInvalidOp,hscript_Error.EInvalidAccess,hscript_Error.ECustom];
var hscript_ModuleDecl = $hxEnums["hscript.ModuleDecl"] = { __ename__:true,__constructs__:null
	,DPackage: ($_=function(path) { return {_hx_index:0,path:path,__enum__:"hscript.ModuleDecl",toString:$estr}; },$_._hx_name="DPackage",$_.__params__ = ["path"],$_)
	,DImport: ($_=function(path,everything) { return {_hx_index:1,path:path,everything:everything,__enum__:"hscript.ModuleDecl",toString:$estr}; },$_._hx_name="DImport",$_.__params__ = ["path","everything"],$_)
	,DClass: ($_=function(c) { return {_hx_index:2,c:c,__enum__:"hscript.ModuleDecl",toString:$estr}; },$_._hx_name="DClass",$_.__params__ = ["c"],$_)
	,DTypedef: ($_=function(c) { return {_hx_index:3,c:c,__enum__:"hscript.ModuleDecl",toString:$estr}; },$_._hx_name="DTypedef",$_.__params__ = ["c"],$_)
};
hscript_ModuleDecl.__constructs__ = [hscript_ModuleDecl.DPackage,hscript_ModuleDecl.DImport,hscript_ModuleDecl.DClass,hscript_ModuleDecl.DTypedef];
var hscript_FieldAccess = $hxEnums["hscript.FieldAccess"] = { __ename__:true,__constructs__:null
	,APublic: {_hx_name:"APublic",_hx_index:0,__enum__:"hscript.FieldAccess",toString:$estr}
	,APrivate: {_hx_name:"APrivate",_hx_index:1,__enum__:"hscript.FieldAccess",toString:$estr}
	,AInline: {_hx_name:"AInline",_hx_index:2,__enum__:"hscript.FieldAccess",toString:$estr}
	,AOverride: {_hx_name:"AOverride",_hx_index:3,__enum__:"hscript.FieldAccess",toString:$estr}
	,AStatic: {_hx_name:"AStatic",_hx_index:4,__enum__:"hscript.FieldAccess",toString:$estr}
	,AMacro: {_hx_name:"AMacro",_hx_index:5,__enum__:"hscript.FieldAccess",toString:$estr}
};
hscript_FieldAccess.__constructs__ = [hscript_FieldAccess.APublic,hscript_FieldAccess.APrivate,hscript_FieldAccess.AInline,hscript_FieldAccess.AOverride,hscript_FieldAccess.AStatic,hscript_FieldAccess.AMacro];
var hscript_FieldKind = $hxEnums["hscript.FieldKind"] = { __ename__:true,__constructs__:null
	,KFunction: ($_=function(f) { return {_hx_index:0,f:f,__enum__:"hscript.FieldKind",toString:$estr}; },$_._hx_name="KFunction",$_.__params__ = ["f"],$_)
	,KVar: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"hscript.FieldKind",toString:$estr}; },$_._hx_name="KVar",$_.__params__ = ["v"],$_)
};
hscript_FieldKind.__constructs__ = [hscript_FieldKind.KFunction,hscript_FieldKind.KVar];
var hscript__$Interp_Stop = $hxEnums["hscript._Interp.Stop"] = { __ename__:true,__constructs__:null
	,SBreak: {_hx_name:"SBreak",_hx_index:0,__enum__:"hscript._Interp.Stop",toString:$estr}
	,SContinue: {_hx_name:"SContinue",_hx_index:1,__enum__:"hscript._Interp.Stop",toString:$estr}
	,SReturn: {_hx_name:"SReturn",_hx_index:2,__enum__:"hscript._Interp.Stop",toString:$estr}
};
hscript__$Interp_Stop.__constructs__ = [hscript__$Interp_Stop.SBreak,hscript__$Interp_Stop.SContinue,hscript__$Interp_Stop.SReturn];
var hscript_Interp = function() {
	this.locals = new haxe_ds_StringMap();
	this.declared = [];
	this.resetVariables();
	this.initOps();
};
$hxClasses["hscript.Interp"] = hscript_Interp;
hscript_Interp.__name__ = "hscript.Interp";
hscript_Interp.prototype = {
	resetVariables: function() {
		var _gthis = this;
		this.variables = new haxe_ds_StringMap();
		this.variables.h["null"] = null;
		this.variables.h["true"] = true;
		this.variables.h["false"] = false;
		var this1 = this.variables;
		var value = Reflect.makeVarArgs(function(el) {
			var inf = _gthis.posInfos();
			var v = el.shift();
			if(el.length > 0) {
				inf.customParams = el;
			}
			haxe_Log.trace(Std.string(v),inf);
		});
		this1.h["trace"] = value;
	}
	,posInfos: function() {
		return { fileName : "hscript", lineNumber : 0};
	}
	,initOps: function() {
		var me = this;
		this.binops = new haxe_ds_StringMap();
		this.binops.h["+"] = function(e1,e2) {
			return me.expr(e1) + me.expr(e2);
		};
		this.binops.h["-"] = function(e1,e2) {
			return me.expr(e1) - me.expr(e2);
		};
		this.binops.h["*"] = function(e1,e2) {
			return me.expr(e1) * me.expr(e2);
		};
		this.binops.h["/"] = function(e1,e2) {
			return me.expr(e1) / me.expr(e2);
		};
		this.binops.h["%"] = function(e1,e2) {
			return me.expr(e1) % me.expr(e2);
		};
		this.binops.h["&"] = function(e1,e2) {
			return me.expr(e1) & me.expr(e2);
		};
		this.binops.h["|"] = function(e1,e2) {
			return me.expr(e1) | me.expr(e2);
		};
		this.binops.h["^"] = function(e1,e2) {
			return me.expr(e1) ^ me.expr(e2);
		};
		this.binops.h["<<"] = function(e1,e2) {
			return me.expr(e1) << me.expr(e2);
		};
		this.binops.h[">>"] = function(e1,e2) {
			return me.expr(e1) >> me.expr(e2);
		};
		this.binops.h[">>>"] = function(e1,e2) {
			return me.expr(e1) >>> me.expr(e2);
		};
		this.binops.h["=="] = function(e1,e2) {
			return me.expr(e1) == me.expr(e2);
		};
		this.binops.h["!="] = function(e1,e2) {
			return me.expr(e1) != me.expr(e2);
		};
		this.binops.h[">="] = function(e1,e2) {
			return me.expr(e1) >= me.expr(e2);
		};
		this.binops.h["<="] = function(e1,e2) {
			return me.expr(e1) <= me.expr(e2);
		};
		this.binops.h[">"] = function(e1,e2) {
			return me.expr(e1) > me.expr(e2);
		};
		this.binops.h["<"] = function(e1,e2) {
			return me.expr(e1) < me.expr(e2);
		};
		this.binops.h["||"] = function(e1,e2) {
			if(me.expr(e1) != true) {
				return me.expr(e2) == true;
			} else {
				return true;
			}
		};
		this.binops.h["&&"] = function(e1,e2) {
			if(me.expr(e1) == true) {
				return me.expr(e2) == true;
			} else {
				return false;
			}
		};
		this.binops.h["="] = $bind(this,this.assign);
		this.binops.h["..."] = function(e1,e2) {
			return new IntIterator(me.expr(e1),me.expr(e2));
		};
		this.assignOp("+=",function(v1,v2) {
			return v1 + v2;
		});
		this.assignOp("-=",function(v1,v2) {
			return v1 - v2;
		});
		this.assignOp("*=",function(v1,v2) {
			return v1 * v2;
		});
		this.assignOp("/=",function(v1,v2) {
			return v1 / v2;
		});
		this.assignOp("%=",function(v1,v2) {
			return v1 % v2;
		});
		this.assignOp("&=",function(v1,v2) {
			return v1 & v2;
		});
		this.assignOp("|=",function(v1,v2) {
			return v1 | v2;
		});
		this.assignOp("^=",function(v1,v2) {
			return v1 ^ v2;
		});
		this.assignOp("<<=",function(v1,v2) {
			return v1 << v2;
		});
		this.assignOp(">>=",function(v1,v2) {
			return v1 >> v2;
		});
		this.assignOp(">>>=",function(v1,v2) {
			return v1 >>> v2;
		});
	}
	,assign: function(e1,e2) {
		var v = this.expr(e2);
		switch(e1._hx_index) {
		case 1:
			var id = e1.v;
			var l = this.locals.h[id];
			if(l == null) {
				this.variables.h[id] = v;
			} else {
				l.r = v;
			}
			break;
		case 5:
			var e = e1.e;
			var f = e1.f;
			v = this.set(this.expr(e),f,v);
			break;
		case 16:
			var e = e1.e;
			var index = e1.index;
			var arr = this.expr(e);
			var index1 = this.expr(index);
			if(js_Boot.__implements(arr,haxe_IMap)) {
				(js_Boot.__cast(arr , haxe_IMap)).set(index1,v);
			} else {
				arr[index1] = v;
			}
			break;
		default:
			var e = hscript_Error.EInvalidOp("=");
			throw haxe_Exception.thrown(e);
		}
		return v;
	}
	,assignOp: function(op,fop) {
		var me = this;
		this.binops.h[op] = function(e1,e2) {
			return me.evalAssignOp(op,fop,e1,e2);
		};
	}
	,evalAssignOp: function(op,fop,e1,e2) {
		var v;
		switch(e1._hx_index) {
		case 1:
			var id = e1.v;
			var l = this.locals.h[id];
			v = fop(this.expr(e1),this.expr(e2));
			if(l == null) {
				this.variables.h[id] = v;
			} else {
				l.r = v;
			}
			break;
		case 5:
			var e = e1.e;
			var f = e1.f;
			var obj = this.expr(e);
			v = fop(this.get(obj,f),this.expr(e2));
			v = this.set(obj,f,v);
			break;
		case 16:
			var e = e1.e;
			var index = e1.index;
			var arr = this.expr(e);
			var index1 = this.expr(index);
			if(js_Boot.__implements(arr,haxe_IMap)) {
				v = fop((js_Boot.__cast(arr , haxe_IMap)).get(index1),this.expr(e2));
				(js_Boot.__cast(arr , haxe_IMap)).set(index1,v);
			} else {
				v = fop(arr[index1],this.expr(e2));
				arr[index1] = v;
			}
			break;
		default:
			var e = hscript_Error.EInvalidOp(op);
			throw haxe_Exception.thrown(e);
		}
		return v;
	}
	,increment: function(e,prefix,delta) {
		switch(e._hx_index) {
		case 1:
			var id = e.v;
			var l = this.locals.h[id];
			var v = l == null ? this.variables.h[id] : l.r;
			if(prefix) {
				v += delta;
				if(l == null) {
					this.variables.h[id] = v;
				} else {
					l.r = v;
				}
			} else if(l == null) {
				this.variables.h[id] = v + delta;
			} else {
				l.r = v + delta;
			}
			return v;
		case 5:
			var e1 = e.e;
			var f = e.f;
			var obj = this.expr(e1);
			var v = this.get(obj,f);
			if(prefix) {
				v += delta;
				this.set(obj,f,v);
			} else {
				this.set(obj,f,v + delta);
			}
			return v;
		case 16:
			var e1 = e.e;
			var index = e.index;
			var arr = this.expr(e1);
			var index1 = this.expr(index);
			if(js_Boot.__implements(arr,haxe_IMap)) {
				var v = (js_Boot.__cast(arr , haxe_IMap)).get(index1);
				if(prefix) {
					v += delta;
					(js_Boot.__cast(arr , haxe_IMap)).set(index1,v);
				} else {
					(js_Boot.__cast(arr , haxe_IMap)).set(index1,v + delta);
				}
				return v;
			} else {
				var v = arr[index1];
				if(prefix) {
					v += delta;
					arr[index1] = v;
				} else {
					arr[index1] = v + delta;
				}
				return v;
			}
			break;
		default:
			var e = hscript_Error.EInvalidOp(delta > 0 ? "++" : "--");
			throw haxe_Exception.thrown(e);
		}
	}
	,execute: function(expr) {
		this.depth = 0;
		this.locals = new haxe_ds_StringMap();
		this.declared = [];
		return this.exprReturn(expr);
	}
	,exprReturn: function(e) {
		try {
			return this.expr(e);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(js_Boot.__instanceof(_g1,hscript__$Interp_Stop)) {
				var e = _g1;
				switch(e._hx_index) {
				case 0:
					throw haxe_Exception.thrown("Invalid break");
				case 1:
					throw haxe_Exception.thrown("Invalid continue");
				case 2:
					var v = this.returnValue;
					this.returnValue = null;
					return v;
				}
			} else {
				throw _g;
			}
		}
	}
	,duplicate: function(h) {
		var h2 = new haxe_ds_StringMap();
		var h1 = h.h;
		var k_h = h1;
		var k_keys = Object.keys(h1);
		var k_length = k_keys.length;
		var k_current = 0;
		while(k_current < k_length) {
			var k = k_keys[k_current++];
			h2.h[k] = h.h[k];
		}
		return h2;
	}
	,restore: function(old) {
		while(this.declared.length > old) {
			var d = this.declared.pop();
			this.locals.h[d.n] = d.old;
		}
	}
	,error: function(e,rethrow) {
		if(rethrow == null) {
			rethrow = false;
		}
		if(rethrow) {
			throw haxe_Exception.thrown(e);
		} else {
			throw haxe_Exception.thrown(e);
		}
	}
	,rethrow: function(e) {
		throw haxe_Exception.thrown(e);
	}
	,resolve: function(id) {
		var l = this.locals.h[id];
		if(l != null) {
			return l.r;
		}
		var v = this.variables.h[id];
		if(v == null && !Object.prototype.hasOwnProperty.call(this.variables.h,id)) {
			var e = hscript_Error.EUnknownVariable(id);
			throw haxe_Exception.thrown(e);
		}
		return v;
	}
	,expr: function(e) {
		var _gthis = this;
		switch(e._hx_index) {
		case 0:
			var c = e.c;
			switch(c._hx_index) {
			case 0:
				var v = c.v;
				return v;
			case 1:
				var f = c.f;
				return f;
			case 2:
				var s = c.s;
				return s;
			}
			break;
		case 1:
			var id = e.v;
			return this.resolve(id);
		case 2:
			var _g = e.t;
			var n = e.n;
			var e1 = e.e;
			this.declared.push({ n : n, old : this.locals.h[n]});
			var this1 = this.locals;
			var value = e1 == null ? null : this.expr(e1);
			this1.h[n] = { r : value};
			return null;
		case 3:
			var e1 = e.e;
			return this.expr(e1);
		case 4:
			var exprs = e.e;
			var old = this.declared.length;
			var v = null;
			var _g = 0;
			while(_g < exprs.length) {
				var e1 = exprs[_g];
				++_g;
				v = this.expr(e1);
			}
			this.restore(old);
			return v;
		case 5:
			var e1 = e.e;
			var f = e.f;
			return this.get(this.expr(e1),f);
		case 6:
			var op = e.op;
			var e1 = e.e1;
			var e2 = e.e2;
			var fop = this.binops.h[op];
			if(fop == null) {
				var e3 = hscript_Error.EInvalidOp(op);
				throw haxe_Exception.thrown(e3);
			}
			return fop(e1,e2);
		case 7:
			var op = e.op;
			var prefix = e.prefix;
			var e1 = e.e;
			switch(op) {
			case "!":
				return this.expr(e1) != true;
			case "++":
				return this.increment(e1,prefix,1);
			case "-":
				return -this.expr(e1);
			case "--":
				return this.increment(e1,prefix,-1);
			case "~":
				return ~this.expr(e1);
			default:
				var e1 = hscript_Error.EInvalidOp(op);
				throw haxe_Exception.thrown(e1);
			}
			break;
		case 8:
			var e1 = e.e;
			var params = e.params;
			var args = [];
			var _g = 0;
			while(_g < params.length) {
				var p = params[_g];
				++_g;
				args.push(this.expr(p));
			}
			if(e1._hx_index == 5) {
				var e2 = e1.e;
				var f = e1.f;
				var obj = this.expr(e2);
				if(obj == null) {
					var e2 = hscript_Error.EInvalidAccess(f);
					throw haxe_Exception.thrown(e2);
				}
				return this.fcall(obj,f,args);
			} else {
				return this.call(null,this.expr(e1),args);
			}
			break;
		case 9:
			var econd = e.cond;
			var e1 = e.e1;
			var e2 = e.e2;
			if(this.expr(econd) == true) {
				return this.expr(e1);
			} else if(e2 == null) {
				return null;
			} else {
				return this.expr(e2);
			}
			break;
		case 10:
			var econd = e.cond;
			var e1 = e.e;
			this.whileLoop(econd,e1);
			return null;
		case 11:
			var v = e.v;
			var it = e.it;
			var e1 = e.e;
			this.forLoop(v,it,e1);
			return null;
		case 12:
			throw haxe_Exception.thrown(hscript__$Interp_Stop.SBreak);
		case 13:
			throw haxe_Exception.thrown(hscript__$Interp_Stop.SContinue);
		case 14:
			var _g = e.ret;
			var params = e.args;
			var fexpr = e.e;
			var name = e.name;
			var capturedLocals = this.duplicate(this.locals);
			var me = this;
			var hasOpt = false;
			var minParams = 0;
			var _g = 0;
			while(_g < params.length) {
				var p = params[_g];
				++_g;
				if(p.opt) {
					hasOpt = true;
				} else {
					minParams += 1;
				}
			}
			var f = function(args) {
				if((args == null ? 0 : args.length) != params.length) {
					if(args.length < minParams) {
						var str = "Invalid number of parameters. Got " + args.length + ", required " + minParams;
						if(name != null) {
							str += " for function '" + name + "'";
						}
						var e = hscript_Error.ECustom(str);
						throw haxe_Exception.thrown(e);
					}
					var args2 = [];
					var extraParams = args.length - minParams;
					var pos = 0;
					var _g = 0;
					while(_g < params.length) {
						var p = params[_g];
						++_g;
						if(p.opt) {
							if(extraParams > 0) {
								args2.push(args[pos++]);
								--extraParams;
							} else {
								args2.push(null);
							}
						} else {
							args2.push(args[pos++]);
						}
					}
					args = args2;
				}
				var old = me.locals;
				var depth = me.depth;
				me.depth++;
				me.locals = me.duplicate(capturedLocals);
				var _g = 0;
				var _g1 = params.length;
				while(_g < _g1) {
					var i = _g++;
					me.locals.h[params[i].name] = { r : args[i]};
				}
				var r = null;
				if(_gthis.inTry) {
					try {
						r = me.exprReturn(fexpr);
					} catch( _g ) {
						haxe_NativeStackTrace.lastError = _g;
						var e = haxe_Exception.caught(_g).unwrap();
						me.locals = old;
						me.depth = depth;
						throw haxe_Exception.thrown(e);
					}
				} else {
					r = me.exprReturn(fexpr);
				}
				me.locals = old;
				me.depth = depth;
				return r;
			};
			var f1 = Reflect.makeVarArgs(f);
			if(name != null) {
				if(this.depth == 0) {
					this.variables.h[name] = f1;
				} else {
					this.declared.push({ n : name, old : this.locals.h[name]});
					var ref = { r : f1};
					this.locals.h[name] = ref;
					capturedLocals.h[name] = ref;
				}
			}
			return f1;
		case 15:
			var e1 = e.e;
			this.returnValue = e1 == null ? null : this.expr(e1);
			throw haxe_Exception.thrown(hscript__$Interp_Stop.SReturn);
		case 16:
			var e1 = e.e;
			var index = e.index;
			var arr = this.expr(e1);
			var index1 = this.expr(index);
			if(js_Boot.__implements(arr,haxe_IMap)) {
				return (js_Boot.__cast(arr , haxe_IMap)).get(index1);
			} else {
				return arr[index1];
			}
			break;
		case 17:
			var arr = e.e;
			var tmp;
			if(arr.length > 0) {
				var _g = arr[0];
				if(_g._hx_index == 6) {
					var _g1 = _g.e1;
					var _g1 = _g.e2;
					tmp = _g.op == "=>";
				} else {
					tmp = false;
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				var isAllString = true;
				var isAllInt = true;
				var isAllObject = true;
				var isAllEnum = true;
				var keys = [];
				var values = [];
				var _g = 0;
				while(_g < arr.length) {
					var e1 = arr[_g];
					++_g;
					if(e1._hx_index == 6) {
						if(e1.op == "=>") {
							var eKey = e1.e1;
							var eValue = e1.e2;
							var key = this.expr(eKey);
							var value = this.expr(eValue);
							isAllString = isAllString && typeof(key) == "string";
							isAllInt = isAllInt && (typeof(key) == "number" && ((key | 0) === key));
							isAllObject = isAllObject && Reflect.isObject(key);
							isAllEnum = isAllEnum && Reflect.isEnumValue(key);
							keys.push(key);
							values.push(value);
						} else {
							throw haxe_Exception.thrown("=> expected");
						}
					} else {
						throw haxe_Exception.thrown("=> expected");
					}
				}
				var map;
				if(isAllInt) {
					map = new haxe_ds_IntMap();
				} else if(isAllString) {
					map = new haxe_ds_StringMap();
				} else if(isAllEnum) {
					map = new haxe_ds_EnumValueMap();
				} else if(isAllObject) {
					map = new haxe_ds_ObjectMap();
				} else {
					throw haxe_Exception.thrown("Inconsistent key types");
				}
				var _g = 0;
				var _g1 = keys.length;
				while(_g < _g1) {
					var n = _g++;
					(js_Boot.__cast(map , haxe_IMap)).set(keys[n],values[n]);
				}
				return map;
			} else {
				var a = [];
				var _g = 0;
				while(_g < arr.length) {
					var e1 = arr[_g];
					++_g;
					a.push(this.expr(e1));
				}
				return a;
			}
			break;
		case 18:
			var cl = e.cl;
			var params1 = e.params;
			var a = [];
			var _g = 0;
			while(_g < params1.length) {
				var e1 = params1[_g];
				++_g;
				a.push(this.expr(e1));
			}
			return this.cnew(cl,a);
		case 19:
			var e1 = e.e;
			throw haxe_Exception.thrown(this.expr(e1));
		case 20:
			var _g = e.t;
			var e1 = e.e;
			var n = e.v;
			var ecatch = e.ecatch;
			var old = this.declared.length;
			var oldTry = this.inTry;
			try {
				this.inTry = true;
				var v = this.expr(e1);
				this.restore(old);
				this.inTry = oldTry;
				return v;
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var _g1 = haxe_Exception.caught(_g).unwrap();
				if(js_Boot.__instanceof(_g1,hscript__$Interp_Stop)) {
					var err = _g1;
					this.inTry = oldTry;
					throw haxe_Exception.thrown(err);
				} else {
					var err = _g1;
					this.restore(old);
					this.inTry = oldTry;
					this.declared.push({ n : n, old : this.locals.h[n]});
					this.locals.h[n] = { r : err};
					var v = this.expr(ecatch);
					this.restore(old);
					return v;
				}
			}
			break;
		case 21:
			var fl = e.fl;
			var o = { };
			var _g = 0;
			while(_g < fl.length) {
				var f = fl[_g];
				++_g;
				this.set(o,f.name,this.expr(f.e));
			}
			return o;
		case 22:
			var econd = e.cond;
			var e1 = e.e1;
			var e2 = e.e2;
			if(this.expr(econd) == true) {
				return this.expr(e1);
			} else {
				return this.expr(e2);
			}
			break;
		case 23:
			var e1 = e.e;
			var cases = e.cases;
			var def = e.defaultExpr;
			var val = this.expr(e1);
			var match = false;
			var _g = 0;
			while(_g < cases.length) {
				var c = cases[_g];
				++_g;
				var _g1 = 0;
				var _g2 = c.values;
				while(_g1 < _g2.length) {
					var v = _g2[_g1];
					++_g1;
					if(this.expr(v) == val) {
						match = true;
						break;
					}
				}
				if(match) {
					val = this.expr(c.expr);
					break;
				}
			}
			if(!match) {
				val = def == null ? null : this.expr(def);
			}
			return val;
		case 24:
			var econd = e.cond;
			var e1 = e.e;
			this.doWhileLoop(econd,e1);
			return null;
		case 25:
			var _g = e.name;
			var _g = e.args;
			var e1 = e.e;
			return this.expr(e1);
		case 26:
			var _g = e.t;
			var e1 = e.e;
			return this.expr(e1);
		}
	}
	,doWhileLoop: function(econd,e) {
		var old = this.declared.length;
		_hx_loop1: while(true) {
			try {
				this.expr(e);
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var _g1 = haxe_Exception.caught(_g).unwrap();
				if(js_Boot.__instanceof(_g1,hscript__$Interp_Stop)) {
					var err = _g1;
					switch(err._hx_index) {
					case 0:
						break _hx_loop1;
					case 1:
						break;
					case 2:
						throw haxe_Exception.thrown(err);
					}
				} else {
					throw _g;
				}
			}
			if(!(this.expr(econd) == true)) {
				break;
			}
		}
		this.restore(old);
	}
	,whileLoop: function(econd,e) {
		var old = this.declared.length;
		_hx_loop1: while(this.expr(econd) == true) try {
			this.expr(e);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(js_Boot.__instanceof(_g1,hscript__$Interp_Stop)) {
				var err = _g1;
				switch(err._hx_index) {
				case 0:
					break _hx_loop1;
				case 1:
					break;
				case 2:
					throw haxe_Exception.thrown(err);
				}
			} else {
				throw _g;
			}
		}
		this.restore(old);
	}
	,makeIterator: function(v) {
		try {
			v = $getIterator(v);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
		}
		if(v.hasNext == null || v.next == null) {
			var e = hscript_Error.EInvalidIterator(v);
			throw haxe_Exception.thrown(e);
		}
		return v;
	}
	,forLoop: function(n,it,e) {
		var old = this.declared.length;
		this.declared.push({ n : n, old : this.locals.h[n]});
		var it1 = this.makeIterator(this.expr(it));
		_hx_loop1: while(it1.hasNext()) {
			var this1 = this.locals;
			var value = { r : it1.next()};
			this1.h[n] = value;
			try {
				this.expr(e);
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var _g1 = haxe_Exception.caught(_g).unwrap();
				if(js_Boot.__instanceof(_g1,hscript__$Interp_Stop)) {
					var err = _g1;
					switch(err._hx_index) {
					case 0:
						break _hx_loop1;
					case 1:
						break;
					case 2:
						throw haxe_Exception.thrown(err);
					}
				} else {
					throw _g;
				}
			}
		}
		this.restore(old);
	}
	,isMap: function(o) {
		return js_Boot.__implements(o,haxe_IMap);
	}
	,getMapValue: function(map,key) {
		return (js_Boot.__cast(map , haxe_IMap)).get(key);
	}
	,setMapValue: function(map,key,value) {
		(js_Boot.__cast(map , haxe_IMap)).set(key,value);
	}
	,get: function(o,f) {
		if(o == null) {
			var e = hscript_Error.EInvalidAccess(f);
			throw haxe_Exception.thrown(e);
		}
		return Reflect.getProperty(o,f);
	}
	,set: function(o,f,v) {
		if(o == null) {
			var e = hscript_Error.EInvalidAccess(f);
			throw haxe_Exception.thrown(e);
		}
		Reflect.setProperty(o,f,v);
		return v;
	}
	,fcall: function(o,f,args) {
		return this.call(o,this.get(o,f),args);
	}
	,call: function(o,f,args) {
		return f.apply(o,args);
	}
	,cnew: function(cl,args) {
		var c = $hxClasses[cl];
		if(c == null) {
			c = this.resolve(cl);
		}
		return Type.createInstance(c,args);
	}
	,__class__: hscript_Interp
};
var hscript_Token = $hxEnums["hscript.Token"] = { __ename__:true,__constructs__:null
	,TEof: {_hx_name:"TEof",_hx_index:0,__enum__:"hscript.Token",toString:$estr}
	,TConst: ($_=function(c) { return {_hx_index:1,c:c,__enum__:"hscript.Token",toString:$estr}; },$_._hx_name="TConst",$_.__params__ = ["c"],$_)
	,TId: ($_=function(s) { return {_hx_index:2,s:s,__enum__:"hscript.Token",toString:$estr}; },$_._hx_name="TId",$_.__params__ = ["s"],$_)
	,TOp: ($_=function(s) { return {_hx_index:3,s:s,__enum__:"hscript.Token",toString:$estr}; },$_._hx_name="TOp",$_.__params__ = ["s"],$_)
	,TPOpen: {_hx_name:"TPOpen",_hx_index:4,__enum__:"hscript.Token",toString:$estr}
	,TPClose: {_hx_name:"TPClose",_hx_index:5,__enum__:"hscript.Token",toString:$estr}
	,TBrOpen: {_hx_name:"TBrOpen",_hx_index:6,__enum__:"hscript.Token",toString:$estr}
	,TBrClose: {_hx_name:"TBrClose",_hx_index:7,__enum__:"hscript.Token",toString:$estr}
	,TDot: {_hx_name:"TDot",_hx_index:8,__enum__:"hscript.Token",toString:$estr}
	,TComma: {_hx_name:"TComma",_hx_index:9,__enum__:"hscript.Token",toString:$estr}
	,TSemicolon: {_hx_name:"TSemicolon",_hx_index:10,__enum__:"hscript.Token",toString:$estr}
	,TBkOpen: {_hx_name:"TBkOpen",_hx_index:11,__enum__:"hscript.Token",toString:$estr}
	,TBkClose: {_hx_name:"TBkClose",_hx_index:12,__enum__:"hscript.Token",toString:$estr}
	,TQuestion: {_hx_name:"TQuestion",_hx_index:13,__enum__:"hscript.Token",toString:$estr}
	,TDoubleDot: {_hx_name:"TDoubleDot",_hx_index:14,__enum__:"hscript.Token",toString:$estr}
	,TMeta: ($_=function(s) { return {_hx_index:15,s:s,__enum__:"hscript.Token",toString:$estr}; },$_._hx_name="TMeta",$_.__params__ = ["s"],$_)
	,TPrepro: ($_=function(s) { return {_hx_index:16,s:s,__enum__:"hscript.Token",toString:$estr}; },$_._hx_name="TPrepro",$_.__params__ = ["s"],$_)
};
hscript_Token.__constructs__ = [hscript_Token.TEof,hscript_Token.TConst,hscript_Token.TId,hscript_Token.TOp,hscript_Token.TPOpen,hscript_Token.TPClose,hscript_Token.TBrOpen,hscript_Token.TBrClose,hscript_Token.TDot,hscript_Token.TComma,hscript_Token.TSemicolon,hscript_Token.TBkOpen,hscript_Token.TBkClose,hscript_Token.TQuestion,hscript_Token.TDoubleDot,hscript_Token.TMeta,hscript_Token.TPrepro];
var hscript_Parser = function() {
	this.uid = 0;
	this.preprocesorValues = new haxe_ds_StringMap();
	this.line = 1;
	this.opChars = "+*/-=!><&|^%~";
	this.identChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_";
	var priorities = [["%"],["*","/"],["+","-"],["<<",">>",">>>"],["|","&","^"],["==","!=",">","<",">=","<="],["..."],["&&"],["||"],["=","+=","-=","*=","/=","%=","<<=",">>=",">>>=","|=","&=","^=","=>"]];
	this.opPriority = new haxe_ds_StringMap();
	this.opRightAssoc = new haxe_ds_StringMap();
	this.unops = new haxe_ds_StringMap();
	var _g = 0;
	var _g1 = priorities.length;
	while(_g < _g1) {
		var i = _g++;
		var _g2 = 0;
		var _g3 = priorities[i];
		while(_g2 < _g3.length) {
			var x = _g3[_g2];
			++_g2;
			this.opPriority.h[x] = i;
			if(i == 9) {
				this.opRightAssoc.h[x] = true;
			}
		}
	}
	var x = "!";
	this.unops.h[x] = x == "++" || x == "--";
	var x = "++";
	this.unops.h[x] = x == "++" || x == "--";
	var x = "--";
	this.unops.h[x] = x == "++" || x == "--";
	var x = "-";
	this.unops.h[x] = x == "++" || x == "--";
	var x = "~";
	this.unops.h[x] = x == "++" || x == "--";
};
$hxClasses["hscript.Parser"] = hscript_Parser;
hscript_Parser.__name__ = "hscript.Parser";
hscript_Parser.prototype = {
	error: function(err,pmin,pmax) {
		if(!this.resumeErrors) {
			throw haxe_Exception.thrown(err);
		}
	}
	,invalidChar: function(c) {
		if(!this.resumeErrors) {
			throw haxe_Exception.thrown(hscript_Error.EInvalidChar(c));
		}
	}
	,initParser: function(origin) {
		this.preprocStack = [];
		this.tokens = new haxe_ds_GenericStack();
		this.char = -1;
		this.ops = [];
		this.idents = [];
		this.uid = 0;
		var _g = 0;
		var _g1 = this.opChars.length;
		while(_g < _g1) {
			var i = _g++;
			this.ops[HxOverrides.cca(this.opChars,i)] = true;
		}
		var _g = 0;
		var _g1 = this.identChars.length;
		while(_g < _g1) {
			var i = _g++;
			this.idents[HxOverrides.cca(this.identChars,i)] = true;
		}
	}
	,parseString: function(s,origin) {
		if(origin == null) {
			origin = "hscript";
		}
		this.initParser(origin);
		this.input = s;
		this.readPos = 0;
		var a = [];
		while(true) {
			var tk = this.token();
			if(tk == hscript_Token.TEof) {
				break;
			}
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			this.parseFullExpr(a);
		}
		if(a.length == 1) {
			return a[0];
		} else {
			return hscript_Expr.EBlock(a);
		}
	}
	,unexpected: function(tk) {
		var err = hscript_Error.EUnexpected(this.tokenString(tk));
		if(!this.resumeErrors) {
			throw haxe_Exception.thrown(err);
		}
		return null;
	}
	,push: function(tk) {
		var _this = this.tokens;
		_this.head = new haxe_ds_GenericCell(tk,_this.head);
	}
	,ensure: function(tk) {
		var t = this.token();
		if(t != tk) {
			this.unexpected(t);
		}
	}
	,ensureToken: function(tk) {
		var t = this.token();
		if(!Type.enumEq(t,tk)) {
			this.unexpected(t);
		}
	}
	,maybe: function(tk) {
		var t = this.token();
		if(Type.enumEq(t,tk)) {
			return true;
		}
		var _this = this.tokens;
		_this.head = new haxe_ds_GenericCell(t,_this.head);
		return false;
	}
	,getIdent: function() {
		var tk = this.token();
		if(tk == null) {
			this.unexpected(tk);
			return null;
		} else if(tk._hx_index == 2) {
			var id = tk.s;
			return id;
		} else {
			this.unexpected(tk);
			return null;
		}
	}
	,expr: function(e) {
		return e;
	}
	,pmin: function(e) {
		return 0;
	}
	,pmax: function(e) {
		return 0;
	}
	,mk: function(e,pmin,pmax) {
		return e;
	}
	,isBlock: function(e) {
		if(e == null) {
			return false;
		}
		switch(e._hx_index) {
		case 2:
			var _g = e.n;
			var t = e.t;
			var e1 = e.e;
			if(e1 != null) {
				return this.isBlock(e1);
			} else if(t != null) {
				if(t == null) {
					return false;
				} else if(t._hx_index == 2) {
					var _g = t.fields;
					return true;
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 4:
			var _g = e.e;
			return true;
		case 6:
			var _g = e.op;
			var _g = e.e1;
			var e1 = e.e2;
			return this.isBlock(e1);
		case 7:
			var _g = e.op;
			var prefix = e.prefix;
			var e1 = e.e;
			if(!prefix) {
				return this.isBlock(e1);
			} else {
				return false;
			}
			break;
		case 9:
			var _g = e.cond;
			var e1 = e.e1;
			var e2 = e.e2;
			if(e2 != null) {
				return this.isBlock(e2);
			} else {
				return this.isBlock(e1);
			}
			break;
		case 10:
			var _g = e.cond;
			var e1 = e.e;
			return this.isBlock(e1);
		case 11:
			var _g = e.v;
			var _g = e.it;
			var e1 = e.e;
			return this.isBlock(e1);
		case 14:
			var _g = e.args;
			var _g = e.name;
			var _g = e.ret;
			var e1 = e.e;
			return this.isBlock(e1);
		case 15:
			var e1 = e.e;
			if(e1 != null) {
				return this.isBlock(e1);
			} else {
				return false;
			}
			break;
		case 20:
			var _g = e.e;
			var _g = e.v;
			var _g = e.t;
			var e1 = e.ecatch;
			return this.isBlock(e1);
		case 21:
			var _g = e.fl;
			return true;
		case 23:
			var _g = e.e;
			var _g = e.cases;
			var _g = e.defaultExpr;
			return true;
		case 24:
			var _g = e.cond;
			var e1 = e.e;
			return this.isBlock(e1);
		case 25:
			var _g = e.name;
			var _g = e.args;
			var e1 = e.e;
			return this.isBlock(e1);
		default:
			return false;
		}
	}
	,parseFullExpr: function(exprs) {
		var e = this.parseExpr();
		exprs.push(e);
		var tk = this.token();
		while(true) {
			var tmp;
			if(tk == hscript_Token.TComma && e != null) {
				if(e._hx_index == 2) {
					var _g = e.n;
					var _g1 = e.t;
					var _g2 = e.e;
					tmp = true;
				} else {
					tmp = false;
				}
			} else {
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			e = this.parseStructure("var");
			exprs.push(e);
			tk = this.token();
		}
		if(tk != hscript_Token.TSemicolon && tk != hscript_Token.TEof) {
			if(this.isBlock(e)) {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
			} else {
				this.unexpected(tk);
			}
		}
	}
	,parseObject: function(p1) {
		var fl = [];
		_hx_loop1: while(true) {
			var tk = this.token();
			var id = null;
			if(tk == null) {
				this.unexpected(tk);
				break;
			} else {
				switch(tk._hx_index) {
				case 1:
					var c = tk.c;
					if(!this.allowJSON) {
						this.unexpected(tk);
					}
					if(c._hx_index == 2) {
						var s = c.s;
						id = s;
					} else {
						this.unexpected(tk);
					}
					break;
				case 2:
					var i = tk.s;
					id = i;
					break;
				case 7:
					break _hx_loop1;
				default:
					this.unexpected(tk);
					break _hx_loop1;
				}
			}
			var t = this.token();
			if(t != hscript_Token.TDoubleDot) {
				this.unexpected(t);
			}
			fl.push({ name : id, e : this.parseExpr()});
			tk = this.token();
			if(tk == null) {
				this.unexpected(tk);
			} else {
				switch(tk._hx_index) {
				case 7:
					break _hx_loop1;
				case 9:
					break;
				default:
					this.unexpected(tk);
				}
			}
		}
		return this.parseExprNext(hscript_Expr.EObject(fl));
	}
	,parseExpr: function() {
		var tk = this.token();
		if(tk == null) {
			return this.unexpected(tk);
		} else {
			switch(tk._hx_index) {
			case 1:
				var c = tk.c;
				return this.parseExprNext(hscript_Expr.EConst(c));
			case 2:
				var id = tk.s;
				var e = this.parseStructure(id);
				if(e == null) {
					e = hscript_Expr.EIdent(id);
				}
				return this.parseExprNext(e);
			case 3:
				var op = tk.s;
				if(Object.prototype.hasOwnProperty.call(this.unops.h,op)) {
					var start = 0;
					var e = this.parseExpr();
					if(op == "-" && e != null) {
						if(e._hx_index == 0) {
							var _g = e.c;
							switch(_g._hx_index) {
							case 0:
								var i = _g.v;
								return hscript_Expr.EConst(hscript_Const.CInt(-i));
							case 1:
								var f = _g.f;
								return hscript_Expr.EConst(hscript_Const.CFloat(-f));
							default:
							}
						}
					}
					return this.makeUnop(op,e);
				}
				return this.unexpected(tk);
			case 4:
				var e = this.parseExpr();
				tk = this.token();
				if(tk != null) {
					switch(tk._hx_index) {
					case 5:
						return this.parseExprNext(hscript_Expr.EParent(e));
					case 9:
						if(e._hx_index == 1) {
							var v = e.v;
							return this.parseLambda([{ name : v}],0);
						}
						break;
					case 14:
						var t = this.parseType();
						tk = this.token();
						if(tk != null) {
							switch(tk._hx_index) {
							case 5:
								return this.parseExprNext(hscript_Expr.ECheckType(e,t));
							case 9:
								if(e._hx_index == 1) {
									var v = e.v;
									return this.parseLambda([{ name : v, t : t}],0);
								}
								break;
							default:
							}
						}
						break;
					default:
					}
				}
				return this.unexpected(tk);
			case 6:
				tk = this.token();
				if(tk == null) {
					var _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(tk,_this.head);
				} else {
					switch(tk._hx_index) {
					case 1:
						var c = tk.c;
						if(this.allowJSON) {
							if(c._hx_index == 2) {
								var _g = c.s;
								var tk2 = this.token();
								var _this = this.tokens;
								_this.head = new haxe_ds_GenericCell(tk2,_this.head);
								var _this = this.tokens;
								_this.head = new haxe_ds_GenericCell(tk,_this.head);
								if(tk2 != null) {
									if(tk2._hx_index == 14) {
										return this.parseExprNext(this.parseObject(0));
									}
								}
							} else {
								var _this = this.tokens;
								_this.head = new haxe_ds_GenericCell(tk,_this.head);
							}
						} else {
							var _this = this.tokens;
							_this.head = new haxe_ds_GenericCell(tk,_this.head);
						}
						break;
					case 2:
						var _g = tk.s;
						var tk2 = this.token();
						var _this = this.tokens;
						_this.head = new haxe_ds_GenericCell(tk2,_this.head);
						var _this = this.tokens;
						_this.head = new haxe_ds_GenericCell(tk,_this.head);
						if(tk2 != null) {
							if(tk2._hx_index == 14) {
								return this.parseExprNext(this.parseObject(0));
							}
						}
						break;
					case 7:
						return this.parseExprNext(hscript_Expr.EObject([]));
					default:
						var _this = this.tokens;
						_this.head = new haxe_ds_GenericCell(tk,_this.head);
					}
				}
				var a = [];
				while(true) {
					this.parseFullExpr(a);
					tk = this.token();
					if(tk == hscript_Token.TBrClose || this.resumeErrors && tk == hscript_Token.TEof) {
						break;
					}
					var _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(tk,_this.head);
				}
				return hscript_Expr.EBlock(a);
			case 11:
				var a = [];
				tk = this.token();
				while(tk != hscript_Token.TBkClose && (!this.resumeErrors || tk != hscript_Token.TEof)) {
					var _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(tk,_this.head);
					a.push(this.parseExpr());
					tk = this.token();
					if(tk == hscript_Token.TComma) {
						tk = this.token();
					}
				}
				if(a.length == 1 && a[0] != null) {
					var _g = a[0];
					switch(_g._hx_index) {
					case 10:
						var _g1 = _g.cond;
						var _g1 = _g.e;
						var tmp = "__a_" + this.uid++;
						var e = hscript_Expr.EBlock([hscript_Expr.EVar(tmp,null,hscript_Expr.EArrayDecl([])),this.mapCompr(tmp,a[0]),hscript_Expr.EIdent(tmp)]);
						return this.parseExprNext(e);
					case 11:
						var _g1 = _g.v;
						var _g1 = _g.it;
						var _g1 = _g.e;
						var tmp = "__a_" + this.uid++;
						var e = hscript_Expr.EBlock([hscript_Expr.EVar(tmp,null,hscript_Expr.EArrayDecl([])),this.mapCompr(tmp,a[0]),hscript_Expr.EIdent(tmp)]);
						return this.parseExprNext(e);
					case 24:
						var _g1 = _g.cond;
						var _g1 = _g.e;
						var tmp = "__a_" + this.uid++;
						var e = hscript_Expr.EBlock([hscript_Expr.EVar(tmp,null,hscript_Expr.EArrayDecl([])),this.mapCompr(tmp,a[0]),hscript_Expr.EIdent(tmp)]);
						return this.parseExprNext(e);
					default:
					}
				}
				return this.parseExprNext(hscript_Expr.EArrayDecl(a));
			case 15:
				var id = tk.s;
				if(this.allowMetadata) {
					var args = this.parseMetaArgs();
					return hscript_Expr.EMeta(id,args,this.parseExpr());
				} else {
					return this.unexpected(tk);
				}
				break;
			default:
				return this.unexpected(tk);
			}
		}
	}
	,parseLambda: function(args,pmin) {
		_hx_loop1: while(true) {
			var id = this.getIdent();
			var t = this.maybe(hscript_Token.TDoubleDot) ? this.parseType() : null;
			args.push({ name : id, t : t});
			var tk = this.token();
			if(tk == null) {
				this.unexpected(tk);
				break;
			} else {
				switch(tk._hx_index) {
				case 5:
					break _hx_loop1;
				case 9:
					break;
				default:
					this.unexpected(tk);
					break _hx_loop1;
				}
			}
		}
		var t = this.token();
		if(!Type.enumEq(t,hscript_Token.TOp("->"))) {
			this.unexpected(t);
		}
		var eret = this.parseExpr();
		return hscript_Expr.EFunction(args,hscript_Expr.EReturn(eret));
	}
	,parseMetaArgs: function() {
		var tk = this.token();
		if(tk != hscript_Token.TPOpen) {
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			return null;
		}
		var args = [];
		tk = this.token();
		if(tk != hscript_Token.TPClose) {
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			_hx_loop1: while(true) {
				args.push(this.parseExpr());
				var _g = this.token();
				if(_g == null) {
					var tk = _g;
					this.unexpected(tk);
				} else {
					switch(_g._hx_index) {
					case 5:
						break _hx_loop1;
					case 9:
						break;
					default:
						var tk1 = _g;
						this.unexpected(tk1);
					}
				}
			}
		}
		return args;
	}
	,mapCompr: function(tmp,e) {
		if(e == null) {
			return null;
		}
		var edef;
		switch(e._hx_index) {
		case 3:
			var e2 = e.e;
			edef = hscript_Expr.EParent(this.mapCompr(tmp,e2));
			break;
		case 4:
			var _g = e.e;
			if(_g.length == 1) {
				var e1 = _g[0];
				edef = hscript_Expr.EBlock([this.mapCompr(tmp,e1)]);
			} else {
				edef = hscript_Expr.ECall(hscript_Expr.EField(hscript_Expr.EIdent(tmp),"push"),[e]);
			}
			break;
		case 9:
			var cond = e.cond;
			var e1 = e.e1;
			var e2 = e.e2;
			edef = e2 == null ? hscript_Expr.EIf(cond,this.mapCompr(tmp,e1),null) : hscript_Expr.ECall(hscript_Expr.EField(hscript_Expr.EIdent(tmp),"push"),[e]);
			break;
		case 10:
			var cond = e.cond;
			var e2 = e.e;
			edef = hscript_Expr.EWhile(cond,this.mapCompr(tmp,e2));
			break;
		case 11:
			var v = e.v;
			var it = e.it;
			var e2 = e.e;
			edef = hscript_Expr.EFor(v,it,this.mapCompr(tmp,e2));
			break;
		case 24:
			var cond = e.cond;
			var e2 = e.e;
			edef = hscript_Expr.EDoWhile(cond,this.mapCompr(tmp,e2));
			break;
		default:
			edef = hscript_Expr.ECall(hscript_Expr.EField(hscript_Expr.EIdent(tmp),"push"),[e]);
		}
		return edef;
	}
	,makeUnop: function(op,e) {
		if(e == null && this.resumeErrors) {
			return null;
		}
		switch(e._hx_index) {
		case 6:
			var bop = e.op;
			var e1 = e.e1;
			var e2 = e.e2;
			return hscript_Expr.EBinop(bop,this.makeUnop(op,e1),e2);
		case 22:
			var e1 = e.cond;
			var e2 = e.e1;
			var e3 = e.e2;
			return hscript_Expr.ETernary(this.makeUnop(op,e1),e2,e3);
		default:
			return hscript_Expr.EUnop(op,true,e);
		}
	}
	,makeBinop: function(op,e1,e) {
		if(e == null && this.resumeErrors) {
			return hscript_Expr.EBinop(op,e1,e);
		}
		switch(e._hx_index) {
		case 6:
			var op2 = e.op;
			var e2 = e.e1;
			var e3 = e.e2;
			if(this.opPriority.h[op] <= this.opPriority.h[op2] && !Object.prototype.hasOwnProperty.call(this.opRightAssoc.h,op)) {
				return hscript_Expr.EBinop(op2,this.makeBinop(op,e1,e2),e3);
			} else {
				return hscript_Expr.EBinop(op,e1,e);
			}
			break;
		case 22:
			var e2 = e.cond;
			var e3 = e.e1;
			var e4 = e.e2;
			if(Object.prototype.hasOwnProperty.call(this.opRightAssoc.h,op)) {
				return hscript_Expr.EBinop(op,e1,e);
			} else {
				return hscript_Expr.ETernary(this.makeBinop(op,e1,e2),e3,e4);
			}
			break;
		default:
			return hscript_Expr.EBinop(op,e1,e);
		}
	}
	,parseStructure: function(id) {
		switch(id) {
		case "break":
			return hscript_Expr.EBreak;
		case "continue":
			return hscript_Expr.EContinue;
		case "do":
			var e = this.parseExpr();
			var tk = this.token();
			if(tk == null) {
				this.unexpected(tk);
			} else if(tk._hx_index == 2) {
				if(tk.s != "while") {
					this.unexpected(tk);
				}
			} else {
				this.unexpected(tk);
			}
			var econd = this.parseExpr();
			return hscript_Expr.EDoWhile(econd,e);
		case "else":
			return this.unexpected(hscript_Token.TId(id));
		case "for":
			var t = this.token();
			if(t != hscript_Token.TPOpen) {
				this.unexpected(t);
			}
			var vname = this.getIdent();
			var t = this.token();
			if(!Type.enumEq(t,hscript_Token.TId("in"))) {
				this.unexpected(t);
			}
			var eiter = this.parseExpr();
			var t = this.token();
			if(t != hscript_Token.TPClose) {
				this.unexpected(t);
			}
			var e = this.parseExpr();
			return hscript_Expr.EFor(vname,eiter,e);
		case "function":
			var tk = this.token();
			var name = null;
			if(tk == null) {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
			} else if(tk._hx_index == 2) {
				var id = tk.s;
				name = id;
			} else {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
			}
			var inf = this.parseFunctionDecl();
			return hscript_Expr.EFunction(inf.args,inf.body,name,inf.ret);
		case "if":
			var t = this.token();
			if(t != hscript_Token.TPOpen) {
				this.unexpected(t);
			}
			var cond = this.parseExpr();
			var t = this.token();
			if(t != hscript_Token.TPClose) {
				this.unexpected(t);
			}
			var e1 = this.parseExpr();
			var e2 = null;
			var semic = false;
			var tk = this.token();
			if(tk == hscript_Token.TSemicolon) {
				semic = true;
				tk = this.token();
			}
			if(Type.enumEq(tk,hscript_Token.TId("else"))) {
				e2 = this.parseExpr();
			} else {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
				if(semic) {
					var _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(hscript_Token.TSemicolon,_this.head);
				}
			}
			return hscript_Expr.EIf(cond,e1,e2);
		case "inline":
			if(!this.maybe(hscript_Token.TId("function"))) {
				this.unexpected(hscript_Token.TId("inline"));
			}
			return this.parseStructure("function");
		case "new":
			var a = [];
			a.push(this.getIdent());
			_hx_loop1: while(true) {
				var tk = this.token();
				if(tk == null) {
					this.unexpected(tk);
					break;
				} else {
					switch(tk._hx_index) {
					case 4:
						break _hx_loop1;
					case 8:
						a.push(this.getIdent());
						break;
					default:
						this.unexpected(tk);
						break _hx_loop1;
					}
				}
			}
			var args = this.parseExprList(hscript_Token.TPClose);
			return hscript_Expr.ENew(a.join("."),args);
		case "return":
			var tk = this.token();
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			var e = tk == hscript_Token.TSemicolon ? null : this.parseExpr();
			return hscript_Expr.EReturn(e);
		case "switch":
			var e = this.parseExpr();
			var def = null;
			var cases = [];
			var t = this.token();
			if(t != hscript_Token.TBrOpen) {
				this.unexpected(t);
			}
			_hx_loop2: while(true) {
				var tk = this.token();
				if(tk == null) {
					this.unexpected(tk);
					break;
				} else {
					switch(tk._hx_index) {
					case 2:
						switch(tk.s) {
						case "case":
							var c = { values : [], expr : null};
							cases.push(c);
							_hx_loop3: while(true) {
								var e1 = this.parseExpr();
								c.values.push(e1);
								tk = this.token();
								if(tk == null) {
									this.unexpected(tk);
									break;
								} else {
									switch(tk._hx_index) {
									case 9:
										break;
									case 14:
										break _hx_loop3;
									default:
										this.unexpected(tk);
										break _hx_loop3;
									}
								}
							}
							var exprs = [];
							_hx_loop4: while(true) {
								tk = this.token();
								var _this = this.tokens;
								_this.head = new haxe_ds_GenericCell(tk,_this.head);
								if(tk == null) {
									this.parseFullExpr(exprs);
								} else {
									switch(tk._hx_index) {
									case 0:
										if(this.resumeErrors) {
											break _hx_loop4;
										} else {
											this.parseFullExpr(exprs);
										}
										break;
									case 2:
										switch(tk.s) {
										case "case":case "default":
											break _hx_loop4;
										default:
											this.parseFullExpr(exprs);
										}
										break;
									case 7:
										break _hx_loop4;
									default:
										this.parseFullExpr(exprs);
									}
								}
							}
							c.expr = exprs.length == 1 ? exprs[0] : exprs.length == 0 ? hscript_Expr.EBlock([]) : hscript_Expr.EBlock(exprs);
							break;
						case "default":
							if(def != null) {
								this.unexpected(tk);
							}
							var t = this.token();
							if(t != hscript_Token.TDoubleDot) {
								this.unexpected(t);
							}
							var exprs1 = [];
							_hx_loop5: while(true) {
								tk = this.token();
								var _this1 = this.tokens;
								_this1.head = new haxe_ds_GenericCell(tk,_this1.head);
								if(tk == null) {
									this.parseFullExpr(exprs1);
								} else {
									switch(tk._hx_index) {
									case 0:
										if(this.resumeErrors) {
											break _hx_loop5;
										} else {
											this.parseFullExpr(exprs1);
										}
										break;
									case 2:
										switch(tk.s) {
										case "case":case "default":
											break _hx_loop5;
										default:
											this.parseFullExpr(exprs1);
										}
										break;
									case 7:
										break _hx_loop5;
									default:
										this.parseFullExpr(exprs1);
									}
								}
							}
							def = exprs1.length == 1 ? exprs1[0] : exprs1.length == 0 ? hscript_Expr.EBlock([]) : hscript_Expr.EBlock(exprs1);
							break;
						default:
							this.unexpected(tk);
							break _hx_loop2;
						}
						break;
					case 7:
						break _hx_loop2;
					default:
						this.unexpected(tk);
						break _hx_loop2;
					}
				}
			}
			return hscript_Expr.ESwitch(e,cases,def);
		case "throw":
			var e = this.parseExpr();
			return hscript_Expr.EThrow(e);
		case "try":
			var e = this.parseExpr();
			var t = this.token();
			if(!Type.enumEq(t,hscript_Token.TId("catch"))) {
				this.unexpected(t);
			}
			var t = this.token();
			if(t != hscript_Token.TPOpen) {
				this.unexpected(t);
			}
			var vname = this.getIdent();
			var t = this.token();
			if(t != hscript_Token.TDoubleDot) {
				this.unexpected(t);
			}
			var t = null;
			if(this.allowTypes) {
				t = this.parseType();
			} else {
				var t1 = this.token();
				if(!Type.enumEq(t1,hscript_Token.TId("Dynamic"))) {
					this.unexpected(t1);
				}
			}
			var t1 = this.token();
			if(t1 != hscript_Token.TPClose) {
				this.unexpected(t1);
			}
			var ec = this.parseExpr();
			return hscript_Expr.ETry(e,vname,t,ec);
		case "var":
			var ident = this.getIdent();
			var tk = this.token();
			var t = null;
			if(tk == hscript_Token.TDoubleDot && this.allowTypes) {
				t = this.parseType();
				tk = this.token();
			}
			var e = null;
			if(Type.enumEq(tk,hscript_Token.TOp("="))) {
				e = this.parseExpr();
			} else {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
			}
			return hscript_Expr.EVar(ident,t,e);
		case "while":
			var econd = this.parseExpr();
			var e = this.parseExpr();
			return hscript_Expr.EWhile(econd,e);
		default:
			return null;
		}
	}
	,parseExprNext: function(e1) {
		var tk = this.token();
		if(tk == null) {
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			return e1;
		} else {
			switch(tk._hx_index) {
			case 3:
				var op = tk.s;
				if(op == "->") {
					switch(e1._hx_index) {
					case 1:
						var i = e1.v;
						var eret = this.parseExpr();
						return hscript_Expr.EFunction([{ name : i}],hscript_Expr.EReturn(eret));
					case 3:
						var _hx_tmp = e1.e;
						if(_hx_tmp._hx_index == 1) {
							var i = _hx_tmp.v;
							var eret = this.parseExpr();
							return hscript_Expr.EFunction([{ name : i}],hscript_Expr.EReturn(eret));
						}
						break;
					case 26:
						var _hx_tmp = e1.e;
						if(_hx_tmp._hx_index == 1) {
							var i = _hx_tmp.v;
							var t = e1.t;
							var eret = this.parseExpr();
							return hscript_Expr.EFunction([{ name : i, t : t}],hscript_Expr.EReturn(eret));
						}
						break;
					default:
					}
					this.unexpected(tk);
				}
				if(this.unops.h[op]) {
					var tmp;
					if(!this.isBlock(e1)) {
						if(e1._hx_index == 3) {
							var _g = e1.e;
							tmp = true;
						} else {
							tmp = false;
						}
					} else {
						tmp = true;
					}
					if(tmp) {
						var _this = this.tokens;
						_this.head = new haxe_ds_GenericCell(tk,_this.head);
						return e1;
					}
					return this.parseExprNext(hscript_Expr.EUnop(op,false,e1));
				}
				return this.makeBinop(op,e1,this.parseExpr());
			case 4:
				return this.parseExprNext(hscript_Expr.ECall(e1,this.parseExprList(hscript_Token.TPClose)));
			case 8:
				var field = this.getIdent();
				return this.parseExprNext(hscript_Expr.EField(e1,field));
			case 11:
				var e2 = this.parseExpr();
				var t = this.token();
				if(t != hscript_Token.TBkClose) {
					this.unexpected(t);
				}
				return this.parseExprNext(hscript_Expr.EArray(e1,e2));
			case 13:
				var e2 = this.parseExpr();
				var t = this.token();
				if(t != hscript_Token.TDoubleDot) {
					this.unexpected(t);
				}
				var e3 = this.parseExpr();
				return hscript_Expr.ETernary(e1,e2,e3);
			default:
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
				return e1;
			}
		}
	}
	,parseFunctionArgs: function() {
		var args = [];
		var tk = this.token();
		if(tk != hscript_Token.TPClose) {
			var done = false;
			while(!done) {
				var name = null;
				var opt = false;
				if(tk != null) {
					if(tk._hx_index == 13) {
						opt = true;
						tk = this.token();
					}
				}
				if(tk == null) {
					this.unexpected(tk);
					break;
				} else if(tk._hx_index == 2) {
					var id = tk.s;
					name = id;
				} else {
					this.unexpected(tk);
					break;
				}
				var arg = { name : name};
				args.push(arg);
				if(opt) {
					arg.opt = true;
				}
				if(this.allowTypes) {
					if(this.maybe(hscript_Token.TDoubleDot)) {
						arg.t = this.parseType();
					}
					if(this.maybe(hscript_Token.TOp("="))) {
						arg.value = this.parseExpr();
					}
				}
				tk = this.token();
				if(tk == null) {
					this.unexpected(tk);
				} else {
					switch(tk._hx_index) {
					case 5:
						done = true;
						break;
					case 9:
						tk = this.token();
						break;
					default:
						this.unexpected(tk);
					}
				}
			}
		}
		return args;
	}
	,parseFunctionDecl: function() {
		var t = this.token();
		if(t != hscript_Token.TPOpen) {
			this.unexpected(t);
		}
		var args = this.parseFunctionArgs();
		var ret = null;
		if(this.allowTypes) {
			var tk = this.token();
			if(tk != hscript_Token.TDoubleDot) {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
			} else {
				ret = this.parseType();
			}
		}
		return { args : args, ret : ret, body : this.parseExpr()};
	}
	,parsePath: function() {
		var path = [this.getIdent()];
		while(true) {
			var t = this.token();
			if(t != hscript_Token.TDot) {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(t,_this.head);
				break;
			}
			path.push(this.getIdent());
		}
		return path;
	}
	,parseType: function() {
		var _gthis = this;
		var t = this.token();
		if(t == null) {
			return this.unexpected(t);
		} else {
			switch(t._hx_index) {
			case 2:
				var v = t.s;
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(t,_this.head);
				var path = this.parsePath();
				var params = null;
				t = this.token();
				if(t == null) {
					var _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(t,_this.head);
				} else if(t._hx_index == 3) {
					var op = t.s;
					if(op == "<") {
						params = [];
						_hx_loop1: while(true) {
							params.push(this.parseType());
							t = this.token();
							if(t != null) {
								switch(t._hx_index) {
								case 3:
									var op = t.s;
									if(op == ">") {
										break _hx_loop1;
									}
									if(HxOverrides.cca(op,0) == 62) {
										var _this = this.tokens;
										_this.head = new haxe_ds_GenericCell(hscript_Token.TOp(HxOverrides.substr(op,1,null)),_this.head);
										break _hx_loop1;
									}
									break;
								case 9:
									continue;
								default:
								}
							}
							this.unexpected(t);
							break;
						}
					} else {
						var _this = this.tokens;
						_this.head = new haxe_ds_GenericCell(t,_this.head);
					}
				} else {
					var _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(t,_this.head);
				}
				return this.parseTypeNext(hscript_CType.CTPath(path,params));
			case 4:
				var a = this.token();
				var b = this.token();
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(b,_this.head);
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(a,_this.head);
				var withReturn = function(args) {
					var _g = _gthis.token();
					if(_g == null) {
						var t = _g;
						_gthis.unexpected(t);
					} else if(_g._hx_index == 3) {
						if(_g.s != "->") {
							var t = _g;
							_gthis.unexpected(t);
						}
					} else {
						var t = _g;
						_gthis.unexpected(t);
					}
					return hscript_CType.CTFun(args,_gthis.parseType());
				};
				if(a == null) {
					var t1 = this.parseType();
					var _g = this.token();
					if(_g == null) {
						var t2 = _g;
						return this.unexpected(t2);
					} else {
						switch(_g._hx_index) {
						case 5:
							return this.parseTypeNext(hscript_CType.CTParent(t1));
						case 9:
							var args = [t1];
							while(true) {
								args.push(this.parseType());
								if(!this.maybe(hscript_Token.TComma)) {
									break;
								}
							}
							var t1 = this.token();
							if(t1 != hscript_Token.TPClose) {
								this.unexpected(t1);
							}
							return withReturn(args);
						default:
							var t1 = _g;
							return this.unexpected(t1);
						}
					}
				} else {
					switch(a._hx_index) {
					case 2:
						var _g = a.s;
						if(b == null) {
							var t1 = this.parseType();
							var _g = this.token();
							if(_g == null) {
								var t2 = _g;
								return this.unexpected(t2);
							} else {
								switch(_g._hx_index) {
								case 5:
									return this.parseTypeNext(hscript_CType.CTParent(t1));
								case 9:
									var args = [t1];
									while(true) {
										args.push(this.parseType());
										if(!this.maybe(hscript_Token.TComma)) {
											break;
										}
									}
									var t1 = this.token();
									if(t1 != hscript_Token.TPClose) {
										this.unexpected(t1);
									}
									return withReturn(args);
								default:
									var t1 = _g;
									return this.unexpected(t1);
								}
							}
						} else if(b._hx_index == 14) {
							var _g = [];
							var _g1 = 0;
							var _g2 = this.parseFunctionArgs();
							while(_g1 < _g2.length) {
								var arg = _g2[_g1];
								++_g1;
								var _g3 = arg.value;
								if(_g3 != null) {
									var v = _g3;
									if(!this.resumeErrors) {
										throw haxe_Exception.thrown(hscript_Error.ECustom("Default values not allowed in function types"));
									}
								}
								_g.push(hscript_CType.CTNamed(arg.name,arg.opt ? hscript_CType.CTOpt(arg.t) : arg.t));
							}
							var args = _g;
							return withReturn(args);
						} else {
							var t1 = this.parseType();
							var _g = this.token();
							if(_g == null) {
								var t2 = _g;
								return this.unexpected(t2);
							} else {
								switch(_g._hx_index) {
								case 5:
									return this.parseTypeNext(hscript_CType.CTParent(t1));
								case 9:
									var args = [t1];
									while(true) {
										args.push(this.parseType());
										if(!this.maybe(hscript_Token.TComma)) {
											break;
										}
									}
									var t1 = this.token();
									if(t1 != hscript_Token.TPClose) {
										this.unexpected(t1);
									}
									return withReturn(args);
								default:
									var t1 = _g;
									return this.unexpected(t1);
								}
							}
						}
						break;
					case 5:
						var _g = [];
						var _g1 = 0;
						var _g2 = this.parseFunctionArgs();
						while(_g1 < _g2.length) {
							var arg = _g2[_g1];
							++_g1;
							var _g3 = arg.value;
							if(_g3 != null) {
								var v = _g3;
								if(!this.resumeErrors) {
									throw haxe_Exception.thrown(hscript_Error.ECustom("Default values not allowed in function types"));
								}
							}
							_g.push(hscript_CType.CTNamed(arg.name,arg.opt ? hscript_CType.CTOpt(arg.t) : arg.t));
						}
						var args = _g;
						return withReturn(args);
					default:
						var t1 = this.parseType();
						var _g = this.token();
						if(_g == null) {
							var t2 = _g;
							return this.unexpected(t2);
						} else {
							switch(_g._hx_index) {
							case 5:
								return this.parseTypeNext(hscript_CType.CTParent(t1));
							case 9:
								var args = [t1];
								while(true) {
									args.push(this.parseType());
									if(!this.maybe(hscript_Token.TComma)) {
										break;
									}
								}
								var t1 = this.token();
								if(t1 != hscript_Token.TPClose) {
									this.unexpected(t1);
								}
								return withReturn(args);
							default:
								var t1 = _g;
								return this.unexpected(t1);
							}
						}
					}
				}
				break;
			case 6:
				var fields = [];
				var meta = null;
				_hx_loop8: while(true) {
					t = this.token();
					if(t == null) {
						this.unexpected(t);
						break;
					} else {
						switch(t._hx_index) {
						case 2:
							var _g = t.s;
							if(_g == "var") {
								var name = this.getIdent();
								var t1 = this.token();
								if(t1 != hscript_Token.TDoubleDot) {
									this.unexpected(t1);
								}
								fields.push({ name : name, t : this.parseType(), meta : meta});
								meta = null;
								var t2 = this.token();
								if(t2 != hscript_Token.TSemicolon) {
									this.unexpected(t2);
								}
							} else {
								var name1 = _g;
								var t3 = this.token();
								if(t3 != hscript_Token.TDoubleDot) {
									this.unexpected(t3);
								}
								fields.push({ name : name1, t : this.parseType(), meta : meta});
								t = this.token();
								if(t == null) {
									this.unexpected(t);
								} else {
									switch(t._hx_index) {
									case 7:
										break _hx_loop8;
									case 9:
										break;
									default:
										this.unexpected(t);
									}
								}
							}
							break;
						case 7:
							break _hx_loop8;
						case 15:
							var name2 = t.s;
							if(meta == null) {
								meta = [];
							}
							meta.push({ name : name2, params : this.parseMetaArgs()});
							break;
						default:
							this.unexpected(t);
							break _hx_loop8;
						}
					}
				}
				return this.parseTypeNext(hscript_CType.CTAnon(fields));
			default:
				return this.unexpected(t);
			}
		}
	}
	,parseTypeNext: function(t) {
		var tk = this.token();
		if(tk == null) {
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			return t;
		} else if(tk._hx_index == 3) {
			var op = tk.s;
			if(op != "->") {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
				return t;
			}
		} else {
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			return t;
		}
		var t2 = this.parseType();
		if(t2._hx_index == 1) {
			var _g = t2.ret;
			var args = t2.args;
			args.unshift(t);
			return t2;
		} else {
			return hscript_CType.CTFun([t],t2);
		}
	}
	,parseExprList: function(etk) {
		var args = [];
		var tk = this.token();
		if(tk == etk) {
			return args;
		}
		var _this = this.tokens;
		_this.head = new haxe_ds_GenericCell(tk,_this.head);
		while(true) {
			args.push(this.parseExpr());
			tk = this.token();
			if(tk == null) {
				if(tk == etk) {
					break;
				}
				this.unexpected(tk);
				break;
			} else if(tk._hx_index != 9) {
				if(tk == etk) {
					break;
				}
				this.unexpected(tk);
				break;
			}
		}
		return args;
	}
	,parseModule: function(content,origin) {
		if(origin == null) {
			origin = "hscript";
		}
		this.initParser(origin);
		this.input = content;
		this.readPos = 0;
		this.allowTypes = true;
		this.allowMetadata = true;
		var decls = [];
		while(true) {
			var tk = this.token();
			if(tk == hscript_Token.TEof) {
				break;
			}
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			decls.push(this.parseModuleDecl());
		}
		return decls;
	}
	,parseMetadata: function() {
		var meta = [];
		while(true) {
			var tk = this.token();
			if(tk == null) {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
				break;
			} else if(tk._hx_index == 15) {
				var name = tk.s;
				meta.push({ name : name, params : this.parseMetaArgs()});
			} else {
				var _this1 = this.tokens;
				_this1.head = new haxe_ds_GenericCell(tk,_this1.head);
				break;
			}
		}
		return meta;
	}
	,parseParams: function() {
		if(this.maybe(hscript_Token.TOp("<"))) {
			if(!this.resumeErrors) {
				throw haxe_Exception.thrown(hscript_Error.EInvalidOp("Unsupported class type parameters"));
			}
		}
		return { };
	}
	,parseModuleDecl: function() {
		var meta = this.parseMetadata();
		var ident = this.getIdent();
		var isPrivate = false;
		var isExtern = false;
		_hx_loop1: while(true) {
			switch(ident) {
			case "extern":
				isExtern = true;
				break;
			case "private":
				isPrivate = true;
				break;
			default:
				break _hx_loop1;
			}
			ident = this.getIdent();
		}
		switch(ident) {
		case "class":
			var name = this.getIdent();
			var params = this.parseParams();
			var extend = null;
			var implement = [];
			_hx_loop2: while(true) {
				var t = this.token();
				if(t == null) {
					var _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(t,_this.head);
					break;
				} else if(t._hx_index == 2) {
					switch(t.s) {
					case "extends":
						extend = this.parseType();
						break;
					case "implements":
						implement.push(this.parseType());
						break;
					default:
						var _this1 = this.tokens;
						_this1.head = new haxe_ds_GenericCell(t,_this1.head);
						break _hx_loop2;
					}
				} else {
					var _this2 = this.tokens;
					_this2.head = new haxe_ds_GenericCell(t,_this2.head);
					break;
				}
			}
			var fields = [];
			var t = this.token();
			if(t != hscript_Token.TBrOpen) {
				this.unexpected(t);
			}
			while(!this.maybe(hscript_Token.TBrClose)) fields.push(this.parseField());
			return hscript_ModuleDecl.DClass({ name : name, meta : meta, params : params, extend : extend, implement : implement, fields : fields, isPrivate : isPrivate, isExtern : isExtern});
		case "import":
			var path = [this.getIdent()];
			var star = false;
			while(true) {
				var t = this.token();
				if(t != hscript_Token.TDot) {
					var _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(t,_this.head);
					break;
				}
				t = this.token();
				if(t == null) {
					this.unexpected(t);
				} else {
					switch(t._hx_index) {
					case 2:
						var id = t.s;
						path.push(id);
						break;
					case 3:
						if(t.s == "*") {
							star = true;
						} else {
							this.unexpected(t);
						}
						break;
					default:
						this.unexpected(t);
					}
				}
			}
			var t = this.token();
			if(t != hscript_Token.TSemicolon) {
				this.unexpected(t);
			}
			return hscript_ModuleDecl.DImport(path,star);
		case "package":
			var path = this.parsePath();
			var t = this.token();
			if(t != hscript_Token.TSemicolon) {
				this.unexpected(t);
			}
			return hscript_ModuleDecl.DPackage(path);
		case "typedef":
			var name = this.getIdent();
			var params = this.parseParams();
			var t = this.token();
			if(!Type.enumEq(t,hscript_Token.TOp("="))) {
				this.unexpected(t);
			}
			var t = this.parseType();
			return hscript_ModuleDecl.DTypedef({ name : name, meta : meta, params : params, isPrivate : isPrivate, t : t});
		default:
			this.unexpected(hscript_Token.TId(ident));
		}
		return null;
	}
	,parseField: function() {
		var meta = this.parseMetadata();
		var access = [];
		_hx_loop1: while(true) {
			var id = this.getIdent();
			switch(id) {
			case "function":
				var name = this.getIdent();
				var inf = this.parseFunctionDecl();
				return { name : name, meta : meta, access : access, kind : hscript_FieldKind.KFunction({ args : inf.args, expr : inf.body, ret : inf.ret})};
			case "inline":
				access.push(hscript_FieldAccess.AInline);
				break;
			case "macro":
				access.push(hscript_FieldAccess.AMacro);
				break;
			case "override":
				access.push(hscript_FieldAccess.AOverride);
				break;
			case "private":
				access.push(hscript_FieldAccess.APrivate);
				break;
			case "public":
				access.push(hscript_FieldAccess.APublic);
				break;
			case "static":
				access.push(hscript_FieldAccess.AStatic);
				break;
			case "var":
				var name1 = this.getIdent();
				var get = null;
				var set = null;
				if(this.maybe(hscript_Token.TPOpen)) {
					get = this.getIdent();
					var t = this.token();
					if(t != hscript_Token.TComma) {
						this.unexpected(t);
					}
					set = this.getIdent();
					var t1 = this.token();
					if(t1 != hscript_Token.TPClose) {
						this.unexpected(t1);
					}
				}
				var type = this.maybe(hscript_Token.TDoubleDot) ? this.parseType() : null;
				var expr = this.maybe(hscript_Token.TOp("=")) ? this.parseExpr() : null;
				if(expr != null) {
					if(this.isBlock(expr)) {
						this.maybe(hscript_Token.TSemicolon);
					} else {
						var t2 = this.token();
						if(t2 != hscript_Token.TSemicolon) {
							this.unexpected(t2);
						}
					}
				} else {
					var tmp;
					if(type != null) {
						if(type == null) {
							tmp = false;
						} else if(type._hx_index == 2) {
							var _g = type.fields;
							tmp = true;
						} else {
							tmp = false;
						}
					} else {
						tmp = false;
					}
					if(tmp) {
						this.maybe(hscript_Token.TSemicolon);
					} else {
						var t3 = this.token();
						if(t3 != hscript_Token.TSemicolon) {
							this.unexpected(t3);
						}
					}
				}
				return { name : name1, meta : meta, access : access, kind : hscript_FieldKind.KVar({ get : get, set : set, type : type, expr : expr})};
			default:
				this.unexpected(hscript_Token.TId(id));
				break _hx_loop1;
			}
		}
		return null;
	}
	,readChar: function() {
		return this.input.charCodeAt(this.readPos++);
	}
	,readString: function(until) {
		var c = 0;
		var b_b = "";
		var esc = false;
		var old = this.line;
		var s = this.input;
		while(true) {
			var c = this.input.charCodeAt(this.readPos++);
			if(c != c) {
				this.line = old;
				if(!this.resumeErrors) {
					throw haxe_Exception.thrown(hscript_Error.EUnterminatedString);
				}
				break;
			}
			if(esc) {
				esc = false;
				switch(c) {
				case 34:case 39:case 92:
					b_b += String.fromCodePoint(c);
					break;
				case 47:
					if(this.allowJSON) {
						b_b += String.fromCodePoint(c);
					} else {
						this.invalidChar(c);
					}
					break;
				case 110:
					b_b += String.fromCodePoint(10);
					break;
				case 114:
					b_b += String.fromCodePoint(13);
					break;
				case 116:
					b_b += String.fromCodePoint(9);
					break;
				case 117:
					if(!this.allowJSON) {
						this.invalidChar(c);
					}
					var k = 0;
					var _g = 0;
					while(_g < 4) {
						var i = _g++;
						k <<= 4;
						var char = this.input.charCodeAt(this.readPos++);
						switch(char) {
						case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
							k += char - 48;
							break;
						case 65:case 66:case 67:case 68:case 69:case 70:
							k += char - 55;
							break;
						case 97:case 98:case 99:case 100:case 101:case 102:
							k += char - 87;
							break;
						default:
							if(char != char) {
								this.line = old;
								if(!this.resumeErrors) {
									throw haxe_Exception.thrown(hscript_Error.EUnterminatedString);
								}
							}
							this.invalidChar(char);
						}
					}
					b_b += String.fromCodePoint(k);
					break;
				default:
					this.invalidChar(c);
				}
			} else if(c == 92) {
				esc = true;
			} else if(c == until) {
				break;
			} else {
				if(c == 10) {
					this.line++;
				}
				b_b += String.fromCodePoint(c);
			}
		}
		return b_b;
	}
	,token: function() {
		if(this.tokens.head != null) {
			var _this = this.tokens;
			var k = _this.head;
			if(k == null) {
				return null;
			} else {
				_this.head = k.next;
				return k.elt;
			}
		}
		var char;
		if(this.char < 0) {
			char = this.input.charCodeAt(this.readPos++);
		} else {
			char = this.char;
			this.char = -1;
		}
		while(true) {
			if(char != char) {
				this.char = char;
				return hscript_Token.TEof;
			}
			switch(char) {
			case 0:
				return hscript_Token.TEof;
			case 10:
				this.line++;
				break;
			case 9:case 13:case 32:
				break;
			case 35:
				char = this.input.charCodeAt(this.readPos++);
				if(this.idents[char]) {
					var id = String.fromCodePoint(char);
					while(true) {
						char = this.input.charCodeAt(this.readPos++);
						if(!this.idents[char]) {
							this.char = char;
							return this.preprocess(id);
						}
						id += String.fromCodePoint(char);
					}
				}
				this.invalidChar(char);
				break;
			case 34:case 39:
				return hscript_Token.TConst(hscript_Const.CString(this.readString(char)));
			case 40:
				return hscript_Token.TPOpen;
			case 41:
				return hscript_Token.TPClose;
			case 44:
				return hscript_Token.TComma;
			case 46:
				char = this.input.charCodeAt(this.readPos++);
				switch(char) {
				case 46:
					char = this.input.charCodeAt(this.readPos++);
					if(char != 46) {
						this.invalidChar(char);
					}
					return hscript_Token.TOp("...");
				case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
					var n = char - 48;
					var exp = 1;
					while(true) {
						char = this.input.charCodeAt(this.readPos++);
						exp *= 10;
						switch(char) {
						case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
							n = n * 10 + (char - 48);
							break;
						default:
							this.char = char;
							return hscript_Token.TConst(hscript_Const.CFloat(n / exp));
						}
					}
					break;
				default:
					this.char = char;
					return hscript_Token.TDot;
				}
				break;
			case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
				var n1 = (char - 48) * 1.0;
				var exp1 = 0.;
				while(true) {
					char = this.input.charCodeAt(this.readPos++);
					exp1 *= 10;
					switch(char) {
					case 46:
						if(exp1 > 0) {
							if(exp1 == 10 && this.input.charCodeAt(this.readPos++) == 46) {
								var _this = this.tokens;
								_this.head = new haxe_ds_GenericCell(hscript_Token.TOp("..."),_this.head);
								var i = n1 | 0;
								return hscript_Token.TConst(i == n1 ? hscript_Const.CInt(i) : hscript_Const.CFloat(n1));
							}
							this.invalidChar(char);
						}
						exp1 = 1.;
						break;
					case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
						n1 = n1 * 10 + (char - 48);
						break;
					case 69:case 101:
						var tk = this.token();
						var pow = null;
						if(tk == null) {
							var _this1 = this.tokens;
							_this1.head = new haxe_ds_GenericCell(tk,_this1.head);
						} else {
							switch(tk._hx_index) {
							case 1:
								var _g = tk.c;
								if(_g._hx_index == 0) {
									var e = _g.v;
									pow = e;
								} else {
									var _this2 = this.tokens;
									_this2.head = new haxe_ds_GenericCell(tk,_this2.head);
								}
								break;
							case 3:
								if(tk.s == "-") {
									tk = this.token();
									if(tk == null) {
										var _this3 = this.tokens;
										_this3.head = new haxe_ds_GenericCell(tk,_this3.head);
									} else if(tk._hx_index == 1) {
										var _g1 = tk.c;
										if(_g1._hx_index == 0) {
											var e1 = _g1.v;
											pow = -e1;
										} else {
											var _this4 = this.tokens;
											_this4.head = new haxe_ds_GenericCell(tk,_this4.head);
										}
									} else {
										var _this5 = this.tokens;
										_this5.head = new haxe_ds_GenericCell(tk,_this5.head);
									}
								} else {
									var _this6 = this.tokens;
									_this6.head = new haxe_ds_GenericCell(tk,_this6.head);
								}
								break;
							default:
								var _this7 = this.tokens;
								_this7.head = new haxe_ds_GenericCell(tk,_this7.head);
							}
						}
						if(pow == null) {
							this.invalidChar(char);
						}
						return hscript_Token.TConst(hscript_Const.CFloat(Math.pow(10,pow) / exp1 * n1 * 10));
					case 120:
						if(n1 > 0 || exp1 > 0) {
							this.invalidChar(char);
						}
						var n2 = 0;
						while(true) {
							char = this.input.charCodeAt(this.readPos++);
							switch(char) {
							case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
								n2 = (n2 << 4) + char - 48;
								break;
							case 65:case 66:case 67:case 68:case 69:case 70:
								n2 = (n2 << 4) + (char - 55);
								break;
							case 97:case 98:case 99:case 100:case 101:case 102:
								n2 = (n2 << 4) + (char - 87);
								break;
							default:
								this.char = char;
								return hscript_Token.TConst(hscript_Const.CInt(n2));
							}
						}
						break;
					default:
						this.char = char;
						var i1 = n1 | 0;
						return hscript_Token.TConst(exp1 > 0 ? hscript_Const.CFloat(n1 * 10 / exp1) : i1 == n1 ? hscript_Const.CInt(i1) : hscript_Const.CFloat(n1));
					}
				}
				break;
			case 58:
				return hscript_Token.TDoubleDot;
			case 59:
				return hscript_Token.TSemicolon;
			case 61:
				char = this.input.charCodeAt(this.readPos++);
				if(char == 61) {
					return hscript_Token.TOp("==");
				} else if(char == 62) {
					return hscript_Token.TOp("=>");
				}
				this.char = char;
				return hscript_Token.TOp("=");
			case 63:
				return hscript_Token.TQuestion;
			case 64:
				char = this.input.charCodeAt(this.readPos++);
				if(this.idents[char] || char == 58) {
					var id1 = String.fromCodePoint(char);
					while(true) {
						char = this.input.charCodeAt(this.readPos++);
						if(!this.idents[char]) {
							this.char = char;
							return hscript_Token.TMeta(id1);
						}
						id1 += String.fromCodePoint(char);
					}
				}
				this.invalidChar(char);
				break;
			case 91:
				return hscript_Token.TBkOpen;
			case 93:
				return hscript_Token.TBkClose;
			case 123:
				return hscript_Token.TBrOpen;
			case 125:
				return hscript_Token.TBrClose;
			default:
				if(this.ops[char]) {
					var op = String.fromCodePoint(char);
					var prev = -1;
					while(true) {
						char = this.input.charCodeAt(this.readPos++);
						if(char != char) {
							char = 0;
						}
						if(!this.ops[char] || prev == 61) {
							if(HxOverrides.cca(op,0) == 47) {
								return this.tokenComment(op,char);
							}
							this.char = char;
							return hscript_Token.TOp(op);
						}
						prev = char;
						op += String.fromCodePoint(char);
					}
				}
				if(this.idents[char]) {
					var id2 = String.fromCodePoint(char);
					while(true) {
						char = this.input.charCodeAt(this.readPos++);
						if(char != char) {
							char = 0;
						}
						if(!this.idents[char]) {
							this.char = char;
							return hscript_Token.TId(id2);
						}
						id2 += String.fromCodePoint(char);
					}
				}
				this.invalidChar(char);
			}
			char = this.input.charCodeAt(this.readPos++);
		}
	}
	,preprocValue: function(id) {
		return this.preprocesorValues.h[id];
	}
	,parsePreproCond: function() {
		var tk = this.token();
		if(tk == null) {
			return this.unexpected(tk);
		} else {
			switch(tk._hx_index) {
			case 2:
				var id = tk.s;
				return hscript_Expr.EIdent(id);
			case 3:
				if(tk.s == "!") {
					return hscript_Expr.EUnop("!",true,this.parsePreproCond());
				} else {
					return this.unexpected(tk);
				}
				break;
			case 4:
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(hscript_Token.TPOpen,_this.head);
				return this.parseExpr();
			default:
				return this.unexpected(tk);
			}
		}
	}
	,evalPreproCond: function(e) {
		switch(e._hx_index) {
		case 1:
			var id = e.v;
			return this.preprocValue(id) != null;
		case 3:
			var e1 = e.e;
			return this.evalPreproCond(e1);
		case 6:
			var _g = e.e1;
			var _g1 = e.e2;
			switch(e.op) {
			case "&&":
				var e1 = _g;
				var e2 = _g1;
				if(this.evalPreproCond(e1)) {
					return this.evalPreproCond(e2);
				} else {
					return false;
				}
				break;
			case "||":
				var e1 = _g;
				var e2 = _g1;
				if(!this.evalPreproCond(e1)) {
					return this.evalPreproCond(e2);
				} else {
					return true;
				}
				break;
			default:
				if(!this.resumeErrors) {
					throw haxe_Exception.thrown(hscript_Error.EInvalidPreprocessor("Can't eval " + $hxEnums[e.__enum__].__constructs__[e._hx_index]._hx_name));
				}
				return false;
			}
			break;
		case 7:
			var _g = e.prefix;
			if(e.op == "!") {
				var e1 = e.e;
				return !this.evalPreproCond(e1);
			} else {
				if(!this.resumeErrors) {
					throw haxe_Exception.thrown(hscript_Error.EInvalidPreprocessor("Can't eval " + $hxEnums[e.__enum__].__constructs__[e._hx_index]._hx_name));
				}
				return false;
			}
			break;
		default:
			if(!this.resumeErrors) {
				throw haxe_Exception.thrown(hscript_Error.EInvalidPreprocessor("Can't eval " + $hxEnums[e.__enum__].__constructs__[e._hx_index]._hx_name));
			}
			return false;
		}
	}
	,preprocess: function(id) {
		switch(id) {
		case "else":case "elseif":
			if(this.preprocStack.length > 0) {
				if(this.preprocStack[this.preprocStack.length - 1].r) {
					this.preprocStack[this.preprocStack.length - 1].r = false;
					this.skipTokens();
					return this.token();
				} else if(id == "else") {
					this.preprocStack.pop();
					this.preprocStack.push({ r : true});
					return this.token();
				} else {
					this.preprocStack.pop();
					return this.preprocess("if");
				}
			} else {
				return hscript_Token.TPrepro(id);
			}
			break;
		case "end":
			if(this.preprocStack.length > 0) {
				this.preprocStack.pop();
				return this.token();
			} else {
				return hscript_Token.TPrepro(id);
			}
			break;
		case "if":
			var e = this.parsePreproCond();
			if(this.evalPreproCond(e)) {
				this.preprocStack.push({ r : true});
				return this.token();
			}
			this.preprocStack.push({ r : false});
			this.skipTokens();
			return this.token();
		default:
			return hscript_Token.TPrepro(id);
		}
	}
	,skipTokens: function() {
		var spos = this.preprocStack.length - 1;
		var obj = this.preprocStack[spos];
		var pos = this.readPos;
		while(true) {
			var tk = this.token();
			if(tk == hscript_Token.TEof) {
				if(!this.resumeErrors) {
					throw haxe_Exception.thrown(hscript_Error.EInvalidPreprocessor("Unclosed"));
				}
			}
			if(this.preprocStack[spos] != obj) {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
				break;
			}
		}
	}
	,tokenComment: function(op,char) {
		var c = HxOverrides.cca(op,1);
		var s = this.input;
		if(c == 47) {
			while(char != 13 && char != 10) {
				char = this.input.charCodeAt(this.readPos++);
				if(char != char) {
					break;
				}
			}
			this.char = char;
			return this.token();
		}
		if(c == 42) {
			var old = this.line;
			if(op == "/**/") {
				this.char = char;
				return this.token();
			}
			while(true) {
				while(char != 42) {
					if(char == 10) {
						this.line++;
					}
					char = this.input.charCodeAt(this.readPos++);
					if(char != char) {
						this.line = old;
						if(!this.resumeErrors) {
							throw haxe_Exception.thrown(hscript_Error.EUnterminatedComment);
						}
						break;
					}
				}
				char = this.input.charCodeAt(this.readPos++);
				if(char != char) {
					this.line = old;
					if(!this.resumeErrors) {
						throw haxe_Exception.thrown(hscript_Error.EUnterminatedComment);
					}
					break;
				}
				if(char == 47) {
					break;
				}
			}
			return this.token();
		}
		this.char = char;
		return hscript_Token.TOp(op);
	}
	,constString: function(c) {
		switch(c._hx_index) {
		case 0:
			var v = c.v;
			if(v == null) {
				return "null";
			} else {
				return "" + v;
			}
			break;
		case 1:
			var f = c.f;
			if(f == null) {
				return "null";
			} else {
				return "" + f;
			}
			break;
		case 2:
			var s = c.s;
			return s;
		}
	}
	,tokenString: function(t) {
		switch(t._hx_index) {
		case 0:
			return "<eof>";
		case 1:
			var c = t.c;
			return this.constString(c);
		case 2:
			var s = t.s;
			return s;
		case 3:
			var s = t.s;
			return s;
		case 4:
			return "(";
		case 5:
			return ")";
		case 6:
			return "{";
		case 7:
			return "}";
		case 8:
			return ".";
		case 9:
			return ",";
		case 10:
			return ";";
		case 11:
			return "[";
		case 12:
			return "]";
		case 13:
			return "?";
		case 14:
			return ":";
		case 15:
			var id = t.s;
			return "@" + id;
		case 16:
			var id = t.s;
			return "#" + id;
		}
	}
	,__class__: hscript_Parser
};
var hscript_Tools = function() { };
$hxClasses["hscript.Tools"] = hscript_Tools;
hscript_Tools.__name__ = "hscript.Tools";
hscript_Tools.iter = function(e,f) {
	switch(e._hx_index) {
	case 0:
		var _g = e.c;
		break;
	case 1:
		var _g = e.v;
		break;
	case 2:
		var _g = e.n;
		var _g = e.t;
		var e1 = e.e;
		if(e1 != null) {
			f(e1);
		}
		break;
	case 3:
		var e1 = e.e;
		f(e1);
		break;
	case 4:
		var el = e.e;
		var _g = 0;
		while(_g < el.length) {
			var e1 = el[_g];
			++_g;
			f(e1);
		}
		break;
	case 5:
		var _g = e.f;
		var e1 = e.e;
		f(e1);
		break;
	case 6:
		var _g = e.op;
		var e1 = e.e1;
		var e2 = e.e2;
		f(e1);
		f(e2);
		break;
	case 7:
		var _g = e.op;
		var _g = e.prefix;
		var e1 = e.e;
		f(e1);
		break;
	case 8:
		var e1 = e.e;
		var args = e.params;
		f(e1);
		var _g = 0;
		while(_g < args.length) {
			var a = args[_g];
			++_g;
			f(a);
		}
		break;
	case 9:
		var c = e.cond;
		var e1 = e.e1;
		var e2 = e.e2;
		f(c);
		f(e1);
		if(e2 != null) {
			f(e2);
		}
		break;
	case 10:
		var c = e.cond;
		var e1 = e.e;
		f(c);
		f(e1);
		break;
	case 11:
		var _g = e.v;
		var it = e.it;
		var e1 = e.e;
		f(it);
		f(e1);
		break;
	case 12:case 13:
		break;
	case 14:
		var _g = e.args;
		var _g = e.name;
		var _g = e.ret;
		var e1 = e.e;
		f(e1);
		break;
	case 15:
		var e1 = e.e;
		if(e1 != null) {
			f(e1);
		}
		break;
	case 16:
		var e1 = e.e;
		var i = e.index;
		f(e1);
		f(i);
		break;
	case 17:
		var el = e.e;
		var _g = 0;
		while(_g < el.length) {
			var e1 = el[_g];
			++_g;
			f(e1);
		}
		break;
	case 18:
		var _g = e.cl;
		var el = e.params;
		var _g = 0;
		while(_g < el.length) {
			var e1 = el[_g];
			++_g;
			f(e1);
		}
		break;
	case 19:
		var e1 = e.e;
		f(e1);
		break;
	case 20:
		var _g = e.v;
		var _g = e.t;
		var e1 = e.e;
		var c = e.ecatch;
		f(e1);
		f(c);
		break;
	case 21:
		var fl = e.fl;
		var _g = 0;
		while(_g < fl.length) {
			var fi = fl[_g];
			++_g;
			f(fi.e);
		}
		break;
	case 22:
		var c = e.cond;
		var e1 = e.e1;
		var e2 = e.e2;
		f(c);
		f(e1);
		f(e2);
		break;
	case 23:
		var e1 = e.e;
		var cases = e.cases;
		var def = e.defaultExpr;
		f(e1);
		var _g = 0;
		while(_g < cases.length) {
			var c = cases[_g];
			++_g;
			var _g1 = 0;
			var _g2 = c.values;
			while(_g1 < _g2.length) {
				var v = _g2[_g1];
				++_g1;
				f(v);
			}
			f(c.expr);
		}
		if(def != null) {
			f(def);
		}
		break;
	case 24:
		var c = e.cond;
		var e1 = e.e;
		f(c);
		f(e1);
		break;
	case 25:
		var name = e.name;
		var args = e.args;
		var e1 = e.e;
		if(args != null) {
			var _g = 0;
			while(_g < args.length) {
				var a = args[_g];
				++_g;
				f(a);
			}
		}
		f(e1);
		break;
	case 26:
		var _g = e.t;
		var e1 = e.e;
		f(e1);
		break;
	}
};
hscript_Tools.map = function(e,f) {
	var edef;
	switch(e._hx_index) {
	case 0:
		var _g = e.c;
		edef = e;
		break;
	case 1:
		var _g = e.v;
		edef = e;
		break;
	case 2:
		var n = e.n;
		var t = e.t;
		var e1 = e.e;
		edef = hscript_Expr.EVar(n,t,e1 != null ? f(e1) : null);
		break;
	case 3:
		var e1 = e.e;
		edef = hscript_Expr.EParent(f(e1));
		break;
	case 4:
		var el = e.e;
		var _g = [];
		var _g1 = 0;
		while(_g1 < el.length) {
			var e1 = el[_g1];
			++_g1;
			_g.push(f(e1));
		}
		edef = hscript_Expr.EBlock(_g);
		break;
	case 5:
		var e1 = e.e;
		var fi = e.f;
		edef = hscript_Expr.EField(f(e1),fi);
		break;
	case 6:
		var op = e.op;
		var e1 = e.e1;
		var e2 = e.e2;
		edef = hscript_Expr.EBinop(op,f(e1),f(e2));
		break;
	case 7:
		var op = e.op;
		var pre = e.prefix;
		var e1 = e.e;
		edef = hscript_Expr.EUnop(op,pre,f(e1));
		break;
	case 8:
		var e1 = e.e;
		var args = e.params;
		var edef1 = f(e1);
		var _g = [];
		var _g1 = 0;
		while(_g1 < args.length) {
			var a = args[_g1];
			++_g1;
			_g.push(f(a));
		}
		edef = hscript_Expr.ECall(edef1,_g);
		break;
	case 9:
		var c = e.cond;
		var e1 = e.e1;
		var e2 = e.e2;
		edef = hscript_Expr.EIf(f(c),f(e1),e2 != null ? f(e2) : null);
		break;
	case 10:
		var c = e.cond;
		var e1 = e.e;
		edef = hscript_Expr.EWhile(f(c),f(e1));
		break;
	case 11:
		var v = e.v;
		var it = e.it;
		var e1 = e.e;
		edef = hscript_Expr.EFor(v,f(it),f(e1));
		break;
	case 12:case 13:
		edef = e;
		break;
	case 14:
		var args = e.args;
		var e1 = e.e;
		var name = e.name;
		var t = e.ret;
		edef = hscript_Expr.EFunction(args,f(e1),name,t);
		break;
	case 15:
		var e1 = e.e;
		edef = hscript_Expr.EReturn(e1 != null ? f(e1) : null);
		break;
	case 16:
		var e1 = e.e;
		var i = e.index;
		edef = hscript_Expr.EArray(f(e1),f(i));
		break;
	case 17:
		var el = e.e;
		var _g = [];
		var _g1 = 0;
		while(_g1 < el.length) {
			var e1 = el[_g1];
			++_g1;
			_g.push(f(e1));
		}
		edef = hscript_Expr.EArrayDecl(_g);
		break;
	case 18:
		var cl = e.cl;
		var el = e.params;
		var _g = [];
		var _g1 = 0;
		while(_g1 < el.length) {
			var e1 = el[_g1];
			++_g1;
			_g.push(f(e1));
		}
		edef = hscript_Expr.ENew(cl,_g);
		break;
	case 19:
		var e1 = e.e;
		edef = hscript_Expr.EThrow(f(e1));
		break;
	case 20:
		var e1 = e.e;
		var v = e.v;
		var t = e.t;
		var c = e.ecatch;
		edef = hscript_Expr.ETry(f(e1),v,t,f(c));
		break;
	case 21:
		var fl = e.fl;
		var _g = [];
		var _g1 = 0;
		while(_g1 < fl.length) {
			var fi = fl[_g1];
			++_g1;
			_g.push({ name : fi.name, e : f(fi.e)});
		}
		edef = hscript_Expr.EObject(_g);
		break;
	case 22:
		var c = e.cond;
		var e1 = e.e1;
		var e2 = e.e2;
		edef = hscript_Expr.ETernary(f(c),f(e1),f(e2));
		break;
	case 23:
		var e1 = e.e;
		var cases = e.cases;
		var def = e.defaultExpr;
		var edef1 = f(e1);
		var _g = [];
		var _g1 = 0;
		while(_g1 < cases.length) {
			var c = cases[_g1];
			++_g1;
			var _g2 = [];
			var _g3 = 0;
			var _g4 = c.values;
			while(_g3 < _g4.length) {
				var v = _g4[_g3];
				++_g3;
				_g2.push(f(v));
			}
			_g.push({ values : _g2, expr : f(c.expr)});
		}
		edef = hscript_Expr.ESwitch(edef1,_g,def == null ? null : f(def));
		break;
	case 24:
		var c = e.cond;
		var e1 = e.e;
		edef = hscript_Expr.EDoWhile(f(c),f(e1));
		break;
	case 25:
		var name = e.name;
		var args = e.args;
		var e1 = e.e;
		var edef1;
		if(args == null) {
			edef1 = null;
		} else {
			var _g = [];
			var _g1 = 0;
			while(_g1 < args.length) {
				var a = args[_g1];
				++_g1;
				_g.push(f(a));
			}
			edef1 = _g;
		}
		edef = hscript_Expr.EMeta(name,edef1,f(e1));
		break;
	case 26:
		var e1 = e.e;
		var t = e.t;
		edef = hscript_Expr.ECheckType(f(e1),t);
		break;
	}
	return edef;
};
hscript_Tools.expr = function(e) {
	return e;
};
hscript_Tools.mk = function(e,p) {
	return e;
};
var hxjsonast_Error = function(message,pos) {
	this.message = message;
	this.pos = pos;
};
$hxClasses["hxjsonast.Error"] = hxjsonast_Error;
hxjsonast_Error.__name__ = "hxjsonast.Error";
hxjsonast_Error.prototype = {
	__class__: hxjsonast_Error
};
var hxjsonast_Json = function(value,pos) {
	this.value = value;
	this.pos = pos;
};
$hxClasses["hxjsonast.Json"] = hxjsonast_Json;
hxjsonast_Json.__name__ = "hxjsonast.Json";
hxjsonast_Json.prototype = {
	__class__: hxjsonast_Json
};
var hxjsonast_JsonValue = $hxEnums["hxjsonast.JsonValue"] = { __ename__:true,__constructs__:null
	,JString: ($_=function(s) { return {_hx_index:0,s:s,__enum__:"hxjsonast.JsonValue",toString:$estr}; },$_._hx_name="JString",$_.__params__ = ["s"],$_)
	,JNumber: ($_=function(s) { return {_hx_index:1,s:s,__enum__:"hxjsonast.JsonValue",toString:$estr}; },$_._hx_name="JNumber",$_.__params__ = ["s"],$_)
	,JObject: ($_=function(fields) { return {_hx_index:2,fields:fields,__enum__:"hxjsonast.JsonValue",toString:$estr}; },$_._hx_name="JObject",$_.__params__ = ["fields"],$_)
	,JArray: ($_=function(values) { return {_hx_index:3,values:values,__enum__:"hxjsonast.JsonValue",toString:$estr}; },$_._hx_name="JArray",$_.__params__ = ["values"],$_)
	,JBool: ($_=function(b) { return {_hx_index:4,b:b,__enum__:"hxjsonast.JsonValue",toString:$estr}; },$_._hx_name="JBool",$_.__params__ = ["b"],$_)
	,JNull: {_hx_name:"JNull",_hx_index:5,__enum__:"hxjsonast.JsonValue",toString:$estr}
};
hxjsonast_JsonValue.__constructs__ = [hxjsonast_JsonValue.JString,hxjsonast_JsonValue.JNumber,hxjsonast_JsonValue.JObject,hxjsonast_JsonValue.JArray,hxjsonast_JsonValue.JBool,hxjsonast_JsonValue.JNull];
var hxjsonast_JObjectField = function(name,namePos,value) {
	this.name = name;
	this.namePos = namePos;
	this.value = value;
};
$hxClasses["hxjsonast.JObjectField"] = hxjsonast_JObjectField;
hxjsonast_JObjectField.__name__ = "hxjsonast.JObjectField";
hxjsonast_JObjectField.prototype = {
	__class__: hxjsonast_JObjectField
};
var hxjsonast_Parser = function(source,filename) {
	this.source = source;
	this.filename = filename;
	this.pos = 0;
};
$hxClasses["hxjsonast.Parser"] = hxjsonast_Parser;
hxjsonast_Parser.__name__ = "hxjsonast.Parser";
hxjsonast_Parser.parse = function(source,filename) {
	return new hxjsonast_Parser(source,filename).doParse();
};
hxjsonast_Parser.prototype = {
	doParse: function() {
		var result = this.parseRec();
		var c;
		while(true) {
			c = this.source.charCodeAt(this.pos++);
			var c1 = c;
			if(!(c1 == c1)) {
				break;
			}
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				this.invalidChar();
			}
		}
		return result;
	}
	,parseRec: function() {
		while(true) {
			var c = this.source.charCodeAt(this.pos++);
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			case 34:
				var save = this.pos;
				var s = this.parseString();
				return new hxjsonast_Json(hxjsonast_JsonValue.JString(s),new hxjsonast_Position(this.filename,save - 1,this.pos));
			case 45:case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
				var start = this.pos - 1;
				var minus = c == 45;
				var digit = !minus;
				var zero = c == 48;
				var point = false;
				var e = false;
				var pm = false;
				var end = false;
				while(true) {
					switch(this.source.charCodeAt(this.pos++)) {
					case 43:case 45:
						if(!e || pm) {
							this.invalidNumber(start);
						}
						digit = false;
						pm = true;
						break;
					case 46:
						if(minus || point || e) {
							this.invalidNumber(start);
						}
						digit = false;
						point = true;
						break;
					case 48:
						if(zero && !point) {
							this.invalidNumber(start);
						}
						if(minus) {
							minus = false;
							zero = true;
						}
						digit = true;
						break;
					case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
						if(zero && !point) {
							this.invalidNumber(start);
						}
						if(minus) {
							minus = false;
						}
						digit = true;
						zero = false;
						break;
					case 69:case 101:
						if(minus || zero || e) {
							this.invalidNumber(start);
						}
						digit = false;
						e = true;
						break;
					default:
						if(!digit) {
							this.invalidNumber(start);
						}
						this.pos--;
						end = true;
					}
					if(end) {
						break;
					}
				}
				var s1 = HxOverrides.substr(this.source,start,this.pos - start);
				return new hxjsonast_Json(hxjsonast_JsonValue.JNumber(s1),new hxjsonast_Position(this.filename,start,this.pos));
			case 91:
				var values = [];
				var comma = null;
				var startPos = this.pos - 1;
				while(true) switch(this.source.charCodeAt(this.pos++)) {
				case 9:case 10:case 13:case 32:
					break;
				case 44:
					if(comma) {
						comma = false;
					} else {
						this.invalidChar();
					}
					break;
				case 93:
					if(comma == false) {
						this.invalidChar();
					}
					return new hxjsonast_Json(hxjsonast_JsonValue.JArray(values),new hxjsonast_Position(this.filename,startPos,this.pos));
				default:
					if(comma) {
						this.invalidChar();
					}
					this.pos--;
					values.push(this.parseRec());
					comma = true;
				}
				break;
			case 102:
				var save1 = this.pos;
				if(this.source.charCodeAt(this.pos++) != 97 || this.source.charCodeAt(this.pos++) != 108 || this.source.charCodeAt(this.pos++) != 115 || this.source.charCodeAt(this.pos++) != 101) {
					this.pos = save1;
					this.invalidChar();
				}
				return new hxjsonast_Json(hxjsonast_JsonValue.JBool(false),new hxjsonast_Position(this.filename,save1 - 1,this.pos));
			case 110:
				var save2 = this.pos;
				if(this.source.charCodeAt(this.pos++) != 117 || this.source.charCodeAt(this.pos++) != 108 || this.source.charCodeAt(this.pos++) != 108) {
					this.pos = save2;
					this.invalidChar();
				}
				return new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position(this.filename,save2 - 1,this.pos));
			case 116:
				var save3 = this.pos;
				if(this.source.charCodeAt(this.pos++) != 114 || this.source.charCodeAt(this.pos++) != 117 || this.source.charCodeAt(this.pos++) != 101) {
					this.pos = save3;
					this.invalidChar();
				}
				return new hxjsonast_Json(hxjsonast_JsonValue.JBool(true),new hxjsonast_Position(this.filename,save3 - 1,this.pos));
			case 123:
				var fields = [];
				var names_h = Object.create(null);
				var field = null;
				var fieldPos = null;
				var comma1 = null;
				var startPos1 = this.pos - 1;
				while(true) switch(this.source.charCodeAt(this.pos++)) {
				case 9:case 10:case 13:case 32:
					break;
				case 34:
					if(field != null || comma1) {
						this.invalidChar();
					}
					var fieldStartPos = this.pos - 1;
					field = this.parseString();
					fieldPos = new hxjsonast_Position(this.filename,fieldStartPos,this.pos);
					if(Object.prototype.hasOwnProperty.call(names_h,field)) {
						throw haxe_Exception.thrown(new hxjsonast_Error("Duplicate field name \"" + field + "\"",fieldPos));
					} else {
						names_h[field] = true;
					}
					break;
				case 44:
					if(comma1) {
						comma1 = false;
					} else {
						this.invalidChar();
					}
					break;
				case 58:
					if(field == null) {
						this.invalidChar();
					}
					fields.push(new hxjsonast_JObjectField(field,fieldPos,this.parseRec()));
					field = null;
					fieldPos = null;
					comma1 = true;
					break;
				case 125:
					if(field != null || comma1 == false) {
						this.invalidChar();
					}
					return new hxjsonast_Json(hxjsonast_JsonValue.JObject(fields),new hxjsonast_Position(this.filename,startPos1,this.pos));
				default:
					this.invalidChar();
				}
				break;
			default:
				this.invalidChar();
			}
		}
	}
	,parseString: function() {
		var start = this.pos;
		var buf = null;
		while(true) {
			var c = this.source.charCodeAt(this.pos++);
			if(c == 34) {
				break;
			}
			if(c == 92) {
				if(buf == null) {
					buf = new StringBuf();
				}
				var s = this.source;
				var len = this.pos - start - 1;
				buf.b += len == null ? HxOverrides.substr(s,start,null) : HxOverrides.substr(s,start,len);
				c = this.source.charCodeAt(this.pos++);
				switch(c) {
				case 34:case 47:case 92:
					buf.b += String.fromCodePoint(c);
					break;
				case 98:
					buf.b += String.fromCodePoint(8);
					break;
				case 102:
					buf.b += String.fromCodePoint(12);
					break;
				case 110:
					buf.b += String.fromCodePoint(10);
					break;
				case 114:
					buf.b += String.fromCodePoint(13);
					break;
				case 116:
					buf.b += String.fromCodePoint(9);
					break;
				case 117:
					var uc = Std.parseInt("0x" + HxOverrides.substr(this.source,this.pos,4));
					this.pos += 4;
					buf.b += String.fromCodePoint(uc);
					break;
				default:
					throw haxe_Exception.thrown(new hxjsonast_Error("Invalid escape sequence \\" + String.fromCodePoint(c),new hxjsonast_Position(this.filename,this.pos - 2,this.pos)));
				}
				start = this.pos;
			} else if(c != c) {
				this.pos--;
				throw haxe_Exception.thrown(new hxjsonast_Error("Unclosed string",new hxjsonast_Position(this.filename,start - 1,this.pos)));
			}
		}
		if(buf == null) {
			return HxOverrides.substr(this.source,start,this.pos - start - 1);
		} else {
			var s = this.source;
			var len = this.pos - start - 1;
			buf.b += len == null ? HxOverrides.substr(s,start,null) : HxOverrides.substr(s,start,len);
			return buf.b;
		}
	}
	,parseNumber: function(c) {
		var start = this.pos - 1;
		var minus = c == 45;
		var digit = !minus;
		var zero = c == 48;
		var point = false;
		var e = false;
		var pm = false;
		var end = false;
		while(true) {
			switch(this.source.charCodeAt(this.pos++)) {
			case 43:case 45:
				if(!e || pm) {
					this.invalidNumber(start);
				}
				digit = false;
				pm = true;
				break;
			case 46:
				if(minus || point || e) {
					this.invalidNumber(start);
				}
				digit = false;
				point = true;
				break;
			case 48:
				if(zero && !point) {
					this.invalidNumber(start);
				}
				if(minus) {
					minus = false;
					zero = true;
				}
				digit = true;
				break;
			case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
				if(zero && !point) {
					this.invalidNumber(start);
				}
				if(minus) {
					minus = false;
				}
				digit = true;
				zero = false;
				break;
			case 69:case 101:
				if(minus || zero || e) {
					this.invalidNumber(start);
				}
				digit = false;
				e = true;
				break;
			default:
				if(!digit) {
					this.invalidNumber(start);
				}
				this.pos--;
				end = true;
			}
			if(end) {
				break;
			}
		}
		var s = HxOverrides.substr(this.source,start,this.pos - start);
		return new hxjsonast_Json(hxjsonast_JsonValue.JNumber(s),new hxjsonast_Position(this.filename,start,this.pos));
	}
	,nextChar: function() {
		return this.source.charCodeAt(this.pos++);
	}
	,mk: function(pos,value) {
		return new hxjsonast_Json(value,pos);
	}
	,mkPos: function(min,max) {
		return new hxjsonast_Position(this.filename,min,max);
	}
	,invalidChar: function() {
		this.pos--;
		throw haxe_Exception.thrown(new hxjsonast_Error("Invalid character: " + this.source.charAt(this.pos),new hxjsonast_Position(this.filename,this.pos,this.pos + 1)));
	}
	,invalidNumber: function(start) {
		throw haxe_Exception.thrown(new hxjsonast_Error("Invalid number: " + this.source.substring(start,this.pos),new hxjsonast_Position(this.filename,start,this.pos)));
	}
	,__class__: hxjsonast_Parser
};
var hxjsonast_Position = function(file,min,max) {
	this.file = file;
	this.min = min;
	this.max = max;
};
$hxClasses["hxjsonast.Position"] = hxjsonast_Position;
hxjsonast_Position.__name__ = "hxjsonast.Position";
hxjsonast_Position.prototype = {
	__class__: hxjsonast_Position
};
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__implements = function(o,iface) {
	return js_Boot.__interfLoop(js_Boot.getClass(o),iface);
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = "js.Browser";
js_Browser.getLocalStorage = function() {
	try {
		var s = window.localStorage;
		s.getItem("");
		if(s.length == 0) {
			var key = "_hx_" + Math.random();
			s.setItem(key,key);
			s.removeItem(key);
		}
		return s;
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		return null;
	}
};
var json2object_Error = $hxEnums["json2object.Error"] = { __ename__:true,__constructs__:null
	,IncorrectType: ($_=function(variable,expected,pos) { return {_hx_index:0,variable:variable,expected:expected,pos:pos,__enum__:"json2object.Error",toString:$estr}; },$_._hx_name="IncorrectType",$_.__params__ = ["variable","expected","pos"],$_)
	,IncorrectEnumValue: ($_=function(value,expected,pos) { return {_hx_index:1,value:value,expected:expected,pos:pos,__enum__:"json2object.Error",toString:$estr}; },$_._hx_name="IncorrectEnumValue",$_.__params__ = ["value","expected","pos"],$_)
	,InvalidEnumConstructor: ($_=function(value,expected,pos) { return {_hx_index:2,value:value,expected:expected,pos:pos,__enum__:"json2object.Error",toString:$estr}; },$_._hx_name="InvalidEnumConstructor",$_.__params__ = ["value","expected","pos"],$_)
	,UninitializedVariable: ($_=function(variable,pos) { return {_hx_index:3,variable:variable,pos:pos,__enum__:"json2object.Error",toString:$estr}; },$_._hx_name="UninitializedVariable",$_.__params__ = ["variable","pos"],$_)
	,UnknownVariable: ($_=function(variable,pos) { return {_hx_index:4,variable:variable,pos:pos,__enum__:"json2object.Error",toString:$estr}; },$_._hx_name="UnknownVariable",$_.__params__ = ["variable","pos"],$_)
	,ParserError: ($_=function(message,pos) { return {_hx_index:5,message:message,pos:pos,__enum__:"json2object.Error",toString:$estr}; },$_._hx_name="ParserError",$_.__params__ = ["message","pos"],$_)
	,CustomFunctionException: ($_=function(e,pos) { return {_hx_index:6,e:e,pos:pos,__enum__:"json2object.Error",toString:$estr}; },$_._hx_name="CustomFunctionException",$_.__params__ = ["e","pos"],$_)
};
json2object_Error.__constructs__ = [json2object_Error.IncorrectType,json2object_Error.IncorrectEnumValue,json2object_Error.InvalidEnumConstructor,json2object_Error.UninitializedVariable,json2object_Error.UnknownVariable,json2object_Error.ParserError,json2object_Error.CustomFunctionException];
var json2object_InternalError = $hxEnums["json2object.InternalError"] = { __ename__:true,__constructs__:null
	,AbstractNoJsonRepresentation: ($_=function(name) { return {_hx_index:0,name:name,__enum__:"json2object.InternalError",toString:$estr}; },$_._hx_name="AbstractNoJsonRepresentation",$_.__params__ = ["name"],$_)
	,CannotGenerateSchema: ($_=function(name) { return {_hx_index:1,name:name,__enum__:"json2object.InternalError",toString:$estr}; },$_._hx_name="CannotGenerateSchema",$_.__params__ = ["name"],$_)
	,HandleExpr: {_hx_name:"HandleExpr",_hx_index:2,__enum__:"json2object.InternalError",toString:$estr}
	,ParsingThrow: {_hx_name:"ParsingThrow",_hx_index:3,__enum__:"json2object.InternalError",toString:$estr}
	,UnsupportedAbstractEnumType: ($_=function(name) { return {_hx_index:4,name:name,__enum__:"json2object.InternalError",toString:$estr}; },$_._hx_name="UnsupportedAbstractEnumType",$_.__params__ = ["name"],$_)
	,UnsupportedEnumAbstractValue: ($_=function(name) { return {_hx_index:5,name:name,__enum__:"json2object.InternalError",toString:$estr}; },$_._hx_name="UnsupportedEnumAbstractValue",$_.__params__ = ["name"],$_)
	,UnsupportedMapKeyType: ($_=function(name) { return {_hx_index:6,name:name,__enum__:"json2object.InternalError",toString:$estr}; },$_._hx_name="UnsupportedMapKeyType",$_.__params__ = ["name"],$_)
	,UnsupportedSchemaObjectType: ($_=function(name) { return {_hx_index:7,name:name,__enum__:"json2object.InternalError",toString:$estr}; },$_._hx_name="UnsupportedSchemaObjectType",$_.__params__ = ["name"],$_)
	,UnsupportedSchemaType: ($_=function(type) { return {_hx_index:8,type:type,__enum__:"json2object.InternalError",toString:$estr}; },$_._hx_name="UnsupportedSchemaType",$_.__params__ = ["type"],$_)
};
json2object_InternalError.__constructs__ = [json2object_InternalError.AbstractNoJsonRepresentation,json2object_InternalError.CannotGenerateSchema,json2object_InternalError.HandleExpr,json2object_InternalError.ParsingThrow,json2object_InternalError.UnsupportedAbstractEnumType,json2object_InternalError.UnsupportedEnumAbstractValue,json2object_InternalError.UnsupportedMapKeyType,json2object_InternalError.UnsupportedSchemaObjectType,json2object_InternalError.UnsupportedSchemaType];
var json2object_CustomFunctionError = function(message) {
	this.message = message;
};
$hxClasses["json2object.CustomFunctionError"] = json2object_CustomFunctionError;
json2object_CustomFunctionError.__name__ = "json2object.CustomFunctionError";
json2object_CustomFunctionError.prototype = {
	__class__: json2object_CustomFunctionError
};
var json2object_ErrorUtils = function() { };
$hxClasses["json2object.ErrorUtils"] = json2object_ErrorUtils;
json2object_ErrorUtils.__name__ = "json2object.ErrorUtils";
json2object_ErrorUtils.convertError = function(e) {
	var pos;
	switch(e._hx_index) {
	case 0:
		var _g = e.variable;
		var _g = e.expected;
		var pos1 = e.pos;
		pos = pos1;
		break;
	case 1:
		var _g = e.value;
		var _g = e.expected;
		var pos1 = e.pos;
		pos = pos1;
		break;
	case 2:
		var _g = e.value;
		var _g = e.expected;
		var pos1 = e.pos;
		pos = pos1;
		break;
	case 3:
		var _g = e.variable;
		var pos1 = e.pos;
		pos = pos1;
		break;
	case 4:
		var _g = e.variable;
		var pos1 = e.pos;
		pos = pos1;
		break;
	case 5:
		var _g = e.message;
		var pos1 = e.pos;
		pos = pos1;
		break;
	case 6:
		var _g = e.e;
		var pos1 = e.pos;
		pos = pos1;
		break;
	}
	var header = "";
	if(pos != null) {
		var file = pos.file == "" ? "line" : "" + pos.file + ":";
		if(pos.lines.length == 1) {
			header = "" + file + pos.lines[0].number + ": characters " + pos.lines[0].start + "-" + pos.lines[0].end + " : ";
		} else if(pos.lines.length > 1) {
			header = "" + file + pos.lines[0].number + ": lines " + pos.lines[0].number + "-" + pos.lines[pos.lines.length - 1].number + " : ";
		}
	}
	switch(e._hx_index) {
	case 0:
		var _g = e.pos;
		var variable = e.variable;
		var expected = e.expected;
		return header + ("Variable '" + variable + "' should be of type '" + expected + "'");
	case 1:
		var _g = e.pos;
		var variable = e.value;
		var expected = e.expected;
		return header + ("Identifier '" + variable + "' isn't part of '" + expected + "'");
	case 2:
		var _g = e.pos;
		var variable = e.value;
		var expected = e.expected;
		return header + ("Enum argument '" + variable + "' should be of type '" + expected + "'");
	case 3:
		var _g = e.pos;
		var variable = e.variable;
		return header + ("Variable '" + variable + "' should be in the json");
	case 4:
		var _g = e.pos;
		var variable = e.variable;
		return header + ("Variable '" + variable + "' isn't part of the schema");
	case 5:
		var _g = e.pos;
		var message = e.message;
		return header + ("Parser error: " + message);
	case 6:
		var _g = e.pos;
		var e1 = e.e;
		return header + ("Custom function exception: " + (e1 == null ? "null" : Std.string(e1)));
	}
};
json2object_ErrorUtils.convertErrorArray = function(e) {
	var f = json2object_ErrorUtils.convertError;
	var result = new Array(e.length);
	var _g = 0;
	var _g1 = e.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = f(e[i]);
	}
	return result.join("\n");
};
var json2object_JsonParser = function() { };
$hxClasses["json2object.JsonParser"] = json2object_JsonParser;
json2object_JsonParser.__name__ = "json2object.JsonParser";
var json2object_JsonWriter = function() { };
$hxClasses["json2object.JsonWriter"] = json2object_JsonWriter;
json2object_JsonWriter.__name__ = "json2object.JsonWriter";
var json2object_PositionUtils = function(content) {
	this.linesInfo = [];
	var s = 0;
	var e = 0;
	var i = 0;
	var lineCount = 0;
	while(i < content.length) switch(content.charAt(i)) {
	case "\n":
		e = i;
		this.linesInfo.push({ number : lineCount, start : s, end : e});
		++lineCount;
		++i;
		s = i;
		break;
	case "\r":
		e = i;
		if(content.charAt(i + 1) == "\n") {
			++e;
		}
		this.linesInfo.push({ number : lineCount, start : s, end : e});
		++lineCount;
		i = e + 1;
		s = i;
		break;
	default:
		++i;
	}
	this.linesInfo.push({ number : lineCount, start : s, end : i});
};
$hxClasses["json2object.PositionUtils"] = json2object_PositionUtils;
json2object_PositionUtils.__name__ = "json2object.PositionUtils";
json2object_PositionUtils.prototype = {
	convertPosition: function(position) {
		var file = position.file;
		var min = position.min;
		var max = position.max;
		var pos = { file : file, min : min + 1, max : max + 1, lines : []};
		var lastLine = this.linesInfo.length - 1;
		var bounds_min = 0;
		var bounds_max = lastLine;
		if(min > this.linesInfo[0].end) {
			while(bounds_max > bounds_min) {
				var i = (bounds_min + bounds_max) / 2 | 0;
				var line = this.linesInfo[i];
				if(line.start == min) {
					bounds_min = i;
					bounds_max = i;
				}
				if(line.end < min) {
					bounds_min = i + 1;
				}
				if(line.start > min || line.end >= min && line.start < min) {
					bounds_max = i;
				}
			}
		}
		var _g = bounds_min;
		var _g1 = this.linesInfo.length;
		while(_g < _g1) {
			var i = _g++;
			var line = this.linesInfo[i];
			if(line.start <= min && line.end >= max) {
				pos.lines.push({ number : line.number + 1, start : min - line.start + 1, end : max - line.start + 1});
				break;
			}
			if(line.start <= min && min <= line.end) {
				pos.lines.push({ number : line.number + 1, start : min - line.start + 1, end : line.end + 1});
			}
			if(line.start <= max && max <= line.end) {
				pos.lines.push({ number : line.number + 1, start : line.start + 1, end : max - line.start + 1});
			}
			if(line.start >= max || line.end >= max) {
				break;
			}
		}
		return pos;
	}
	,revert: function(position) {
		return new hxjsonast_Position(position.file,position.min - 1,position.max - 1);
	}
	,__class__: json2object_PositionUtils
};
var json2object_writer_StringUtils = function() { };
$hxClasses["json2object.writer.StringUtils"] = json2object_writer_StringUtils;
json2object_writer_StringUtils.__name__ = "json2object.writer.StringUtils";
json2object_writer_StringUtils.quote = function(s) {
	var buf_b = "";
	buf_b += String.fromCodePoint(34);
	var i = 0;
	while(true) {
		var c = s.charCodeAt(i++);
		if(c != c) {
			break;
		}
		switch(c) {
		case 8:
			buf_b += "\\b";
			break;
		case 9:
			buf_b += "\\t";
			break;
		case 10:
			buf_b += "\\n";
			break;
		case 12:
			buf_b += "\\f";
			break;
		case 13:
			buf_b += "\\r";
			break;
		case 34:
			buf_b += "\\\"";
			break;
		case 92:
			buf_b += "\\\\";
			break;
		default:
			buf_b += String.fromCodePoint(c);
		}
	}
	buf_b += String.fromCodePoint(34);
	return buf_b;
};
var phaser_Phaser = function() { };
$hxClasses["phaser.Phaser"] = phaser_Phaser;
phaser_Phaser.__name__ = "phaser.Phaser";
var spine_Animation = function(name,timelines,duration) {
	this.duration = 0;
	this.hashCode = Math.random() * 99999999 | 0;
	if(name == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("name cannot be null."));
	}
	this.name = name;
	this.duration = duration;
	var capacity = timelines.length;
	var this1 = [];
	this.timelineIds = this1;
	this.setTimelines(timelines);
};
$hxClasses["spine.Animation"] = spine_Animation;
spine_Animation.__name__ = "spine.Animation";
spine_Animation.prototype = {
	getTimelines: function() {
		return this.timelines;
	}
	,setTimelines: function(timelines) {
		if(timelines == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("timelines cannot be null."));
		}
		this.timelines = timelines;
		var n = timelines.length;
		var this1 = this.timelineIds;
		this1.splice(0,this1.length);
		var items = timelines;
		var i = 0;
		while(i < n) {
			var result = items[i];
			spine_support_utils_ObjectSet.addAll(this.timelineIds,result.getPropertyIds());
			++i;
		}
	}
	,hasTimeline: function(propertyIds) {
		var _g = 0;
		var _g1 = propertyIds;
		while(_g < _g1.length) {
			var id = _g1[_g];
			++_g;
			if(this.timelineIds.indexOf(id) != -1) {
				return true;
			}
		}
		return false;
	}
	,getDuration: function() {
		return this.duration;
	}
	,setDuration: function(duration) {
		this.duration = duration;
	}
	,apply: function(skeleton,lastTime,time,loop,events,alpha,blend,direction) {
		if(skeleton == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("skeleton cannot be null."));
		}
		if(loop && this.duration != 0) {
			time %= this.duration;
			if(lastTime > 0) {
				lastTime %= this.duration;
			}
		}
		var timelines = this.timelines;
		var i = 0;
		var n = this.timelines.length;
		while(i < n) {
			var result = timelines[i];
			result.apply(skeleton,lastTime,time,events,alpha,blend,direction);
			++i;
		}
	}
	,getName: function() {
		return this.name;
	}
	,toString: function() {
		return this.name;
	}
	,__class__: spine_Animation
};
var spine_Timeline = function(frameCount,propertyIds) {
	if(propertyIds == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("propertyIds cannot be null."));
	}
	this._propertyIds = propertyIds;
	var length = frameCount * this.getFrameEntries();
	if(length == null) {
		length = 0;
	}
	var len = length | 0;
	var capacity = len != 0 ? len : 16;
	var this1 = [];
	var array = this1;
	if(length > 0) {
		var len1 = array.length;
		if(len1 > len) {
			array.splice(len,len - len1);
		} else if(len1 < len) {
			while(len1 < len) {
				array.push(0);
				++len1;
			}
		}
	}
	this.frames = array;
};
$hxClasses["spine.Timeline"] = spine_Timeline;
spine_Timeline.__name__ = "spine.Timeline";
spine_Timeline.search = function(frames,time) {
	var n = frames.length;
	var i = 1;
	while(i < n) {
		if(frames[i] > time) {
			return i - 1;
		}
		++i;
	}
	return n - 1;
};
spine_Timeline.searchWithStep = function(frames,time,step) {
	var n = frames.length;
	var i = step;
	while(i < n) {
		if(frames[i] > time) {
			return i - step;
		}
		i += step;
	}
	return n - step;
};
spine_Timeline.prototype = {
	getPropertyIds: function() {
		return this._propertyIds;
	}
	,getFrames: function() {
		return this.frames;
	}
	,getFrameEntries: function() {
		return 1;
	}
	,getFrameCount: function() {
		return this.frames.length / this.getFrameEntries() | 0;
	}
	,getDuration: function() {
		return this.frames[this.frames.length - this.getFrameEntries()];
	}
	,apply: function(skeleton,lastTime,time,events,alpha,blend,direction) {
	}
	,__class__: spine_Timeline
};
var spine_BoneTimeline = function() { };
$hxClasses["spine.BoneTimeline"] = spine_BoneTimeline;
spine_BoneTimeline.__name__ = "spine.BoneTimeline";
spine_BoneTimeline.__isInterface__ = true;
spine_BoneTimeline.prototype = {
	__class__: spine_BoneTimeline
};
var spine_SlotTimeline = function() { };
$hxClasses["spine.SlotTimeline"] = spine_SlotTimeline;
spine_SlotTimeline.__name__ = "spine.SlotTimeline";
spine_SlotTimeline.__isInterface__ = true;
spine_SlotTimeline.prototype = {
	__class__: spine_SlotTimeline
};
var spine_CurveTimeline = function(frameCount,bezierCount,propertyIds) {
	spine_Timeline.call(this,frameCount,propertyIds);
	var length = frameCount + bezierCount * 18;
	if(length == null) {
		length = 0;
	}
	var len = length | 0;
	var capacity = len != 0 ? len : 16;
	var this1 = [];
	var array = this1;
	if(length > 0) {
		var len1 = array.length;
		if(len1 > len) {
			array.splice(len,len - len1);
		} else if(len1 < len) {
			while(len1 < len) {
				array.push(0);
				++len1;
			}
		}
	}
	this.curves = array;
	this.curves[frameCount - 1] = 1;
};
$hxClasses["spine.CurveTimeline"] = spine_CurveTimeline;
spine_CurveTimeline.__name__ = "spine.CurveTimeline";
spine_CurveTimeline.__super__ = spine_Timeline;
spine_CurveTimeline.prototype = $extend(spine_Timeline.prototype,{
	setLinear: function(frame) {
		this.curves[frame] = 0;
	}
	,setStepped: function(frame) {
		this.curves[frame] = 1;
	}
	,getCurveType: function(frame) {
		return this.curves[frame] | 0;
	}
	,shrink: function(bezierCount) {
		var size = this.getFrameCount() + bezierCount * 18;
		if(this.curves.length > size) {
			var length = size;
			if(length == null) {
				length = 0;
			}
			var len = length | 0;
			var capacity = len != 0 ? len : 16;
			var this1 = [];
			var array = this1;
			if(length > 0) {
				var len1 = array.length;
				if(len1 > len) {
					array.splice(len,len - len1);
				} else if(len1 < len) {
					while(len1 < len) {
						array.push(0);
						++len1;
					}
				}
			}
			var newCurves = array;
			var src = this.curves;
			var dest = newCurves;
			if(src == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("src cannot be null."));
			}
			if(dest == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("dest cannot be null."));
			}
			try {
				spine_support_utils_Array.copy(src,0,dest,0,size);
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				throw haxe_Exception.thrown(new spine_support_error_ArrayIndexOutOfBoundsException("Src: " + src.length + ", " + 0 + ", dest: " + dest.length + ", " + 0 + ", count: " + size));
			}
			this.curves = newCurves;
		}
	}
	,setBezier: function(bezier,frame,value,time1,value1,cx1,cy1,cx2,cy2,time2,value2) {
		var curves = this.curves;
		var i = this.getFrameCount() + bezier * 18;
		if(value == 0) {
			curves[frame] = 2 + i;
		}
		var tmpx = (time1 - cx1 * 2 + cx2) * 0.03;
		var tmpy = (value1 - cy1 * 2 + cy2) * 0.03;
		var dddx = ((cx1 - cx2) * 3 - time1 + time2) * 0.006;
		var dddy = ((cy1 - cy2) * 3 - value1 + value2) * 0.006;
		var ddx = tmpx * 2 + dddx;
		var ddy = tmpy * 2 + dddy;
		var dx = (cx1 - time1) * 0.3 + tmpx + dddx * 0.16666667;
		var dy = (cy1 - value1) * 0.3 + tmpy + dddy * 0.16666667;
		var x = time1 + dx;
		var y = value1 + dy;
		var n = i + 18;
		while(i < n) {
			curves[i] = x;
			curves[i + 1] = y;
			dx += ddx;
			dy += ddy;
			ddx += dddx;
			ddy += dddy;
			x += dx;
			y += dy;
			i += 2;
		}
	}
	,getBezierValue: function(time,frameIndex,valueOffset,i) {
		var curves = this.curves;
		if(curves[i] > time) {
			var x = this.frames[frameIndex];
			var y = this.frames[frameIndex + valueOffset];
			return y + (time - x) / (curves[i] - x) * (curves[i + 1] - y);
		}
		var n = i + 18;
		i += 2;
		while(i < n) {
			if(curves[i] >= time) {
				var x = curves[i - 2];
				var y = curves[i - 1];
				return y + (time - x) / (curves[i] - x) * (curves[i + 1] - y);
			}
			i += 2;
		}
		frameIndex += this.getFrameEntries();
		var x = curves[n - 2];
		var y = curves[n - 1];
		return y + (time - x) / (this.frames[frameIndex] - x) * (this.frames[frameIndex + valueOffset] - y);
	}
	,__class__: spine_CurveTimeline
});
var spine_CurveTimeline1 = function(frameCount,bezierCount,propertyId) {
	spine_CurveTimeline.call(this,frameCount,bezierCount,[propertyId]);
};
$hxClasses["spine.CurveTimeline1"] = spine_CurveTimeline1;
spine_CurveTimeline1.__name__ = "spine.CurveTimeline1";
spine_CurveTimeline1.__super__ = spine_CurveTimeline;
spine_CurveTimeline1.prototype = $extend(spine_CurveTimeline.prototype,{
	getFrameEntries: function() {
		return 2;
	}
	,setFrame: function(frame,time,value) {
		frame <<= 1;
		this.frames[frame] = time;
		this.frames[frame + 1] = value;
	}
	,getCurveValue: function(time) {
		var frames = this.frames;
		var i = frames.length - 2;
		var ii = 2;
		while(ii <= i) {
			if(frames[ii] > time) {
				i = ii - 2;
				break;
			}
			ii += 2;
		}
		var curveType = this.curves[i >> 1] | 0;
		var _continueAfterSwitch0 = false;
		while(true) {
			var _switchCond0 = curveType;
			if(_switchCond0 == 0) {
				var before = frames[i];
				var value = frames[i + 1];
				return value + (time - before) / (frames[i + 2] - before) * (frames[i + 2 + 1] - value);
			} else if(_switchCond0 == 1) {
				return frames[i + 1];
			}
			break;
		}
		return this.getBezierValue(time,i,1,curveType - 2);
	}
	,__class__: spine_CurveTimeline1
});
var spine_CurveTimeline2 = function(frameCount,bezierCount,propertyId1,propertyId2) {
	spine_CurveTimeline.call(this,frameCount,bezierCount,[propertyId1,propertyId2]);
};
$hxClasses["spine.CurveTimeline2"] = spine_CurveTimeline2;
spine_CurveTimeline2.__name__ = "spine.CurveTimeline2";
spine_CurveTimeline2.__super__ = spine_CurveTimeline;
spine_CurveTimeline2.prototype = $extend(spine_CurveTimeline.prototype,{
	getFrameEntries: function() {
		return 3;
	}
	,setFrame: function(frame,time,value1,value2) {
		frame *= 3;
		this.frames[frame] = time;
		this.frames[frame + 1] = value1;
		this.frames[frame + 2] = value2;
	}
	,__class__: spine_CurveTimeline2
});
var spine_RotateTimeline = function(frameCount,bezierCount,boneIndex) {
	this.boneIndex = 0;
	spine_CurveTimeline1.call(this,frameCount,bezierCount,0 + "|" + boneIndex);
	this.boneIndex = boneIndex;
};
$hxClasses["spine.RotateTimeline"] = spine_RotateTimeline;
spine_RotateTimeline.__name__ = "spine.RotateTimeline";
spine_RotateTimeline.__interfaces__ = [spine_BoneTimeline];
spine_RotateTimeline.__super__ = spine_CurveTimeline1;
spine_RotateTimeline.prototype = $extend(spine_CurveTimeline1.prototype,{
	getBoneIndex: function() {
		return this.boneIndex;
	}
	,apply: function(skeleton,lastTime,time,events,alpha,blend,direction) {
		var bone = skeleton.bones[this.boneIndex];
		if(!bone.active) {
			return;
		}
		if(time < this.frames[0]) {
			var _continueAfterSwitch1 = false;
			while(true) {
				var _switchCond1 = blend;
				if(_switchCond1 == 0) {
					bone.rotation = bone.data.rotation;
					return;
				} else if(_switchCond1 == 1) {
					bone.rotation += (bone.data.rotation - bone.rotation) * alpha;
				}
				break;
			}
			return;
		}
		var r = this.getCurveValue(time);
		var _continueAfterSwitch2 = false;
		while(true) {
			var _switchCond2 = blend;
			if(_switchCond2 == 0) {
				bone.rotation = bone.data.rotation + r * alpha;
				break;
			} else if(_switchCond2 == 1) {
				r += bone.data.rotation - bone.rotation;
				bone.rotation += r * alpha;
			} else if(_switchCond2 == 2) {
				r += bone.data.rotation - bone.rotation;
				bone.rotation += r * alpha;
			} else if(_switchCond2 == 3) {
				bone.rotation += r * alpha;
			}
			break;
		}
	}
	,__class__: spine_RotateTimeline
});
var spine_TranslateTimeline = function(frameCount,bezierCount,boneIndex) {
	this.boneIndex = 0;
	spine_CurveTimeline2.call(this,frameCount,bezierCount,1 + "|" + boneIndex,2 + "|" + boneIndex);
	this.boneIndex = boneIndex;
};
$hxClasses["spine.TranslateTimeline"] = spine_TranslateTimeline;
spine_TranslateTimeline.__name__ = "spine.TranslateTimeline";
spine_TranslateTimeline.__interfaces__ = [spine_BoneTimeline];
spine_TranslateTimeline.__super__ = spine_CurveTimeline2;
spine_TranslateTimeline.prototype = $extend(spine_CurveTimeline2.prototype,{
	getBoneIndex: function() {
		return this.boneIndex;
	}
	,apply: function(skeleton,lastTime,time,events,alpha,blend,direction) {
		var bone = skeleton.bones[this.boneIndex];
		if(!bone.active) {
			return;
		}
		var frames = this.frames;
		if(time < frames[0]) {
			var _continueAfterSwitch3 = false;
			while(true) {
				var _switchCond3 = blend;
				if(_switchCond3 == 0) {
					bone.x = bone.data.x;
					bone.y = bone.data.y;
					return;
				} else if(_switchCond3 == 1) {
					bone.x += (bone.data.x - bone.x) * alpha;
					bone.y += (bone.data.y - bone.y) * alpha;
				}
				break;
			}
			return;
		}
		var x = 0;
		var y = 0;
		var i = spine_Timeline.searchWithStep(frames,time,3);
		var curveType = this.curves[i / 3 | 0] | 0;
		var _continueAfterSwitch4 = false;
		while(true) {
			var _switchCond4 = curveType;
			if(_switchCond4 == 0) {
				var before = frames[i];
				x = frames[i + 1];
				y = frames[i + 2];
				var t = (time - before) / (frames[i + 3] - before);
				x += (frames[i + 3 + 1] - x) * t;
				y += (frames[i + 3 + 2] - y) * t;
				break;
			} else if(_switchCond4 == 1) {
				x = frames[i + 1];
				y = frames[i + 2];
				break;
			} else {
				x = this.getBezierValue(time,i,1,curveType - 2 | 0);
				y = this.getBezierValue(time,i,2,curveType + 18 - 2);
			}
			break;
		}
		var _continueAfterSwitch5 = false;
		while(true) {
			var _switchCond5 = blend;
			if(_switchCond5 == 0) {
				bone.x = bone.data.x + x * alpha;
				bone.y = bone.data.y + y * alpha;
				break;
			} else if(_switchCond5 == 1) {
				bone.x += (bone.data.x + x - bone.x) * alpha;
				bone.y += (bone.data.y + y - bone.y) * alpha;
				break;
			} else if(_switchCond5 == 2) {
				bone.x += (bone.data.x + x - bone.x) * alpha;
				bone.y += (bone.data.y + y - bone.y) * alpha;
				break;
			} else if(_switchCond5 == 3) {
				bone.x += x * alpha;
				bone.y += y * alpha;
			}
			break;
		}
	}
	,__class__: spine_TranslateTimeline
});
var spine_TranslateXTimeline = function(frameCount,bezierCount,boneIndex) {
	this.boneIndex = 0;
	spine_CurveTimeline1.call(this,frameCount,bezierCount,1 + "|" + boneIndex);
	this.boneIndex = boneIndex;
};
$hxClasses["spine.TranslateXTimeline"] = spine_TranslateXTimeline;
spine_TranslateXTimeline.__name__ = "spine.TranslateXTimeline";
spine_TranslateXTimeline.__interfaces__ = [spine_BoneTimeline];
spine_TranslateXTimeline.__super__ = spine_CurveTimeline1;
spine_TranslateXTimeline.prototype = $extend(spine_CurveTimeline1.prototype,{
	getBoneIndex: function() {
		return this.boneIndex;
	}
	,apply: function(skeleton,lastTime,time,events,alpha,blend,direction) {
		var bone = skeleton.bones[this.boneIndex];
		if(!bone.active) {
			return;
		}
		var frames = this.frames;
		if(time < frames[0]) {
			var _continueAfterSwitch6 = false;
			while(true) {
				var _switchCond6 = blend;
				if(_switchCond6 == 0) {
					bone.x = bone.data.x;
					return;
				} else if(_switchCond6 == 1) {
					bone.x += (bone.data.x - bone.x) * alpha;
				}
				break;
			}
			return;
		}
		var x = this.getCurveValue(time);
		var _continueAfterSwitch7 = false;
		while(true) {
			var _switchCond7 = blend;
			if(_switchCond7 == 0) {
				bone.x = bone.data.x + x * alpha;
				break;
			} else if(_switchCond7 == 1) {
				bone.x += (bone.data.x + x - bone.x) * alpha;
				break;
			} else if(_switchCond7 == 2) {
				bone.x += (bone.data.x + x - bone.x) * alpha;
				break;
			} else if(_switchCond7 == 3) {
				bone.x += x * alpha;
			}
			break;
		}
	}
	,__class__: spine_TranslateXTimeline
});
var spine_TranslateYTimeline = function(frameCount,bezierCount,boneIndex) {
	this.boneIndex = 0;
	spine_CurveTimeline1.call(this,frameCount,bezierCount,2 + "|" + boneIndex);
	this.boneIndex = boneIndex;
};
$hxClasses["spine.TranslateYTimeline"] = spine_TranslateYTimeline;
spine_TranslateYTimeline.__name__ = "spine.TranslateYTimeline";
spine_TranslateYTimeline.__interfaces__ = [spine_BoneTimeline];
spine_TranslateYTimeline.__super__ = spine_CurveTimeline1;
spine_TranslateYTimeline.prototype = $extend(spine_CurveTimeline1.prototype,{
	getBoneIndex: function() {
		return this.boneIndex;
	}
	,apply: function(skeleton,lastTime,time,events,alpha,blend,direction) {
		var bone = skeleton.bones[this.boneIndex];
		if(!bone.active) {
			return;
		}
		var frames = this.frames;
		if(time < frames[0]) {
			var _continueAfterSwitch8 = false;
			while(true) {
				var _switchCond8 = blend;
				if(_switchCond8 == 0) {
					bone.y = bone.data.y;
					return;
				} else if(_switchCond8 == 1) {
					bone.y += (bone.data.y - bone.y) * alpha;
				}
				break;
			}
			return;
		}
		var y = this.getCurveValue(time);
		var _continueAfterSwitch9 = false;
		while(true) {
			var _switchCond9 = blend;
			if(_switchCond9 == 0) {
				bone.y = bone.data.y + y * alpha;
				break;
			} else if(_switchCond9 == 1) {
				bone.y += (bone.data.y + y - bone.y) * alpha;
				break;
			} else if(_switchCond9 == 2) {
				bone.y += (bone.data.y + y - bone.y) * alpha;
				break;
			} else if(_switchCond9 == 3) {
				bone.y += y * alpha;
			}
			break;
		}
	}
	,__class__: spine_TranslateYTimeline
});
var spine_ScaleTimeline = function(frameCount,bezierCount,boneIndex) {
	this.boneIndex = 0;
	spine_CurveTimeline2.call(this,frameCount,bezierCount,3 + "|" + boneIndex,4 + "|" + boneIndex);
	this.boneIndex = boneIndex;
};
$hxClasses["spine.ScaleTimeline"] = spine_ScaleTimeline;
spine_ScaleTimeline.__name__ = "spine.ScaleTimeline";
spine_ScaleTimeline.__interfaces__ = [spine_BoneTimeline];
spine_ScaleTimeline.__super__ = spine_CurveTimeline2;
spine_ScaleTimeline.prototype = $extend(spine_CurveTimeline2.prototype,{
	getBoneIndex: function() {
		return this.boneIndex;
	}
	,apply: function(skeleton,lastTime,time,events,alpha,blend,direction) {
		var bone = skeleton.bones[this.boneIndex];
		if(!bone.active) {
			return;
		}
		var frames = this.frames;
		if(time < frames[0]) {
			var _continueAfterSwitch10 = false;
			while(true) {
				var _switchCond10 = blend;
				if(_switchCond10 == 0) {
					bone.scaleX = bone.data.scaleX;
					bone.scaleY = bone.data.scaleY;
					return;
				} else if(_switchCond10 == 1) {
					bone.scaleX += (bone.data.scaleX - bone.scaleX) * alpha;
					bone.scaleY += (bone.data.scaleY - bone.scaleY) * alpha;
				}
				break;
			}
			return;
		}
		var x = 0;
		var y = 0;
		var i = spine_Timeline.searchWithStep(frames,time,3);
		var curveType = this.curves[i / 3 | 0] | 0;
		var _continueAfterSwitch11 = false;
		while(true) {
			var _switchCond11 = curveType;
			if(_switchCond11 == 0) {
				var before = frames[i];
				x = frames[i + 1];
				y = frames[i + 2];
				var t = (time - before) / (frames[i + 3] - before);
				x += (frames[i + 3 + 1] - x) * t;
				y += (frames[i + 3 + 2] - y) * t;
				break;
			} else if(_switchCond11 == 1) {
				x = frames[i + 1];
				y = frames[i + 2];
				break;
			} else {
				x = this.getBezierValue(time,i,1,curveType - 2 | 0);
				y = this.getBezierValue(time,i,2,curveType + 18 - 2);
			}
			break;
		}
		x *= bone.data.scaleX;
		y *= bone.data.scaleY;
		if(alpha == 1) {
			if(blend == 3) {
				bone.scaleX += x - bone.data.scaleX;
				bone.scaleY += y - bone.data.scaleY;
			} else {
				bone.scaleX = x;
				bone.scaleY = y;
			}
		} else {
			var bx = 0;
			var by = 0;
			if(direction == 1) {
				var _continueAfterSwitch12 = false;
				while(true) {
					var _switchCond12 = blend;
					if(_switchCond12 == 0) {
						bx = bone.data.scaleX;
						by = bone.data.scaleY;
						bone.scaleX = bx + (Math.abs(x) * (bx > 0 ? 1 : bx < 0 ? -1 : 0) - bx) * alpha;
						bone.scaleY = by + (Math.abs(y) * (by > 0 ? 1 : by < 0 ? -1 : 0) - by) * alpha;
						break;
					} else if(_switchCond12 == 1) {
						bx = bone.scaleX;
						by = bone.scaleY;
						bone.scaleX = bx + (Math.abs(x) * (bx > 0 ? 1 : bx < 0 ? -1 : 0) - bx) * alpha;
						bone.scaleY = by + (Math.abs(y) * (by > 0 ? 1 : by < 0 ? -1 : 0) - by) * alpha;
						break;
					} else if(_switchCond12 == 2) {
						bx = bone.scaleX;
						by = bone.scaleY;
						bone.scaleX = bx + (Math.abs(x) * (bx > 0 ? 1 : bx < 0 ? -1 : 0) - bx) * alpha;
						bone.scaleY = by + (Math.abs(y) * (by > 0 ? 1 : by < 0 ? -1 : 0) - by) * alpha;
						break;
					} else if(_switchCond12 == 3) {
						bx = bone.scaleX;
						by = bone.scaleY;
						bone.scaleX = bx + (Math.abs(x) * (bx > 0 ? 1 : bx < 0 ? -1 : 0) - bone.data.scaleX) * alpha;
						bone.scaleY = by + (Math.abs(y) * (by > 0 ? 1 : by < 0 ? -1 : 0) - bone.data.scaleY) * alpha;
					}
					break;
				}
			} else {
				var _continueAfterSwitch13 = false;
				while(true) {
					var _switchCond13 = blend;
					if(_switchCond13 == 0) {
						bx = Math.abs(bone.data.scaleX) * (x > 0 ? 1 : x < 0 ? -1 : 0);
						by = Math.abs(bone.data.scaleY) * (y > 0 ? 1 : y < 0 ? -1 : 0);
						bone.scaleX = bx + (x - bx) * alpha;
						bone.scaleY = by + (y - by) * alpha;
						break;
					} else if(_switchCond13 == 1) {
						bx = Math.abs(bone.scaleX) * (x > 0 ? 1 : x < 0 ? -1 : 0);
						by = Math.abs(bone.scaleY) * (y > 0 ? 1 : y < 0 ? -1 : 0);
						bone.scaleX = bx + (x - bx) * alpha;
						bone.scaleY = by + (y - by) * alpha;
						break;
					} else if(_switchCond13 == 2) {
						bx = Math.abs(bone.scaleX) * (x > 0 ? 1 : x < 0 ? -1 : 0);
						by = Math.abs(bone.scaleY) * (y > 0 ? 1 : y < 0 ? -1 : 0);
						bone.scaleX = bx + (x - bx) * alpha;
						bone.scaleY = by + (y - by) * alpha;
						break;
					} else if(_switchCond13 == 3) {
						bx = x > 0 ? 1 : x < 0 ? -1 : 0;
						by = y > 0 ? 1 : y < 0 ? -1 : 0;
						bone.scaleX = Math.abs(bone.scaleX) * bx + (x - Math.abs(bone.data.scaleX) * bx) * alpha;
						bone.scaleY = Math.abs(bone.scaleY) * by + (y - Math.abs(bone.data.scaleY) * by) * alpha;
					}
					break;
				}
			}
		}
	}
	,__class__: spine_ScaleTimeline
});
var spine_ScaleXTimeline = function(frameCount,bezierCount,boneIndex) {
	this.boneIndex = 0;
	spine_CurveTimeline1.call(this,frameCount,bezierCount,3 + "|" + boneIndex);
	this.boneIndex = boneIndex;
};
$hxClasses["spine.ScaleXTimeline"] = spine_ScaleXTimeline;
spine_ScaleXTimeline.__name__ = "spine.ScaleXTimeline";
spine_ScaleXTimeline.__interfaces__ = [spine_BoneTimeline];
spine_ScaleXTimeline.__super__ = spine_CurveTimeline1;
spine_ScaleXTimeline.prototype = $extend(spine_CurveTimeline1.prototype,{
	getBoneIndex: function() {
		return this.boneIndex;
	}
	,apply: function(skeleton,lastTime,time,events,alpha,blend,direction) {
		var bone = skeleton.bones[this.boneIndex];
		if(!bone.active) {
			return;
		}
		var frames = this.frames;
		if(time < frames[0]) {
			var _continueAfterSwitch14 = false;
			while(true) {
				var _switchCond14 = blend;
				if(_switchCond14 == 0) {
					bone.scaleX = bone.data.scaleX;
					return;
				} else if(_switchCond14 == 1) {
					bone.scaleX += (bone.data.scaleX - bone.scaleX) * alpha;
				}
				break;
			}
			return;
		}
		var x = this.getCurveValue(time) * bone.data.scaleX;
		if(alpha == 1) {
			if(blend == 3) {
				bone.scaleX += x - bone.data.scaleX;
			} else {
				bone.scaleX = x;
			}
		} else {
			var bx = 0;
			if(direction == 1) {
				var _continueAfterSwitch15 = false;
				while(true) {
					var _switchCond15 = blend;
					if(_switchCond15 == 0) {
						bx = bone.data.scaleX;
						bone.scaleX = bx + (Math.abs(x) * (bx > 0 ? 1 : bx < 0 ? -1 : 0) - bx) * alpha;
						break;
					} else if(_switchCond15 == 1) {
						bx = bone.scaleX;
						bone.scaleX = bx + (Math.abs(x) * (bx > 0 ? 1 : bx < 0 ? -1 : 0) - bx) * alpha;
						break;
					} else if(_switchCond15 == 2) {
						bx = bone.scaleX;
						bone.scaleX = bx + (Math.abs(x) * (bx > 0 ? 1 : bx < 0 ? -1 : 0) - bx) * alpha;
						break;
					} else if(_switchCond15 == 3) {
						bx = bone.scaleX;
						bone.scaleX = bx + (Math.abs(x) * (bx > 0 ? 1 : bx < 0 ? -1 : 0) - bone.data.scaleX) * alpha;
					}
					break;
				}
			} else {
				var _continueAfterSwitch16 = false;
				while(true) {
					var _switchCond16 = blend;
					if(_switchCond16 == 0) {
						bx = Math.abs(bone.data.scaleX) * (x > 0 ? 1 : x < 0 ? -1 : 0);
						bone.scaleX = bx + (x - bx) * alpha;
						break;
					} else if(_switchCond16 == 1) {
						bx = Math.abs(bone.scaleX) * (x > 0 ? 1 : x < 0 ? -1 : 0);
						bone.scaleX = bx + (x - bx) * alpha;
						break;
					} else if(_switchCond16 == 2) {
						bx = Math.abs(bone.scaleX) * (x > 0 ? 1 : x < 0 ? -1 : 0);
						bone.scaleX = bx + (x - bx) * alpha;
						break;
					} else if(_switchCond16 == 3) {
						bx = x > 0 ? 1 : x < 0 ? -1 : 0;
						bone.scaleX = Math.abs(bone.scaleX) * bx + (x - Math.abs(bone.data.scaleX) * bx) * alpha;
					}
					break;
				}
			}
		}
	}
	,__class__: spine_ScaleXTimeline
});
var spine_ScaleYTimeline = function(frameCount,bezierCount,boneIndex) {
	this.boneIndex = 0;
	spine_CurveTimeline1.call(this,frameCount,bezierCount,4 + "|" + boneIndex);
	this.boneIndex = boneIndex;
};
$hxClasses["spine.ScaleYTimeline"] = spine_ScaleYTimeline;
spine_ScaleYTimeline.__name__ = "spine.ScaleYTimeline";
spine_ScaleYTimeline.__interfaces__ = [spine_BoneTimeline];
spine_ScaleYTimeline.__super__ = spine_CurveTimeline1;
spine_ScaleYTimeline.prototype = $extend(spine_CurveTimeline1.prototype,{
	getBoneIndex: function() {
		return this.boneIndex;
	}
	,apply: function(skeleton,lastTime,time,events,alpha,blend,direction) {
		var bone = skeleton.bones[this.boneIndex];
		if(!bone.active) {
			return;
		}
		var frames = this.frames;
		if(time < frames[0]) {
			var _continueAfterSwitch17 = false;
			while(true) {
				var _switchCond17 = blend;
				if(_switchCond17 == 0) {
					bone.scaleY = bone.data.scaleY;
					return;
				} else if(_switchCond17 == 1) {
					bone.scaleY += (bone.data.scaleY - bone.scaleY) * alpha;
				}
				break;
			}
			return;
		}
		var y = this.getCurveValue(time) * bone.data.scaleY;
		if(alpha == 1) {
			if(blend == 3) {
				bone.scaleY += y - bone.data.scaleY;
			} else {
				bone.scaleY = y;
			}
		} else {
			var by = 0;
			if(direction == 1) {
				var _continueAfterSwitch18 = false;
				while(true) {
					var _switchCond18 = blend;
					if(_switchCond18 == 0) {
						by = bone.data.scaleY;
						bone.scaleY = by + (Math.abs(y) * (by > 0 ? 1 : by < 0 ? -1 : 0) - by) * alpha;
						break;
					} else if(_switchCond18 == 1) {
						by = bone.scaleY;
						bone.scaleY = by + (Math.abs(y) * (by > 0 ? 1 : by < 0 ? -1 : 0) - by) * alpha;
						break;
					} else if(_switchCond18 == 2) {
						by = bone.scaleY;
						bone.scaleY = by + (Math.abs(y) * (by > 0 ? 1 : by < 0 ? -1 : 0) - by) * alpha;
						break;
					} else if(_switchCond18 == 3) {
						by = bone.scaleY;
						bone.scaleY = by + (Math.abs(y) * (by > 0 ? 1 : by < 0 ? -1 : 0) - bone.data.scaleY) * alpha;
					}
					break;
				}
			} else {
				var _continueAfterSwitch19 = false;
				while(true) {
					var _switchCond19 = blend;
					if(_switchCond19 == 0) {
						by = Math.abs(bone.data.scaleY) * (y > 0 ? 1 : y < 0 ? -1 : 0);
						bone.scaleY = by + (y - by) * alpha;
						break;
					} else if(_switchCond19 == 1) {
						by = Math.abs(bone.scaleY) * (y > 0 ? 1 : y < 0 ? -1 : 0);
						bone.scaleY = by + (y - by) * alpha;
						break;
					} else if(_switchCond19 == 2) {
						by = Math.abs(bone.scaleY) * (y > 0 ? 1 : y < 0 ? -1 : 0);
						bone.scaleY = by + (y - by) * alpha;
						break;
					} else if(_switchCond19 == 3) {
						by = y > 0 ? 1 : y < 0 ? -1 : 0;
						bone.scaleY = Math.abs(bone.scaleY) * by + (y - Math.abs(bone.data.scaleY) * by) * alpha;
					}
					break;
				}
			}
		}
	}
	,__class__: spine_ScaleYTimeline
});
var spine_ShearTimeline = function(frameCount,bezierCount,boneIndex) {
	this.boneIndex = 0;
	spine_CurveTimeline2.call(this,frameCount,bezierCount,5 + "|" + boneIndex,6 + "|" + boneIndex);
	this.boneIndex = boneIndex;
};
$hxClasses["spine.ShearTimeline"] = spine_ShearTimeline;
spine_ShearTimeline.__name__ = "spine.ShearTimeline";
spine_ShearTimeline.__interfaces__ = [spine_BoneTimeline];
spine_ShearTimeline.__super__ = spine_CurveTimeline2;
spine_ShearTimeline.prototype = $extend(spine_CurveTimeline2.prototype,{
	getBoneIndex: function() {
		return this.boneIndex;
	}
	,apply: function(skeleton,lastTime,time,events,alpha,blend,direction) {
		var bone = skeleton.bones[this.boneIndex];
		if(!bone.active) {
			return;
		}
		var frames = this.frames;
		if(time < frames[0]) {
			var _continueAfterSwitch20 = false;
			while(true) {
				var _switchCond20 = blend;
				if(_switchCond20 == 0) {
					bone.shearX = bone.data.shearX;
					bone.shearY = bone.data.shearY;
					return;
				} else if(_switchCond20 == 1) {
					bone.shearX += (bone.data.shearX - bone.shearX) * alpha;
					bone.shearY += (bone.data.shearY - bone.shearY) * alpha;
				}
				break;
			}
			return;
		}
		var x = 0;
		var y = 0;
		var i = spine_Timeline.searchWithStep(frames,time,3);
		var curveType = this.curves[i / 3 | 0] | 0;
		var _continueAfterSwitch21 = false;
		while(true) {
			var _switchCond21 = curveType;
			if(_switchCond21 == 0) {
				var before = frames[i];
				x = frames[i + 1];
				y = frames[i + 2];
				var t = (time - before) / (frames[i + 3] - before);
				x += (frames[i + 3 + 1] - x) * t;
				y += (frames[i + 3 + 2] - y) * t;
				break;
			} else if(_switchCond21 == 1) {
				x = frames[i + 1];
				y = frames[i + 2];
				break;
			} else {
				x = this.getBezierValue(time,i,1,curveType - 2 | 0);
				y = this.getBezierValue(time,i,2,curveType + 18 - 2);
			}
			break;
		}
		var _continueAfterSwitch22 = false;
		while(true) {
			var _switchCond22 = blend;
			if(_switchCond22 == 0) {
				bone.shearX = bone.data.shearX + x * alpha;
				bone.shearY = bone.data.shearY + y * alpha;
				break;
			} else if(_switchCond22 == 1) {
				bone.shearX += (bone.data.shearX + x - bone.shearX) * alpha;
				bone.shearY += (bone.data.shearY + y - bone.shearY) * alpha;
				break;
			} else if(_switchCond22 == 2) {
				bone.shearX += (bone.data.shearX + x - bone.shearX) * alpha;
				bone.shearY += (bone.data.shearY + y - bone.shearY) * alpha;
				break;
			} else if(_switchCond22 == 3) {
				bone.shearX += x * alpha;
				bone.shearY += y * alpha;
			}
			break;
		}
	}
	,__class__: spine_ShearTimeline
});
var spine_ShearXTimeline = function(frameCount,bezierCount,boneIndex) {
	this.boneIndex = 0;
	spine_CurveTimeline1.call(this,frameCount,bezierCount,5 + "|" + boneIndex);
	this.boneIndex = boneIndex;
};
$hxClasses["spine.ShearXTimeline"] = spine_ShearXTimeline;
spine_ShearXTimeline.__name__ = "spine.ShearXTimeline";
spine_ShearXTimeline.__interfaces__ = [spine_BoneTimeline];
spine_ShearXTimeline.__super__ = spine_CurveTimeline1;
spine_ShearXTimeline.prototype = $extend(spine_CurveTimeline1.prototype,{
	getBoneIndex: function() {
		return this.boneIndex;
	}
	,apply: function(skeleton,lastTime,time,events,alpha,blend,direction) {
		var bone = skeleton.bones[this.boneIndex];
		if(!bone.active) {
			return;
		}
		var frames = this.frames;
		if(time < frames[0]) {
			var _continueAfterSwitch23 = false;
			while(true) {
				var _switchCond23 = blend;
				if(_switchCond23 == 0) {
					bone.shearX = bone.data.shearX;
					return;
				} else if(_switchCond23 == 1) {
					bone.shearX += (bone.data.shearX - bone.shearX) * alpha;
				}
				break;
			}
			return;
		}
		var x = this.getCurveValue(time);
		var _continueAfterSwitch24 = false;
		while(true) {
			var _switchCond24 = blend;
			if(_switchCond24 == 0) {
				bone.shearX = bone.data.shearX + x * alpha;
				break;
			} else if(_switchCond24 == 1) {
				bone.shearX += (bone.data.shearX + x - bone.shearX) * alpha;
				break;
			} else if(_switchCond24 == 2) {
				bone.shearX += (bone.data.shearX + x - bone.shearX) * alpha;
				break;
			} else if(_switchCond24 == 3) {
				bone.shearX += x * alpha;
			}
			break;
		}
	}
	,__class__: spine_ShearXTimeline
});
var spine_ShearYTimeline = function(frameCount,bezierCount,boneIndex) {
	this.boneIndex = 0;
	spine_CurveTimeline1.call(this,frameCount,bezierCount,6 + "|" + boneIndex);
	this.boneIndex = boneIndex;
};
$hxClasses["spine.ShearYTimeline"] = spine_ShearYTimeline;
spine_ShearYTimeline.__name__ = "spine.ShearYTimeline";
spine_ShearYTimeline.__interfaces__ = [spine_BoneTimeline];
spine_ShearYTimeline.__super__ = spine_CurveTimeline1;
spine_ShearYTimeline.prototype = $extend(spine_CurveTimeline1.prototype,{
	getBoneIndex: function() {
		return this.boneIndex;
	}
	,apply: function(skeleton,lastTime,time,events,alpha,blend,direction) {
		var bone = skeleton.bones[this.boneIndex];
		if(!bone.active) {
			return;
		}
		var frames = this.frames;
		if(time < frames[0]) {
			var _continueAfterSwitch25 = false;
			while(true) {
				var _switchCond25 = blend;
				if(_switchCond25 == 0) {
					bone.shearY = bone.data.shearY;
					return;
				} else if(_switchCond25 == 1) {
					bone.shearY += (bone.data.shearY - bone.shearY) * alpha;
				}
				break;
			}
			return;
		}
		var y = this.getCurveValue(time);
		var _continueAfterSwitch26 = false;
		while(true) {
			var _switchCond26 = blend;
			if(_switchCond26 == 0) {
				bone.shearY = bone.data.shearY + y * alpha;
				break;
			} else if(_switchCond26 == 1) {
				bone.shearY += (bone.data.shearY + y - bone.shearY) * alpha;
				break;
			} else if(_switchCond26 == 2) {
				bone.shearY += (bone.data.shearY + y - bone.shearY) * alpha;
				break;
			} else if(_switchCond26 == 3) {
				bone.shearY += y * alpha;
			}
			break;
		}
	}
	,__class__: spine_ShearYTimeline
});
var spine_RGBATimeline = function(frameCount,bezierCount,slotIndex) {
	this.slotIndex = 0;
	spine_CurveTimeline.call(this,frameCount,bezierCount,[7 + "|" + slotIndex,8 + "|" + slotIndex]);
	this.slotIndex = slotIndex;
};
$hxClasses["spine.RGBATimeline"] = spine_RGBATimeline;
spine_RGBATimeline.__name__ = "spine.RGBATimeline";
spine_RGBATimeline.__interfaces__ = [spine_SlotTimeline];
spine_RGBATimeline.__super__ = spine_CurveTimeline;
spine_RGBATimeline.prototype = $extend(spine_CurveTimeline.prototype,{
	getFrameEntries: function() {
		return 5;
	}
	,getSlotIndex: function() {
		return this.slotIndex;
	}
	,setFrame: function(frame,time,r,g,b,a) {
		frame *= 5;
		this.frames[frame] = time;
		this.frames[frame + 1] = r;
		this.frames[frame + 2] = g;
		this.frames[frame + 3] = b;
		this.frames[frame + 4] = a;
	}
	,apply: function(skeleton,lastTime,time,events,alpha,blend,direction) {
		var slot = skeleton.slots[this.slotIndex];
		if(!slot.bone.active) {
			return;
		}
		var frames = this.frames;
		var color = slot.color;
		if(time < frames[0]) {
			var setup = slot.data.color;
			var _continueAfterSwitch27 = false;
			while(true) {
				var _switchCond27 = blend;
				if(_switchCond27 == 0) {
					color.r = setup.r;
					color.g = setup.g;
					color.b = setup.b;
					color.a = setup.a;
					return;
				} else if(_switchCond27 == 1) {
					color.r += (setup.r - color.r) * alpha;
					color.g += (setup.g - color.g) * alpha;
					color.b += (setup.b - color.b) * alpha;
					color.a += (setup.a - color.a) * alpha;
				}
				break;
			}
			return;
		}
		var r = 0;
		var g = 0;
		var b = 0;
		var a = 0;
		var i = spine_Timeline.searchWithStep(frames,time,5);
		var curveType = this.curves[i / 5 | 0] | 0;
		var _continueAfterSwitch28 = false;
		while(true) {
			var _switchCond28 = curveType;
			if(_switchCond28 == 0) {
				var before = frames[i];
				r = frames[i + 1];
				g = frames[i + 2];
				b = frames[i + 3];
				a = frames[i + 4];
				var t = (time - before) / (frames[i + 5] - before);
				r += (frames[i + 5 + 1] - r) * t;
				g += (frames[i + 5 + 2] - g) * t;
				b += (frames[i + 5 + 3] - b) * t;
				a += (frames[i + 5 + 4] - a) * t;
				break;
			} else if(_switchCond28 == 1) {
				r = frames[i + 1];
				g = frames[i + 2];
				b = frames[i + 3];
				a = frames[i + 4];
				break;
			} else {
				r = this.getBezierValue(time,i,1,curveType - 2 | 0);
				g = this.getBezierValue(time,i,2,curveType + 18 - 2);
				b = this.getBezierValue(time,i,3,curveType + 36 - 2);
				a = this.getBezierValue(time,i,4,curveType + 54 - 2);
			}
			break;
		}
		if(alpha == 1) {
			color.r = r;
			color.g = g;
			color.b = b;
			color.a = a;
		} else {
			if(blend == 0) {
				var color1 = slot.data.color;
				color.r = color1.r;
				color.g = color1.g;
				color.b = color1.b;
				color.a = color1.a;
			}
			color.r += (r - color.r) * alpha;
			color.g += (g - color.g) * alpha;
			color.b += (b - color.b) * alpha;
			color.a += (a - color.a) * alpha;
		}
	}
	,__class__: spine_RGBATimeline
});
var spine_RGBTimeline = function(frameCount,bezierCount,slotIndex) {
	this.slotIndex = 0;
	spine_CurveTimeline.call(this,frameCount,bezierCount,[7 + "|" + slotIndex]);
	this.slotIndex = slotIndex;
};
$hxClasses["spine.RGBTimeline"] = spine_RGBTimeline;
spine_RGBTimeline.__name__ = "spine.RGBTimeline";
spine_RGBTimeline.__interfaces__ = [spine_SlotTimeline];
spine_RGBTimeline.__super__ = spine_CurveTimeline;
spine_RGBTimeline.prototype = $extend(spine_CurveTimeline.prototype,{
	getFrameEntries: function() {
		return 4;
	}
	,getSlotIndex: function() {
		return this.slotIndex;
	}
	,setFrame: function(frame,time,r,g,b) {
		frame <<= 2;
		this.frames[frame] = time;
		this.frames[frame + 1] = r;
		this.frames[frame + 2] = g;
		this.frames[frame + 3] = b;
	}
	,apply: function(skeleton,lastTime,time,events,alpha,blend,direction) {
		var slot = skeleton.slots[this.slotIndex];
		if(!slot.bone.active) {
			return;
		}
		var frames = this.frames;
		var color = slot.color;
		if(time < frames[0]) {
			var setup = slot.data.color;
			var _continueAfterSwitch29 = false;
			while(true) {
				var _switchCond29 = blend;
				if(_switchCond29 == 0) {
					color.r = setup.r;
					color.g = setup.g;
					color.b = setup.b;
					return;
				} else if(_switchCond29 == 1) {
					color.r += (setup.r - color.r) * alpha;
					color.g += (setup.g - color.g) * alpha;
					color.b += (setup.b - color.b) * alpha;
				}
				break;
			}
			return;
		}
		var r = 0;
		var g = 0;
		var b = 0;
		var i = spine_Timeline.searchWithStep(frames,time,4);
		var curveType = this.curves[i >> 2] | 0;
		var _continueAfterSwitch30 = false;
		while(true) {
			var _switchCond30 = curveType;
			if(_switchCond30 == 0) {
				var before = frames[i];
				r = frames[i + 1];
				g = frames[i + 2];
				b = frames[i + 3];
				var t = (time - before) / (frames[i + 4] - before);
				r += (frames[i + 4 + 1] - r) * t;
				g += (frames[i + 4 + 2] - g) * t;
				b += (frames[i + 4 + 3] - b) * t;
				break;
			} else if(_switchCond30 == 1) {
				r = frames[i + 1];
				g = frames[i + 2];
				b = frames[i + 3];
				break;
			} else {
				r = this.getBezierValue(time,i,1,curveType - 2);
				g = this.getBezierValue(time,i,2,curveType + 18 - 2);
				b = this.getBezierValue(time,i,3,curveType + 36 - 2);
			}
			break;
		}
		if(alpha == 1) {
			color.r = r;
			color.g = g;
			color.b = b;
		} else {
			if(blend == 0) {
				var setup = slot.data.color;
				color.r = setup.r;
				color.g = setup.g;
				color.b = setup.b;
			}
			color.r += (r - color.r) * alpha;
			color.g += (g - color.g) * alpha;
			color.b += (b - color.b) * alpha;
		}
	}
	,__class__: spine_RGBTimeline
});
var spine_AlphaTimeline = function(frameCount,bezierCount,slotIndex) {
	this.slotIndex = 0;
	spine_CurveTimeline1.call(this,frameCount,bezierCount,8 + "|" + slotIndex);
	this.slotIndex = slotIndex;
};
$hxClasses["spine.AlphaTimeline"] = spine_AlphaTimeline;
spine_AlphaTimeline.__name__ = "spine.AlphaTimeline";
spine_AlphaTimeline.__interfaces__ = [spine_SlotTimeline];
spine_AlphaTimeline.__super__ = spine_CurveTimeline1;
spine_AlphaTimeline.prototype = $extend(spine_CurveTimeline1.prototype,{
	getSlotIndex: function() {
		return this.slotIndex;
	}
	,apply: function(skeleton,lastTime,time,events,alpha,blend,direction) {
		var slot = skeleton.slots[this.slotIndex];
		if(!slot.bone.active) {
			return;
		}
		var frames = this.frames;
		var color = slot.color;
		if(time < frames[0]) {
			var setup = slot.data.color;
			var _continueAfterSwitch31 = false;
			while(true) {
				var _switchCond31 = blend;
				if(_switchCond31 == 0) {
					color.a = setup.a;
					return;
				} else if(_switchCond31 == 1) {
					color.a += (setup.a - color.a) * alpha;
				}
				break;
			}
			return;
		}
		var a = this.getCurveValue(time);
		if(alpha == 1) {
			color.a = a;
		} else {
			if(blend == 0) {
				color.a = slot.data.color.a;
			}
			color.a += (a - color.a) * alpha;
		}
	}
	,__class__: spine_AlphaTimeline
});
var spine_RGBA2Timeline = function(frameCount,bezierCount,slotIndex) {
	this.slotIndex = 0;
	spine_CurveTimeline.call(this,frameCount,bezierCount,[7 + "|" + slotIndex,8 + "|" + slotIndex,9 + "|" + slotIndex]);
	this.slotIndex = slotIndex;
};
$hxClasses["spine.RGBA2Timeline"] = spine_RGBA2Timeline;
spine_RGBA2Timeline.__name__ = "spine.RGBA2Timeline";
spine_RGBA2Timeline.__interfaces__ = [spine_SlotTimeline];
spine_RGBA2Timeline.__super__ = spine_CurveTimeline;
spine_RGBA2Timeline.prototype = $extend(spine_CurveTimeline.prototype,{
	getFrameEntries: function() {
		return 8;
	}
	,getSlotIndex: function() {
		return this.slotIndex;
	}
	,setFrame: function(frame,time,r,g,b,a,r2,g2,b2) {
		frame <<= 3;
		this.frames[frame] = time;
		this.frames[frame + 1] = r;
		this.frames[frame + 2] = g;
		this.frames[frame + 3] = b;
		this.frames[frame + 4] = a;
		this.frames[frame + 5] = r2;
		this.frames[frame + 6] = g2;
		this.frames[frame + 7] = b2;
	}
	,apply: function(skeleton,lastTime,time,events,alpha,blend,direction) {
		var slot = skeleton.slots[this.slotIndex];
		if(!slot.bone.active) {
			return;
		}
		var frames = this.frames;
		var light = slot.color;
		var dark = slot.darkColor;
		if(time < frames[0]) {
			var setupLight = slot.data.color;
			var setupDark = slot.data.darkColor;
			var _continueAfterSwitch32 = false;
			while(true) {
				var _switchCond32 = blend;
				if(_switchCond32 == 0) {
					light.r = setupLight.r;
					light.g = setupLight.g;
					light.b = setupLight.b;
					light.a = setupLight.a;
					dark.r = setupDark.r;
					dark.g = setupDark.g;
					dark.b = setupDark.b;
					return;
				} else if(_switchCond32 == 1) {
					light.r += (setupLight.r - light.r) * alpha;
					light.g += (setupLight.g - light.g) * alpha;
					light.b += (setupLight.b - light.b) * alpha;
					light.a += (setupLight.a - light.a) * alpha;
					dark.r += (setupDark.r - dark.r) * alpha;
					dark.g += (setupDark.g - dark.g) * alpha;
					dark.b += (setupDark.b - dark.b) * alpha;
				}
				break;
			}
			return;
		}
		var r = 0;
		var g = 0;
		var b = 0;
		var a = 0;
		var r2 = 0;
		var g2 = 0;
		var b2 = 0;
		var i = spine_Timeline.searchWithStep(frames,time,8);
		var curveType = this.curves[i >> 3] | 0;
		var _continueAfterSwitch33 = false;
		while(true) {
			var _switchCond33 = curveType;
			if(_switchCond33 == 0) {
				var before = frames[i];
				r = frames[i + 1];
				g = frames[i + 2];
				b = frames[i + 3];
				a = frames[i + 4];
				r2 = frames[i + 5];
				g2 = frames[i + 6];
				b2 = frames[i + 7];
				var t = (time - before) / (frames[i + 8] - before);
				r += (frames[i + 8 + 1] - r) * t;
				g += (frames[i + 8 + 2] - g) * t;
				b += (frames[i + 8 + 3] - b) * t;
				a += (frames[i + 8 + 4] - a) * t;
				r2 += (frames[i + 8 + 5] - r2) * t;
				g2 += (frames[i + 8 + 6] - g2) * t;
				b2 += (frames[i + 8 + 7] - b2) * t;
				break;
			} else if(_switchCond33 == 1) {
				r = frames[i + 1];
				g = frames[i + 2];
				b = frames[i + 3];
				a = frames[i + 4];
				r2 = frames[i + 5];
				g2 = frames[i + 6];
				b2 = frames[i + 7];
				break;
			} else {
				r = this.getBezierValue(time,i,1,curveType - 2);
				g = this.getBezierValue(time,i,2,curveType + 18 - 2);
				b = this.getBezierValue(time,i,3,curveType + 36 - 2);
				a = this.getBezierValue(time,i,4,curveType + 54 - 2);
				r2 = this.getBezierValue(time,i,5,curveType + 72 - 2);
				g2 = this.getBezierValue(time,i,6,curveType + 90 - 2);
				b2 = this.getBezierValue(time,i,7,curveType + 108 - 2);
			}
			break;
		}
		if(alpha == 1) {
			light.r = r;
			light.g = g;
			light.b = b;
			light.a = a;
			dark.r = r2;
			dark.g = g2;
			dark.b = b2;
		} else {
			if(blend == 0) {
				var color = slot.data.color;
				light.r = color.r;
				light.g = color.g;
				light.b = color.b;
				light.a = color.a;
				var setupDark = slot.data.darkColor;
				dark.r = setupDark.r;
				dark.g = setupDark.g;
				dark.b = setupDark.b;
			}
			light.r += (r - light.r) * alpha;
			light.g += (g - light.g) * alpha;
			light.b += (b - light.b) * alpha;
			light.a += (a - light.a) * alpha;
			dark.r += (r2 - dark.r) * alpha;
			dark.g += (g2 - dark.g) * alpha;
			dark.b += (b2 - dark.b) * alpha;
		}
	}
	,__class__: spine_RGBA2Timeline
});
var spine_RGB2Timeline = function(frameCount,bezierCount,slotIndex) {
	this.slotIndex = 0;
	spine_CurveTimeline.call(this,frameCount,bezierCount,[7 + "|" + slotIndex,9 + "|" + slotIndex]);
	this.slotIndex = slotIndex;
};
$hxClasses["spine.RGB2Timeline"] = spine_RGB2Timeline;
spine_RGB2Timeline.__name__ = "spine.RGB2Timeline";
spine_RGB2Timeline.__interfaces__ = [spine_SlotTimeline];
spine_RGB2Timeline.__super__ = spine_CurveTimeline;
spine_RGB2Timeline.prototype = $extend(spine_CurveTimeline.prototype,{
	getFrameEntries: function() {
		return 7;
	}
	,getSlotIndex: function() {
		return this.slotIndex;
	}
	,setFrame: function(frame,time,r,g,b,r2,g2,b2) {
		frame *= 7;
		this.frames[frame] = time;
		this.frames[frame + 1] = r;
		this.frames[frame + 2] = g;
		this.frames[frame + 3] = b;
		this.frames[frame + 4] = r2;
		this.frames[frame + 5] = g2;
		this.frames[frame + 6] = b2;
	}
	,apply: function(skeleton,lastTime,time,events,alpha,blend,direction) {
		var slot = skeleton.slots[this.slotIndex];
		if(!slot.bone.active) {
			return;
		}
		var frames = this.frames;
		var light = slot.color;
		var dark = slot.darkColor;
		if(time < frames[0]) {
			var setupLight = slot.data.color;
			var setupDark = slot.data.darkColor;
			var _continueAfterSwitch34 = false;
			while(true) {
				var _switchCond34 = blend;
				if(_switchCond34 == 0) {
					light.r = setupLight.r;
					light.g = setupLight.g;
					light.b = setupLight.b;
					dark.r = setupDark.r;
					dark.g = setupDark.g;
					dark.b = setupDark.b;
					return;
				} else if(_switchCond34 == 1) {
					light.r += (setupLight.r - light.r) * alpha;
					light.g += (setupLight.g - light.g) * alpha;
					light.b += (setupLight.b - light.b) * alpha;
					dark.r += (setupDark.r - dark.r) * alpha;
					dark.g += (setupDark.g - dark.g) * alpha;
					dark.b += (setupDark.b - dark.b) * alpha;
				}
				break;
			}
			return;
		}
		var r = 0;
		var g = 0;
		var b = 0;
		var r2 = 0;
		var g2 = 0;
		var b2 = 0;
		var i = spine_Timeline.searchWithStep(frames,time,7);
		var curveType = this.curves[i / 7 | 0] | 0;
		var _continueAfterSwitch35 = false;
		while(true) {
			var _switchCond35 = curveType;
			if(_switchCond35 == 0) {
				var before = frames[i];
				r = frames[i + 1];
				g = frames[i + 2];
				b = frames[i + 3];
				r2 = frames[i + 4];
				g2 = frames[i + 5];
				b2 = frames[i + 6];
				var t = (time - before) / (frames[i + 7] - before);
				r += (frames[i + 7 + 1] - r) * t;
				g += (frames[i + 7 + 2] - g) * t;
				b += (frames[i + 7 + 3] - b) * t;
				r2 += (frames[i + 7 + 4] - r2) * t;
				g2 += (frames[i + 7 + 5] - g2) * t;
				b2 += (frames[i + 7 + 6] - b2) * t;
				break;
			} else if(_switchCond35 == 1) {
				r = frames[i + 1];
				g = frames[i + 2];
				b = frames[i + 3];
				r2 = frames[i + 4];
				g2 = frames[i + 5];
				b2 = frames[i + 6];
				break;
			} else {
				r = this.getBezierValue(time,i,1,curveType - 2 | 0);
				g = this.getBezierValue(time,i,2,curveType + 18 - 2);
				b = this.getBezierValue(time,i,3,curveType + 36 - 2);
				r2 = this.getBezierValue(time,i,4,curveType + 54 - 2);
				g2 = this.getBezierValue(time,i,5,curveType + 72 - 2);
				b2 = this.getBezierValue(time,i,6,curveType + 90 - 2);
			}
			break;
		}
		if(alpha == 1) {
			light.r = r;
			light.g = g;
			light.b = b;
			dark.r = r2;
			dark.g = g2;
			dark.b = b2;
		} else {
			if(blend == 0) {
				var setupLight = slot.data.color;
				var setupDark = slot.data.darkColor;
				light.r = setupLight.r;
				light.g = setupLight.g;
				light.b = setupLight.b;
				dark.r = setupDark.r;
				dark.g = setupDark.g;
				dark.b = setupDark.b;
			}
			light.r += (r - light.r) * alpha;
			light.g += (g - light.g) * alpha;
			light.b += (b - light.b) * alpha;
			dark.r += (r2 - dark.r) * alpha;
			dark.g += (g2 - dark.g) * alpha;
			dark.b += (b2 - dark.b) * alpha;
		}
	}
	,__class__: spine_RGB2Timeline
});
var spine_AttachmentTimeline = function(frameCount,slotIndex) {
	this.slotIndex = 0;
	spine_Timeline.call(this,frameCount,[10 + "|" + slotIndex]);
	this.slotIndex = slotIndex;
	var length = frameCount;
	if(length == null) {
		length = 0;
	}
	var len = length | 0;
	var capacity = len != 0 ? len : 16;
	var this1 = [];
	var array = this1;
	if(length != 0) {
		var len1 = array.length;
		if(len1 > len) {
			array.splice(len,len - len1);
		} else if(len1 < len) {
			array[len - 1] = null;
		}
	}
	this.attachmentNames = array;
};
$hxClasses["spine.AttachmentTimeline"] = spine_AttachmentTimeline;
spine_AttachmentTimeline.__name__ = "spine.AttachmentTimeline";
spine_AttachmentTimeline.__interfaces__ = [spine_SlotTimeline];
spine_AttachmentTimeline.__super__ = spine_Timeline;
spine_AttachmentTimeline.prototype = $extend(spine_Timeline.prototype,{
	getFrameCount: function() {
		return this.frames.length;
	}
	,getSlotIndex: function() {
		return this.slotIndex;
	}
	,getAttachmentNames: function() {
		return this.attachmentNames;
	}
	,setFrame: function(frame,time,attachmentName) {
		this.frames[frame] = time;
		this.attachmentNames[frame] = attachmentName;
	}
	,apply: function(skeleton,lastTime,time,events,alpha,blend,direction) {
		var slot = skeleton.slots[this.slotIndex];
		if(!slot.bone.active) {
			return;
		}
		if(direction == 1) {
			if(blend == 0) {
				var attachmentName = slot.data.attachmentName;
				var attachment = attachmentName == null ? null : skeleton.getAttachment(this.slotIndex,attachmentName);
				if(slot.attachment != attachment) {
					var tmp;
					if(!(!((attachment) instanceof spine_attachments_VertexAttachment) || !((slot.attachment) instanceof spine_attachments_VertexAttachment))) {
						var result = attachment;
						var _this = result;
						var result = slot.attachment;
						var _this1 = result;
						tmp = (_this.deformAttachment != null ? _this.deformAttachment : _this) != (_this1.deformAttachment != null ? _this1.deformAttachment : _this1);
					} else {
						tmp = true;
					}
					if(tmp) {
						var this1 = slot.deform;
						this1.splice(0,this1.length);
					}
					slot.attachment = attachment;
					slot.attachmentTime = slot.bone.skeleton.time;
				}
			}
			return;
		}
		if(time < this.frames[0]) {
			if(blend == 0 || blend == 1) {
				var attachmentName = slot.data.attachmentName;
				var attachment = attachmentName == null ? null : skeleton.getAttachment(this.slotIndex,attachmentName);
				if(slot.attachment != attachment) {
					var tmp;
					if(!(!((attachment) instanceof spine_attachments_VertexAttachment) || !((slot.attachment) instanceof spine_attachments_VertexAttachment))) {
						var result = attachment;
						var _this = result;
						var result = slot.attachment;
						var _this1 = result;
						tmp = (_this.deformAttachment != null ? _this.deformAttachment : _this) != (_this1.deformAttachment != null ? _this1.deformAttachment : _this1);
					} else {
						tmp = true;
					}
					if(tmp) {
						var this1 = slot.deform;
						this1.splice(0,this1.length);
					}
					slot.attachment = attachment;
					slot.attachmentTime = slot.bone.skeleton.time;
				}
			}
			return;
		}
		var attachmentName = this.attachmentNames[spine_Timeline.search(this.frames,time)];
		var attachment = attachmentName == null ? null : skeleton.getAttachment(this.slotIndex,attachmentName);
		if(slot.attachment != attachment) {
			var tmp;
			if(!(!((attachment) instanceof spine_attachments_VertexAttachment) || !((slot.attachment) instanceof spine_attachments_VertexAttachment))) {
				var result = attachment;
				var _this = result;
				var result = slot.attachment;
				var _this1 = result;
				tmp = (_this.deformAttachment != null ? _this.deformAttachment : _this) != (_this1.deformAttachment != null ? _this1.deformAttachment : _this1);
			} else {
				tmp = true;
			}
			if(tmp) {
				var this1 = slot.deform;
				this1.splice(0,this1.length);
			}
			slot.attachment = attachment;
			slot.attachmentTime = slot.bone.skeleton.time;
		}
	}
	,setAttachment: function(skeleton,slot,attachmentName) {
		var attachment = attachmentName == null ? null : skeleton.getAttachment(this.slotIndex,attachmentName);
		if(slot.attachment != attachment) {
			var tmp;
			if(!(!((attachment) instanceof spine_attachments_VertexAttachment) || !((slot.attachment) instanceof spine_attachments_VertexAttachment))) {
				var result = attachment;
				var _this = result;
				var result = slot.attachment;
				var _this1 = result;
				tmp = (_this.deformAttachment != null ? _this.deformAttachment : _this) != (_this1.deformAttachment != null ? _this1.deformAttachment : _this1);
			} else {
				tmp = true;
			}
			if(tmp) {
				var this1 = slot.deform;
				this1.splice(0,this1.length);
			}
			slot.attachment = attachment;
			slot.attachmentTime = slot.bone.skeleton.time;
		}
	}
	,__class__: spine_AttachmentTimeline
});
var spine_DeformTimeline = function(frameCount,bezierCount,slotIndex,attachment) {
	this.slotIndex = 0;
	spine_CurveTimeline.call(this,frameCount,bezierCount,[11 + "|" + slotIndex + "|" + attachment.id]);
	this.slotIndex = slotIndex;
	this.attachment = attachment;
	var length = frameCount;
	var length2 = 0;
	if(length2 == null) {
		length2 = 0;
	}
	if(length == null) {
		length = 0;
	}
	var len = length | 0;
	var len2 = length2 | 0;
	var capacity = len != 0 ? len : 16;
	var this1 = [];
	var array = this1;
	if(length > 0) {
		var len1 = array.length;
		if(len1 > len) {
			array.splice(len,len - len1);
		} else if(len1 < len) {
			array[len - 1] = null;
		}
	}
	var _g = 0;
	var _g1 = len2;
	while(_g < _g1) {
		var i = _g++;
		var length = length2;
		if(length == null) {
			length = 0;
		}
		var len = length | 0;
		var capacity = len != 0 ? len : 16;
		var this1 = [];
		var array1 = this1;
		if(length > 0) {
			var len1 = array1.length;
			if(len1 > len) {
				array1.splice(len,len - len1);
			} else if(len1 < len) {
				while(len1 < len) {
					array1.push(0);
					++len1;
				}
			}
		}
		array[i] = array1;
	}
	this.vertices = array;
};
$hxClasses["spine.DeformTimeline"] = spine_DeformTimeline;
spine_DeformTimeline.__name__ = "spine.DeformTimeline";
spine_DeformTimeline.__interfaces__ = [spine_SlotTimeline];
spine_DeformTimeline.__super__ = spine_CurveTimeline;
spine_DeformTimeline.prototype = $extend(spine_CurveTimeline.prototype,{
	getFrameCount: function() {
		return this.frames.length;
	}
	,getSlotIndex: function() {
		return this.slotIndex;
	}
	,getAttachment: function() {
		return this.attachment;
	}
	,getVertices: function() {
		return this.vertices;
	}
	,setFrame: function(frame,time,vertices) {
		this.frames[frame] = time;
		this.vertices[frame] = vertices;
	}
	,setBezier: function(bezier,frame,value,time1,value1,cx1,cy1,cx2,cy2,time2,value2) {
		var curves = this.curves;
		var i = this.frames.length + bezier * 18;
		if(value == 0) {
			curves[frame] = 2 + i;
		}
		var tmpx = (time1 - cx1 * 2 + cx2) * 0.03;
		var tmpy = cy2 * 0.03 - cy1 * 0.06;
		var dddx = ((cx1 - cx2) * 3 - time1 + time2) * 0.006;
		var dddy = (cy1 - cy2 + 0.33333333) * 0.018;
		var ddx = tmpx * 2 + dddx;
		var ddy = tmpy * 2 + dddy;
		var dx = (cx1 - time1) * 0.3 + tmpx + dddx * 0.16666667;
		var dy = cy1 * 0.3 + tmpy + dddy * 0.16666667;
		var x = time1 + dx;
		var y = dy;
		var n = i + 18;
		while(i < n) {
			curves[i] = x;
			curves[i + 1] = y;
			dx += ddx;
			dy += ddy;
			ddx += dddx;
			ddy += dddy;
			x += dx;
			y += dy;
			i += 2;
		}
	}
	,getCurvePercent: function(time,frame) {
		var curves = this.curves;
		var i = curves[frame] | 0;
		var _continueAfterSwitch36 = false;
		while(true) {
			var _switchCond36 = i;
			if(_switchCond36 == 0) {
				var x = this.frames[frame];
				return (time - x) / (this.frames[frame + this.getFrameEntries()] - x);
			} else if(_switchCond36 == 1) {
				return 0;
			}
			break;
		}
		i -= 2;
		if(curves[i] > time) {
			var x = this.frames[frame];
			return curves[i + 1] * (time - x) / (curves[i] - x);
		}
		var n = i + 18;
		i += 2;
		while(i < n) {
			if(curves[i] >= time) {
				var x = curves[i - 2];
				var y = curves[i - 1];
				return y + (time - x) / (curves[i] - x) * (curves[i + 1] - y);
			}
			i += 2;
		}
		var x = curves[n - 2];
		var y = curves[n - 1];
		return y + (1 - y) * (time - x) / (this.frames[frame + this.getFrameEntries()] - x);
	}
	,apply: function(skeleton,lastTime,time,events,alpha,blend,direction) {
		var slot = skeleton.slots[this.slotIndex];
		if(!slot.bone.active) {
			return;
		}
		var slotAttachment = slot.attachment;
		var tmp;
		if(((slotAttachment) instanceof spine_attachments_VertexAttachment)) {
			var result = slotAttachment;
			var _this = result;
			tmp = (_this.deformAttachment != null ? _this.deformAttachment : _this) != this.attachment;
		} else {
			tmp = true;
		}
		if(tmp) {
			return;
		}
		var deformArray = slot.deform;
		if(deformArray.length == 0) {
			blend = 0;
		}
		var vertices = this.vertices;
		var vertexCount = vertices[0].length;
		var frames = this.frames;
		if(time < frames[0]) {
			var result = slotAttachment;
			var vertexAttachment = result;
			var _continueAfterSwitch37 = false;
			while(true) {
				var _switchCond37 = blend;
				if(_switchCond37 == 0) {
					deformArray.splice(0,deformArray.length);
					return;
				} else if(_switchCond37 == 1) {
					if(alpha == 1) {
						deformArray.splice(0,deformArray.length);
						return;
					}
					var len = deformArray.length;
					if(len > vertexCount) {
						deformArray.splice(vertexCount,vertexCount - len);
					} else if(len < vertexCount) {
						while(len < vertexCount) {
							deformArray.push(0);
							++len;
						}
					}
					var deform = deformArray;
					if(vertexAttachment.bones == null) {
						var setupVertices = vertexAttachment.vertices;
						var i = 0;
						while(i < vertexCount) {
							deform[i] += (setupVertices[i] - deform[i]) * alpha;
							++i;
						}
					} else {
						alpha = 1 - alpha;
						var i1 = 0;
						while(i1 < vertexCount) {
							deform[i1] *= alpha;
							++i1;
						}
					}
				}
				break;
			}
			return;
		}
		var len = deformArray.length;
		if(len > vertexCount) {
			deformArray.splice(vertexCount,vertexCount - len);
		} else if(len < vertexCount) {
			while(len < vertexCount) {
				deformArray.push(0);
				++len;
			}
		}
		var deform = deformArray;
		if(time >= frames[frames.length - 1]) {
			var lastVertices = vertices[frames.length - 1];
			if(alpha == 1) {
				if(blend == 3) {
					var result = slotAttachment;
					var vertexAttachment = result;
					if(vertexAttachment.bones == null) {
						var setupVertices = vertexAttachment.vertices;
						var i = 0;
						while(i < vertexCount) {
							deform[i] += lastVertices[i] - setupVertices[i];
							++i;
						}
					} else {
						var i = 0;
						while(i < vertexCount) {
							deform[i] += lastVertices[i];
							++i;
						}
					}
				} else {
					var src = lastVertices;
					var dest = deform;
					if(src == null) {
						throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("src cannot be null."));
					}
					if(dest == null) {
						throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("dest cannot be null."));
					}
					try {
						spine_support_utils_Array.copy(src,0,dest,0,vertexCount);
					} catch( _g ) {
						haxe_NativeStackTrace.lastError = _g;
						throw haxe_Exception.thrown(new spine_support_error_ArrayIndexOutOfBoundsException("Src: " + src.length + ", " + 0 + ", dest: " + dest.length + ", " + 0 + ", count: " + vertexCount));
					}
				}
			} else {
				var _continueAfterSwitch38 = false;
				while(true) {
					var _switchCond38 = blend;
					if(_switchCond38 == 0) {
						var result = slotAttachment;
						var vertexAttachment = result;
						if(vertexAttachment.bones == null) {
							var setupVertices = vertexAttachment.vertices;
							var i = 0;
							while(i < vertexCount) {
								var setup = setupVertices[i];
								deform[i] = setup + (lastVertices[i] - setup) * alpha;
								++i;
							}
						} else {
							var i1 = 0;
							while(i1 < vertexCount) {
								deform[i1] = lastVertices[i1] * alpha;
								++i1;
							}
						}
						break;
					} else if(_switchCond38 == 1) {
						var i2 = 0;
						while(i2 < vertexCount) {
							deform[i2] += (lastVertices[i2] - deform[i2]) * alpha;
							++i2;
						}
						break;
					} else if(_switchCond38 == 2) {
						var i3 = 0;
						while(i3 < vertexCount) {
							deform[i3] += (lastVertices[i3] - deform[i3]) * alpha;
							++i3;
						}
						break;
					} else if(_switchCond38 == 3) {
						var result1 = slotAttachment;
						var vertexAttachment1 = result1;
						if(vertexAttachment1.bones == null) {
							var setupVertices1 = vertexAttachment1.vertices;
							var i4 = 0;
							while(i4 < vertexCount) {
								deform[i4] += (lastVertices[i4] - setupVertices1[i4]) * alpha;
								++i4;
							}
						} else {
							var i5 = 0;
							while(i5 < vertexCount) {
								deform[i5] += lastVertices[i5] * alpha;
								++i5;
							}
						}
					}
					break;
				}
			}
			return;
		}
		var frame = spine_Timeline.search(frames,time);
		var percent = this.getCurvePercent(time,frame);
		var prevVertices = vertices[frame];
		var nextVertices = vertices[frame + 1];
		if(alpha == 1) {
			if(blend == 3) {
				var result = slotAttachment;
				var vertexAttachment = result;
				if(vertexAttachment.bones == null) {
					var setupVertices = vertexAttachment.vertices;
					var i = 0;
					while(i < vertexCount) {
						var prev = prevVertices[i];
						deform[i] += prev + (nextVertices[i] - prev) * percent - setupVertices[i];
						++i;
					}
				} else {
					var i = 0;
					while(i < vertexCount) {
						var prev = prevVertices[i];
						deform[i] += prev + (nextVertices[i] - prev) * percent;
						++i;
					}
				}
			} else {
				var i = 0;
				while(i < vertexCount) {
					var prev = prevVertices[i];
					deform[i] = prev + (nextVertices[i] - prev) * percent;
					++i;
				}
			}
		} else {
			var _continueAfterSwitch39 = false;
			while(true) {
				var _switchCond39 = blend;
				if(_switchCond39 == 0) {
					var result = slotAttachment;
					var vertexAttachment = result;
					if(vertexAttachment.bones == null) {
						var setupVertices = vertexAttachment.vertices;
						var i = 0;
						while(i < vertexCount) {
							var prev = prevVertices[i];
							var setup = setupVertices[i];
							deform[i] = setup + (prev + (nextVertices[i] - prev) * percent - setup) * alpha;
							++i;
						}
					} else {
						var i1 = 0;
						while(i1 < vertexCount) {
							var prev1 = prevVertices[i1];
							deform[i1] = (prev1 + (nextVertices[i1] - prev1) * percent) * alpha;
							++i1;
						}
					}
					break;
				} else if(_switchCond39 == 1) {
					var i2 = 0;
					while(i2 < vertexCount) {
						var prev2 = prevVertices[i2];
						deform[i2] += (prev2 + (nextVertices[i2] - prev2) * percent - deform[i2]) * alpha;
						++i2;
					}
					break;
				} else if(_switchCond39 == 2) {
					var i3 = 0;
					while(i3 < vertexCount) {
						var prev3 = prevVertices[i3];
						deform[i3] += (prev3 + (nextVertices[i3] - prev3) * percent - deform[i3]) * alpha;
						++i3;
					}
					break;
				} else if(_switchCond39 == 3) {
					var result1 = slotAttachment;
					var vertexAttachment1 = result1;
					if(vertexAttachment1.bones == null) {
						var setupVertices1 = vertexAttachment1.vertices;
						var i4 = 0;
						while(i4 < vertexCount) {
							var prev4 = prevVertices[i4];
							deform[i4] += (prev4 + (nextVertices[i4] - prev4) * percent - setupVertices1[i4]) * alpha;
							++i4;
						}
					} else {
						var i5 = 0;
						while(i5 < vertexCount) {
							var prev5 = prevVertices[i5];
							deform[i5] += (prev5 + (nextVertices[i5] - prev5) * percent) * alpha;
							++i5;
						}
					}
				}
				break;
			}
		}
	}
	,__class__: spine_DeformTimeline
});
var spine_EventTimeline = function(frameCount) {
	spine_Timeline.call(this,frameCount,spine_EventTimeline.propertyIds);
	var length = frameCount;
	if(length == null) {
		length = 0;
	}
	var len = length | 0;
	var capacity = len != 0 ? len : 16;
	var this1 = [];
	var array = this1;
	if(length != 0) {
		var len1 = array.length;
		if(len1 > len) {
			array.splice(len,len - len1);
		} else if(len1 < len) {
			array[len - 1] = null;
		}
	}
	this.events = array;
};
$hxClasses["spine.EventTimeline"] = spine_EventTimeline;
spine_EventTimeline.__name__ = "spine.EventTimeline";
spine_EventTimeline.__super__ = spine_Timeline;
spine_EventTimeline.prototype = $extend(spine_Timeline.prototype,{
	getFrameCount: function() {
		return this.frames.length;
	}
	,getEvents: function() {
		return this.events;
	}
	,setFrame: function(frame,event) {
		this.frames[frame] = event.time;
		this.events[frame] = event;
	}
	,apply: function(skeleton,lastTime,time,firedEvents,alpha,blend,direction) {
		if(firedEvents == null) {
			return;
		}
		var frames = this.frames;
		var frameCount = frames.length;
		if(lastTime > time) {
			this.apply(skeleton,lastTime,999999999,firedEvents,alpha,blend,direction);
			lastTime = -1;
		} else if(lastTime >= frames[frameCount - 1]) {
			return;
		}
		if(time < frames[0]) {
			return;
		}
		var i = 0;
		if(lastTime < frames[0]) {
			i = 0;
		} else {
			i = spine_Timeline.search(frames,lastTime) + 1;
			var frameTime = frames[i];
			while(i > 0) {
				if(frames[i - 1] != frameTime) {
					break;
				}
				--i;
			}
		}
		while(i < frameCount && time >= frames[i]) {
			firedEvents.push(this.events[i]);
			++i;
		}
	}
	,__class__: spine_EventTimeline
});
var spine_DrawOrderTimeline = function(frameCount) {
	spine_Timeline.call(this,frameCount,spine_DrawOrderTimeline.propertyIds);
	var length = frameCount;
	var length2 = 0;
	if(length2 == null) {
		length2 = 0;
	}
	if(length == null) {
		length = 0;
	}
	var len = length | 0;
	var len2 = length2 | 0;
	var capacity = len != 0 ? len : 16;
	var this1 = [];
	var array = this1;
	if(length > 0) {
		var len1 = array.length;
		if(len1 > len) {
			array.splice(len,len - len1);
		} else if(len1 < len) {
			array[len - 1] = null;
		}
	}
	var _g = 0;
	var _g1 = len2;
	while(_g < _g1) {
		var i = _g++;
		var length = length2;
		if(length == null) {
			length = 0;
		}
		var len = length | 0;
		var capacity = len != 0 ? len : 16;
		var this1 = [];
		var array1 = this1;
		if(length != 0) {
			var len1 = array1.length;
			if(len1 > len) {
				array1.splice(len,len - len1);
			} else if(len1 < len) {
				while(len1 < len) {
					array1.push(0);
					++len1;
				}
			}
		}
		array[i] = array1;
	}
	this.drawOrders = array;
};
$hxClasses["spine.DrawOrderTimeline"] = spine_DrawOrderTimeline;
spine_DrawOrderTimeline.__name__ = "spine.DrawOrderTimeline";
spine_DrawOrderTimeline.__super__ = spine_Timeline;
spine_DrawOrderTimeline.prototype = $extend(spine_Timeline.prototype,{
	getFrameCount: function() {
		return this.frames.length;
	}
	,getDrawOrders: function() {
		return this.drawOrders;
	}
	,setFrame: function(frame,time,drawOrder) {
		this.frames[frame] = time;
		this.drawOrders[frame] = drawOrder;
	}
	,apply: function(skeleton,lastTime,time,events,alpha,blend,direction) {
		if(direction == 1) {
			if(blend == 0) {
				var src = skeleton.slots;
				var dest = skeleton.drawOrder;
				var length = skeleton.slots.length;
				if(src == null) {
					throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("src cannot be null."));
				}
				if(dest == null) {
					throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("dest cannot be null."));
				}
				try {
					spine_support_utils_Array.copy(src,0,dest,0,length);
				} catch( _g ) {
					haxe_NativeStackTrace.lastError = _g;
					throw haxe_Exception.thrown(new spine_support_error_ArrayIndexOutOfBoundsException("Src: " + src.length + ", " + 0 + ", dest: " + dest.length + ", " + 0 + ", count: " + length));
				}
			}
			return;
		}
		if(time < this.frames[0]) {
			if(blend == 0 || blend == 1) {
				var src = skeleton.slots;
				var dest = skeleton.drawOrder;
				var length = skeleton.slots.length;
				if(src == null) {
					throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("src cannot be null."));
				}
				if(dest == null) {
					throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("dest cannot be null."));
				}
				try {
					spine_support_utils_Array.copy(src,0,dest,0,length);
				} catch( _g ) {
					haxe_NativeStackTrace.lastError = _g;
					throw haxe_Exception.thrown(new spine_support_error_ArrayIndexOutOfBoundsException("Src: " + src.length + ", " + 0 + ", dest: " + dest.length + ", " + 0 + ", count: " + length));
				}
			}
			return;
		}
		var drawOrderToSetupIndex = this.drawOrders[spine_Timeline.search(this.frames,time)];
		if(drawOrderToSetupIndex == null) {
			var src = skeleton.slots;
			var dest = skeleton.drawOrder;
			var length = skeleton.slots.length;
			if(src == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("src cannot be null."));
			}
			if(dest == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("dest cannot be null."));
			}
			try {
				spine_support_utils_Array.copy(src,0,dest,0,length);
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				throw haxe_Exception.thrown(new spine_support_error_ArrayIndexOutOfBoundsException("Src: " + src.length + ", " + 0 + ", dest: " + dest.length + ", " + 0 + ", count: " + length));
			}
		} else {
			var slots = skeleton.slots;
			var drawOrder = skeleton.drawOrder;
			var i = 0;
			var n = drawOrderToSetupIndex.length;
			while(i < n) {
				drawOrder[i] = slots[drawOrderToSetupIndex[i]];
				++i;
			}
		}
	}
	,__class__: spine_DrawOrderTimeline
});
var spine_IkConstraintTimeline = function(frameCount,bezierCount,ikConstraintIndex) {
	this.ikConstraintIndex = 0;
	spine_CurveTimeline.call(this,frameCount,bezierCount,[14 + "|" + ikConstraintIndex]);
	this.ikConstraintIndex = ikConstraintIndex;
};
$hxClasses["spine.IkConstraintTimeline"] = spine_IkConstraintTimeline;
spine_IkConstraintTimeline.__name__ = "spine.IkConstraintTimeline";
spine_IkConstraintTimeline.__super__ = spine_CurveTimeline;
spine_IkConstraintTimeline.prototype = $extend(spine_CurveTimeline.prototype,{
	getFrameEntries: function() {
		return 6;
	}
	,getIkConstraintIndex: function() {
		return this.ikConstraintIndex;
	}
	,setFrame: function(frame,time,mix,softness,bendDirection,compress,stretch) {
		frame *= 6;
		this.frames[frame] = time;
		this.frames[frame + 1] = mix;
		this.frames[frame + 2] = softness;
		this.frames[frame + 3] = bendDirection;
		this.frames[frame + 4] = compress ? 1 : 0;
		this.frames[frame + 5] = stretch ? 1 : 0;
	}
	,apply: function(skeleton,lastTime,time,events,alpha,blend,direction) {
		var constraint = skeleton.ikConstraints[this.ikConstraintIndex];
		if(!constraint.active) {
			return;
		}
		var frames = this.frames;
		if(time < frames[0]) {
			var _continueAfterSwitch40 = false;
			while(true) {
				var _switchCond40 = blend;
				if(_switchCond40 == 0) {
					constraint.mix = constraint.data.mix;
					constraint.softness = constraint.data.softness;
					constraint.bendDirection = constraint.data.bendDirection;
					constraint.compress = constraint.data.compress;
					constraint.stretch = constraint.data.stretch;
					return;
				} else if(_switchCond40 == 1) {
					constraint.mix += (constraint.data.mix - constraint.mix) * alpha;
					constraint.softness += (constraint.data.softness - constraint.softness) * alpha;
					constraint.bendDirection = constraint.data.bendDirection;
					constraint.compress = constraint.data.compress;
					constraint.stretch = constraint.data.stretch;
				}
				break;
			}
			return;
		}
		var mix = 0;
		var softness = 0;
		var i = spine_Timeline.searchWithStep(frames,time,6);
		var curveType = this.curves[i / 6 | 0] | 0;
		var _continueAfterSwitch41 = false;
		while(true) {
			var _switchCond41 = curveType;
			if(_switchCond41 == 0) {
				var before = frames[i];
				mix = frames[i + 1];
				softness = frames[i + 2];
				var t = (time - before) / (frames[i + 6] - before);
				mix += (frames[i + 6 + 1] - mix) * t;
				softness += (frames[i + 6 + 2] - softness) * t;
				break;
			} else if(_switchCond41 == 1) {
				mix = frames[i + 1];
				softness = frames[i + 2];
				break;
			} else {
				mix = this.getBezierValue(time,i,1,curveType - 2 | 0);
				softness = this.getBezierValue(time,i,2,curveType + 18 - 2);
			}
			break;
		}
		if(blend == 0) {
			constraint.mix = constraint.data.mix + (mix - constraint.data.mix) * alpha;
			constraint.softness = constraint.data.softness + (softness - constraint.data.softness) * alpha;
			if(direction == 1) {
				constraint.bendDirection = constraint.data.bendDirection;
				constraint.compress = constraint.data.compress;
				constraint.stretch = constraint.data.stretch;
			} else {
				constraint.bendDirection = frames[i + 3] | 0;
				constraint.compress = frames[i + 4] != 0;
				constraint.stretch = frames[i + 5] != 0;
			}
		} else {
			constraint.mix += (mix - constraint.mix) * alpha;
			constraint.softness += (softness - constraint.softness) * alpha;
			if(direction == 0) {
				constraint.bendDirection = frames[i + 3] | 0;
				constraint.compress = frames[i + 4] != 0;
				constraint.stretch = frames[i + 5] != 0;
			}
		}
	}
	,__class__: spine_IkConstraintTimeline
});
var spine_TransformConstraintTimeline = function(frameCount,bezierCount,transformConstraintIndex) {
	this.transformConstraintIndex = 0;
	spine_CurveTimeline.call(this,frameCount,bezierCount,[15 + "|" + transformConstraintIndex]);
	this.transformConstraintIndex = transformConstraintIndex;
};
$hxClasses["spine.TransformConstraintTimeline"] = spine_TransformConstraintTimeline;
spine_TransformConstraintTimeline.__name__ = "spine.TransformConstraintTimeline";
spine_TransformConstraintTimeline.__super__ = spine_CurveTimeline;
spine_TransformConstraintTimeline.prototype = $extend(spine_CurveTimeline.prototype,{
	getFrameEntries: function() {
		return 7;
	}
	,getTransformConstraintIndex: function() {
		return this.transformConstraintIndex;
	}
	,setFrame: function(frame,time,mixRotate,mixX,mixY,mixScaleX,mixScaleY,mixShearY) {
		frame *= 7;
		this.frames[frame] = time;
		this.frames[frame + 1] = mixRotate;
		this.frames[frame + 2] = mixX;
		this.frames[frame + 3] = mixY;
		this.frames[frame + 4] = mixScaleX;
		this.frames[frame + 5] = mixScaleY;
		this.frames[frame + 6] = mixShearY;
	}
	,apply: function(skeleton,lastTime,time,events,alpha,blend,direction) {
		var constraint = skeleton.transformConstraints[this.transformConstraintIndex];
		if(!constraint.active) {
			return;
		}
		var frames = this.frames;
		if(time < frames[0]) {
			var data = constraint.data;
			var _continueAfterSwitch42 = false;
			while(true) {
				var _switchCond42 = blend;
				if(_switchCond42 == 0) {
					constraint.mixRotate = data.mixRotate;
					constraint.mixX = data.mixX;
					constraint.mixY = data.mixY;
					constraint.mixScaleX = data.mixScaleX;
					constraint.mixScaleY = data.mixScaleY;
					constraint.mixShearY = data.mixShearY;
					return;
				} else if(_switchCond42 == 1) {
					constraint.mixRotate += (data.mixRotate - constraint.mixRotate) * alpha;
					constraint.mixX += (data.mixX - constraint.mixX) * alpha;
					constraint.mixY += (data.mixY - constraint.mixY) * alpha;
					constraint.mixScaleX += (data.mixScaleX - constraint.mixScaleX) * alpha;
					constraint.mixScaleY += (data.mixScaleY - constraint.mixScaleY) * alpha;
					constraint.mixShearY += (data.mixShearY - constraint.mixShearY) * alpha;
				}
				break;
			}
			return;
		}
		var rotate = 0;
		var x = 0;
		var y = 0;
		var scaleX = 0;
		var scaleY = 0;
		var shearY = 0;
		var i = spine_Timeline.searchWithStep(frames,time,7);
		var curveType = this.curves[i / 7 | 0] | 0;
		var _continueAfterSwitch43 = false;
		while(true) {
			var _switchCond43 = curveType;
			if(_switchCond43 == 0) {
				var before = frames[i];
				rotate = frames[i + 1];
				x = frames[i + 2];
				y = frames[i + 3];
				scaleX = frames[i + 4];
				scaleY = frames[i + 5];
				shearY = frames[i + 6];
				var t = (time - before) / (frames[i + 7] - before);
				rotate += (frames[i + 7 + 1] - rotate) * t;
				x += (frames[i + 7 + 2] - x) * t;
				y += (frames[i + 7 + 3] - y) * t;
				scaleX += (frames[i + 7 + 4] - scaleX) * t;
				scaleY += (frames[i + 7 + 5] - scaleY) * t;
				shearY += (frames[i + 7 + 6] - shearY) * t;
				break;
			} else if(_switchCond43 == 1) {
				rotate = frames[i + 1];
				x = frames[i + 2];
				y = frames[i + 3];
				scaleX = frames[i + 4];
				scaleY = frames[i + 5];
				shearY = frames[i + 6];
				break;
			} else {
				rotate = this.getBezierValue(time,i,1,curveType - 2 | 0);
				x = this.getBezierValue(time,i,2,curveType + 18 - 2);
				y = this.getBezierValue(time,i,3,curveType + 36 - 2);
				scaleX = this.getBezierValue(time,i,4,curveType + 54 - 2);
				scaleY = this.getBezierValue(time,i,5,curveType + 72 - 2);
				shearY = this.getBezierValue(time,i,6,curveType + 90 - 2);
			}
			break;
		}
		if(blend == 0) {
			var data = constraint.data;
			constraint.mixRotate = data.mixRotate + (rotate - data.mixRotate) * alpha;
			constraint.mixX = data.mixX + (x - data.mixX) * alpha;
			constraint.mixY = data.mixY + (y - data.mixY) * alpha;
			constraint.mixScaleX = data.mixScaleX + (scaleX - data.mixScaleX) * alpha;
			constraint.mixScaleY = data.mixScaleY + (scaleY - data.mixScaleY) * alpha;
			constraint.mixShearY = data.mixShearY + (shearY - data.mixShearY) * alpha;
		} else {
			constraint.mixRotate += (rotate - constraint.mixRotate) * alpha;
			constraint.mixX += (x - constraint.mixX) * alpha;
			constraint.mixY += (y - constraint.mixY) * alpha;
			constraint.mixScaleX += (scaleX - constraint.mixScaleX) * alpha;
			constraint.mixScaleY += (scaleY - constraint.mixScaleY) * alpha;
			constraint.mixShearY += (shearY - constraint.mixShearY) * alpha;
		}
	}
	,__class__: spine_TransformConstraintTimeline
});
var spine_PathConstraintPositionTimeline = function(frameCount,bezierCount,pathConstraintIndex) {
	this.pathConstraintIndex = 0;
	spine_CurveTimeline1.call(this,frameCount,bezierCount,16 + "|" + pathConstraintIndex);
	this.pathConstraintIndex = pathConstraintIndex;
};
$hxClasses["spine.PathConstraintPositionTimeline"] = spine_PathConstraintPositionTimeline;
spine_PathConstraintPositionTimeline.__name__ = "spine.PathConstraintPositionTimeline";
spine_PathConstraintPositionTimeline.__super__ = spine_CurveTimeline1;
spine_PathConstraintPositionTimeline.prototype = $extend(spine_CurveTimeline1.prototype,{
	getPathConstraintIndex: function() {
		return this.pathConstraintIndex;
	}
	,apply: function(skeleton,lastTime,time,events,alpha,blend,direction) {
		var constraint = skeleton.pathConstraints[this.pathConstraintIndex];
		if(!constraint.active) {
			return;
		}
		if(time < this.frames[0]) {
			var _continueAfterSwitch44 = false;
			while(true) {
				var _switchCond44 = blend;
				if(_switchCond44 == 0) {
					constraint.position = constraint.data.position;
					return;
				} else if(_switchCond44 == 1) {
					constraint.position += (constraint.data.position - constraint.position) * alpha;
				}
				break;
			}
			return;
		}
		var position = this.getCurveValue(time);
		if(blend == 0) {
			constraint.position = constraint.data.position + (position - constraint.data.position) * alpha;
		} else {
			constraint.position += (position - constraint.position) * alpha;
		}
	}
	,__class__: spine_PathConstraintPositionTimeline
});
var spine_PathConstraintSpacingTimeline = function(frameCount,bezierCount,pathConstraintIndex) {
	this.pathConstraintIndex = 0;
	spine_CurveTimeline1.call(this,frameCount,bezierCount,17 + "|" + pathConstraintIndex);
	this.pathConstraintIndex = pathConstraintIndex;
};
$hxClasses["spine.PathConstraintSpacingTimeline"] = spine_PathConstraintSpacingTimeline;
spine_PathConstraintSpacingTimeline.__name__ = "spine.PathConstraintSpacingTimeline";
spine_PathConstraintSpacingTimeline.__super__ = spine_CurveTimeline1;
spine_PathConstraintSpacingTimeline.prototype = $extend(spine_CurveTimeline1.prototype,{
	getPathConstraintIndex: function() {
		return this.pathConstraintIndex;
	}
	,apply: function(skeleton,lastTime,time,events,alpha,blend,direction) {
		var constraint = skeleton.pathConstraints[this.pathConstraintIndex];
		if(!constraint.active) {
			return;
		}
		if(time < this.frames[0]) {
			var _continueAfterSwitch45 = false;
			while(true) {
				var _switchCond45 = blend;
				if(_switchCond45 == 0) {
					constraint.spacing = constraint.data.spacing;
					return;
				} else if(_switchCond45 == 1) {
					constraint.spacing += (constraint.data.spacing - constraint.spacing) * alpha;
				}
				break;
			}
			return;
		}
		var spacing = this.getCurveValue(time);
		if(blend == 0) {
			constraint.spacing = constraint.data.spacing + (spacing - constraint.data.spacing) * alpha;
		} else {
			constraint.spacing += (spacing - constraint.spacing) * alpha;
		}
	}
	,__class__: spine_PathConstraintSpacingTimeline
});
var spine_PathConstraintMixTimeline = function(frameCount,bezierCount,pathConstraintIndex) {
	this.pathConstraintIndex = 0;
	spine_CurveTimeline.call(this,frameCount,bezierCount,[18 + "|" + pathConstraintIndex]);
	this.pathConstraintIndex = pathConstraintIndex;
};
$hxClasses["spine.PathConstraintMixTimeline"] = spine_PathConstraintMixTimeline;
spine_PathConstraintMixTimeline.__name__ = "spine.PathConstraintMixTimeline";
spine_PathConstraintMixTimeline.__super__ = spine_CurveTimeline;
spine_PathConstraintMixTimeline.prototype = $extend(spine_CurveTimeline.prototype,{
	getFrameEntries: function() {
		return 4;
	}
	,getPathConstraintIndex: function() {
		return this.pathConstraintIndex;
	}
	,setFrame: function(frame,time,mixRotate,mixX,mixY) {
		frame <<= 2;
		this.frames[frame] = time;
		this.frames[frame + 1] = mixRotate;
		this.frames[frame + 2] = mixX;
		this.frames[frame + 3] = mixY;
	}
	,apply: function(skeleton,lastTime,time,events,alpha,blend,direction) {
		var constraint = skeleton.pathConstraints[this.pathConstraintIndex];
		if(!constraint.active) {
			return;
		}
		var frames = this.frames;
		if(time < frames[0]) {
			var data = constraint.data;
			var _continueAfterSwitch46 = false;
			while(true) {
				var _switchCond46 = blend;
				if(_switchCond46 == 0) {
					constraint.mixRotate = data.mixRotate;
					constraint.mixX = data.mixX;
					constraint.mixY = data.mixY;
					return;
				} else if(_switchCond46 == 1) {
					constraint.mixRotate += (data.mixRotate - constraint.mixRotate) * alpha;
					constraint.mixX += (data.mixX - constraint.mixX) * alpha;
					constraint.mixY += (data.mixY - constraint.mixY) * alpha;
				}
				break;
			}
			return;
		}
		var rotate = 0;
		var x = 0;
		var y = 0;
		var i = spine_Timeline.searchWithStep(frames,time,4);
		var curveType = this.curves[i >> 2] | 0;
		var _continueAfterSwitch47 = false;
		while(true) {
			var _switchCond47 = curveType;
			if(_switchCond47 == 0) {
				var before = frames[i];
				rotate = frames[i + 1];
				x = frames[i + 2];
				y = frames[i + 3];
				var t = (time - before) / (frames[i + 4] - before);
				rotate += (frames[i + 4 + 1] - rotate) * t;
				x += (frames[i + 4 + 2] - x) * t;
				y += (frames[i + 4 + 3] - y) * t;
				break;
			} else if(_switchCond47 == 1) {
				rotate = frames[i + 1];
				x = frames[i + 2];
				y = frames[i + 3];
				break;
			} else {
				rotate = this.getBezierValue(time,i,1,curveType - 2);
				x = this.getBezierValue(time,i,2,curveType + 18 - 2);
				y = this.getBezierValue(time,i,3,curveType + 36 - 2);
			}
			break;
		}
		if(blend == 0) {
			var data = constraint.data;
			constraint.mixRotate = data.mixRotate + (rotate - data.mixRotate) * alpha;
			constraint.mixX = data.mixX + (x - data.mixX) * alpha;
			constraint.mixY = data.mixY + (y - data.mixY) * alpha;
		} else {
			constraint.mixRotate += (rotate - constraint.mixRotate) * alpha;
			constraint.mixX += (x - constraint.mixX) * alpha;
			constraint.mixY += (y - constraint.mixY) * alpha;
		}
	}
	,__class__: spine_PathConstraintMixTimeline
});
var spine_MixBlend_$enum = function() { };
$hxClasses["spine.MixBlend_enum"] = spine_MixBlend_$enum;
spine_MixBlend_$enum.__name__ = "spine.MixBlend_enum";
spine_MixBlend_$enum.valueOf = function(value) {
	switch(value) {
	case "add":
		return 3;
	case "first":
		return 1;
	case "replace":
		return 2;
	case "setup":
		return 0;
	default:
		return 0;
	}
};
var spine_MixDirection_$enum = function() { };
$hxClasses["spine.MixDirection_enum"] = spine_MixDirection_$enum;
spine_MixDirection_$enum.__name__ = "spine.MixDirection_enum";
spine_MixDirection_$enum.valueOf = function(value) {
	switch(value) {
	case "directionIn":
		return 0;
	case "directionOut":
		return 1;
	default:
		return 0;
	}
};
var spine_Property_$enum = function() { };
$hxClasses["spine.Property_enum"] = spine_Property_$enum;
spine_Property_$enum.__name__ = "spine.Property_enum";
spine_Property_$enum.valueOf = function(value) {
	switch(value) {
	case "alpha":
		return 8;
	case "attachment":
		return 10;
	case "deform":
		return 11;
	case "drawOrder":
		return 13;
	case "event":
		return 12;
	case "ikConstraint":
		return 14;
	case "pathConstraintMix":
		return 18;
	case "pathConstraintPosition":
		return 16;
	case "pathConstraintSpacing":
		return 17;
	case "rgb":
		return 7;
	case "rgb2":
		return 9;
	case "rotate":
		return 0;
	case "scaleX":
		return 3;
	case "scaleY":
		return 4;
	case "shearX":
		return 5;
	case "shearY":
		return 6;
	case "transformConstraint":
		return 15;
	case "x":
		return 1;
	case "y":
		return 2;
	default:
		return 0;
	}
};
var spine_support_error_Error = function(message,id) {
	if(id == null) {
		id = 0;
	}
	if(message == null) {
		message = "";
	}
	this.message = message;
	this.errorID = id;
	this.name = "Error";
};
$hxClasses["spine.support.error.Error"] = spine_support_error_Error;
spine_support_error_Error.__name__ = "spine.support.error.Error";
spine_support_error_Error.prototype = {
	getStackTrace: function() {
		return haxe_CallStack.toString(haxe_CallStack.exceptionStack());
	}
	,toString: function() {
		if(this.message != null) {
			return this.message;
		} else {
			return "Error";
		}
	}
	,__class__: spine_support_error_Error
};
var spine_support_error_IllegalArgumentException = function(message) {
	if(message == null) {
		message = "";
	}
	spine_support_error_Error.call(this,message);
	this.name = "IllegalArgumentException";
};
$hxClasses["spine.support.error.IllegalArgumentException"] = spine_support_error_IllegalArgumentException;
spine_support_error_IllegalArgumentException.__name__ = "spine.support.error.IllegalArgumentException";
spine_support_error_IllegalArgumentException.__super__ = spine_support_error_Error;
spine_support_error_IllegalArgumentException.prototype = $extend(spine_support_error_Error.prototype,{
	__class__: spine_support_error_IllegalArgumentException
});
var spine_AnimationState = function(data) {
	this.trackEntryPool = new spine__$AnimationState_TrackEntryPool();
	this.unkeyedState = 0;
	this.timeScale = 1;
	this.animationsChanged = false;
	var this1 = [];
	this.propertyIds = this1;
	this.queue = null;
	this.listeners = new spine_support_utils_SnapshotArray();
	var this1 = [];
	this.events = this1;
	var this1 = [];
	this.tracks = this1;
	this.queue = new spine_EventQueue();
	this.queue.AnimationState_this = this;
	if(data == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("data cannot be null."));
	}
	this.data = data;
};
$hxClasses["spine.AnimationState"] = spine_AnimationState;
spine_AnimationState.__name__ = "spine.AnimationState";
spine_AnimationState.prototype = {
	update: function(delta) {
		delta *= this.timeScale;
		var tracks = this.tracks;
		var i = 0;
		var n = this.tracks.length;
		while(i < n) {
			var result = tracks[i];
			var current = result;
			if(current == null) {
				++i;
				continue;
			}
			current.animationLast = current.nextAnimationLast;
			current.trackLast = current.nextTrackLast;
			var currentDelta = delta * current.timeScale;
			if(current.delay > 0) {
				current.delay -= currentDelta;
				if(current.delay > 0) {
					++i;
					continue;
				}
				currentDelta = -current.delay;
				current.delay = 0;
			}
			var next = current.next;
			if(next != null) {
				var nextTime = current.trackLast - next.delay;
				if(nextTime >= 0) {
					next.delay = 0;
					next.trackTime += current.timeScale == 0 ? 0 : (nextTime / current.timeScale + delta) * next.timeScale;
					current.trackTime += currentDelta;
					var from;
					if(i < this.tracks.length) {
						from = this.tracks[i];
					} else {
						var this1 = this.tracks;
						var size = i + 1;
						var len = this1.length;
						if(len > size) {
							this1.splice(size,size - len);
						} else if(len < size) {
							this1[size - 1] = null;
						}
						from = null;
					}
					this.tracks[i] = next;
					next.previous = null;
					if(from != null) {
						var _this = this.queue;
						_this.objects.push(1);
						_this.objects.push(from);
						next.mixingFrom = from;
						from.mixingTo = next;
						next.mixTime = 0;
						if(from.mixingFrom != null && from.mixDuration > 0) {
							next.interruptAlpha *= Math.min(1,from.mixTime / from.mixDuration | 0);
						}
						var this2 = from.timelinesRotation;
						this2.splice(0,this2.length);
					}
					var _this1 = this.queue;
					_this1.objects.push(0);
					_this1.objects.push(next);
					_this1.AnimationState_this.animationsChanged = true;
					while(next.mixingFrom != null) {
						next.mixTime += delta;
						next = next.mixingFrom;
					}
					++i;
					continue;
				}
			} else if(current.trackLast >= current.trackEnd && current.mixingFrom == null) {
				tracks[i] = null;
				var _this2 = this.queue;
				_this2.objects.push(2);
				_this2.objects.push(current);
				_this2.AnimationState_this.animationsChanged = true;
				var next1 = current.next;
				while(next1 != null) {
					var _this3 = this.queue;
					_this3.objects.push(3);
					_this3.objects.push(next1);
					next1 = next1.next;
				}
				current.next = null;
				++i;
				continue;
			}
			var tmp;
			if(current.mixingFrom != null) {
				var from1 = current.mixingFrom;
				if(from1 == null) {
					tmp = true;
				} else {
					var from2 = from1.mixingFrom;
					var finished;
					if(from2 == null) {
						finished = true;
					} else {
						var finished1 = this.updateMixingFrom(from2,delta);
						from2.animationLast = from2.nextAnimationLast;
						from2.trackLast = from2.nextTrackLast;
						if(from1.mixTime > 0 && from1.mixTime >= from1.mixDuration) {
							if(from2.totalAlpha == 0 || from1.mixDuration == 0) {
								from1.mixingFrom = from2.mixingFrom;
								if(from2.mixingFrom != null) {
									from2.mixingFrom.mixingTo = from1;
								}
								from1.interruptAlpha = from2.interruptAlpha;
								var _this4 = this.queue;
								_this4.objects.push(2);
								_this4.objects.push(from2);
								_this4.AnimationState_this.animationsChanged = true;
							}
							finished = finished1;
						} else {
							from2.trackTime += delta * from2.timeScale;
							from1.mixTime += delta;
							finished = false;
						}
					}
					from1.animationLast = from1.nextAnimationLast;
					from1.trackLast = from1.nextTrackLast;
					if(current.mixTime > 0 && current.mixTime >= current.mixDuration) {
						if(from1.totalAlpha == 0 || current.mixDuration == 0) {
							current.mixingFrom = from1.mixingFrom;
							if(from1.mixingFrom != null) {
								from1.mixingFrom.mixingTo = current;
							}
							current.interruptAlpha = from1.interruptAlpha;
							var _this5 = this.queue;
							_this5.objects.push(2);
							_this5.objects.push(from1);
							_this5.AnimationState_this.animationsChanged = true;
						}
						tmp = finished;
					} else {
						from1.trackTime += delta * from1.timeScale;
						current.mixTime += delta;
						tmp = false;
					}
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				var from3 = current.mixingFrom;
				current.mixingFrom = null;
				if(from3 != null) {
					from3.mixingTo = null;
				}
				while(from3 != null) {
					var _this6 = this.queue;
					_this6.objects.push(2);
					_this6.objects.push(from3);
					_this6.AnimationState_this.animationsChanged = true;
					from3 = from3.mixingFrom;
				}
			}
			current.trackTime += currentDelta;
			++i;
		}
		var _this = this.queue;
		if(!_this.drainDisabled) {
			_this.drainDisabled = true;
			var listenersArray = _this.AnimationState_this.listeners;
			var i = 0;
			while(i < _this.objects.length) {
				var type = _this.objects[i];
				var result = _this.objects[i + 1];
				var entry = result;
				var listenersCount = listenersArray.array.length;
				var listeners = listenersArray.begin();
				while(true) {
					var _switchCond2 = type;
					if(_switchCond2 == 0) {
						if(entry.listener != null) {
							entry.listener.start(entry);
						}
						var ii = 0;
						while(ii < listenersCount) {
							var result1 = listeners[ii];
							result1.start(entry);
							++ii;
						}
						break;
					} else if(_switchCond2 == 1) {
						if(entry.listener != null) {
							entry.listener.interrupt(entry);
						}
						var ii1 = 0;
						while(ii1 < listenersCount) {
							var result2 = listeners[ii1];
							result2.interrupt(entry);
							++ii1;
						}
						break;
					} else if(_switchCond2 == 2) {
						if(entry.listener != null) {
							entry.listener.end(entry);
						}
						var ii2 = 0;
						while(ii2 < listenersCount) {
							var result3 = listeners[ii2];
							result3.end(entry);
							++ii2;
						}
						if(entry.listener != null) {
							entry.listener.dispose(entry);
						}
						var ii3 = 0;
						while(ii3 < listenersCount) {
							var result4 = listeners[ii3];
							result4.dispose(entry);
							++ii3;
						}
						_this.AnimationState_this.trackEntryPool.free(entry);
						break;
					} else if(_switchCond2 == 3) {
						if(entry.listener != null) {
							entry.listener.dispose(entry);
						}
						var ii4 = 0;
						while(ii4 < listenersCount) {
							var result5 = listeners[ii4];
							result5.dispose(entry);
							++ii4;
						}
						_this.AnimationState_this.trackEntryPool.free(entry);
						break;
					} else if(_switchCond2 == 4) {
						if(entry.listener != null) {
							entry.listener.complete(entry);
						}
						var ii5 = 0;
						while(ii5 < listenersCount) {
							var result6 = listeners[ii5];
							result6.complete(entry);
							++ii5;
						}
						break;
					} else if(_switchCond2 == 5) {
						var result7 = _this.objects[i++ + 2];
						var event = result7;
						if(entry.listener != null) {
							entry.listener.event(entry,event);
						}
						var ii6 = 0;
						while(ii6 < listenersCount) {
							var result8 = listeners[ii6];
							result8.event(entry,event);
							++ii6;
						}
						break;
					}
					break;
				}
				listenersArray.end();
				i += 2;
			}
			var this1 = _this.objects;
			this1.splice(0,this1.length);
			_this.drainDisabled = false;
		}
	}
	,updateMixingFrom: function(to,delta) {
		var from = to.mixingFrom;
		if(from == null) {
			return true;
		}
		var finished = this.updateMixingFrom(from,delta);
		from.animationLast = from.nextAnimationLast;
		from.trackLast = from.nextTrackLast;
		if(to.mixTime > 0 && to.mixTime >= to.mixDuration) {
			if(from.totalAlpha == 0 || to.mixDuration == 0) {
				to.mixingFrom = from.mixingFrom;
				if(from.mixingFrom != null) {
					from.mixingFrom.mixingTo = to;
				}
				to.interruptAlpha = from.interruptAlpha;
				var _this = this.queue;
				_this.objects.push(2);
				_this.objects.push(from);
				_this.AnimationState_this.animationsChanged = true;
			}
			return finished;
		}
		from.trackTime += delta * from.timeScale;
		to.mixTime += delta;
		return false;
	}
	,apply: function(skeleton) {
		if(skeleton == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("skeleton cannot be null."));
		}
		if(this.animationsChanged) {
			this.animationsChanged = false;
			var this1 = this.propertyIds;
			this1.splice(0,this1.length);
			var n = this.tracks.length;
			var tracks = this.tracks;
			var i = 0;
			while(i < n) {
				var result = tracks[i];
				var entry = result;
				if(entry == null) {
					++i;
					continue;
				}
				while(entry.mixingFrom != null) entry = entry.mixingFrom;
				while(true) {
					if(entry.mixingTo == null || entry.mixBlend != 3) {
						var to = entry.mixingTo;
						var timelines = entry.animation.timelines;
						var timelinesCount = entry.animation.timelines.length;
						var this1 = entry.timelineMode;
						var len = this1.length;
						if(len > timelinesCount) {
							this1.splice(timelinesCount,timelinesCount - len);
						} else if(len < timelinesCount) {
							while(len < timelinesCount) {
								this1.push(0);
								++len;
							}
						}
						var timelineMode = this1;
						var this2 = entry.timelineHoldMix;
						this2.splice(0,this2.length);
						var this3 = entry.timelineHoldMix;
						var len1 = this3.length;
						if(len1 > timelinesCount) {
							this3.splice(timelinesCount,timelinesCount - len1);
						} else if(len1 < timelinesCount) {
							this3[timelinesCount - 1] = null;
						}
						var timelineHoldMix = this3;
						var propertyIds = this.propertyIds;
						if(to != null && to.holdPrevious) {
							var i1 = 0;
							while(i1 < timelinesCount) {
								var result1 = timelines[i1];
								timelineMode[i1] = spine_support_utils_ObjectSet.addAll(propertyIds,result1.getPropertyIds()) ? 3 : 2;
								++i1;
							}
						} else {
							var _gotoLabel_outer;
							while(true) {
								_gotoLabel_outer = 0;
								var i2 = 0;
								while(i2 < timelinesCount) {
									var result2 = timelines[i2];
									var timeline = result2;
									var ids = timeline.getPropertyIds();
									if(!spine_support_utils_ObjectSet.addAll(propertyIds,ids)) {
										timelineMode[i2] = 0;
									} else if(to == null || ((timeline) instanceof spine_AttachmentTimeline) || ((timeline) instanceof spine_DrawOrderTimeline) || ((timeline) instanceof spine_EventTimeline) || !to.animation.hasTimeline(ids)) {
										timelineMode[i2] = 1;
									} else {
										var next = to.mixingTo;
										while(next != null) {
											if(next.animation.hasTimeline(ids)) {
												next = next.mixingTo;
												continue;
											}
											if(next.mixDuration > 0) {
												timelineMode[i2] = 4;
												timelineHoldMix[i2] = next;
												next = next.mixingTo;
												_gotoLabel_outer = 2;
												break;
											}
											break;
										}
										if(_gotoLabel_outer == 2) {
											_gotoLabel_outer = 0;
											++i2;
											continue;
										}
										if(_gotoLabel_outer >= 1) {
											break;
										}
										timelineMode[i2] = 3;
									}
									++i2;
								}
								if(_gotoLabel_outer == 0) {
									break;
								}
							}
						}
					}
					entry = entry.mixingTo;
					if(!(entry != null)) {
						break;
					}
				}
				++i;
			}
		}
		var events = this.events;
		var applied = false;
		var tracks = this.tracks;
		var i = 0;
		var n = this.tracks.length;
		while(i < n) {
			var result = tracks[i];
			var current = result;
			if(current == null || current.delay > 0) {
				++i;
				continue;
			}
			applied = true;
			var blend = i == 0 ? 1 : current.mixBlend;
			var mix = current.alpha;
			if(current.mixingFrom != null) {
				mix *= this.applyMixingFrom(current,skeleton,blend);
			} else if(current.trackTime >= current.trackEnd && current.next == null) {
				mix = 0;
			}
			var animationLast = current.animationLast;
			var animationTime;
			if(current.loop) {
				var duration = current.animationEnd - current.animationStart;
				animationTime = duration == 0 ? current.animationStart : current.trackTime % duration + current.animationStart;
			} else {
				animationTime = Math.min(current.trackTime + current.animationStart,current.animationEnd);
			}
			var applyTime = animationTime;
			var applyEvents = events;
			if(current.reverse) {
				applyTime = current.animation.duration - applyTime;
				applyEvents = null;
			}
			var timelineCount = current.animation.timelines.length;
			var timelines = current.animation.timelines;
			if(i == 0 && mix == 1 || blend == 3) {
				var ii = 0;
				while(ii < timelineCount) {
					var timeline = timelines[ii];
					if(((timeline) instanceof spine_AttachmentTimeline)) {
						var result1 = timeline;
						var timeline1 = result1;
						var slot = skeleton.slots[timeline1.slotIndex];
						if(slot.bone.active) {
							if(applyTime < timeline1.frames[0]) {
								if(blend == 0 || blend == 1) {
									this.setAttachment(skeleton,slot,slot.data.attachmentName,true);
								}
							} else {
								this.setAttachment(skeleton,slot,timeline1.attachmentNames[spine_Timeline.search(timeline1.frames,applyTime)],true);
							}
							if(slot.attachmentState <= this.unkeyedState) {
								slot.attachmentState = this.unkeyedState + 1;
							}
						}
					} else {
						var result2 = timeline;
						result2.apply(skeleton,animationLast,applyTime,applyEvents,mix,blend,0);
					}
					++ii;
				}
			} else {
				var timelineMode = current.timelineMode;
				var firstFrame = current.timelinesRotation.length != timelineCount << 1;
				if(firstFrame) {
					var this1 = current.timelinesRotation;
					var size = timelineCount << 1;
					var len = this1.length;
					if(len > size) {
						this1.splice(size,size - len);
					} else if(len < size) {
						while(len < size) {
							this1.push(0);
							++len;
						}
					}
				}
				var timelinesRotation = current.timelinesRotation;
				var ii1 = 0;
				while(ii1 < timelineCount) {
					var result3 = timelines[ii1];
					var timeline2 = result3;
					var timelineBlend = timelineMode[ii1] == 0 ? blend : 0;
					if(((timeline2) instanceof spine_RotateTimeline)) {
						var result4 = timeline2;
						this.applyRotateTimeline(result4,skeleton,applyTime,mix,timelineBlend,timelinesRotation,ii1 << 1,firstFrame);
					} else if(((timeline2) instanceof spine_AttachmentTimeline)) {
						var result5 = timeline2;
						var timeline3 = result5;
						var slot1 = skeleton.slots[timeline3.slotIndex];
						if(slot1.bone.active) {
							if(applyTime < timeline3.frames[0]) {
								if(blend == 0 || blend == 1) {
									this.setAttachment(skeleton,slot1,slot1.data.attachmentName,true);
								}
							} else {
								this.setAttachment(skeleton,slot1,timeline3.attachmentNames[spine_Timeline.search(timeline3.frames,applyTime)],true);
							}
							if(slot1.attachmentState <= this.unkeyedState) {
								slot1.attachmentState = this.unkeyedState + 1;
							}
						}
					} else {
						timeline2.apply(skeleton,animationLast,applyTime,applyEvents,mix,timelineBlend,0);
					}
					++ii1;
				}
			}
			var animationStart = current.animationStart;
			var animationEnd = current.animationEnd;
			var duration1 = animationEnd - animationStart;
			var trackLastWrapped = current.trackLast % duration1;
			var events1 = this.events;
			var i1 = 0;
			var n1 = this.events.length;
			while(i1 < n1) {
				var result6 = events1[i1];
				var event = result6;
				if(event.time < trackLastWrapped) {
					break;
				}
				if(event.time > animationEnd) {
					++i1;
					continue;
				}
				var _this = this.queue;
				_this.objects.push(5);
				_this.objects.push(current);
				_this.objects.push(event);
				++i1;
			}
			var complete = false;
			if(current.loop) {
				complete = duration1 == 0 || trackLastWrapped > current.trackTime % duration1;
			} else {
				complete = animationTime >= animationEnd && current.animationLast < animationEnd;
			}
			if(complete) {
				var _this1 = this.queue;
				_this1.objects.push(4);
				_this1.objects.push(current);
			}
			while(i1 < n1) {
				var result7 = events1[i1];
				var event1 = result7;
				if(event1.time < animationStart) {
					++i1;
					continue;
				}
				var _this2 = this.queue;
				_this2.objects.push(5);
				_this2.objects.push(current);
				_this2.objects.push(event1);
				++i1;
			}
			events.splice(0,events.length);
			current.nextAnimationLast = animationTime;
			current.nextTrackLast = current.trackTime;
			++i;
		}
		var setupState = this.unkeyedState + 1;
		var slots = skeleton.slots;
		var i = 0;
		var n = skeleton.slots.length;
		while(i < n) {
			var result = slots[i];
			var slot = result;
			if(slot.attachmentState == setupState) {
				var attachmentName = slot.data.attachmentName;
				var attachment = attachmentName == null ? null : skeleton.getAttachment(slot.data.index,attachmentName);
				if(slot.attachment != attachment) {
					var tmp;
					if(!(!((attachment) instanceof spine_attachments_VertexAttachment) || !((slot.attachment) instanceof spine_attachments_VertexAttachment))) {
						var result1 = attachment;
						var _this = result1;
						var result2 = slot.attachment;
						var _this1 = result2;
						tmp = (_this.deformAttachment != null ? _this.deformAttachment : _this) != (_this1.deformAttachment != null ? _this1.deformAttachment : _this1);
					} else {
						tmp = true;
					}
					if(tmp) {
						var this1 = slot.deform;
						this1.splice(0,this1.length);
					}
					slot.attachment = attachment;
					slot.attachmentTime = slot.bone.skeleton.time;
				}
			}
			++i;
		}
		this.unkeyedState += 2;
		var _this = this.queue;
		if(!_this.drainDisabled) {
			_this.drainDisabled = true;
			var listenersArray = _this.AnimationState_this.listeners;
			var i = 0;
			while(i < _this.objects.length) {
				var type = _this.objects[i];
				var result = _this.objects[i + 1];
				var entry = result;
				var listenersCount = listenersArray.array.length;
				var listeners = listenersArray.begin();
				while(true) {
					var _switchCond2 = type;
					if(_switchCond2 == 0) {
						if(entry.listener != null) {
							entry.listener.start(entry);
						}
						var ii = 0;
						while(ii < listenersCount) {
							var result1 = listeners[ii];
							result1.start(entry);
							++ii;
						}
						break;
					} else if(_switchCond2 == 1) {
						if(entry.listener != null) {
							entry.listener.interrupt(entry);
						}
						var ii1 = 0;
						while(ii1 < listenersCount) {
							var result2 = listeners[ii1];
							result2.interrupt(entry);
							++ii1;
						}
						break;
					} else if(_switchCond2 == 2) {
						if(entry.listener != null) {
							entry.listener.end(entry);
						}
						var ii2 = 0;
						while(ii2 < listenersCount) {
							var result3 = listeners[ii2];
							result3.end(entry);
							++ii2;
						}
						if(entry.listener != null) {
							entry.listener.dispose(entry);
						}
						var ii3 = 0;
						while(ii3 < listenersCount) {
							var result4 = listeners[ii3];
							result4.dispose(entry);
							++ii3;
						}
						_this.AnimationState_this.trackEntryPool.free(entry);
						break;
					} else if(_switchCond2 == 3) {
						if(entry.listener != null) {
							entry.listener.dispose(entry);
						}
						var ii4 = 0;
						while(ii4 < listenersCount) {
							var result5 = listeners[ii4];
							result5.dispose(entry);
							++ii4;
						}
						_this.AnimationState_this.trackEntryPool.free(entry);
						break;
					} else if(_switchCond2 == 4) {
						if(entry.listener != null) {
							entry.listener.complete(entry);
						}
						var ii5 = 0;
						while(ii5 < listenersCount) {
							var result6 = listeners[ii5];
							result6.complete(entry);
							++ii5;
						}
						break;
					} else if(_switchCond2 == 5) {
						var result7 = _this.objects[i++ + 2];
						var event = result7;
						if(entry.listener != null) {
							entry.listener.event(entry,event);
						}
						var ii6 = 0;
						while(ii6 < listenersCount) {
							var result8 = listeners[ii6];
							result8.event(entry,event);
							++ii6;
						}
						break;
					}
					break;
				}
				listenersArray.end();
				i += 2;
			}
			var this1 = _this.objects;
			this1.splice(0,this1.length);
			_this.drainDisabled = false;
		}
		return applied;
	}
	,applyMixingFrom: function(to,skeleton,blend) {
		var from = to.mixingFrom;
		if(from.mixingFrom != null) {
			this.applyMixingFrom(from,skeleton,blend);
		}
		var mix = 0;
		if(to.mixDuration == 0) {
			mix = 1;
			if(blend == 1) {
				blend = 0;
			}
		} else {
			mix = to.mixTime / to.mixDuration;
			if(mix > 1) {
				mix = 1;
			}
			if(blend != 1) {
				blend = from.mixBlend;
			}
		}
		var attachments = mix < from.attachmentThreshold;
		var drawOrder = mix < from.drawOrderThreshold;
		var timelineCount = from.animation.timelines.length;
		var timelines = from.animation.timelines;
		var alphaHold = from.alpha * to.interruptAlpha;
		var alphaMix = alphaHold * (1 - mix);
		var animationLast = from.animationLast;
		var animationTime;
		if(from.loop) {
			var duration = from.animationEnd - from.animationStart;
			animationTime = duration == 0 ? from.animationStart : from.trackTime % duration + from.animationStart;
		} else {
			animationTime = Math.min(from.trackTime + from.animationStart,from.animationEnd);
		}
		var applyTime = animationTime;
		var events = null;
		if(from.reverse) {
			applyTime = from.animation.duration - applyTime;
		} else if(mix < from.eventThreshold) {
			events = this.events;
		}
		if(blend == 3) {
			var i = 0;
			while(i < timelineCount) {
				var result = timelines[i];
				result.apply(skeleton,animationLast,applyTime,events,alphaMix,blend,1);
				++i;
			}
		} else {
			var timelineMode = from.timelineMode;
			var timelineHoldMix = from.timelineHoldMix;
			var firstFrame = from.timelinesRotation.length != timelineCount << 1;
			if(firstFrame) {
				var this1 = from.timelinesRotation;
				var size = timelineCount << 1;
				var len = this1.length;
				if(len > size) {
					this1.splice(size,size - len);
				} else if(len < size) {
					while(len < size) {
						this1.push(0);
						++len;
					}
				}
			}
			var timelinesRotation = from.timelinesRotation;
			from.totalAlpha = 0;
			var i = 0;
			while(i < timelineCount) {
				var result = timelines[i];
				var timeline = result;
				var direction = 1;
				var timelineBlend = 0;
				var alpha = 0;
				var _continueAfterSwitch0 = false;
				while(true) {
					var _switchCond0 = timelineMode[i];
					if(_switchCond0 == 0) {
						if(!drawOrder && ((timeline) instanceof spine_DrawOrderTimeline)) {
							_continueAfterSwitch0 = true;
							break;
						}
						timelineBlend = blend;
						alpha = alphaMix;
						break;
					} else if(_switchCond0 == 1) {
						timelineBlend = 0;
						alpha = alphaMix;
						break;
					} else if(_switchCond0 == 2) {
						timelineBlend = blend;
						alpha = alphaHold;
						break;
					} else if(_switchCond0 == 3) {
						timelineBlend = 0;
						alpha = alphaHold;
						break;
					} else {
						timelineBlend = 0;
						var result1 = timelineHoldMix[i];
						var holdMix = result1;
						alpha = alphaHold * Math.max(0,1 - holdMix.mixTime / holdMix.mixDuration | 0);
						break;
					}
				}
				if(_continueAfterSwitch0) {
					++i;
					continue;
				}
				from.totalAlpha += alpha;
				if(((timeline) instanceof spine_RotateTimeline)) {
					var result2 = timeline;
					this.applyRotateTimeline(result2,skeleton,applyTime,alpha,timelineBlend,timelinesRotation,i << 1,firstFrame);
				} else if(((timeline) instanceof spine_AttachmentTimeline)) {
					var result3 = timeline;
					var timeline1 = result3;
					var slot = skeleton.slots[timeline1.slotIndex];
					if(slot.bone.active) {
						if(applyTime < timeline1.frames[0]) {
							if(timelineBlend == 0 || timelineBlend == 1) {
								this.setAttachment(skeleton,slot,slot.data.attachmentName,attachments);
							}
						} else {
							this.setAttachment(skeleton,slot,timeline1.attachmentNames[spine_Timeline.search(timeline1.frames,applyTime)],attachments);
						}
						if(slot.attachmentState <= this.unkeyedState) {
							slot.attachmentState = this.unkeyedState + 1;
						}
					}
				} else {
					if(drawOrder && ((timeline) instanceof spine_DrawOrderTimeline) && timelineBlend == 0) {
						direction = 0;
					}
					timeline.apply(skeleton,animationLast,applyTime,events,alpha,timelineBlend,direction);
				}
				++i;
			}
		}
		if(to.mixDuration > 0) {
			var animationStart = from.animationStart;
			var animationEnd = from.animationEnd;
			var duration = animationEnd - animationStart;
			var trackLastWrapped = from.trackLast % duration;
			var events = this.events;
			var i = 0;
			var n = this.events.length;
			while(i < n) {
				var result = events[i];
				var event = result;
				if(event.time < trackLastWrapped) {
					break;
				}
				if(event.time > animationEnd) {
					++i;
					continue;
				}
				var _this = this.queue;
				_this.objects.push(5);
				_this.objects.push(from);
				_this.objects.push(event);
				++i;
			}
			var complete = false;
			if(from.loop) {
				complete = duration == 0 || trackLastWrapped > from.trackTime % duration;
			} else {
				complete = animationTime >= animationEnd && from.animationLast < animationEnd;
			}
			if(complete) {
				var _this = this.queue;
				_this.objects.push(4);
				_this.objects.push(from);
			}
			while(i < n) {
				var result = events[i];
				var event = result;
				if(event.time < animationStart) {
					++i;
					continue;
				}
				var _this = this.queue;
				_this.objects.push(5);
				_this.objects.push(from);
				_this.objects.push(event);
				++i;
			}
		}
		var this1 = this.events;
		this1.splice(0,this1.length);
		from.nextAnimationLast = animationTime;
		from.nextTrackLast = from.trackTime;
		return mix;
	}
	,applyAttachmentTimeline: function(timeline,skeleton,time,blend,attachments) {
		var slot = skeleton.slots[timeline.slotIndex];
		if(!slot.bone.active) {
			return;
		}
		if(time < timeline.frames[0]) {
			if(blend == 0 || blend == 1) {
				this.setAttachment(skeleton,slot,slot.data.attachmentName,attachments);
			}
		} else {
			this.setAttachment(skeleton,slot,timeline.attachmentNames[spine_Timeline.search(timeline.frames,time)],attachments);
		}
		if(slot.attachmentState <= this.unkeyedState) {
			slot.attachmentState = this.unkeyedState + 1;
		}
	}
	,setAttachment: function(skeleton,slot,attachmentName,attachments) {
		var attachment = attachmentName == null ? null : skeleton.getAttachment(slot.data.index,attachmentName);
		if(slot.attachment != attachment) {
			var tmp;
			if(!(!((attachment) instanceof spine_attachments_VertexAttachment) || !((slot.attachment) instanceof spine_attachments_VertexAttachment))) {
				var result = attachment;
				var _this = result;
				var result = slot.attachment;
				var _this1 = result;
				tmp = (_this.deformAttachment != null ? _this.deformAttachment : _this) != (_this1.deformAttachment != null ? _this1.deformAttachment : _this1);
			} else {
				tmp = true;
			}
			if(tmp) {
				var this1 = slot.deform;
				this1.splice(0,this1.length);
			}
			slot.attachment = attachment;
			slot.attachmentTime = slot.bone.skeleton.time;
		}
		if(attachments) {
			slot.attachmentState = this.unkeyedState + 2;
		}
	}
	,applyRotateTimeline: function(timeline,skeleton,time,alpha,blend,timelinesRotation,i,firstFrame) {
		if(firstFrame) {
			timelinesRotation[i] = 0;
		}
		if(alpha == 1) {
			timeline.apply(skeleton,0,time,null,1,blend,0);
			return;
		}
		var bone = skeleton.bones[timeline.boneIndex];
		if(!bone.active) {
			return;
		}
		var frames = timeline.frames;
		var r1 = 0;
		var r2 = 0;
		if(time < frames[0]) {
			var _continueAfterSwitch1 = false;
			while(true) {
				var _switchCond1 = blend;
				if(_switchCond1 == 0) {
					bone.rotation = bone.data.rotation;
					return;
				} else if(_switchCond1 == 1) {
					r1 = bone.rotation;
					r2 = bone.data.rotation;
				} else {
					return;
				}
				break;
			}
		} else {
			r1 = blend == 0 ? bone.data.rotation : bone.rotation;
			r2 = bone.data.rotation + timeline.getCurveValue(time);
		}
		var total = 0;
		var diff = r2 - r1;
		diff -= (16384 - (16384.499999999996 - diff / 360 | 0)) * 360;
		if(diff == 0) {
			total = timelinesRotation[i];
		} else {
			var lastTotal = 0;
			var lastDiff = 0;
			if(firstFrame) {
				lastTotal = 0;
				lastDiff = diff;
			} else {
				lastTotal = timelinesRotation[i];
				lastDiff = timelinesRotation[i + 1];
			}
			var current = diff > 0;
			var dir = lastTotal >= 0;
			if((lastDiff > 0 ? 1 : lastDiff < 0 ? -1 : 0) != (diff > 0 ? 1 : diff < 0 ? -1 : 0) && Math.abs(lastDiff) <= 90) {
				if(Math.abs(lastTotal) > 180) {
					lastTotal += 360 * (lastTotal > 0 ? 1 : lastTotal < 0 ? -1 : 0);
				}
				dir = current;
			}
			total = diff + lastTotal - lastTotal % 360;
			if(dir != current) {
				total += 360 * (lastTotal > 0 ? 1 : lastTotal < 0 ? -1 : 0);
			}
			timelinesRotation[i] = total;
		}
		timelinesRotation[i + 1] = diff;
		bone.rotation = r1 + total * alpha;
	}
	,queueEvents: function(entry,animationTime) {
		var animationStart = entry.animationStart;
		var animationEnd = entry.animationEnd;
		var duration = animationEnd - animationStart;
		var trackLastWrapped = entry.trackLast % duration;
		var events = this.events;
		var i = 0;
		var n = this.events.length;
		while(i < n) {
			var result = events[i];
			var event = result;
			if(event.time < trackLastWrapped) {
				break;
			}
			if(event.time > animationEnd) {
				++i;
				continue;
			}
			var _this = this.queue;
			_this.objects.push(5);
			_this.objects.push(entry);
			_this.objects.push(event);
			++i;
		}
		var complete = false;
		if(entry.loop) {
			complete = duration == 0 || trackLastWrapped > entry.trackTime % duration;
		} else {
			complete = animationTime >= animationEnd && entry.animationLast < animationEnd;
		}
		if(complete) {
			var _this = this.queue;
			_this.objects.push(4);
			_this.objects.push(entry);
		}
		while(i < n) {
			var result = events[i];
			var event = result;
			if(event.time < animationStart) {
				++i;
				continue;
			}
			var _this = this.queue;
			_this.objects.push(5);
			_this.objects.push(entry);
			_this.objects.push(event);
			++i;
		}
	}
	,clearTracks: function() {
		var oldDrainDisabled = this.queue.drainDisabled;
		this.queue.drainDisabled = true;
		var i = 0;
		var n = this.tracks.length;
		while(i < n) {
			if(i < 0) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("trackIndex must be >= 0."));
			}
			if(i < this.tracks.length) {
				var current = this.tracks[i];
				if(current != null) {
					var _this = this.queue;
					_this.objects.push(2);
					_this.objects.push(current);
					_this.AnimationState_this.animationsChanged = true;
					var next = current.next;
					while(next != null) {
						var _this1 = this.queue;
						_this1.objects.push(3);
						_this1.objects.push(next);
						next = next.next;
					}
					current.next = null;
					var entry = current;
					while(true) {
						var from = entry.mixingFrom;
						if(from == null) {
							break;
						}
						var _this2 = this.queue;
						_this2.objects.push(2);
						_this2.objects.push(from);
						_this2.AnimationState_this.animationsChanged = true;
						entry.mixingFrom = null;
						entry.mixingTo = null;
						entry = from;
					}
					this.tracks[current.trackIndex] = null;
					var _this3 = this.queue;
					if(!_this3.drainDisabled) {
						_this3.drainDisabled = true;
						var listenersArray = _this3.AnimationState_this.listeners;
						var i1 = 0;
						while(i1 < _this3.objects.length) {
							var type = _this3.objects[i1];
							var result = _this3.objects[i1 + 1];
							var entry1 = result;
							var listenersCount = listenersArray.array.length;
							var listeners = listenersArray.begin();
							while(true) {
								var _switchCond2 = type;
								if(_switchCond2 == 0) {
									if(entry1.listener != null) {
										entry1.listener.start(entry1);
									}
									var ii = 0;
									while(ii < listenersCount) {
										var result1 = listeners[ii];
										result1.start(entry1);
										++ii;
									}
									break;
								} else if(_switchCond2 == 1) {
									if(entry1.listener != null) {
										entry1.listener.interrupt(entry1);
									}
									var ii1 = 0;
									while(ii1 < listenersCount) {
										var result2 = listeners[ii1];
										result2.interrupt(entry1);
										++ii1;
									}
									break;
								} else if(_switchCond2 == 2) {
									if(entry1.listener != null) {
										entry1.listener.end(entry1);
									}
									var ii2 = 0;
									while(ii2 < listenersCount) {
										var result3 = listeners[ii2];
										result3.end(entry1);
										++ii2;
									}
									if(entry1.listener != null) {
										entry1.listener.dispose(entry1);
									}
									var ii3 = 0;
									while(ii3 < listenersCount) {
										var result4 = listeners[ii3];
										result4.dispose(entry1);
										++ii3;
									}
									_this3.AnimationState_this.trackEntryPool.free(entry1);
									break;
								} else if(_switchCond2 == 3) {
									if(entry1.listener != null) {
										entry1.listener.dispose(entry1);
									}
									var ii4 = 0;
									while(ii4 < listenersCount) {
										var result5 = listeners[ii4];
										result5.dispose(entry1);
										++ii4;
									}
									_this3.AnimationState_this.trackEntryPool.free(entry1);
									break;
								} else if(_switchCond2 == 4) {
									if(entry1.listener != null) {
										entry1.listener.complete(entry1);
									}
									var ii5 = 0;
									while(ii5 < listenersCount) {
										var result6 = listeners[ii5];
										result6.complete(entry1);
										++ii5;
									}
									break;
								} else if(_switchCond2 == 5) {
									var result7 = _this3.objects[i1++ + 2];
									var event = result7;
									if(entry1.listener != null) {
										entry1.listener.event(entry1,event);
									}
									var ii6 = 0;
									while(ii6 < listenersCount) {
										var result8 = listeners[ii6];
										result8.event(entry1,event);
										++ii6;
									}
									break;
								}
								break;
							}
							listenersArray.end();
							i1 += 2;
						}
						var this1 = _this3.objects;
						this1.splice(0,this1.length);
						_this3.drainDisabled = false;
					}
				}
			}
			++i;
		}
		var this1 = this.tracks;
		this1.splice(0,this1.length);
		this.queue.drainDisabled = oldDrainDisabled;
		var _this = this.queue;
		if(!_this.drainDisabled) {
			_this.drainDisabled = true;
			var listenersArray = _this.AnimationState_this.listeners;
			var i = 0;
			while(i < _this.objects.length) {
				var type = _this.objects[i];
				var result = _this.objects[i + 1];
				var entry = result;
				var listenersCount = listenersArray.array.length;
				var listeners = listenersArray.begin();
				while(true) {
					var _switchCond2 = type;
					if(_switchCond2 == 0) {
						if(entry.listener != null) {
							entry.listener.start(entry);
						}
						var ii = 0;
						while(ii < listenersCount) {
							var result1 = listeners[ii];
							result1.start(entry);
							++ii;
						}
						break;
					} else if(_switchCond2 == 1) {
						if(entry.listener != null) {
							entry.listener.interrupt(entry);
						}
						var ii1 = 0;
						while(ii1 < listenersCount) {
							var result2 = listeners[ii1];
							result2.interrupt(entry);
							++ii1;
						}
						break;
					} else if(_switchCond2 == 2) {
						if(entry.listener != null) {
							entry.listener.end(entry);
						}
						var ii2 = 0;
						while(ii2 < listenersCount) {
							var result3 = listeners[ii2];
							result3.end(entry);
							++ii2;
						}
						if(entry.listener != null) {
							entry.listener.dispose(entry);
						}
						var ii3 = 0;
						while(ii3 < listenersCount) {
							var result4 = listeners[ii3];
							result4.dispose(entry);
							++ii3;
						}
						_this.AnimationState_this.trackEntryPool.free(entry);
						break;
					} else if(_switchCond2 == 3) {
						if(entry.listener != null) {
							entry.listener.dispose(entry);
						}
						var ii4 = 0;
						while(ii4 < listenersCount) {
							var result5 = listeners[ii4];
							result5.dispose(entry);
							++ii4;
						}
						_this.AnimationState_this.trackEntryPool.free(entry);
						break;
					} else if(_switchCond2 == 4) {
						if(entry.listener != null) {
							entry.listener.complete(entry);
						}
						var ii5 = 0;
						while(ii5 < listenersCount) {
							var result6 = listeners[ii5];
							result6.complete(entry);
							++ii5;
						}
						break;
					} else if(_switchCond2 == 5) {
						var result7 = _this.objects[i++ + 2];
						var event = result7;
						if(entry.listener != null) {
							entry.listener.event(entry,event);
						}
						var ii6 = 0;
						while(ii6 < listenersCount) {
							var result8 = listeners[ii6];
							result8.event(entry,event);
							++ii6;
						}
						break;
					}
					break;
				}
				listenersArray.end();
				i += 2;
			}
			var this1 = _this.objects;
			this1.splice(0,this1.length);
			_this.drainDisabled = false;
		}
	}
	,clearTrack: function(trackIndex) {
		if(trackIndex < 0) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("trackIndex must be >= 0."));
		}
		if(trackIndex >= this.tracks.length) {
			return;
		}
		var current = this.tracks[trackIndex];
		if(current == null) {
			return;
		}
		var _this = this.queue;
		_this.objects.push(2);
		_this.objects.push(current);
		_this.AnimationState_this.animationsChanged = true;
		var next = current.next;
		while(next != null) {
			var _this = this.queue;
			_this.objects.push(3);
			_this.objects.push(next);
			next = next.next;
		}
		current.next = null;
		var entry = current;
		while(true) {
			var from = entry.mixingFrom;
			if(from == null) {
				break;
			}
			var _this = this.queue;
			_this.objects.push(2);
			_this.objects.push(from);
			_this.AnimationState_this.animationsChanged = true;
			entry.mixingFrom = null;
			entry.mixingTo = null;
			entry = from;
		}
		this.tracks[current.trackIndex] = null;
		var _this = this.queue;
		if(!_this.drainDisabled) {
			_this.drainDisabled = true;
			var listenersArray = _this.AnimationState_this.listeners;
			var i = 0;
			while(i < _this.objects.length) {
				var type = _this.objects[i];
				var result = _this.objects[i + 1];
				var entry = result;
				var listenersCount = listenersArray.array.length;
				var listeners = listenersArray.begin();
				while(true) {
					var _switchCond2 = type;
					if(_switchCond2 == 0) {
						if(entry.listener != null) {
							entry.listener.start(entry);
						}
						var ii = 0;
						while(ii < listenersCount) {
							var result1 = listeners[ii];
							result1.start(entry);
							++ii;
						}
						break;
					} else if(_switchCond2 == 1) {
						if(entry.listener != null) {
							entry.listener.interrupt(entry);
						}
						var ii1 = 0;
						while(ii1 < listenersCount) {
							var result2 = listeners[ii1];
							result2.interrupt(entry);
							++ii1;
						}
						break;
					} else if(_switchCond2 == 2) {
						if(entry.listener != null) {
							entry.listener.end(entry);
						}
						var ii2 = 0;
						while(ii2 < listenersCount) {
							var result3 = listeners[ii2];
							result3.end(entry);
							++ii2;
						}
						if(entry.listener != null) {
							entry.listener.dispose(entry);
						}
						var ii3 = 0;
						while(ii3 < listenersCount) {
							var result4 = listeners[ii3];
							result4.dispose(entry);
							++ii3;
						}
						_this.AnimationState_this.trackEntryPool.free(entry);
						break;
					} else if(_switchCond2 == 3) {
						if(entry.listener != null) {
							entry.listener.dispose(entry);
						}
						var ii4 = 0;
						while(ii4 < listenersCount) {
							var result5 = listeners[ii4];
							result5.dispose(entry);
							++ii4;
						}
						_this.AnimationState_this.trackEntryPool.free(entry);
						break;
					} else if(_switchCond2 == 4) {
						if(entry.listener != null) {
							entry.listener.complete(entry);
						}
						var ii5 = 0;
						while(ii5 < listenersCount) {
							var result6 = listeners[ii5];
							result6.complete(entry);
							++ii5;
						}
						break;
					} else if(_switchCond2 == 5) {
						var result7 = _this.objects[i++ + 2];
						var event = result7;
						if(entry.listener != null) {
							entry.listener.event(entry,event);
						}
						var ii6 = 0;
						while(ii6 < listenersCount) {
							var result8 = listeners[ii6];
							result8.event(entry,event);
							++ii6;
						}
						break;
					}
					break;
				}
				listenersArray.end();
				i += 2;
			}
			var this1 = _this.objects;
			this1.splice(0,this1.length);
			_this.drainDisabled = false;
		}
	}
	,setCurrent: function(index,current,interrupt) {
		var from;
		if(index < this.tracks.length) {
			from = this.tracks[index];
		} else {
			var this1 = this.tracks;
			var size = index + 1;
			var len = this1.length;
			if(len > size) {
				this1.splice(size,size - len);
			} else if(len < size) {
				this1[size - 1] = null;
			}
			from = null;
		}
		this.tracks[index] = current;
		current.previous = null;
		if(from != null) {
			if(interrupt) {
				var _this = this.queue;
				_this.objects.push(1);
				_this.objects.push(from);
			}
			current.mixingFrom = from;
			from.mixingTo = current;
			current.mixTime = 0;
			if(from.mixingFrom != null && from.mixDuration > 0) {
				current.interruptAlpha *= Math.min(1,from.mixTime / from.mixDuration | 0);
			}
			var this1 = from.timelinesRotation;
			this1.splice(0,this1.length);
		}
		var _this = this.queue;
		_this.objects.push(0);
		_this.objects.push(current);
		_this.AnimationState_this.animationsChanged = true;
	}
	,setAnimationByName: function(trackIndex,animationName,loop) {
		var animation = this.data.skeletonData.findAnimation(animationName);
		if(animation == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("Animation not found: " + animationName));
		}
		if(trackIndex < 0) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("trackIndex must be >= 0."));
		}
		if(animation == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("animation cannot be null."));
		}
		var interrupt = true;
		var current;
		if(trackIndex < this.tracks.length) {
			current = this.tracks[trackIndex];
		} else {
			var this1 = this.tracks;
			var size = trackIndex + 1;
			var len = this1.length;
			if(len > size) {
				this1.splice(size,size - len);
			} else if(len < size) {
				this1[size - 1] = null;
			}
			current = null;
		}
		if(current != null) {
			if(current.nextTrackLast == -1) {
				this.tracks[trackIndex] = current.mixingFrom;
				var _this = this.queue;
				_this.objects.push(1);
				_this.objects.push(current);
				var _this = this.queue;
				_this.objects.push(2);
				_this.objects.push(current);
				_this.AnimationState_this.animationsChanged = true;
				var next = current.next;
				while(next != null) {
					var _this = this.queue;
					_this.objects.push(3);
					_this.objects.push(next);
					next = next.next;
				}
				current.next = null;
				current = current.mixingFrom;
				interrupt = false;
			} else {
				var next = current.next;
				while(next != null) {
					var _this = this.queue;
					_this.objects.push(3);
					_this.objects.push(next);
					next = next.next;
				}
				current.next = null;
			}
		}
		var entry = this.trackEntryPool.obtain();
		entry.trackIndex = trackIndex;
		entry.animation = animation;
		entry.loop = loop;
		entry.holdPrevious = false;
		entry.eventThreshold = 0;
		entry.attachmentThreshold = 0;
		entry.drawOrderThreshold = 0;
		entry.animationStart = 0;
		entry.animationEnd = animation.getDuration();
		entry.animationLast = -1;
		entry.nextAnimationLast = -1;
		entry.delay = 0;
		entry.trackTime = 0;
		entry.trackLast = -1;
		entry.nextTrackLast = -1;
		entry.trackEnd = 999999999.0;
		entry.timeScale = 1;
		entry.alpha = 1;
		entry.interruptAlpha = 1;
		entry.mixTime = 0;
		var tmp;
		if(current == null) {
			tmp = 0;
		} else {
			var _this = this.data;
			var from = current.animation;
			if(from == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("from cannot be null."));
			}
			if(animation == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("to cannot be null."));
			}
			_this.tempAnimationStateDataKey.a1 = from;
			_this.tempAnimationStateDataKey.a2 = animation;
			var this1 = _this.animationToMixTime;
			var key = _this.tempAnimationStateDataKey;
			var defaultValue = _this.defaultMix;
			if(defaultValue == null) {
				defaultValue = 0.0;
			}
			var key1 = key.getHashCode();
			var entries = this1.h[key1];
			var result = defaultValue;
			if(entries != null) {
				var _g = 0;
				var _g1 = entries.length;
				while(_g < _g1) {
					var i = _g++;
					var entry1 = entries[i];
					if(entry1.key.equals(key)) {
						result = entry1.value;
						break;
					}
				}
			}
			tmp = result;
		}
		entry.mixDuration = tmp;
		entry.mixBlend = 2;
		var entry1 = entry;
		var from;
		if(trackIndex < this.tracks.length) {
			from = this.tracks[trackIndex];
		} else {
			var this1 = this.tracks;
			var size = trackIndex + 1;
			var len = this1.length;
			if(len > size) {
				this1.splice(size,size - len);
			} else if(len < size) {
				this1[size - 1] = null;
			}
			from = null;
		}
		this.tracks[trackIndex] = entry1;
		entry1.previous = null;
		if(from != null) {
			if(interrupt) {
				var _this = this.queue;
				_this.objects.push(1);
				_this.objects.push(from);
			}
			entry1.mixingFrom = from;
			from.mixingTo = entry1;
			entry1.mixTime = 0;
			if(from.mixingFrom != null && from.mixDuration > 0) {
				entry1.interruptAlpha *= Math.min(1,from.mixTime / from.mixDuration | 0);
			}
			var this1 = from.timelinesRotation;
			this1.splice(0,this1.length);
		}
		var _this = this.queue;
		_this.objects.push(0);
		_this.objects.push(entry1);
		_this.AnimationState_this.animationsChanged = true;
		var _this = this.queue;
		if(!_this.drainDisabled) {
			_this.drainDisabled = true;
			var listenersArray = _this.AnimationState_this.listeners;
			var i = 0;
			while(i < _this.objects.length) {
				var type = _this.objects[i];
				var result = _this.objects[i + 1];
				var entry = result;
				var listenersCount = listenersArray.array.length;
				var listeners = listenersArray.begin();
				while(true) {
					var _switchCond2 = type;
					if(_switchCond2 == 0) {
						if(entry.listener != null) {
							entry.listener.start(entry);
						}
						var ii = 0;
						while(ii < listenersCount) {
							var result1 = listeners[ii];
							result1.start(entry);
							++ii;
						}
						break;
					} else if(_switchCond2 == 1) {
						if(entry.listener != null) {
							entry.listener.interrupt(entry);
						}
						var ii1 = 0;
						while(ii1 < listenersCount) {
							var result2 = listeners[ii1];
							result2.interrupt(entry);
							++ii1;
						}
						break;
					} else if(_switchCond2 == 2) {
						if(entry.listener != null) {
							entry.listener.end(entry);
						}
						var ii2 = 0;
						while(ii2 < listenersCount) {
							var result3 = listeners[ii2];
							result3.end(entry);
							++ii2;
						}
						if(entry.listener != null) {
							entry.listener.dispose(entry);
						}
						var ii3 = 0;
						while(ii3 < listenersCount) {
							var result4 = listeners[ii3];
							result4.dispose(entry);
							++ii3;
						}
						_this.AnimationState_this.trackEntryPool.free(entry);
						break;
					} else if(_switchCond2 == 3) {
						if(entry.listener != null) {
							entry.listener.dispose(entry);
						}
						var ii4 = 0;
						while(ii4 < listenersCount) {
							var result5 = listeners[ii4];
							result5.dispose(entry);
							++ii4;
						}
						_this.AnimationState_this.trackEntryPool.free(entry);
						break;
					} else if(_switchCond2 == 4) {
						if(entry.listener != null) {
							entry.listener.complete(entry);
						}
						var ii5 = 0;
						while(ii5 < listenersCount) {
							var result6 = listeners[ii5];
							result6.complete(entry);
							++ii5;
						}
						break;
					} else if(_switchCond2 == 5) {
						var result7 = _this.objects[i++ + 2];
						var event = result7;
						if(entry.listener != null) {
							entry.listener.event(entry,event);
						}
						var ii6 = 0;
						while(ii6 < listenersCount) {
							var result8 = listeners[ii6];
							result8.event(entry,event);
							++ii6;
						}
						break;
					}
					break;
				}
				listenersArray.end();
				i += 2;
			}
			var this1 = _this.objects;
			this1.splice(0,this1.length);
			_this.drainDisabled = false;
		}
		return entry1;
	}
	,setAnimation: function(trackIndex,animation,loop) {
		if(trackIndex < 0) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("trackIndex must be >= 0."));
		}
		if(animation == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("animation cannot be null."));
		}
		var interrupt = true;
		var current;
		if(trackIndex < this.tracks.length) {
			current = this.tracks[trackIndex];
		} else {
			var this1 = this.tracks;
			var size = trackIndex + 1;
			var len = this1.length;
			if(len > size) {
				this1.splice(size,size - len);
			} else if(len < size) {
				this1[size - 1] = null;
			}
			current = null;
		}
		if(current != null) {
			if(current.nextTrackLast == -1) {
				this.tracks[trackIndex] = current.mixingFrom;
				var _this = this.queue;
				_this.objects.push(1);
				_this.objects.push(current);
				var _this = this.queue;
				_this.objects.push(2);
				_this.objects.push(current);
				_this.AnimationState_this.animationsChanged = true;
				var next = current.next;
				while(next != null) {
					var _this = this.queue;
					_this.objects.push(3);
					_this.objects.push(next);
					next = next.next;
				}
				current.next = null;
				current = current.mixingFrom;
				interrupt = false;
			} else {
				var next = current.next;
				while(next != null) {
					var _this = this.queue;
					_this.objects.push(3);
					_this.objects.push(next);
					next = next.next;
				}
				current.next = null;
			}
		}
		var entry = this.trackEntryPool.obtain();
		entry.trackIndex = trackIndex;
		entry.animation = animation;
		entry.loop = loop;
		entry.holdPrevious = false;
		entry.eventThreshold = 0;
		entry.attachmentThreshold = 0;
		entry.drawOrderThreshold = 0;
		entry.animationStart = 0;
		entry.animationEnd = animation.getDuration();
		entry.animationLast = -1;
		entry.nextAnimationLast = -1;
		entry.delay = 0;
		entry.trackTime = 0;
		entry.trackLast = -1;
		entry.nextTrackLast = -1;
		entry.trackEnd = 999999999.0;
		entry.timeScale = 1;
		entry.alpha = 1;
		entry.interruptAlpha = 1;
		entry.mixTime = 0;
		var tmp;
		if(current == null) {
			tmp = 0;
		} else {
			var _this = this.data;
			var from = current.animation;
			if(from == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("from cannot be null."));
			}
			if(animation == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("to cannot be null."));
			}
			_this.tempAnimationStateDataKey.a1 = from;
			_this.tempAnimationStateDataKey.a2 = animation;
			var this1 = _this.animationToMixTime;
			var key = _this.tempAnimationStateDataKey;
			var defaultValue = _this.defaultMix;
			if(defaultValue == null) {
				defaultValue = 0.0;
			}
			var key1 = key.getHashCode();
			var entries = this1.h[key1];
			var result = defaultValue;
			if(entries != null) {
				var _g = 0;
				var _g1 = entries.length;
				while(_g < _g1) {
					var i = _g++;
					var entry1 = entries[i];
					if(entry1.key.equals(key)) {
						result = entry1.value;
						break;
					}
				}
			}
			tmp = result;
		}
		entry.mixDuration = tmp;
		entry.mixBlend = 2;
		var entry1 = entry;
		var from;
		if(trackIndex < this.tracks.length) {
			from = this.tracks[trackIndex];
		} else {
			var this1 = this.tracks;
			var size = trackIndex + 1;
			var len = this1.length;
			if(len > size) {
				this1.splice(size,size - len);
			} else if(len < size) {
				this1[size - 1] = null;
			}
			from = null;
		}
		this.tracks[trackIndex] = entry1;
		entry1.previous = null;
		if(from != null) {
			if(interrupt) {
				var _this = this.queue;
				_this.objects.push(1);
				_this.objects.push(from);
			}
			entry1.mixingFrom = from;
			from.mixingTo = entry1;
			entry1.mixTime = 0;
			if(from.mixingFrom != null && from.mixDuration > 0) {
				entry1.interruptAlpha *= Math.min(1,from.mixTime / from.mixDuration | 0);
			}
			var this1 = from.timelinesRotation;
			this1.splice(0,this1.length);
		}
		var _this = this.queue;
		_this.objects.push(0);
		_this.objects.push(entry1);
		_this.AnimationState_this.animationsChanged = true;
		var _this = this.queue;
		if(!_this.drainDisabled) {
			_this.drainDisabled = true;
			var listenersArray = _this.AnimationState_this.listeners;
			var i = 0;
			while(i < _this.objects.length) {
				var type = _this.objects[i];
				var result = _this.objects[i + 1];
				var entry = result;
				var listenersCount = listenersArray.array.length;
				var listeners = listenersArray.begin();
				while(true) {
					var _switchCond2 = type;
					if(_switchCond2 == 0) {
						if(entry.listener != null) {
							entry.listener.start(entry);
						}
						var ii = 0;
						while(ii < listenersCount) {
							var result1 = listeners[ii];
							result1.start(entry);
							++ii;
						}
						break;
					} else if(_switchCond2 == 1) {
						if(entry.listener != null) {
							entry.listener.interrupt(entry);
						}
						var ii1 = 0;
						while(ii1 < listenersCount) {
							var result2 = listeners[ii1];
							result2.interrupt(entry);
							++ii1;
						}
						break;
					} else if(_switchCond2 == 2) {
						if(entry.listener != null) {
							entry.listener.end(entry);
						}
						var ii2 = 0;
						while(ii2 < listenersCount) {
							var result3 = listeners[ii2];
							result3.end(entry);
							++ii2;
						}
						if(entry.listener != null) {
							entry.listener.dispose(entry);
						}
						var ii3 = 0;
						while(ii3 < listenersCount) {
							var result4 = listeners[ii3];
							result4.dispose(entry);
							++ii3;
						}
						_this.AnimationState_this.trackEntryPool.free(entry);
						break;
					} else if(_switchCond2 == 3) {
						if(entry.listener != null) {
							entry.listener.dispose(entry);
						}
						var ii4 = 0;
						while(ii4 < listenersCount) {
							var result5 = listeners[ii4];
							result5.dispose(entry);
							++ii4;
						}
						_this.AnimationState_this.trackEntryPool.free(entry);
						break;
					} else if(_switchCond2 == 4) {
						if(entry.listener != null) {
							entry.listener.complete(entry);
						}
						var ii5 = 0;
						while(ii5 < listenersCount) {
							var result6 = listeners[ii5];
							result6.complete(entry);
							++ii5;
						}
						break;
					} else if(_switchCond2 == 5) {
						var result7 = _this.objects[i++ + 2];
						var event = result7;
						if(entry.listener != null) {
							entry.listener.event(entry,event);
						}
						var ii6 = 0;
						while(ii6 < listenersCount) {
							var result8 = listeners[ii6];
							result8.event(entry,event);
							++ii6;
						}
						break;
					}
					break;
				}
				listenersArray.end();
				i += 2;
			}
			var this1 = _this.objects;
			this1.splice(0,this1.length);
			_this.drainDisabled = false;
		}
		return entry1;
	}
	,addAnimationByName: function(trackIndex,animationName,loop,delay) {
		var animation = this.data.skeletonData.findAnimation(animationName);
		if(animation == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("Animation not found: " + animationName));
		}
		var delay1 = delay;
		if(trackIndex < 0) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("trackIndex must be >= 0."));
		}
		if(animation == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("animation cannot be null."));
		}
		var last;
		if(trackIndex < this.tracks.length) {
			last = this.tracks[trackIndex];
		} else {
			var this1 = this.tracks;
			var size = trackIndex + 1;
			var len = this1.length;
			if(len > size) {
				this1.splice(size,size - len);
			} else if(len < size) {
				this1[size - 1] = null;
			}
			last = null;
		}
		if(last != null) {
			while(last.next != null) last = last.next;
		}
		var entry = this.trackEntryPool.obtain();
		entry.trackIndex = trackIndex;
		entry.animation = animation;
		entry.loop = loop;
		entry.holdPrevious = false;
		entry.eventThreshold = 0;
		entry.attachmentThreshold = 0;
		entry.drawOrderThreshold = 0;
		entry.animationStart = 0;
		entry.animationEnd = animation.getDuration();
		entry.animationLast = -1;
		entry.nextAnimationLast = -1;
		entry.delay = 0;
		entry.trackTime = 0;
		entry.trackLast = -1;
		entry.nextTrackLast = -1;
		entry.trackEnd = 999999999.0;
		entry.timeScale = 1;
		entry.alpha = 1;
		entry.interruptAlpha = 1;
		entry.mixTime = 0;
		var tmp;
		if(last == null) {
			tmp = 0;
		} else {
			var _this = this.data;
			var from = last.animation;
			if(from == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("from cannot be null."));
			}
			if(animation == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("to cannot be null."));
			}
			_this.tempAnimationStateDataKey.a1 = from;
			_this.tempAnimationStateDataKey.a2 = animation;
			var this1 = _this.animationToMixTime;
			var key = _this.tempAnimationStateDataKey;
			var defaultValue = _this.defaultMix;
			if(defaultValue == null) {
				defaultValue = 0.0;
			}
			var key1 = key.getHashCode();
			var entries = this1.h[key1];
			var result = defaultValue;
			if(entries != null) {
				var _g = 0;
				var _g1 = entries.length;
				while(_g < _g1) {
					var i = _g++;
					var entry1 = entries[i];
					if(entry1.key.equals(key)) {
						result = entry1.value;
						break;
					}
				}
			}
			tmp = result;
		}
		entry.mixDuration = tmp;
		entry.mixBlend = 2;
		var entry1 = entry;
		if(last == null) {
			var from;
			if(trackIndex < this.tracks.length) {
				from = this.tracks[trackIndex];
			} else {
				var this1 = this.tracks;
				var size = trackIndex + 1;
				var len = this1.length;
				if(len > size) {
					this1.splice(size,size - len);
				} else if(len < size) {
					this1[size - 1] = null;
				}
				from = null;
			}
			this.tracks[trackIndex] = entry1;
			entry1.previous = null;
			if(from != null) {
				var _this = this.queue;
				_this.objects.push(1);
				_this.objects.push(from);
				entry1.mixingFrom = from;
				from.mixingTo = entry1;
				entry1.mixTime = 0;
				if(from.mixingFrom != null && from.mixDuration > 0) {
					entry1.interruptAlpha *= Math.min(1,from.mixTime / from.mixDuration | 0);
				}
				var this1 = from.timelinesRotation;
				this1.splice(0,this1.length);
			}
			var _this = this.queue;
			_this.objects.push(0);
			_this.objects.push(entry1);
			_this.AnimationState_this.animationsChanged = true;
			var _this = this.queue;
			if(!_this.drainDisabled) {
				_this.drainDisabled = true;
				var listenersArray = _this.AnimationState_this.listeners;
				var i = 0;
				while(i < _this.objects.length) {
					var type = _this.objects[i];
					var result = _this.objects[i + 1];
					var entry = result;
					var listenersCount = listenersArray.array.length;
					var listeners = listenersArray.begin();
					while(true) {
						var _switchCond2 = type;
						if(_switchCond2 == 0) {
							if(entry.listener != null) {
								entry.listener.start(entry);
							}
							var ii = 0;
							while(ii < listenersCount) {
								var result1 = listeners[ii];
								result1.start(entry);
								++ii;
							}
							break;
						} else if(_switchCond2 == 1) {
							if(entry.listener != null) {
								entry.listener.interrupt(entry);
							}
							var ii1 = 0;
							while(ii1 < listenersCount) {
								var result2 = listeners[ii1];
								result2.interrupt(entry);
								++ii1;
							}
							break;
						} else if(_switchCond2 == 2) {
							if(entry.listener != null) {
								entry.listener.end(entry);
							}
							var ii2 = 0;
							while(ii2 < listenersCount) {
								var result3 = listeners[ii2];
								result3.end(entry);
								++ii2;
							}
							if(entry.listener != null) {
								entry.listener.dispose(entry);
							}
							var ii3 = 0;
							while(ii3 < listenersCount) {
								var result4 = listeners[ii3];
								result4.dispose(entry);
								++ii3;
							}
							_this.AnimationState_this.trackEntryPool.free(entry);
							break;
						} else if(_switchCond2 == 3) {
							if(entry.listener != null) {
								entry.listener.dispose(entry);
							}
							var ii4 = 0;
							while(ii4 < listenersCount) {
								var result5 = listeners[ii4];
								result5.dispose(entry);
								++ii4;
							}
							_this.AnimationState_this.trackEntryPool.free(entry);
							break;
						} else if(_switchCond2 == 4) {
							if(entry.listener != null) {
								entry.listener.complete(entry);
							}
							var ii5 = 0;
							while(ii5 < listenersCount) {
								var result6 = listeners[ii5];
								result6.complete(entry);
								++ii5;
							}
							break;
						} else if(_switchCond2 == 5) {
							var result7 = _this.objects[i++ + 2];
							var event = result7;
							if(entry.listener != null) {
								entry.listener.event(entry,event);
							}
							var ii6 = 0;
							while(ii6 < listenersCount) {
								var result8 = listeners[ii6];
								result8.event(entry,event);
								++ii6;
							}
							break;
						}
						break;
					}
					listenersArray.end();
					i += 2;
				}
				var this1 = _this.objects;
				this1.splice(0,this1.length);
				_this.drainDisabled = false;
			}
		} else {
			last.next = entry1;
			entry1.previous = last;
			if(delay1 <= 0) {
				delay1 += last.getTrackComplete() - entry1.mixDuration;
			}
		}
		entry1.delay = delay1;
		return entry1;
	}
	,addAnimation: function(trackIndex,animation,loop,delay) {
		if(trackIndex < 0) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("trackIndex must be >= 0."));
		}
		if(animation == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("animation cannot be null."));
		}
		var last;
		if(trackIndex < this.tracks.length) {
			last = this.tracks[trackIndex];
		} else {
			var this1 = this.tracks;
			var size = trackIndex + 1;
			var len = this1.length;
			if(len > size) {
				this1.splice(size,size - len);
			} else if(len < size) {
				this1[size - 1] = null;
			}
			last = null;
		}
		if(last != null) {
			while(last.next != null) last = last.next;
		}
		var entry = this.trackEntryPool.obtain();
		entry.trackIndex = trackIndex;
		entry.animation = animation;
		entry.loop = loop;
		entry.holdPrevious = false;
		entry.eventThreshold = 0;
		entry.attachmentThreshold = 0;
		entry.drawOrderThreshold = 0;
		entry.animationStart = 0;
		entry.animationEnd = animation.getDuration();
		entry.animationLast = -1;
		entry.nextAnimationLast = -1;
		entry.delay = 0;
		entry.trackTime = 0;
		entry.trackLast = -1;
		entry.nextTrackLast = -1;
		entry.trackEnd = 999999999.0;
		entry.timeScale = 1;
		entry.alpha = 1;
		entry.interruptAlpha = 1;
		entry.mixTime = 0;
		var tmp;
		if(last == null) {
			tmp = 0;
		} else {
			var _this = this.data;
			var from = last.animation;
			if(from == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("from cannot be null."));
			}
			if(animation == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("to cannot be null."));
			}
			_this.tempAnimationStateDataKey.a1 = from;
			_this.tempAnimationStateDataKey.a2 = animation;
			var this1 = _this.animationToMixTime;
			var key = _this.tempAnimationStateDataKey;
			var defaultValue = _this.defaultMix;
			if(defaultValue == null) {
				defaultValue = 0.0;
			}
			var key1 = key.getHashCode();
			var entries = this1.h[key1];
			var result = defaultValue;
			if(entries != null) {
				var _g = 0;
				var _g1 = entries.length;
				while(_g < _g1) {
					var i = _g++;
					var entry1 = entries[i];
					if(entry1.key.equals(key)) {
						result = entry1.value;
						break;
					}
				}
			}
			tmp = result;
		}
		entry.mixDuration = tmp;
		entry.mixBlend = 2;
		var entry1 = entry;
		if(last == null) {
			var from;
			if(trackIndex < this.tracks.length) {
				from = this.tracks[trackIndex];
			} else {
				var this1 = this.tracks;
				var size = trackIndex + 1;
				var len = this1.length;
				if(len > size) {
					this1.splice(size,size - len);
				} else if(len < size) {
					this1[size - 1] = null;
				}
				from = null;
			}
			this.tracks[trackIndex] = entry1;
			entry1.previous = null;
			if(from != null) {
				var _this = this.queue;
				_this.objects.push(1);
				_this.objects.push(from);
				entry1.mixingFrom = from;
				from.mixingTo = entry1;
				entry1.mixTime = 0;
				if(from.mixingFrom != null && from.mixDuration > 0) {
					entry1.interruptAlpha *= Math.min(1,from.mixTime / from.mixDuration | 0);
				}
				var this1 = from.timelinesRotation;
				this1.splice(0,this1.length);
			}
			var _this = this.queue;
			_this.objects.push(0);
			_this.objects.push(entry1);
			_this.AnimationState_this.animationsChanged = true;
			var _this = this.queue;
			if(!_this.drainDisabled) {
				_this.drainDisabled = true;
				var listenersArray = _this.AnimationState_this.listeners;
				var i = 0;
				while(i < _this.objects.length) {
					var type = _this.objects[i];
					var result = _this.objects[i + 1];
					var entry = result;
					var listenersCount = listenersArray.array.length;
					var listeners = listenersArray.begin();
					while(true) {
						var _switchCond2 = type;
						if(_switchCond2 == 0) {
							if(entry.listener != null) {
								entry.listener.start(entry);
							}
							var ii = 0;
							while(ii < listenersCount) {
								var result1 = listeners[ii];
								result1.start(entry);
								++ii;
							}
							break;
						} else if(_switchCond2 == 1) {
							if(entry.listener != null) {
								entry.listener.interrupt(entry);
							}
							var ii1 = 0;
							while(ii1 < listenersCount) {
								var result2 = listeners[ii1];
								result2.interrupt(entry);
								++ii1;
							}
							break;
						} else if(_switchCond2 == 2) {
							if(entry.listener != null) {
								entry.listener.end(entry);
							}
							var ii2 = 0;
							while(ii2 < listenersCount) {
								var result3 = listeners[ii2];
								result3.end(entry);
								++ii2;
							}
							if(entry.listener != null) {
								entry.listener.dispose(entry);
							}
							var ii3 = 0;
							while(ii3 < listenersCount) {
								var result4 = listeners[ii3];
								result4.dispose(entry);
								++ii3;
							}
							_this.AnimationState_this.trackEntryPool.free(entry);
							break;
						} else if(_switchCond2 == 3) {
							if(entry.listener != null) {
								entry.listener.dispose(entry);
							}
							var ii4 = 0;
							while(ii4 < listenersCount) {
								var result5 = listeners[ii4];
								result5.dispose(entry);
								++ii4;
							}
							_this.AnimationState_this.trackEntryPool.free(entry);
							break;
						} else if(_switchCond2 == 4) {
							if(entry.listener != null) {
								entry.listener.complete(entry);
							}
							var ii5 = 0;
							while(ii5 < listenersCount) {
								var result6 = listeners[ii5];
								result6.complete(entry);
								++ii5;
							}
							break;
						} else if(_switchCond2 == 5) {
							var result7 = _this.objects[i++ + 2];
							var event = result7;
							if(entry.listener != null) {
								entry.listener.event(entry,event);
							}
							var ii6 = 0;
							while(ii6 < listenersCount) {
								var result8 = listeners[ii6];
								result8.event(entry,event);
								++ii6;
							}
							break;
						}
						break;
					}
					listenersArray.end();
					i += 2;
				}
				var this1 = _this.objects;
				this1.splice(0,this1.length);
				_this.drainDisabled = false;
			}
		} else {
			last.next = entry1;
			entry1.previous = last;
			if(delay <= 0) {
				delay += last.getTrackComplete() - entry1.mixDuration;
			}
		}
		entry1.delay = delay;
		return entry1;
	}
	,setEmptyAnimation: function(trackIndex,mixDuration) {
		var animation = spine_AnimationState.emptyAnimation;
		if(trackIndex < 0) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("trackIndex must be >= 0."));
		}
		if(animation == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("animation cannot be null."));
		}
		var interrupt = true;
		var current;
		if(trackIndex < this.tracks.length) {
			current = this.tracks[trackIndex];
		} else {
			var this1 = this.tracks;
			var size = trackIndex + 1;
			var len = this1.length;
			if(len > size) {
				this1.splice(size,size - len);
			} else if(len < size) {
				this1[size - 1] = null;
			}
			current = null;
		}
		if(current != null) {
			if(current.nextTrackLast == -1) {
				this.tracks[trackIndex] = current.mixingFrom;
				var _this = this.queue;
				_this.objects.push(1);
				_this.objects.push(current);
				var _this = this.queue;
				_this.objects.push(2);
				_this.objects.push(current);
				_this.AnimationState_this.animationsChanged = true;
				var next = current.next;
				while(next != null) {
					var _this = this.queue;
					_this.objects.push(3);
					_this.objects.push(next);
					next = next.next;
				}
				current.next = null;
				current = current.mixingFrom;
				interrupt = false;
			} else {
				var next = current.next;
				while(next != null) {
					var _this = this.queue;
					_this.objects.push(3);
					_this.objects.push(next);
					next = next.next;
				}
				current.next = null;
			}
		}
		var entry = this.trackEntryPool.obtain();
		entry.trackIndex = trackIndex;
		entry.animation = animation;
		entry.loop = false;
		entry.holdPrevious = false;
		entry.eventThreshold = 0;
		entry.attachmentThreshold = 0;
		entry.drawOrderThreshold = 0;
		entry.animationStart = 0;
		entry.animationEnd = animation.getDuration();
		entry.animationLast = -1;
		entry.nextAnimationLast = -1;
		entry.delay = 0;
		entry.trackTime = 0;
		entry.trackLast = -1;
		entry.nextTrackLast = -1;
		entry.trackEnd = 999999999.0;
		entry.timeScale = 1;
		entry.alpha = 1;
		entry.interruptAlpha = 1;
		entry.mixTime = 0;
		var tmp;
		if(current == null) {
			tmp = 0;
		} else {
			var _this = this.data;
			var from = current.animation;
			if(from == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("from cannot be null."));
			}
			if(animation == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("to cannot be null."));
			}
			_this.tempAnimationStateDataKey.a1 = from;
			_this.tempAnimationStateDataKey.a2 = animation;
			var this1 = _this.animationToMixTime;
			var key = _this.tempAnimationStateDataKey;
			var defaultValue = _this.defaultMix;
			if(defaultValue == null) {
				defaultValue = 0.0;
			}
			var key1 = key.getHashCode();
			var entries = this1.h[key1];
			var result = defaultValue;
			if(entries != null) {
				var _g = 0;
				var _g1 = entries.length;
				while(_g < _g1) {
					var i = _g++;
					var entry1 = entries[i];
					if(entry1.key.equals(key)) {
						result = entry1.value;
						break;
					}
				}
			}
			tmp = result;
		}
		entry.mixDuration = tmp;
		entry.mixBlend = 2;
		var entry1 = entry;
		var from;
		if(trackIndex < this.tracks.length) {
			from = this.tracks[trackIndex];
		} else {
			var this1 = this.tracks;
			var size = trackIndex + 1;
			var len = this1.length;
			if(len > size) {
				this1.splice(size,size - len);
			} else if(len < size) {
				this1[size - 1] = null;
			}
			from = null;
		}
		this.tracks[trackIndex] = entry1;
		entry1.previous = null;
		if(from != null) {
			if(interrupt) {
				var _this = this.queue;
				_this.objects.push(1);
				_this.objects.push(from);
			}
			entry1.mixingFrom = from;
			from.mixingTo = entry1;
			entry1.mixTime = 0;
			if(from.mixingFrom != null && from.mixDuration > 0) {
				entry1.interruptAlpha *= Math.min(1,from.mixTime / from.mixDuration | 0);
			}
			var this1 = from.timelinesRotation;
			this1.splice(0,this1.length);
		}
		var _this = this.queue;
		_this.objects.push(0);
		_this.objects.push(entry1);
		_this.AnimationState_this.animationsChanged = true;
		var _this = this.queue;
		if(!_this.drainDisabled) {
			_this.drainDisabled = true;
			var listenersArray = _this.AnimationState_this.listeners;
			var i = 0;
			while(i < _this.objects.length) {
				var type = _this.objects[i];
				var result = _this.objects[i + 1];
				var entry = result;
				var listenersCount = listenersArray.array.length;
				var listeners = listenersArray.begin();
				while(true) {
					var _switchCond2 = type;
					if(_switchCond2 == 0) {
						if(entry.listener != null) {
							entry.listener.start(entry);
						}
						var ii = 0;
						while(ii < listenersCount) {
							var result1 = listeners[ii];
							result1.start(entry);
							++ii;
						}
						break;
					} else if(_switchCond2 == 1) {
						if(entry.listener != null) {
							entry.listener.interrupt(entry);
						}
						var ii1 = 0;
						while(ii1 < listenersCount) {
							var result2 = listeners[ii1];
							result2.interrupt(entry);
							++ii1;
						}
						break;
					} else if(_switchCond2 == 2) {
						if(entry.listener != null) {
							entry.listener.end(entry);
						}
						var ii2 = 0;
						while(ii2 < listenersCount) {
							var result3 = listeners[ii2];
							result3.end(entry);
							++ii2;
						}
						if(entry.listener != null) {
							entry.listener.dispose(entry);
						}
						var ii3 = 0;
						while(ii3 < listenersCount) {
							var result4 = listeners[ii3];
							result4.dispose(entry);
							++ii3;
						}
						_this.AnimationState_this.trackEntryPool.free(entry);
						break;
					} else if(_switchCond2 == 3) {
						if(entry.listener != null) {
							entry.listener.dispose(entry);
						}
						var ii4 = 0;
						while(ii4 < listenersCount) {
							var result5 = listeners[ii4];
							result5.dispose(entry);
							++ii4;
						}
						_this.AnimationState_this.trackEntryPool.free(entry);
						break;
					} else if(_switchCond2 == 4) {
						if(entry.listener != null) {
							entry.listener.complete(entry);
						}
						var ii5 = 0;
						while(ii5 < listenersCount) {
							var result6 = listeners[ii5];
							result6.complete(entry);
							++ii5;
						}
						break;
					} else if(_switchCond2 == 5) {
						var result7 = _this.objects[i++ + 2];
						var event = result7;
						if(entry.listener != null) {
							entry.listener.event(entry,event);
						}
						var ii6 = 0;
						while(ii6 < listenersCount) {
							var result8 = listeners[ii6];
							result8.event(entry,event);
							++ii6;
						}
						break;
					}
					break;
				}
				listenersArray.end();
				i += 2;
			}
			var this1 = _this.objects;
			this1.splice(0,this1.length);
			_this.drainDisabled = false;
		}
		var entry = entry1;
		entry.mixDuration = mixDuration;
		entry.trackEnd = mixDuration;
		return entry;
	}
	,addEmptyAnimation: function(trackIndex,mixDuration,delay) {
		var animation = spine_AnimationState.emptyAnimation;
		var delay1 = delay <= 0 ? 1 : delay;
		if(trackIndex < 0) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("trackIndex must be >= 0."));
		}
		if(animation == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("animation cannot be null."));
		}
		var last;
		if(trackIndex < this.tracks.length) {
			last = this.tracks[trackIndex];
		} else {
			var this1 = this.tracks;
			var size = trackIndex + 1;
			var len = this1.length;
			if(len > size) {
				this1.splice(size,size - len);
			} else if(len < size) {
				this1[size - 1] = null;
			}
			last = null;
		}
		if(last != null) {
			while(last.next != null) last = last.next;
		}
		var entry = this.trackEntryPool.obtain();
		entry.trackIndex = trackIndex;
		entry.animation = animation;
		entry.loop = false;
		entry.holdPrevious = false;
		entry.eventThreshold = 0;
		entry.attachmentThreshold = 0;
		entry.drawOrderThreshold = 0;
		entry.animationStart = 0;
		entry.animationEnd = animation.getDuration();
		entry.animationLast = -1;
		entry.nextAnimationLast = -1;
		entry.delay = 0;
		entry.trackTime = 0;
		entry.trackLast = -1;
		entry.nextTrackLast = -1;
		entry.trackEnd = 999999999.0;
		entry.timeScale = 1;
		entry.alpha = 1;
		entry.interruptAlpha = 1;
		entry.mixTime = 0;
		var tmp;
		if(last == null) {
			tmp = 0;
		} else {
			var _this = this.data;
			var from = last.animation;
			if(from == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("from cannot be null."));
			}
			if(animation == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("to cannot be null."));
			}
			_this.tempAnimationStateDataKey.a1 = from;
			_this.tempAnimationStateDataKey.a2 = animation;
			var this1 = _this.animationToMixTime;
			var key = _this.tempAnimationStateDataKey;
			var defaultValue = _this.defaultMix;
			if(defaultValue == null) {
				defaultValue = 0.0;
			}
			var key1 = key.getHashCode();
			var entries = this1.h[key1];
			var result = defaultValue;
			if(entries != null) {
				var _g = 0;
				var _g1 = entries.length;
				while(_g < _g1) {
					var i = _g++;
					var entry1 = entries[i];
					if(entry1.key.equals(key)) {
						result = entry1.value;
						break;
					}
				}
			}
			tmp = result;
		}
		entry.mixDuration = tmp;
		entry.mixBlend = 2;
		var entry1 = entry;
		if(last == null) {
			var from;
			if(trackIndex < this.tracks.length) {
				from = this.tracks[trackIndex];
			} else {
				var this1 = this.tracks;
				var size = trackIndex + 1;
				var len = this1.length;
				if(len > size) {
					this1.splice(size,size - len);
				} else if(len < size) {
					this1[size - 1] = null;
				}
				from = null;
			}
			this.tracks[trackIndex] = entry1;
			entry1.previous = null;
			if(from != null) {
				var _this = this.queue;
				_this.objects.push(1);
				_this.objects.push(from);
				entry1.mixingFrom = from;
				from.mixingTo = entry1;
				entry1.mixTime = 0;
				if(from.mixingFrom != null && from.mixDuration > 0) {
					entry1.interruptAlpha *= Math.min(1,from.mixTime / from.mixDuration | 0);
				}
				var this1 = from.timelinesRotation;
				this1.splice(0,this1.length);
			}
			var _this = this.queue;
			_this.objects.push(0);
			_this.objects.push(entry1);
			_this.AnimationState_this.animationsChanged = true;
			var _this = this.queue;
			if(!_this.drainDisabled) {
				_this.drainDisabled = true;
				var listenersArray = _this.AnimationState_this.listeners;
				var i = 0;
				while(i < _this.objects.length) {
					var type = _this.objects[i];
					var result = _this.objects[i + 1];
					var entry = result;
					var listenersCount = listenersArray.array.length;
					var listeners = listenersArray.begin();
					while(true) {
						var _switchCond2 = type;
						if(_switchCond2 == 0) {
							if(entry.listener != null) {
								entry.listener.start(entry);
							}
							var ii = 0;
							while(ii < listenersCount) {
								var result1 = listeners[ii];
								result1.start(entry);
								++ii;
							}
							break;
						} else if(_switchCond2 == 1) {
							if(entry.listener != null) {
								entry.listener.interrupt(entry);
							}
							var ii1 = 0;
							while(ii1 < listenersCount) {
								var result2 = listeners[ii1];
								result2.interrupt(entry);
								++ii1;
							}
							break;
						} else if(_switchCond2 == 2) {
							if(entry.listener != null) {
								entry.listener.end(entry);
							}
							var ii2 = 0;
							while(ii2 < listenersCount) {
								var result3 = listeners[ii2];
								result3.end(entry);
								++ii2;
							}
							if(entry.listener != null) {
								entry.listener.dispose(entry);
							}
							var ii3 = 0;
							while(ii3 < listenersCount) {
								var result4 = listeners[ii3];
								result4.dispose(entry);
								++ii3;
							}
							_this.AnimationState_this.trackEntryPool.free(entry);
							break;
						} else if(_switchCond2 == 3) {
							if(entry.listener != null) {
								entry.listener.dispose(entry);
							}
							var ii4 = 0;
							while(ii4 < listenersCount) {
								var result5 = listeners[ii4];
								result5.dispose(entry);
								++ii4;
							}
							_this.AnimationState_this.trackEntryPool.free(entry);
							break;
						} else if(_switchCond2 == 4) {
							if(entry.listener != null) {
								entry.listener.complete(entry);
							}
							var ii5 = 0;
							while(ii5 < listenersCount) {
								var result6 = listeners[ii5];
								result6.complete(entry);
								++ii5;
							}
							break;
						} else if(_switchCond2 == 5) {
							var result7 = _this.objects[i++ + 2];
							var event = result7;
							if(entry.listener != null) {
								entry.listener.event(entry,event);
							}
							var ii6 = 0;
							while(ii6 < listenersCount) {
								var result8 = listeners[ii6];
								result8.event(entry,event);
								++ii6;
							}
							break;
						}
						break;
					}
					listenersArray.end();
					i += 2;
				}
				var this1 = _this.objects;
				this1.splice(0,this1.length);
				_this.drainDisabled = false;
			}
		} else {
			last.next = entry1;
			entry1.previous = last;
			if(delay1 <= 0) {
				delay1 += last.getTrackComplete() - entry1.mixDuration;
			}
		}
		entry1.delay = delay1;
		var entry = entry1;
		entry.mixDuration = mixDuration;
		entry.trackEnd = mixDuration;
		if(delay <= 0 && entry.previous != null) {
			entry.delay = entry.previous.getTrackComplete() - entry.mixDuration + delay;
		}
		return entry;
	}
	,setEmptyAnimations: function(mixDuration) {
		var oldDrainDisabled = this.queue.drainDisabled;
		this.queue.drainDisabled = true;
		var tracks = this.tracks;
		var i = 0;
		var n = this.tracks.length;
		while(i < n) {
			var result = tracks[i];
			var current = result;
			if(current != null) {
				var trackIndex = current.trackIndex;
				var animation = spine_AnimationState.emptyAnimation;
				if(trackIndex < 0) {
					throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("trackIndex must be >= 0."));
				}
				if(animation == null) {
					throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("animation cannot be null."));
				}
				var interrupt = true;
				var current1;
				if(trackIndex < this.tracks.length) {
					current1 = this.tracks[trackIndex];
				} else {
					var this1 = this.tracks;
					var size = trackIndex + 1;
					var len = this1.length;
					if(len > size) {
						this1.splice(size,size - len);
					} else if(len < size) {
						this1[size - 1] = null;
					}
					current1 = null;
				}
				if(current1 != null) {
					if(current1.nextTrackLast == -1) {
						this.tracks[trackIndex] = current1.mixingFrom;
						var _this = this.queue;
						_this.objects.push(1);
						_this.objects.push(current1);
						var _this1 = this.queue;
						_this1.objects.push(2);
						_this1.objects.push(current1);
						_this1.AnimationState_this.animationsChanged = true;
						var next = current1.next;
						while(next != null) {
							var _this2 = this.queue;
							_this2.objects.push(3);
							_this2.objects.push(next);
							next = next.next;
						}
						current1.next = null;
						current1 = current1.mixingFrom;
						interrupt = false;
					} else {
						var next1 = current1.next;
						while(next1 != null) {
							var _this3 = this.queue;
							_this3.objects.push(3);
							_this3.objects.push(next1);
							next1 = next1.next;
						}
						current1.next = null;
					}
				}
				var entry = this.trackEntryPool.obtain();
				entry.trackIndex = trackIndex;
				entry.animation = animation;
				entry.loop = false;
				entry.holdPrevious = false;
				entry.eventThreshold = 0;
				entry.attachmentThreshold = 0;
				entry.drawOrderThreshold = 0;
				entry.animationStart = 0;
				entry.animationEnd = animation.getDuration();
				entry.animationLast = -1;
				entry.nextAnimationLast = -1;
				entry.delay = 0;
				entry.trackTime = 0;
				entry.trackLast = -1;
				entry.nextTrackLast = -1;
				entry.trackEnd = 999999999.0;
				entry.timeScale = 1;
				entry.alpha = 1;
				entry.interruptAlpha = 1;
				entry.mixTime = 0;
				var tmp;
				if(current1 == null) {
					tmp = 0;
				} else {
					var _this4 = this.data;
					var from = current1.animation;
					if(from == null) {
						throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("from cannot be null."));
					}
					if(animation == null) {
						throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("to cannot be null."));
					}
					_this4.tempAnimationStateDataKey.a1 = from;
					_this4.tempAnimationStateDataKey.a2 = animation;
					var this2 = _this4.animationToMixTime;
					var key = _this4.tempAnimationStateDataKey;
					var defaultValue = _this4.defaultMix;
					if(defaultValue == null) {
						defaultValue = 0.0;
					}
					var key1 = key.getHashCode();
					var entries = this2.h[key1];
					var result1 = defaultValue;
					if(entries != null) {
						var _g = 0;
						var _g1 = entries.length;
						while(_g < _g1) {
							var i1 = _g++;
							var entry1 = entries[i1];
							if(entry1.key.equals(key)) {
								result1 = entry1.value;
								break;
							}
						}
					}
					tmp = result1;
				}
				entry.mixDuration = tmp;
				entry.mixBlend = 2;
				var entry2 = entry;
				var from1;
				if(trackIndex < this.tracks.length) {
					from1 = this.tracks[trackIndex];
				} else {
					var this3 = this.tracks;
					var size1 = trackIndex + 1;
					var len1 = this3.length;
					if(len1 > size1) {
						this3.splice(size1,size1 - len1);
					} else if(len1 < size1) {
						this3[size1 - 1] = null;
					}
					from1 = null;
				}
				this.tracks[trackIndex] = entry2;
				entry2.previous = null;
				if(from1 != null) {
					if(interrupt) {
						var _this5 = this.queue;
						_this5.objects.push(1);
						_this5.objects.push(from1);
					}
					entry2.mixingFrom = from1;
					from1.mixingTo = entry2;
					entry2.mixTime = 0;
					if(from1.mixingFrom != null && from1.mixDuration > 0) {
						entry2.interruptAlpha *= Math.min(1,from1.mixTime / from1.mixDuration | 0);
					}
					var this4 = from1.timelinesRotation;
					this4.splice(0,this4.length);
				}
				var _this6 = this.queue;
				_this6.objects.push(0);
				_this6.objects.push(entry2);
				_this6.AnimationState_this.animationsChanged = true;
				var _this7 = this.queue;
				if(!_this7.drainDisabled) {
					_this7.drainDisabled = true;
					var listenersArray = _this7.AnimationState_this.listeners;
					var i2 = 0;
					while(i2 < _this7.objects.length) {
						var type = _this7.objects[i2];
						var result2 = _this7.objects[i2 + 1];
						var entry3 = result2;
						var listenersCount = listenersArray.array.length;
						var listeners = listenersArray.begin();
						while(true) {
							var _switchCond2 = type;
							if(_switchCond2 == 0) {
								if(entry3.listener != null) {
									entry3.listener.start(entry3);
								}
								var ii = 0;
								while(ii < listenersCount) {
									var result3 = listeners[ii];
									result3.start(entry3);
									++ii;
								}
								break;
							} else if(_switchCond2 == 1) {
								if(entry3.listener != null) {
									entry3.listener.interrupt(entry3);
								}
								var ii1 = 0;
								while(ii1 < listenersCount) {
									var result4 = listeners[ii1];
									result4.interrupt(entry3);
									++ii1;
								}
								break;
							} else if(_switchCond2 == 2) {
								if(entry3.listener != null) {
									entry3.listener.end(entry3);
								}
								var ii2 = 0;
								while(ii2 < listenersCount) {
									var result5 = listeners[ii2];
									result5.end(entry3);
									++ii2;
								}
								if(entry3.listener != null) {
									entry3.listener.dispose(entry3);
								}
								var ii3 = 0;
								while(ii3 < listenersCount) {
									var result6 = listeners[ii3];
									result6.dispose(entry3);
									++ii3;
								}
								_this7.AnimationState_this.trackEntryPool.free(entry3);
								break;
							} else if(_switchCond2 == 3) {
								if(entry3.listener != null) {
									entry3.listener.dispose(entry3);
								}
								var ii4 = 0;
								while(ii4 < listenersCount) {
									var result7 = listeners[ii4];
									result7.dispose(entry3);
									++ii4;
								}
								_this7.AnimationState_this.trackEntryPool.free(entry3);
								break;
							} else if(_switchCond2 == 4) {
								if(entry3.listener != null) {
									entry3.listener.complete(entry3);
								}
								var ii5 = 0;
								while(ii5 < listenersCount) {
									var result8 = listeners[ii5];
									result8.complete(entry3);
									++ii5;
								}
								break;
							} else if(_switchCond2 == 5) {
								var result9 = _this7.objects[i2++ + 2];
								var event = result9;
								if(entry3.listener != null) {
									entry3.listener.event(entry3,event);
								}
								var ii6 = 0;
								while(ii6 < listenersCount) {
									var result10 = listeners[ii6];
									result10.event(entry3,event);
									++ii6;
								}
								break;
							}
							break;
						}
						listenersArray.end();
						i2 += 2;
					}
					var this5 = _this7.objects;
					this5.splice(0,this5.length);
					_this7.drainDisabled = false;
				}
				var entry4 = entry2;
				entry4.mixDuration = mixDuration;
				entry4.trackEnd = mixDuration;
			}
			++i;
		}
		this.queue.drainDisabled = oldDrainDisabled;
		var _this = this.queue;
		if(!_this.drainDisabled) {
			_this.drainDisabled = true;
			var listenersArray = _this.AnimationState_this.listeners;
			var i = 0;
			while(i < _this.objects.length) {
				var type = _this.objects[i];
				var result = _this.objects[i + 1];
				var entry = result;
				var listenersCount = listenersArray.array.length;
				var listeners = listenersArray.begin();
				while(true) {
					var _switchCond2 = type;
					if(_switchCond2 == 0) {
						if(entry.listener != null) {
							entry.listener.start(entry);
						}
						var ii = 0;
						while(ii < listenersCount) {
							var result1 = listeners[ii];
							result1.start(entry);
							++ii;
						}
						break;
					} else if(_switchCond2 == 1) {
						if(entry.listener != null) {
							entry.listener.interrupt(entry);
						}
						var ii1 = 0;
						while(ii1 < listenersCount) {
							var result2 = listeners[ii1];
							result2.interrupt(entry);
							++ii1;
						}
						break;
					} else if(_switchCond2 == 2) {
						if(entry.listener != null) {
							entry.listener.end(entry);
						}
						var ii2 = 0;
						while(ii2 < listenersCount) {
							var result3 = listeners[ii2];
							result3.end(entry);
							++ii2;
						}
						if(entry.listener != null) {
							entry.listener.dispose(entry);
						}
						var ii3 = 0;
						while(ii3 < listenersCount) {
							var result4 = listeners[ii3];
							result4.dispose(entry);
							++ii3;
						}
						_this.AnimationState_this.trackEntryPool.free(entry);
						break;
					} else if(_switchCond2 == 3) {
						if(entry.listener != null) {
							entry.listener.dispose(entry);
						}
						var ii4 = 0;
						while(ii4 < listenersCount) {
							var result5 = listeners[ii4];
							result5.dispose(entry);
							++ii4;
						}
						_this.AnimationState_this.trackEntryPool.free(entry);
						break;
					} else if(_switchCond2 == 4) {
						if(entry.listener != null) {
							entry.listener.complete(entry);
						}
						var ii5 = 0;
						while(ii5 < listenersCount) {
							var result6 = listeners[ii5];
							result6.complete(entry);
							++ii5;
						}
						break;
					} else if(_switchCond2 == 5) {
						var result7 = _this.objects[i++ + 2];
						var event = result7;
						if(entry.listener != null) {
							entry.listener.event(entry,event);
						}
						var ii6 = 0;
						while(ii6 < listenersCount) {
							var result8 = listeners[ii6];
							result8.event(entry,event);
							++ii6;
						}
						break;
					}
					break;
				}
				listenersArray.end();
				i += 2;
			}
			var this1 = _this.objects;
			this1.splice(0,this1.length);
			_this.drainDisabled = false;
		}
	}
	,expandToIndex: function(index) {
		if(index < this.tracks.length) {
			return this.tracks[index];
		}
		var this1 = this.tracks;
		var size = index + 1;
		var len = this1.length;
		if(len > size) {
			this1.splice(size,size - len);
		} else if(len < size) {
			this1[size - 1] = null;
		}
		return null;
	}
	,trackEntry: function(trackIndex,animation,loop,last) {
		var entry = this.trackEntryPool.obtain();
		entry.trackIndex = trackIndex;
		entry.animation = animation;
		entry.loop = loop;
		entry.holdPrevious = false;
		entry.eventThreshold = 0;
		entry.attachmentThreshold = 0;
		entry.drawOrderThreshold = 0;
		entry.animationStart = 0;
		entry.animationEnd = animation.getDuration();
		entry.animationLast = -1;
		entry.nextAnimationLast = -1;
		entry.delay = 0;
		entry.trackTime = 0;
		entry.trackLast = -1;
		entry.nextTrackLast = -1;
		entry.trackEnd = 999999999.0;
		entry.timeScale = 1;
		entry.alpha = 1;
		entry.interruptAlpha = 1;
		entry.mixTime = 0;
		var tmp;
		if(last == null) {
			tmp = 0;
		} else {
			var _this = this.data;
			var from = last.animation;
			if(from == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("from cannot be null."));
			}
			if(animation == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("to cannot be null."));
			}
			_this.tempAnimationStateDataKey.a1 = from;
			_this.tempAnimationStateDataKey.a2 = animation;
			var this1 = _this.animationToMixTime;
			var key = _this.tempAnimationStateDataKey;
			var defaultValue = _this.defaultMix;
			if(defaultValue == null) {
				defaultValue = 0.0;
			}
			var key1 = key.getHashCode();
			var entries = this1.h[key1];
			var result = defaultValue;
			if(entries != null) {
				var _g = 0;
				var _g1 = entries.length;
				while(_g < _g1) {
					var i = _g++;
					var entry1 = entries[i];
					if(entry1.key.equals(key)) {
						result = entry1.value;
						break;
					}
				}
			}
			tmp = result;
		}
		entry.mixDuration = tmp;
		entry.mixBlend = 2;
		return entry;
	}
	,clearNext: function(entry) {
		var next = entry.next;
		while(next != null) {
			var _this = this.queue;
			_this.objects.push(3);
			_this.objects.push(next);
			next = next.next;
		}
		entry.next = null;
	}
	,handleAnimationsChanged: function() {
		this.animationsChanged = false;
		var this1 = this.propertyIds;
		this1.splice(0,this1.length);
		var n = this.tracks.length;
		var tracks = this.tracks;
		var i = 0;
		while(i < n) {
			var result = tracks[i];
			var entry = result;
			if(entry == null) {
				++i;
				continue;
			}
			while(entry.mixingFrom != null) entry = entry.mixingFrom;
			while(true) {
				if(entry.mixingTo == null || entry.mixBlend != 3) {
					var to = entry.mixingTo;
					var timelines = entry.animation.timelines;
					var timelinesCount = entry.animation.timelines.length;
					var this1 = entry.timelineMode;
					var len = this1.length;
					if(len > timelinesCount) {
						this1.splice(timelinesCount,timelinesCount - len);
					} else if(len < timelinesCount) {
						while(len < timelinesCount) {
							this1.push(0);
							++len;
						}
					}
					var timelineMode = this1;
					var this2 = entry.timelineHoldMix;
					this2.splice(0,this2.length);
					var this3 = entry.timelineHoldMix;
					var len1 = this3.length;
					if(len1 > timelinesCount) {
						this3.splice(timelinesCount,timelinesCount - len1);
					} else if(len1 < timelinesCount) {
						this3[timelinesCount - 1] = null;
					}
					var timelineHoldMix = this3;
					var propertyIds = this.propertyIds;
					if(to != null && to.holdPrevious) {
						var i1 = 0;
						while(i1 < timelinesCount) {
							var result1 = timelines[i1];
							timelineMode[i1] = spine_support_utils_ObjectSet.addAll(propertyIds,result1.getPropertyIds()) ? 3 : 2;
							++i1;
						}
					} else {
						var _gotoLabel_outer;
						while(true) {
							_gotoLabel_outer = 0;
							var i2 = 0;
							while(i2 < timelinesCount) {
								var result2 = timelines[i2];
								var timeline = result2;
								var ids = timeline.getPropertyIds();
								if(!spine_support_utils_ObjectSet.addAll(propertyIds,ids)) {
									timelineMode[i2] = 0;
								} else if(to == null || ((timeline) instanceof spine_AttachmentTimeline) || ((timeline) instanceof spine_DrawOrderTimeline) || ((timeline) instanceof spine_EventTimeline) || !to.animation.hasTimeline(ids)) {
									timelineMode[i2] = 1;
								} else {
									var next = to.mixingTo;
									while(next != null) {
										if(next.animation.hasTimeline(ids)) {
											next = next.mixingTo;
											continue;
										}
										if(next.mixDuration > 0) {
											timelineMode[i2] = 4;
											timelineHoldMix[i2] = next;
											next = next.mixingTo;
											_gotoLabel_outer = 2;
											break;
										}
										break;
									}
									if(_gotoLabel_outer == 2) {
										_gotoLabel_outer = 0;
										++i2;
										continue;
									}
									if(_gotoLabel_outer >= 1) {
										break;
									}
									timelineMode[i2] = 3;
								}
								++i2;
							}
							if(_gotoLabel_outer == 0) {
								break;
							}
						}
					}
				}
				entry = entry.mixingTo;
				if(!(entry != null)) {
					break;
				}
			}
			++i;
		}
	}
	,computeHold: function(entry) {
		var to = entry.mixingTo;
		var timelines = entry.animation.timelines;
		var timelinesCount = entry.animation.timelines.length;
		var this1 = entry.timelineMode;
		var len = this1.length;
		if(len > timelinesCount) {
			this1.splice(timelinesCount,timelinesCount - len);
		} else if(len < timelinesCount) {
			while(len < timelinesCount) {
				this1.push(0);
				++len;
			}
		}
		var timelineMode = this1;
		var this1 = entry.timelineHoldMix;
		this1.splice(0,this1.length);
		var this1 = entry.timelineHoldMix;
		var len = this1.length;
		if(len > timelinesCount) {
			this1.splice(timelinesCount,timelinesCount - len);
		} else if(len < timelinesCount) {
			this1[timelinesCount - 1] = null;
		}
		var timelineHoldMix = this1;
		var propertyIds = this.propertyIds;
		if(to != null && to.holdPrevious) {
			var i = 0;
			while(i < timelinesCount) {
				var result = timelines[i];
				timelineMode[i] = spine_support_utils_ObjectSet.addAll(propertyIds,result.getPropertyIds()) ? 3 : 2;
				++i;
			}
			return;
		}
		var _gotoLabel_outer;
		while(true) {
			_gotoLabel_outer = 0;
			var i = 0;
			while(i < timelinesCount) {
				var result = timelines[i];
				var timeline = result;
				var ids = timeline.getPropertyIds();
				if(!spine_support_utils_ObjectSet.addAll(propertyIds,ids)) {
					timelineMode[i] = 0;
				} else if(to == null || ((timeline) instanceof spine_AttachmentTimeline) || ((timeline) instanceof spine_DrawOrderTimeline) || ((timeline) instanceof spine_EventTimeline) || !to.animation.hasTimeline(ids)) {
					timelineMode[i] = 1;
				} else {
					var next = to.mixingTo;
					while(next != null) {
						if(next.animation.hasTimeline(ids)) {
							next = next.mixingTo;
							continue;
						}
						if(next.mixDuration > 0) {
							timelineMode[i] = 4;
							timelineHoldMix[i] = next;
							next = next.mixingTo;
							_gotoLabel_outer = 2;
							break;
						}
						break;
					}
					if(_gotoLabel_outer == 2) {
						_gotoLabel_outer = 0;
						++i;
						continue;
					}
					if(_gotoLabel_outer >= 1) {
						break;
					}
					timelineMode[i] = 3;
				}
				++i;
			}
			if(_gotoLabel_outer == 0) {
				break;
			}
		}
	}
	,getCurrent: function(trackIndex) {
		if(trackIndex < 0) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("trackIndex must be >= 0."));
		}
		if(trackIndex >= this.tracks.length) {
			return null;
		}
		return this.tracks[trackIndex];
	}
	,addListener: function(listener) {
		if(listener == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("listener cannot be null."));
		}
		this.listeners.array.push(listener);
	}
	,removeListener: function(listener) {
		var this1 = this.listeners.array;
		var index = this1.indexOf(listener);
		if(index != -1) {
			this1.splice(index,1);
		}
	}
	,clearListeners: function() {
		var this1 = this.listeners.array;
		this1.splice(0,this1.length);
	}
	,clearListenerNotifications: function() {
		var this1 = this.queue.objects;
		this1.splice(0,this1.length);
	}
	,getTimeScale: function() {
		return this.timeScale;
	}
	,setTimeScale: function(timeScale) {
		this.timeScale = timeScale;
	}
	,getData: function() {
		return this.data;
	}
	,setData: function(data) {
		if(data == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("data cannot be null."));
		}
		this.data = data;
	}
	,getTracks: function() {
		return this.tracks;
	}
	,toString: function() {
		var buffer_b = "";
		var tracks = this.tracks;
		var i = 0;
		var n = this.tracks.length;
		while(i < n) {
			var result = tracks[i];
			var entry = result;
			if(entry == null) {
				++i;
				continue;
			}
			if(buffer_b.length > 0) {
				buffer_b += ", ";
			}
			buffer_b += Std.string(entry.animation == null ? "<none>" : entry.animation.name);
			++i;
		}
		if(buffer_b.length == 0) {
			return "<none>";
		}
		return buffer_b;
	}
	,__class__: spine_AnimationState
};
var spine_support_utils_Poolable = function() { };
$hxClasses["spine.support.utils.Poolable"] = spine_support_utils_Poolable;
spine_support_utils_Poolable.__name__ = "spine.support.utils.Poolable";
spine_support_utils_Poolable.__isInterface__ = true;
spine_support_utils_Poolable.prototype = {
	__class__: spine_support_utils_Poolable
};
var spine_TrackEntry = function() {
	var this1 = [];
	this.timelinesRotation = this1;
	var this1 = [];
	this.timelineHoldMix = this1;
	var this1 = [];
	this.timelineMode = this1;
	this.mixBlend = 2;
	this.totalAlpha = 0;
	this.interruptAlpha = 0;
	this.mixDuration = 0;
	this.mixTime = 0;
	this.alpha = 0;
	this.timeScale = 0;
	this.trackEnd = 0;
	this.nextTrackLast = 0;
	this.trackLast = 0;
	this.trackTime = 0;
	this.delay = 0;
	this.nextAnimationLast = 0;
	this.animationLast = 0;
	this.animationEnd = 0;
	this.animationStart = 0;
	this.drawOrderThreshold = 0;
	this.attachmentThreshold = 0;
	this.eventThreshold = 0;
	this.reverse = false;
	this.holdPrevious = false;
	this.loop = false;
	this.trackIndex = 0;
	this.mixingTo = null;
	this.mixingFrom = null;
	this.next = null;
};
$hxClasses["spine.TrackEntry"] = spine_TrackEntry;
spine_TrackEntry.__name__ = "spine.TrackEntry";
spine_TrackEntry.__interfaces__ = [spine_support_utils_Poolable];
spine_TrackEntry.prototype = {
	reset: function() {
		this.previous = null;
		this.next = null;
		this.mixingFrom = null;
		this.mixingTo = null;
		this.animation = null;
		this.listener = null;
		var this1 = this.timelineMode;
		this1.splice(0,this1.length);
		var this1 = this.timelineHoldMix;
		this1.splice(0,this1.length);
		var this1 = this.timelinesRotation;
		this1.splice(0,this1.length);
	}
	,getTrackIndex: function() {
		return this.trackIndex;
	}
	,getAnimation: function() {
		return this.animation;
	}
	,setAnimation: function(animation) {
		if(animation == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("animation cannot be null."));
		}
		this.animation = animation;
	}
	,getLoop: function() {
		return this.loop;
	}
	,setLoop: function(loop) {
		this.loop = loop;
	}
	,getDelay: function() {
		return this.delay;
	}
	,setDelay: function(delay) {
		this.delay = delay;
	}
	,getTrackTime: function() {
		return this.trackTime;
	}
	,setTrackTime: function(trackTime) {
		this.trackTime = trackTime;
	}
	,getTrackEnd: function() {
		return this.trackEnd;
	}
	,setTrackEnd: function(trackEnd) {
		this.trackEnd = trackEnd;
	}
	,getTrackComplete: function() {
		var duration = this.animationEnd - this.animationStart;
		if(duration != 0) {
			if(this.loop) {
				return duration * (1 + (this.trackTime / duration | 0));
			}
			if(this.trackTime < duration) {
				return duration;
			}
		}
		return this.trackTime;
	}
	,getAnimationStart: function() {
		return this.animationStart;
	}
	,setAnimationStart: function(animationStart) {
		this.animationStart = animationStart;
	}
	,getAnimationEnd: function() {
		return this.animationEnd;
	}
	,setAnimationEnd: function(animationEnd) {
		this.animationEnd = animationEnd;
	}
	,getAnimationLast: function() {
		return this.animationLast;
	}
	,setAnimationLast: function(animationLast) {
		this.animationLast = animationLast;
		this.nextAnimationLast = animationLast;
	}
	,getAnimationTime: function() {
		if(this.loop) {
			var duration = this.animationEnd - this.animationStart;
			if(duration == 0) {
				return this.animationStart;
			}
			return this.trackTime % duration + this.animationStart;
		}
		return Math.min(this.trackTime + this.animationStart,this.animationEnd);
	}
	,getTimeScale: function() {
		return this.timeScale;
	}
	,setTimeScale: function(timeScale) {
		this.timeScale = timeScale;
	}
	,getListener: function() {
		return this.listener;
	}
	,setListener: function(listener) {
		this.listener = listener;
	}
	,getAlpha: function() {
		return this.alpha;
	}
	,setAlpha: function(alpha) {
		this.alpha = alpha;
	}
	,getEventThreshold: function() {
		return this.eventThreshold;
	}
	,setEventThreshold: function(eventThreshold) {
		this.eventThreshold = eventThreshold;
	}
	,getAttachmentThreshold: function() {
		return this.attachmentThreshold;
	}
	,setAttachmentThreshold: function(attachmentThreshold) {
		this.attachmentThreshold = attachmentThreshold;
	}
	,getDrawOrderThreshold: function() {
		return this.drawOrderThreshold;
	}
	,setDrawOrderThreshold: function(drawOrderThreshold) {
		this.drawOrderThreshold = drawOrderThreshold;
	}
	,getNext: function() {
		return this.next;
	}
	,getPrevious: function() {
		return this.previous;
	}
	,isComplete: function() {
		return this.trackTime >= this.animationEnd - this.animationStart;
	}
	,getMixTime: function() {
		return this.mixTime;
	}
	,setMixTime: function(mixTime) {
		this.mixTime = mixTime;
	}
	,getMixDuration: function() {
		return this.mixDuration;
	}
	,setMixDuration: function(mixDuration) {
		this.mixDuration = mixDuration;
	}
	,getMixBlend: function() {
		return this.mixBlend;
	}
	,setMixBlend: function(mixBlend) {
		if(mixBlend == 0) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("mixBlend cannot be null."));
		}
		this.mixBlend = mixBlend;
	}
	,getMixingFrom: function() {
		return this.mixingFrom;
	}
	,getMixingTo: function() {
		return this.mixingTo;
	}
	,setHoldPrevious: function(holdPrevious) {
		this.holdPrevious = holdPrevious;
	}
	,getHoldPrevious: function() {
		return this.holdPrevious;
	}
	,resetRotationDirections: function() {
		var this1 = this.timelinesRotation;
		this1.splice(0,this1.length);
	}
	,setReverse: function(reverse) {
		this.reverse = reverse;
	}
	,getReverse: function() {
		return this.reverse;
	}
	,toString: function() {
		if(this.animation == null) {
			return "<none>";
		} else {
			return this.animation.name;
		}
	}
	,__class__: spine_TrackEntry
};
var spine_EventQueue = function() {
	this.drainDisabled = false;
	var this1 = [];
	this.objects = this1;
};
$hxClasses["spine.EventQueue"] = spine_EventQueue;
spine_EventQueue.__name__ = "spine.EventQueue";
spine_EventQueue.prototype = {
	start: function(entry) {
		this.objects.push(0);
		this.objects.push(entry);
		this.AnimationState_this.animationsChanged = true;
	}
	,interrupt: function(entry) {
		this.objects.push(1);
		this.objects.push(entry);
	}
	,end: function(entry) {
		this.objects.push(2);
		this.objects.push(entry);
		this.AnimationState_this.animationsChanged = true;
	}
	,dispose: function(entry) {
		this.objects.push(3);
		this.objects.push(entry);
	}
	,complete: function(entry) {
		this.objects.push(4);
		this.objects.push(entry);
	}
	,event: function(entry,event) {
		this.objects.push(5);
		this.objects.push(entry);
		this.objects.push(event);
	}
	,drain: function() {
		if(this.drainDisabled) {
			return;
		}
		this.drainDisabled = true;
		var listenersArray = this.AnimationState_this.listeners;
		var i = 0;
		while(i < this.objects.length) {
			var type = this.objects[i];
			var result = this.objects[i + 1];
			var entry = result;
			var listenersCount = listenersArray.array.length;
			var listeners = listenersArray.begin();
			var _continueAfterSwitch2 = false;
			while(true) {
				var _switchCond2 = type;
				if(_switchCond2 == 0) {
					if(entry.listener != null) {
						entry.listener.start(entry);
					}
					var ii = 0;
					while(ii < listenersCount) {
						var result1 = listeners[ii];
						result1.start(entry);
						++ii;
					}
					break;
				} else if(_switchCond2 == 1) {
					if(entry.listener != null) {
						entry.listener.interrupt(entry);
					}
					var ii1 = 0;
					while(ii1 < listenersCount) {
						var result2 = listeners[ii1];
						result2.interrupt(entry);
						++ii1;
					}
					break;
				} else if(_switchCond2 == 2) {
					if(entry.listener != null) {
						entry.listener.end(entry);
					}
					var ii2 = 0;
					while(ii2 < listenersCount) {
						var result3 = listeners[ii2];
						result3.end(entry);
						++ii2;
					}
					if(entry.listener != null) {
						entry.listener.dispose(entry);
					}
					var ii3 = 0;
					while(ii3 < listenersCount) {
						var result4 = listeners[ii3];
						result4.dispose(entry);
						++ii3;
					}
					this.AnimationState_this.trackEntryPool.free(entry);
					break;
				} else if(_switchCond2 == 3) {
					if(entry.listener != null) {
						entry.listener.dispose(entry);
					}
					var ii4 = 0;
					while(ii4 < listenersCount) {
						var result5 = listeners[ii4];
						result5.dispose(entry);
						++ii4;
					}
					this.AnimationState_this.trackEntryPool.free(entry);
					break;
				} else if(_switchCond2 == 4) {
					if(entry.listener != null) {
						entry.listener.complete(entry);
					}
					var ii5 = 0;
					while(ii5 < listenersCount) {
						var result6 = listeners[ii5];
						result6.complete(entry);
						++ii5;
					}
					break;
				} else if(_switchCond2 == 5) {
					var result7 = this.objects[i++ + 2];
					var event = result7;
					if(entry.listener != null) {
						entry.listener.event(entry,event);
					}
					var ii6 = 0;
					while(ii6 < listenersCount) {
						var result8 = listeners[ii6];
						result8.event(entry,event);
						++ii6;
					}
					break;
				}
				break;
			}
			listenersArray.end();
			i += 2;
		}
		var this1 = this.objects;
		this1.splice(0,this1.length);
		this.drainDisabled = false;
	}
	,clear: function() {
		var this1 = this.objects;
		this1.splice(0,this1.length);
	}
	,__class__: spine_EventQueue
};
var spine_AnimationStateListener = function() { };
$hxClasses["spine.AnimationStateListener"] = spine_AnimationStateListener;
spine_AnimationStateListener.__name__ = "spine.AnimationStateListener";
spine_AnimationStateListener.__isInterface__ = true;
spine_AnimationStateListener.prototype = {
	__class__: spine_AnimationStateListener
};
var spine_AnimationStateAdapter = function() {
};
$hxClasses["spine.AnimationStateAdapter"] = spine_AnimationStateAdapter;
spine_AnimationStateAdapter.__name__ = "spine.AnimationStateAdapter";
spine_AnimationStateAdapter.__interfaces__ = [spine_AnimationStateListener];
spine_AnimationStateAdapter.prototype = {
	start: function(entry) {
	}
	,interrupt: function(entry) {
	}
	,end: function(entry) {
	}
	,dispose: function(entry) {
	}
	,complete: function(entry) {
	}
	,event: function(entry,event) {
	}
	,__class__: spine_AnimationStateAdapter
};
var spine_support_utils_Pool = function(initialCapacity,max) {
	if(max == null) {
		max = 999999999;
	}
	if(initialCapacity == null) {
		initialCapacity = 64;
	}
	this.peak = 0;
	this.max = 0;
	this.freeObjects = [];
	this.max = max;
};
$hxClasses["spine.support.utils.Pool"] = spine_support_utils_Pool;
spine_support_utils_Pool.__name__ = "spine.support.utils.Pool";
spine_support_utils_Pool.prototype = {
	free: function(object) {
		if(object == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("object cannot be null."));
		}
		if(this.freeObjects.length < this.max) {
			this.freeObjects.push(object);
			this.peak = Math.max(this.peak,this.freeObjects.length);
		}
		this.reset(object);
	}
	,reset: function(object) {
		if(js_Boot.__implements(object,spine_support_utils_Poolable)) {
			(js_Boot.__cast(object , spine_support_utils_Poolable)).reset();
		}
	}
	,freeAll: function(objects) {
		if(objects == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("objects cannot be null."));
		}
		var freeObjects = this.freeObjects;
		var max = this.max;
		var i = 0;
		while(i < objects.length) {
			var object = objects[i];
			if(object == null) {
				++i;
				continue;
			}
			if(freeObjects.length < max) {
				freeObjects.push(object);
			}
			this.reset(object);
			++i;
		}
		this.peak = Math.max(this.peak,freeObjects.length);
	}
	,clear: function() {
		var this1 = this.freeObjects;
		this1.splice(0,this1.length);
	}
	,getFree: function() {
		return this.freeObjects.length;
	}
	,newObject: function() {
		return null;
	}
	,obtain: function() {
		if(this.freeObjects.length == 0) {
			return this.newObject();
		} else {
			return this.freeObjects.pop();
		}
	}
	,__class__: spine_support_utils_Pool
};
var spine__$AnimationState_TrackEntryPool = function(initialCapacity,max) {
	spine_support_utils_Pool.call(this,initialCapacity,max);
};
$hxClasses["spine._AnimationState.TrackEntryPool"] = spine__$AnimationState_TrackEntryPool;
spine__$AnimationState_TrackEntryPool.__name__ = "spine._AnimationState.TrackEntryPool";
spine__$AnimationState_TrackEntryPool.__super__ = spine_support_utils_Pool;
spine__$AnimationState_TrackEntryPool.prototype = $extend(spine_support_utils_Pool.prototype,{
	newObject: function() {
		return new spine_TrackEntry();
	}
	,__class__: spine__$AnimationState_TrackEntryPool
});
var spine_EventType_$enum = function() { };
$hxClasses["spine.EventType_enum"] = spine_EventType_$enum;
spine_EventType_$enum.__name__ = "spine.EventType_enum";
spine_EventType_$enum.valueOf = function(value) {
	switch(value) {
	case "complete":
		return 4;
	case "dispose":
		return 3;
	case "end":
		return 2;
	case "event":
		return 5;
	case "interrupt":
		return 1;
	case "start":
		return 0;
	default:
		return 0;
	}
};
var spine_AnimationStateData = function(skeletonData) {
	this.defaultMix = 0;
	this.tempAnimationStateDataKey = new spine_AnimationStateDataKey();
	var this1 = new haxe_ds_IntMap();
	this.animationToMixTime = this1;
	if(skeletonData == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("skeletonData cannot be null."));
	}
	this.skeletonData = skeletonData;
};
$hxClasses["spine.AnimationStateData"] = spine_AnimationStateData;
spine_AnimationStateData.__name__ = "spine.AnimationStateData";
spine_AnimationStateData.prototype = {
	getSkeletonData: function() {
		return this.skeletonData;
	}
	,setMixByName: function(fromName,toName,duration) {
		var from = this.skeletonData.findAnimation(fromName);
		if(from == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("Animation not found: " + fromName));
		}
		var to = this.skeletonData.findAnimation(toName);
		if(to == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("Animation not found: " + toName));
		}
		if(from == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("from cannot be null."));
		}
		if(to == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("to cannot be null."));
		}
		var key = new spine_AnimationStateDataKey();
		key.a1 = from;
		key.a2 = to;
		spine_support_utils_AnimationStateMap.put(this.animationToMixTime,key,duration);
	}
	,setMix: function(from,to,duration) {
		if(from == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("from cannot be null."));
		}
		if(to == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("to cannot be null."));
		}
		var key = new spine_AnimationStateDataKey();
		key.a1 = from;
		key.a2 = to;
		spine_support_utils_AnimationStateMap.put(this.animationToMixTime,key,duration);
	}
	,getMix: function(from,to) {
		if(from == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("from cannot be null."));
		}
		if(to == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("to cannot be null."));
		}
		this.tempAnimationStateDataKey.a1 = from;
		this.tempAnimationStateDataKey.a2 = to;
		var this1 = this.animationToMixTime;
		var key = this.tempAnimationStateDataKey;
		var defaultValue = this.defaultMix;
		if(defaultValue == null) {
			defaultValue = 0.0;
		}
		var key1 = key.getHashCode();
		var entries = this1.h[key1];
		var result = defaultValue;
		if(entries != null) {
			var _g = 0;
			var _g1 = entries.length;
			while(_g < _g1) {
				var i = _g++;
				var entry = entries[i];
				if(entry.key.equals(key)) {
					result = entry.value;
					break;
				}
			}
		}
		return result;
	}
	,getDefaultMix: function() {
		return this.defaultMix;
	}
	,setDefaultMix: function(defaultMix) {
		this.defaultMix = defaultMix;
	}
	,__class__: spine_AnimationStateData
};
var spine_AnimationStateDataKey = function() {
	this.a2 = null;
};
$hxClasses["spine.AnimationStateDataKey"] = spine_AnimationStateDataKey;
spine_AnimationStateDataKey.__name__ = "spine.AnimationStateDataKey";
spine_AnimationStateDataKey.prototype = {
	getHashCode: function() {
		return 31 * (31 + this.a1.hashCode) + this.a2.hashCode;
	}
	,equals: function(obj) {
		if(this == obj) {
			return true;
		}
		if(obj == null) {
			return false;
		}
		var result = obj;
		var other = result;
		if(this.a1 == null) {
			if(other.a1 != null) {
				return false;
			}
		} else if(this.a1 != other.a1) {
			return false;
		}
		if(this.a2 == null) {
			if(other.a2 != null) {
				return false;
			}
		} else if(this.a2 != other.a2) {
			return false;
		}
		return true;
	}
	,toString: function() {
		return this.a1.name + "->" + this.a2.name;
	}
	,__class__: spine_AnimationStateDataKey
};
var spine_BlendMode_$enum = function() { };
$hxClasses["spine.BlendMode_enum"] = spine_BlendMode_$enum;
spine_BlendMode_$enum.__name__ = "spine.BlendMode_enum";
spine_BlendMode_$enum.valueOf = function(value) {
	switch(value) {
	case "additive":
		return 1;
	case "multiply":
		return 2;
	case "normal":
		return 0;
	case "screen":
		return 3;
	default:
		return 0;
	}
};
var spine_Updatable = function() { };
$hxClasses["spine.Updatable"] = spine_Updatable;
spine_Updatable.__name__ = "spine.Updatable";
spine_Updatable.__isInterface__ = true;
spine_Updatable.prototype = {
	__class__: spine_Updatable
};
var spine_Bone = function(data,skeleton,parent) {
	this.active = false;
	this.sorted = false;
	this.worldY = 0;
	this.d = 0;
	this.c = 0;
	this.worldX = 0;
	this.b = 0;
	this.a = 0;
	this.ashearY = 0;
	this.ashearX = 0;
	this.ascaleY = 0;
	this.ascaleX = 0;
	this.arotation = 0;
	this.ay = 0;
	this.ax = 0;
	this.shearY = 0;
	this.shearX = 0;
	this.scaleY = 0;
	this.scaleX = 0;
	this.rotation = 0;
	this.y = 0;
	this.x = 0;
	var this1 = [];
	this.children = this1;
	if(data == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("data cannot be null."));
	}
	if(skeleton == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("skeleton cannot be null."));
	}
	this.data = data;
	this.skeleton = skeleton;
	this.parent = parent;
	var data = this.data;
	this.x = data.x;
	this.y = data.y;
	this.rotation = data.rotation;
	this.scaleX = data.scaleX;
	this.scaleY = data.scaleY;
	this.shearX = data.shearX;
	this.shearY = data.shearY;
};
$hxClasses["spine.Bone"] = spine_Bone;
spine_Bone.__name__ = "spine.Bone";
spine_Bone.__interfaces__ = [spine_Updatable];
spine_Bone.prototype = {
	update: function() {
		this.updateWorldTransformWithData(this.ax,this.ay,this.arotation,this.ascaleX,this.ascaleY,this.ashearX,this.ashearY);
	}
	,updateWorldTransform: function() {
		this.updateWorldTransformWithData(this.x,this.y,this.rotation,this.scaleX,this.scaleY,this.shearX,this.shearY);
	}
	,updateWorldTransformWithData: function(x,y,rotation,scaleX,scaleY,shearX,shearY) {
		this.ax = x;
		this.ay = y;
		this.arotation = rotation;
		this.ascaleX = scaleX;
		this.ascaleY = scaleY;
		this.ashearX = shearX;
		this.ashearY = shearY;
		var parent = this.parent;
		if(parent == null) {
			var skeleton = this.skeleton;
			var rotationY = rotation + 90 + shearY;
			var sx = skeleton.scaleX;
			var sy = skeleton.scaleY;
			this.a = Math.cos((rotation + shearX) * spine_utils_SpineUtils.degRad) * scaleX * sx;
			this.b = Math.cos(rotationY * spine_utils_SpineUtils.degRad) * scaleY * sx;
			this.c = Math.sin((rotation + shearX) * spine_utils_SpineUtils.degRad) * scaleX * sy;
			this.d = Math.sin(rotationY * spine_utils_SpineUtils.degRad) * scaleY * sy;
			this.worldX = x * sx + skeleton.x;
			this.worldY = y * sy + skeleton.y;
			return;
		}
		var pa = parent.a;
		var pb = parent.b;
		var pc = parent.c;
		var pd = parent.d;
		this.worldX = pa * x + pb * y + parent.worldX;
		this.worldY = pc * x + pd * y + parent.worldY;
		var _continueAfterSwitch0 = false;
		while(true) {
			var _switchCond0 = this.data.transformMode;
			if(_switchCond0 == 0) {
				var rotationY = rotation + 90 + shearY;
				var la = Math.cos((rotation + shearX) * spine_utils_SpineUtils.degRad) * scaleX;
				var lb = Math.cos(rotationY * spine_utils_SpineUtils.degRad) * scaleY;
				var lc = Math.sin((rotation + shearX) * spine_utils_SpineUtils.degRad) * scaleX;
				var ld = Math.sin(rotationY * spine_utils_SpineUtils.degRad) * scaleY;
				this.a = pa * la + pb * lc;
				this.b = pa * lb + pb * ld;
				this.c = pc * la + pd * lc;
				this.d = pc * lb + pd * ld;
				return;
			} else if(_switchCond0 == 1) {
				var rotationY1 = rotation + 90 + shearY;
				this.a = Math.cos((rotation + shearX) * spine_utils_SpineUtils.degRad) * scaleX;
				this.b = Math.cos(rotationY1 * spine_utils_SpineUtils.degRad) * scaleY;
				this.c = Math.sin((rotation + shearX) * spine_utils_SpineUtils.degRad) * scaleX;
				this.d = Math.sin(rotationY1 * spine_utils_SpineUtils.degRad) * scaleY;
				break;
			} else if(_switchCond0 == 2) {
				var s = pa * pa + pc * pc;
				var prx = 0;
				if(s > 0.0001) {
					s = Math.abs(pa * pd - pb * pc) / s;
					pa /= this.skeleton.scaleX;
					pc /= this.skeleton.scaleY;
					pb = pc * s;
					pd = pa * s;
					prx = Math.atan2(pc,pa) * spine_utils_SpineUtils.radDeg;
				} else {
					pa = 0;
					pc = 0;
					prx = 90 - Math.atan2(pd,pb) * spine_utils_SpineUtils.radDeg;
				}
				var rx = rotation + shearX - prx;
				var ry = rotation + shearY - prx + 90;
				var la1 = Math.cos(rx * spine_utils_SpineUtils.degRad) * scaleX;
				var lb1 = Math.cos(ry * spine_utils_SpineUtils.degRad) * scaleY;
				var lc1 = Math.sin(rx * spine_utils_SpineUtils.degRad) * scaleX;
				var ld1 = Math.sin(ry * spine_utils_SpineUtils.degRad) * scaleY;
				this.a = pa * la1 - pb * lc1;
				this.b = pa * lb1 - pb * ld1;
				this.c = pc * la1 + pd * lc1;
				this.d = pc * lb1 + pd * ld1;
				break;
			} else if(_switchCond0 == 3) {
				var cos = Math.cos(rotation * spine_utils_SpineUtils.degRad);
				var sin = Math.sin(rotation * spine_utils_SpineUtils.degRad);
				var za = (pa * cos + pb * sin) / this.skeleton.scaleX;
				var zc = (pc * cos + pd * sin) / this.skeleton.scaleY;
				var s1 = Math.sqrt(za * za + zc * zc);
				if(s1 > 0.00001) {
					s1 = 1 / s1;
				}
				za *= s1;
				zc *= s1;
				s1 = Math.sqrt(za * za + zc * zc);
				if(this.data.transformMode == 3 && pa * pd - pb * pc < 0 != (this.skeleton.scaleX < 0 != this.skeleton.scaleY < 0)) {
					s1 = -s1;
				}
				var r = 1.57079635 + Math.atan2(zc,za);
				var zb = Math.cos(r) * s1;
				var zd = Math.sin(r) * s1;
				var la2 = Math.cos(shearX * spine_utils_SpineUtils.degRad) * scaleX;
				var lb2 = Math.cos((90 + shearY) * spine_utils_SpineUtils.degRad) * scaleY;
				var lc2 = Math.sin(shearX * spine_utils_SpineUtils.degRad) * scaleX;
				var ld2 = Math.sin((90 + shearY) * spine_utils_SpineUtils.degRad) * scaleY;
				this.a = za * la2 + zb * lc2;
				this.b = za * lb2 + zb * ld2;
				this.c = zc * la2 + zd * lc2;
				this.d = zc * lb2 + zd * ld2;
				break;
			} else if(_switchCond0 == 4) {
				var cos1 = Math.cos(rotation * spine_utils_SpineUtils.degRad);
				var sin1 = Math.sin(rotation * spine_utils_SpineUtils.degRad);
				var za1 = (pa * cos1 + pb * sin1) / this.skeleton.scaleX;
				var zc1 = (pc * cos1 + pd * sin1) / this.skeleton.scaleY;
				var s2 = Math.sqrt(za1 * za1 + zc1 * zc1);
				if(s2 > 0.00001) {
					s2 = 1 / s2;
				}
				za1 *= s2;
				zc1 *= s2;
				s2 = Math.sqrt(za1 * za1 + zc1 * zc1);
				if(this.data.transformMode == 3 && pa * pd - pb * pc < 0 != (this.skeleton.scaleX < 0 != this.skeleton.scaleY < 0)) {
					s2 = -s2;
				}
				var r1 = 1.57079635 + Math.atan2(zc1,za1);
				var zb1 = Math.cos(r1) * s2;
				var zd1 = Math.sin(r1) * s2;
				var la3 = Math.cos(shearX * spine_utils_SpineUtils.degRad) * scaleX;
				var lb3 = Math.cos((90 + shearY) * spine_utils_SpineUtils.degRad) * scaleY;
				var lc3 = Math.sin(shearX * spine_utils_SpineUtils.degRad) * scaleX;
				var ld3 = Math.sin((90 + shearY) * spine_utils_SpineUtils.degRad) * scaleY;
				this.a = za1 * la3 + zb1 * lc3;
				this.b = za1 * lb3 + zb1 * ld3;
				this.c = zc1 * la3 + zd1 * lc3;
				this.d = zc1 * lb3 + zd1 * ld3;
				break;
			}
			break;
		}
		this.a *= this.skeleton.scaleX;
		this.b *= this.skeleton.scaleX;
		this.c *= this.skeleton.scaleY;
		this.d *= this.skeleton.scaleY;
	}
	,setToSetupPose: function() {
		var data = this.data;
		this.x = data.x;
		this.y = data.y;
		this.rotation = data.rotation;
		this.scaleX = data.scaleX;
		this.scaleY = data.scaleY;
		this.shearX = data.shearX;
		this.shearY = data.shearY;
	}
	,getData: function() {
		return this.data;
	}
	,getSkeleton: function() {
		return this.skeleton;
	}
	,getParent: function() {
		return this.parent;
	}
	,getChildren: function() {
		return this.children;
	}
	,isActive: function() {
		return this.active;
	}
	,getX: function() {
		return this.x;
	}
	,setX: function(x) {
		this.x = x;
	}
	,getY: function() {
		return this.y;
	}
	,setY: function(y) {
		this.y = y;
	}
	,setPosition: function(x,y) {
		this.x = x;
		this.y = y;
	}
	,getRotation: function() {
		return this.rotation;
	}
	,setRotation: function(rotation) {
		this.rotation = rotation;
	}
	,getScaleX: function() {
		return this.scaleX;
	}
	,setScaleX: function(scaleX) {
		this.scaleX = scaleX;
	}
	,getScaleY: function() {
		return this.scaleY;
	}
	,setScaleY: function(scaleY) {
		this.scaleY = scaleY;
	}
	,setScale: function(scaleX,scaleY) {
		this.scaleX = scaleX;
		this.scaleY = scaleY;
	}
	,setScale2: function(scale) {
		this.scaleX = scale;
		this.scaleY = scale;
	}
	,getShearX: function() {
		return this.shearX;
	}
	,setShearX: function(shearX) {
		this.shearX = shearX;
	}
	,getShearY: function() {
		return this.shearY;
	}
	,setShearY: function(shearY) {
		this.shearY = shearY;
	}
	,getAX: function() {
		return this.ax;
	}
	,setAX: function(ax) {
		this.ax = ax;
	}
	,getAY: function() {
		return this.ay;
	}
	,setAY: function(ay) {
		this.ay = ay;
	}
	,getARotation: function() {
		return this.arotation;
	}
	,setARotation: function(arotation) {
		this.arotation = arotation;
	}
	,getAScaleX: function() {
		return this.ascaleX;
	}
	,setAScaleX: function(ascaleX) {
		this.ascaleX = ascaleX;
	}
	,getAScaleY: function() {
		return this.ascaleY;
	}
	,setAScaleY: function(ascaleY) {
		this.ascaleY = ascaleY;
	}
	,getAShearX: function() {
		return this.ashearX;
	}
	,setAShearX: function(ashearX) {
		this.ashearX = ashearX;
	}
	,getAShearY: function() {
		return this.ashearY;
	}
	,setAShearY: function(ashearY) {
		this.ashearY = ashearY;
	}
	,updateAppliedTransform: function() {
		var parent = this.parent;
		if(parent == null) {
			this.ax = this.worldX;
			this.ay = this.worldY;
			var a = this.a;
			var b = this.b;
			var c = this.c;
			var d = this.d;
			this.arotation = Math.atan2(c,a) * spine_utils_SpineUtils.radDeg;
			this.ascaleX = Math.sqrt(a * a + c * c);
			this.ascaleY = Math.sqrt(b * b + d * d);
			this.ashearX = 0;
			this.ashearY = Math.atan2(a * b + c * d,a * d - b * c) * spine_utils_SpineUtils.radDeg;
			return;
		}
		var pa = parent.a;
		var pb = parent.b;
		var pc = parent.c;
		var pd = parent.d;
		var pid = 1 / (pa * pd - pb * pc);
		var dx = this.worldX - parent.worldX;
		var dy = this.worldY - parent.worldY;
		this.ax = dx * pd * pid - dy * pb * pid;
		this.ay = dy * pa * pid - dx * pc * pid;
		var ia = pid * pd;
		var id = pid * pa;
		var ib = pid * pb;
		var ic = pid * pc;
		var ra = ia * this.a - ib * this.c;
		var rb = ia * this.b - ib * this.d;
		var rc = id * this.c - ic * this.a;
		var rd = id * this.d - ic * this.b;
		this.ashearX = 0;
		this.ascaleX = Math.sqrt(ra * ra + rc * rc);
		if(this.ascaleX > 0.0001) {
			var det = ra * rd - rb * rc;
			this.ascaleY = det / this.ascaleX;
			this.ashearY = Math.atan2(ra * rb + rc * rd,det) * spine_utils_SpineUtils.radDeg;
			this.arotation = Math.atan2(rc,ra) * spine_utils_SpineUtils.radDeg;
		} else {
			this.ascaleX = 0;
			this.ascaleY = Math.sqrt(rb * rb + rd * rd);
			this.ashearY = 0;
			this.arotation = 90 - Math.atan2(rd,rb) * spine_utils_SpineUtils.radDeg;
		}
	}
	,getA: function() {
		return this.a;
	}
	,setA: function(a) {
		this.a = a;
	}
	,getB: function() {
		return this.b;
	}
	,setB: function(b) {
		this.b = b;
	}
	,getC: function() {
		return this.c;
	}
	,setC: function(c) {
		this.c = c;
	}
	,getD: function() {
		return this.d;
	}
	,setD: function(d) {
		this.d = d;
	}
	,getWorldX: function() {
		return this.worldX;
	}
	,setWorldX: function(worldX) {
		this.worldX = worldX;
	}
	,getWorldY: function() {
		return this.worldY;
	}
	,setWorldY: function(worldY) {
		this.worldY = worldY;
	}
	,getWorldRotationX: function() {
		return Math.atan2(this.c,this.a) * spine_utils_SpineUtils.radDeg;
	}
	,getWorldRotationY: function() {
		return Math.atan2(this.d,this.b) * spine_utils_SpineUtils.radDeg;
	}
	,getWorldScaleX: function() {
		return Math.sqrt(this.a * this.a + this.c * this.c);
	}
	,getWorldScaleY: function() {
		return Math.sqrt(this.b * this.b + this.d * this.d);
	}
	,getWorldTransform: function(worldTransform) {
		if(worldTransform == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("worldTransform cannot be null."));
		}
		var val = worldTransform.val;
		val[0] = this.a;
		val[3] = this.b;
		val[1] = this.c;
		val[4] = this.d;
		val[6] = this.worldX;
		val[7] = this.worldY;
		val[2] = 0;
		val[5] = 0;
		val[8] = 1;
		return worldTransform;
	}
	,worldToLocal: function(world) {
		if(world == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("world cannot be null."));
		}
		var det = this.a * this.d - this.b * this.c;
		var x = world.x - this.worldX;
		var y = world.y - this.worldY;
		world.x = (x * this.d - y * this.b) / det;
		world.y = (y * this.a - x * this.c) / det;
		return world;
	}
	,localToWorld: function(local) {
		if(local == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("local cannot be null."));
		}
		var x = local.x;
		var y = local.y;
		local.x = x * this.a + y * this.b + this.worldX;
		local.y = x * this.c + y * this.d + this.worldY;
		return local;
	}
	,worldToLocalRotation: function(worldRotation) {
		var sin = Math.sin(worldRotation * spine_utils_SpineUtils.degRad);
		var cos = Math.cos(worldRotation * spine_utils_SpineUtils.degRad);
		return Math.atan2(this.a * sin - this.c * cos,this.d * cos - this.b * sin) * spine_utils_SpineUtils.radDeg + this.rotation - this.shearX;
	}
	,localToWorldRotation: function(localRotation) {
		localRotation -= this.rotation - this.shearX;
		var sin = Math.sin(localRotation * spine_utils_SpineUtils.degRad);
		var cos = Math.cos(localRotation * spine_utils_SpineUtils.degRad);
		return Math.atan2(cos * this.c + sin * this.d,cos * this.a + sin * this.b) * spine_utils_SpineUtils.radDeg;
	}
	,rotateWorld: function(degrees) {
		var cos = Math.cos(degrees * spine_utils_SpineUtils.degRad);
		var sin = Math.sin(degrees * spine_utils_SpineUtils.degRad);
		this.a = cos * this.a - sin * this.c;
		this.b = cos * this.b - sin * this.d;
		this.c = sin * this.a + cos * this.c;
		this.d = sin * this.b + cos * this.d;
	}
	,toString: function() {
		return this.data.name;
	}
	,__class__: spine_Bone
};
var spine_BoneData = function(index,name,parent) {
	this.color = new spine_support_graphics_Color(0.61,0.61,0.61,1);
	this.skinRequired = false;
	this.transformMode = 0;
	this.shearY = 0;
	this.shearX = 0;
	this.scaleY = 1;
	this.scaleX = 1;
	this.rotation = 0;
	this.y = 0;
	this.x = 0;
	this.length = 0;
	this.index = 0;
	if(index < 0) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("index must be >= 0."));
	}
	if(name == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("name cannot be null."));
	}
	this.index = index;
	this.name = name;
	this.parent = parent;
};
$hxClasses["spine.BoneData"] = spine_BoneData;
spine_BoneData.__name__ = "spine.BoneData";
spine_BoneData.prototype = {
	getIndex: function() {
		return this.index;
	}
	,getName: function() {
		return this.name;
	}
	,getParent: function() {
		return this.parent;
	}
	,getLength: function() {
		return this.length;
	}
	,setLength: function(length) {
		this.length = length;
	}
	,getX: function() {
		return this.x;
	}
	,setX: function(x) {
		this.x = x;
	}
	,getY: function() {
		return this.y;
	}
	,setY: function(y) {
		this.y = y;
	}
	,setPosition: function(x,y) {
		this.x = x;
		this.y = y;
	}
	,getRotation: function() {
		return this.rotation;
	}
	,setRotation: function(rotation) {
		this.rotation = rotation;
	}
	,getScaleX: function() {
		return this.scaleX;
	}
	,setScaleX: function(scaleX) {
		this.scaleX = scaleX;
	}
	,getScaleY: function() {
		return this.scaleY;
	}
	,setScaleY: function(scaleY) {
		this.scaleY = scaleY;
	}
	,setScale: function(scaleX,scaleY) {
		this.scaleX = scaleX;
		this.scaleY = scaleY;
	}
	,getShearX: function() {
		return this.shearX;
	}
	,setShearX: function(shearX) {
		this.shearX = shearX;
	}
	,getShearY: function() {
		return this.shearY;
	}
	,setShearY: function(shearY) {
		this.shearY = shearY;
	}
	,getTransformMode: function() {
		return this.transformMode;
	}
	,setTransformMode: function(transformMode) {
		this.transformMode = transformMode;
	}
	,getSkinRequired: function() {
		return this.skinRequired;
	}
	,setSkinRequired: function(skinRequired) {
		this.skinRequired = skinRequired;
	}
	,getColor: function() {
		return this.color;
	}
	,toString: function() {
		return this.name;
	}
	,__class__: spine_BoneData
};
var spine_TransformMode_$enum = function() { };
$hxClasses["spine.TransformMode_enum"] = spine_TransformMode_$enum;
spine_TransformMode_$enum.__name__ = "spine.TransformMode_enum";
spine_TransformMode_$enum.valueOf = function(value) {
	switch(value) {
	case "noRotationOrReflection":
		return 2;
	case "noScale":
		return 3;
	case "noScaleOrReflection":
		return 4;
	case "normal":
		return 0;
	case "onlyTranslation":
		return 1;
	default:
		return 0;
	}
};
var spine_ConstraintData = function(name) {
	this.skinRequired = false;
	this.order = 0;
	if(name == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("name cannot be null."));
	}
	this.name = name;
};
$hxClasses["spine.ConstraintData"] = spine_ConstraintData;
spine_ConstraintData.__name__ = "spine.ConstraintData";
spine_ConstraintData.prototype = {
	getName: function() {
		return this.name;
	}
	,getOrder: function() {
		return this.order;
	}
	,setOrder: function(order) {
		this.order = order;
	}
	,getSkinRequired: function() {
		return this.skinRequired;
	}
	,setSkinRequired: function(skinRequired) {
		this.skinRequired = skinRequired;
	}
	,toString: function() {
		return this.name;
	}
	,__class__: spine_ConstraintData
};
var spine_Event = function(time,data) {
	this.time = 0;
	this.balance = 0;
	this.volume = 0;
	this.floatValue = 0;
	this.intValue = 0;
	if(data == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("data cannot be null."));
	}
	this.time = time;
	this.data = data;
};
$hxClasses["spine.Event"] = spine_Event;
spine_Event.__name__ = "spine.Event";
spine_Event.prototype = {
	getInt: function() {
		return this.intValue;
	}
	,setInt: function(intValue) {
		this.intValue = intValue;
	}
	,getFloat: function() {
		return this.floatValue;
	}
	,setFloat: function(floatValue) {
		this.floatValue = floatValue;
	}
	,getString: function() {
		return this.stringValue;
	}
	,setString: function(stringValue) {
		if(stringValue == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("stringValue cannot be null."));
		}
		this.stringValue = stringValue;
	}
	,getVolume: function() {
		return this.volume;
	}
	,setVolume: function(volume) {
		this.volume = volume;
	}
	,getBalance: function() {
		return this.balance;
	}
	,setBalance: function(balance) {
		this.balance = balance;
	}
	,getTime: function() {
		return this.time;
	}
	,getData: function() {
		return this.data;
	}
	,toString: function() {
		return this.data.name;
	}
	,__class__: spine_Event
};
var spine_EventData = function(name) {
	this.balance = 0;
	this.volume = 0;
	this.audioPath = null;
	this.floatValue = 0;
	this.intValue = 0;
	if(name == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("name cannot be null."));
	}
	this.name = name;
};
$hxClasses["spine.EventData"] = spine_EventData;
spine_EventData.__name__ = "spine.EventData";
spine_EventData.prototype = {
	getInt: function() {
		return this.intValue;
	}
	,setInt: function(intValue) {
		this.intValue = intValue;
	}
	,getFloat: function() {
		return this.floatValue;
	}
	,setFloat: function(floatValue) {
		this.floatValue = floatValue;
	}
	,getString: function() {
		return this.stringValue;
	}
	,setString: function(stringValue) {
		if(stringValue == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("stringValue cannot be null."));
		}
		this.stringValue = stringValue;
	}
	,getAudioPath: function() {
		return this.audioPath;
	}
	,setAudioPath: function(audioPath) {
		if(audioPath == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("audioPath cannot be null."));
		}
		this.audioPath = audioPath;
	}
	,getVolume: function() {
		return this.volume;
	}
	,setVolume: function(volume) {
		this.volume = volume;
	}
	,getBalance: function() {
		return this.balance;
	}
	,setBalance: function(balance) {
		this.balance = balance;
	}
	,getName: function() {
		return this.name;
	}
	,toString: function() {
		return this.name;
	}
	,__class__: spine_EventData
};
var spine_IkConstraint = function(data,skeleton) {
	this.active = false;
	this.softness = 0;
	this.mix = 1;
	this.stretch = false;
	this.compress = false;
	this.bendDirection = 0;
	if(data == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("data cannot be null."));
	}
	if(skeleton == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("skeleton cannot be null."));
	}
	this.data = data;
	this.mix = data.mix;
	this.softness = data.softness;
	this.bendDirection = data.bendDirection;
	this.compress = data.compress;
	this.stretch = data.stretch;
	var capacity = data.bones.length;
	var this1 = [];
	this.bones = this1;
	var _g = 0;
	var _g1 = data.bones;
	while(_g < _g1.length) {
		var boneData = _g1[_g];
		++_g;
		this.bones.push(skeleton.findBone(boneData.name));
	}
	this.target = skeleton.findBone(data.target.name);
};
$hxClasses["spine.IkConstraint"] = spine_IkConstraint;
spine_IkConstraint.__name__ = "spine.IkConstraint";
spine_IkConstraint.__interfaces__ = [spine_Updatable];
spine_IkConstraint.applyOne = function(bone,targetX,targetY,compress,stretch,uniform,alpha) {
	if(bone == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("bone cannot be null."));
	}
	var p = bone.parent;
	var pa = p.a;
	var pb = p.b;
	var pc = p.c;
	var pd = p.d;
	var rotationIK = -bone.ashearX - bone.arotation;
	var tx = 0;
	var ty = 0;
	var _continueAfterSwitch1 = false;
	while(true) {
		var _switchCond1 = bone.data.transformMode;
		if(_switchCond1 == 1) {
			tx = targetX - bone.worldX;
			ty = targetY - bone.worldY;
			break;
		} else if(_switchCond1 == 2) {
			var s = Math.abs(pa * pd - pb * pc) / (pa * pa + pc * pc);
			var sa = pa / bone.skeleton.scaleX;
			var sc = pc / bone.skeleton.scaleY;
			pb = -sc * s * bone.skeleton.scaleX;
			pd = sa * s * bone.skeleton.scaleY;
			rotationIK += Math.atan2(sc,sa) * spine_utils_SpineUtils.radDeg;
			var x = targetX - p.worldX;
			var y = targetY - p.worldY;
			var d = pa * pd - pb * pc;
			tx = (x * pd - y * pb) / d - bone.ax;
			ty = (y * pa - x * pc) / d - bone.ay;
		} else {
			var x1 = targetX - p.worldX;
			var y1 = targetY - p.worldY;
			var d1 = pa * pd - pb * pc;
			tx = (x1 * pd - y1 * pb) / d1 - bone.ax;
			ty = (y1 * pa - x1 * pc) / d1 - bone.ay;
		}
		break;
	}
	rotationIK += Math.atan2(ty,tx) * spine_utils_SpineUtils.radDeg;
	if(bone.ascaleX < 0) {
		rotationIK += 180;
	}
	if(rotationIK > 180) {
		rotationIK -= 360;
	} else if(rotationIK < -180) {
		rotationIK += 360;
	}
	var sx = bone.ascaleX;
	var sy = bone.ascaleY;
	if(compress || stretch) {
		var _continueAfterSwitch2 = false;
		while(true) {
			var _switchCond2 = bone.data.transformMode;
			if(_switchCond2 == 3) {
				tx = targetX - bone.worldX;
				ty = targetY - bone.worldY;
			} else if(_switchCond2 == 4) {
				tx = targetX - bone.worldX;
				ty = targetY - bone.worldY;
			}
			break;
		}
		var b = bone.data.length * sx;
		var dd = Math.sqrt(tx * tx + ty * ty);
		if(compress && dd < b || stretch && dd > b && b > 0.0001) {
			var s = (dd / b - 1) * alpha + 1;
			sx *= s;
			if(uniform) {
				sy *= s;
			}
		}
	}
	bone.updateWorldTransformWithData(bone.ax,bone.ay,bone.arotation + rotationIK * alpha,sx,sy,bone.ashearX,bone.ashearY);
};
spine_IkConstraint.apply = function(parent,child,targetX,targetY,bendDir,stretch,uniform,softness,alpha) {
	if(parent == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("parent cannot be null."));
	}
	if(child == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("child cannot be null."));
	}
	var px = parent.ax;
	var py = parent.ay;
	var psx = parent.ascaleX;
	var psy = parent.ascaleY;
	var sx = psx;
	var sy = psy;
	var csx = child.ascaleX;
	var os1 = 0;
	var os2 = 0;
	var s2 = 0;
	if(psx < 0) {
		psx = -psx;
		os1 = 180;
		s2 = -1;
	} else {
		os1 = 0;
		s2 = 1;
	}
	if(psy < 0) {
		psy = -psy;
		s2 = -s2;
	}
	if(csx < 0) {
		csx = -csx;
		os2 = 180;
	} else {
		os2 = 0;
	}
	var cx = child.ax;
	var cy = 0;
	var cwx = 0;
	var cwy = 0;
	var a = parent.a;
	var b = parent.b;
	var c = parent.c;
	var d = parent.d;
	var u = Math.abs(psx - psy) <= 0.0001;
	if(!u || stretch) {
		cy = 0;
		cwx = a * cx + parent.worldX;
		cwy = c * cx + parent.worldY;
	} else {
		cy = child.ay;
		cwx = a * cx + b * cy + parent.worldX;
		cwy = c * cx + d * cy + parent.worldY;
	}
	var pp = parent.parent;
	a = pp.a;
	b = pp.b;
	c = pp.c;
	d = pp.d;
	var id = 1 / (a * d - b * c);
	var x = cwx - pp.worldX;
	var y = cwy - pp.worldY;
	var dx = (x * d - y * b) * id - px;
	var dy = (y * a - x * c) * id - py;
	var l1 = Math.sqrt(dx * dx + dy * dy);
	var l2 = child.data.length * csx;
	var a1 = 0;
	var a2 = 0;
	if(l1 < 0.0001) {
		spine_IkConstraint.applyOne(parent,targetX,targetY,false,stretch,false,alpha);
		child.updateWorldTransformWithData(cx,cy,0,child.ascaleX,child.ascaleY,child.ashearX,child.ashearY);
		return;
	}
	x = targetX - pp.worldX;
	y = targetY - pp.worldY;
	var tx = (x * d - y * b) * id - px;
	var ty = (y * a - x * c) * id - py;
	var dd = tx * tx + ty * ty;
	if(softness != 0) {
		softness *= psx * (csx + 1) * 0.5;
		var td = Math.sqrt(dd);
		var sd = td - l1 - l2 * psx + softness;
		if(sd > 0) {
			var p = Math.min(1,sd / (softness * 2) | 0) - 1;
			p = (sd - softness * (1 - p * p)) / td;
			tx -= p * tx;
			ty -= p * ty;
			dd = tx * tx + ty * ty;
		}
	}
	var _gotoLabel_outer;
	while(true) {
		_gotoLabel_outer = 0;
		if(u) {
			l2 *= psx;
			var cos = (dd - l1 * l1 - l2 * l2) / (2 * l1 * l2);
			if(cos < -1) {
				cos = -1;
				a2 = 3.1415927 * bendDir;
			} else if(cos > 1) {
				cos = 1;
				a2 = 0;
				if(stretch) {
					a = (Math.sqrt(dd) / (l1 + l2) - 1) * alpha + 1;
					sx *= a;
					if(uniform) {
						sy *= a;
					}
				}
			} else {
				a2 = Math.acos(cos) * bendDir;
			}
			a = l1 + l2 * cos;
			b = l2 * Math.sin(a2);
			a1 = Math.atan2(ty * a - tx * b,tx * a + ty * b);
		} else {
			a = psx * l2;
			b = psy * l2;
			var aa = a * a;
			var bb = b * b;
			var ta = Math.atan2(ty,tx);
			c = bb * l1 * l1 + aa * dd - aa * bb;
			var c1 = -2 * bb * l1;
			var c2 = bb - aa;
			d = c1 * c1 - 4 * c2 * c;
			if(d >= 0) {
				var q = Math.sqrt(d);
				if(c1 < 0) {
					q = -q;
				}
				q = -(c1 + q) * 0.5;
				var r0 = q / c2;
				var r1 = c / q;
				var r = Math.abs(r0) < Math.abs(r1) ? r0 : r1;
				if(r * r <= dd) {
					y = Math.sqrt(dd - r * r) * bendDir;
					a1 = ta - Math.atan2(y,r);
					a2 = Math.atan2(y / psy,(r - l1) / psx);
					_gotoLabel_outer = 1;
					break;
				}
			}
			var minAngle = 3.1415927;
			var minX = l1 - a;
			var minDist = minX * minX;
			var minY = 0;
			var maxAngle = 0;
			var maxX = l1 + a;
			var maxDist = maxX * maxX;
			var maxY = 0;
			c = -a * l1 / (aa - bb);
			if(c >= -1 && c <= 1) {
				c = Math.acos(c);
				x = a * Math.cos(c) + l1;
				y = b * Math.sin(c);
				d = x * x + y * y;
				if(d < minDist) {
					minAngle = c;
					minDist = d;
					minX = x;
					minY = y;
				}
				if(d > maxDist) {
					maxAngle = c;
					maxDist = d;
					maxX = x;
					maxY = y;
				}
			}
			if(dd <= (minDist + maxDist) * 0.5) {
				a1 = ta - Math.atan2(minY * bendDir,minX);
				a2 = minAngle * bendDir;
			} else {
				a1 = ta - Math.atan2(maxY * bendDir,maxX);
				a2 = maxAngle * bendDir;
			}
		}
		if(_gotoLabel_outer == 0) {
			break;
		}
	}
	var os = Math.atan2(cy,cx) * s2;
	var rotation = parent.arotation;
	a1 = (a1 - os) * spine_utils_SpineUtils.radDeg + os1 - rotation;
	if(a1 > 180) {
		a1 -= 360;
	} else if(a1 < -180) {
		a1 += 360;
	}
	parent.updateWorldTransformWithData(px,py,rotation + a1 * alpha,sx,sy,0,0);
	rotation = child.arotation;
	a2 = ((a2 + os) * spine_utils_SpineUtils.radDeg - child.ashearX) * s2 + os2 - rotation;
	if(a2 > 180) {
		a2 -= 360;
	} else if(a2 < -180) {
		a2 += 360;
	}
	child.updateWorldTransformWithData(cx,cy,rotation + a2 * alpha,child.ascaleX,child.ascaleY,child.ashearX,child.ashearY);
};
spine_IkConstraint.prototype = {
	update: function() {
		if(this.mix == 0) {
			return;
		}
		var target = this.target;
		var bones = this.bones;
		var _continueAfterSwitch0 = false;
		while(true) {
			var _switchCond0 = this.bones.length;
			if(_switchCond0 == 1) {
				var result = bones[0];
				spine_IkConstraint.applyOne(result,target.worldX,target.worldY,this.compress,this.stretch,this.data.uniform,this.mix);
				break;
			} else if(_switchCond0 == 2) {
				var result1 = bones[0];
				var result2 = bones[1];
				spine_IkConstraint.apply(result1,result2,target.worldX,target.worldY,this.bendDirection,this.stretch,this.data.uniform,this.softness,this.mix);
				break;
			}
			break;
		}
	}
	,getBones: function() {
		return this.bones;
	}
	,getTarget: function() {
		return this.target;
	}
	,setTarget: function(target) {
		if(target == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("target cannot be null."));
		}
		this.target = target;
	}
	,getMix: function() {
		return this.mix;
	}
	,setMix: function(mix) {
		this.mix = mix;
	}
	,getSoftness: function() {
		return this.softness;
	}
	,setSoftness: function(softness) {
		this.softness = softness;
	}
	,getBendDirection: function() {
		return this.bendDirection;
	}
	,setBendDirection: function(bendDirection) {
		this.bendDirection = bendDirection;
	}
	,getCompress: function() {
		return this.compress;
	}
	,setCompress: function(compress) {
		this.compress = compress;
	}
	,getStretch: function() {
		return this.stretch;
	}
	,setStretch: function(stretch) {
		this.stretch = stretch;
	}
	,isActive: function() {
		return this.active;
	}
	,getData: function() {
		return this.data;
	}
	,toString: function() {
		return this.data.name;
	}
	,__class__: spine_IkConstraint
};
var spine_IkConstraintData = function(name) {
	this.softness = 0;
	this.mix = 1;
	this.uniform = false;
	this.stretch = false;
	this.compress = false;
	this.bendDirection = 1;
	var this1 = [];
	this.bones = this1;
	spine_ConstraintData.call(this,name);
};
$hxClasses["spine.IkConstraintData"] = spine_IkConstraintData;
spine_IkConstraintData.__name__ = "spine.IkConstraintData";
spine_IkConstraintData.__super__ = spine_ConstraintData;
spine_IkConstraintData.prototype = $extend(spine_ConstraintData.prototype,{
	getBones: function() {
		return this.bones;
	}
	,getTarget: function() {
		return this.target;
	}
	,setTarget: function(target) {
		if(target == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("target cannot be null."));
		}
		this.target = target;
	}
	,getMix: function() {
		return this.mix;
	}
	,setMix: function(mix) {
		this.mix = mix;
	}
	,getSoftness: function() {
		return this.softness;
	}
	,setSoftness: function(softness) {
		this.softness = softness;
	}
	,getBendDirection: function() {
		return this.bendDirection;
	}
	,setBendDirection: function(bendDirection) {
		this.bendDirection = bendDirection;
	}
	,getCompress: function() {
		return this.compress;
	}
	,setCompress: function(compress) {
		this.compress = compress;
	}
	,getStretch: function() {
		return this.stretch;
	}
	,setStretch: function(stretch) {
		this.stretch = stretch;
	}
	,getUniform: function() {
		return this.uniform;
	}
	,setUniform: function(uniform) {
		this.uniform = uniform;
	}
	,__class__: spine_IkConstraintData
});
var spine_PathConstraint = function(data,skeleton) {
	var length = 10;
	if(length == null) {
		length = 0;
	}
	var len = length | 0;
	var capacity = len != 0 ? len : 16;
	var this1 = [];
	var array = this1;
	if(length > 0) {
		var len1 = array.length;
		if(len1 > len) {
			array.splice(len,len - len1);
		} else if(len1 < len) {
			while(len1 < len) {
				array.push(0);
				++len1;
			}
		}
	}
	this.segments = array;
	var this1 = [];
	this.lengths = this1;
	var this1 = [];
	this.curves = this1;
	var this1 = [];
	this.world = this1;
	var this1 = [];
	this.positions = this1;
	var this1 = [];
	this.spaces = this1;
	this.active = false;
	this.mixY = 0;
	this.mixX = 0;
	this.mixRotate = 0;
	this.spacing = 0;
	this.position = 0;
	if(data == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("data cannot be null."));
	}
	if(skeleton == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("skeleton cannot be null."));
	}
	this.data = data;
	var capacity = data.bones.length;
	var this1 = [];
	this.bones = this1;
	var _g = 0;
	var _g1 = data.bones;
	while(_g < _g1.length) {
		var boneData = _g1[_g];
		++_g;
		this.bones.push(skeleton.findBone(boneData.name));
	}
	this.target = skeleton.findSlot(data.target.name);
	this.position = data.position;
	this.spacing = data.spacing;
	this.mixRotate = data.mixRotate;
	this.mixX = data.mixX;
	this.mixY = data.mixY;
};
$hxClasses["spine.PathConstraint"] = spine_PathConstraint;
spine_PathConstraint.__name__ = "spine.PathConstraint";
spine_PathConstraint.__interfaces__ = [spine_Updatable];
spine_PathConstraint.prototype = {
	update: function() {
		var attachment = this.target.attachment;
		if(!((attachment) instanceof spine_attachments_PathAttachment)) {
			return;
		}
		var mixRotate = this.mixRotate;
		var mixX = this.mixX;
		var mixY = this.mixY;
		if(mixRotate == 0 && mixX == 0 && mixY == 0) {
			return;
		}
		var data = this.data;
		var tangents = data.rotateMode == 0;
		var scale = data.rotateMode == 2;
		var boneCount = this.bones.length;
		var spacesCount = tangents ? boneCount : boneCount + 1;
		var bones = this.bones;
		var this1 = this.spaces;
		var len = this1.length;
		if(len > spacesCount) {
			this1.splice(spacesCount,spacesCount - len);
		} else if(len < spacesCount) {
			while(len < spacesCount) {
				this1.push(0);
				++len;
			}
		}
		var spaces = this1;
		var lengths;
		if(scale) {
			var this1 = this.lengths;
			var len = this1.length;
			if(len > boneCount) {
				this1.splice(boneCount,boneCount - len);
			} else if(len < boneCount) {
				while(len < boneCount) {
					this1.push(0);
					++len;
				}
			}
			lengths = this1;
		} else {
			lengths = null;
		}
		var spacing = this.spacing;
		var _continueAfterSwitch0 = false;
		while(true) {
			var _switchCond0 = data.spacingMode;
			if(_switchCond0 == 2) {
				if(scale) {
					var i = 0;
					var n = spacesCount - 1;
					while(i < n) {
						var result = bones[i];
						var bone = result;
						var setupLength = bone.data.length;
						if(setupLength < spine_PathConstraint.epsilon) {
							lengths[i] = 0;
						} else {
							var x = setupLength * bone.a;
							var y = setupLength * bone.c;
							lengths[i] = Math.sqrt(x * x + y * y);
						}
						++i;
					}
				}
				spine_support_utils_FloatArray.fill(spaces,1,spacesCount,spacing);
				break;
			} else if(_switchCond0 == 3) {
				var sum = 0;
				var i1 = 0;
				var n1 = spacesCount - 1;
				while(i1 < n1) {
					var result1 = bones[i1];
					var bone1 = result1;
					var setupLength1 = bone1.data.length;
					if(setupLength1 < spine_PathConstraint.epsilon) {
						if(scale) {
							lengths[i1] = 0;
						}
						spaces[++i1] = spacing;
					} else {
						var x1 = setupLength1 * bone1.a;
						var y1 = setupLength1 * bone1.c;
						var length = Math.sqrt(x1 * x1 + y1 * y1);
						if(scale) {
							lengths[i1] = length;
						}
						spaces[++i1] = length;
						sum += length;
					}
				}
				if(sum > 0) {
					sum = spacesCount / sum * spacing;
					var i2 = 1;
					while(i2 < spacesCount) {
						spaces[i2] *= sum;
						++i2;
					}
				}
				break;
			} else {
				var lengthSpacing = data.spacingMode == 0;
				var i3 = 0;
				var n2 = spacesCount - 1;
				while(i3 < n2) {
					var result2 = bones[i3];
					var bone2 = result2;
					var setupLength2 = bone2.data.length;
					if(setupLength2 < spine_PathConstraint.epsilon) {
						if(scale) {
							lengths[i3] = 0;
						}
						spaces[++i3] = spacing;
					} else {
						var x2 = setupLength2 * bone2.a;
						var y2 = setupLength2 * bone2.c;
						var length1 = Math.sqrt(x2 * x2 + y2 * y2);
						if(scale) {
							lengths[i3] = length1;
						}
						spaces[++i3] = (lengthSpacing ? setupLength2 + spacing : spacing) * length1 / setupLength2;
					}
				}
			}
			break;
		}
		var result = attachment;
		var path = result;
		var target = this.target;
		var position = this.position;
		var spaces1 = this.spaces;
		var this1 = this.positions;
		var size = spacesCount * 3 + 2;
		var len = this1.length;
		if(len > size) {
			this1.splice(size,size - len);
		} else if(len < size) {
			while(len < size) {
				this1.push(0);
				++len;
			}
		}
		var out = this1;
		var world = null;
		var closed = path.closed;
		var verticesLength = path.worldVerticesLength;
		var curveCount = verticesLength / 6 | 0;
		var prevCurve = -1;
		var positions;
		if(!path.constantSpeed) {
			var lengths1 = path.lengths;
			curveCount -= closed ? 1 : 2;
			var pathLength = lengths1[curveCount];
			if(this.data.positionMode == 1) {
				position *= pathLength;
			}
			var multiplier = 0;
			while(true) {
				var _switchCond1 = this.data.spacingMode;
				if(_switchCond1 == 2) {
					multiplier = pathLength;
					break;
				} else if(_switchCond1 == 3) {
					multiplier = pathLength / spacesCount;
					break;
				} else {
					multiplier = 1;
				}
				break;
			}
			var this1 = this.world;
			var len = this1.length;
			if(len > 8) {
				this1.splice(8,8 - len);
			} else if(len < 8) {
				while(len < 8) {
					this1.push(0);
					++len;
				}
			}
			world = this1;
			var i = 0;
			var o = 0;
			var curve = 0;
			while(i < spacesCount) {
				var space = spaces1[i] * multiplier;
				var p = position += space;
				if(closed) {
					p %= pathLength;
					if(p < 0) {
						p += pathLength;
					}
					curve = 0;
				} else if(p < 0) {
					if(prevCurve != -2) {
						prevCurve = -2;
						var count = 4;
						count = (count >> 1) * 2;
						var deformArray = target.deform;
						var vertices = path.vertices;
						var bones1 = path.bones;
						if(bones1 == null) {
							if(deformArray.length > 0) {
								vertices = deformArray;
							}
							var bone = target.bone;
							var x = bone.worldX;
							var y = bone.worldY;
							var a = bone.a;
							var b = bone.b;
							var c = bone.c;
							var d = bone.d;
							var v = 2;
							var w = 0;
							while(w < count) {
								var vx = vertices[v];
								var vy = vertices[v + 1];
								world[w] = vx * a + vy * b + x;
								world[w + 1] = vx * c + vy * d + y;
								v += 2;
								w += 2;
							}
						} else {
							var v1 = 0;
							var skip = 0;
							var i1 = 0;
							while(i1 < 2) {
								var n = bones1[v1];
								v1 += n + 1;
								skip += n;
								i1 += 2;
							}
							var skeletonBones = target.bone.skeleton.getBones();
							if(deformArray.length == 0) {
								var w1 = 0;
								var b1 = skip * 3;
								while(w1 < count) {
									var wx = 0;
									var wy = 0;
									var n1 = bones1[v1++];
									n1 += v1;
									while(v1 < n1) {
										var result = skeletonBones[bones1[v1]];
										var bone1 = result;
										var vx1 = vertices[b1];
										var vy1 = vertices[b1 + 1];
										var weight = vertices[b1 + 2];
										wx += (vx1 * bone1.a + vy1 * bone1.b + bone1.worldX) * weight;
										wy += (vx1 * bone1.c + vy1 * bone1.d + bone1.worldY) * weight;
										++v1;
										b1 += 3;
									}
									world[w1] = wx;
									world[w1 + 1] = wy;
									w1 += 2;
								}
							} else {
								var deform = deformArray;
								var w2 = 0;
								var b2 = skip * 3;
								var f = skip << 1;
								while(w2 < count) {
									var wx1 = 0;
									var wy1 = 0;
									var n2 = bones1[v1++];
									n2 += v1;
									while(v1 < n2) {
										var result1 = skeletonBones[bones1[v1]];
										var bone2 = result1;
										var vx2 = vertices[b2] + deform[f];
										var vy2 = vertices[b2 + 1] + deform[f + 1];
										var weight1 = vertices[b2 + 2];
										wx1 += (vx2 * bone2.a + vy2 * bone2.b + bone2.worldX) * weight1;
										wy1 += (vx2 * bone2.c + vy2 * bone2.d + bone2.worldY) * weight1;
										++v1;
										b2 += 3;
										f += 2;
									}
									world[w2] = wx1;
									world[w2 + 1] = wy1;
									w2 += 2;
								}
							}
						}
					}
					var x1 = world[0];
					var y1 = world[1];
					var dx = world[2] - x1;
					var dy = world[3] - y1;
					var r = Math.atan2(dy,dx);
					out[o] = x1 + p * Math.cos(r);
					out[o + 1] = y1 + p * Math.sin(r);
					out[o + 2] = r;
					++i;
					o += 3;
					continue;
				} else if(p > pathLength) {
					if(prevCurve != -3) {
						prevCurve = -3;
						var start = verticesLength - 6;
						var count1 = 4;
						count1 = (count1 >> 1) * 2;
						var deformArray1 = target.deform;
						var vertices1 = path.vertices;
						var bones2 = path.bones;
						if(bones2 == null) {
							if(deformArray1.length > 0) {
								vertices1 = deformArray1;
							}
							var bone3 = target.bone;
							var x2 = bone3.worldX;
							var y2 = bone3.worldY;
							var a1 = bone3.a;
							var b3 = bone3.b;
							var c1 = bone3.c;
							var d1 = bone3.d;
							var v2 = start;
							var w3 = 0;
							while(w3 < count1) {
								var vx3 = vertices1[v2];
								var vy3 = vertices1[v2 + 1];
								world[w3] = vx3 * a1 + vy3 * b3 + x2;
								world[w3 + 1] = vx3 * c1 + vy3 * d1 + y2;
								v2 += 2;
								w3 += 2;
							}
						} else {
							var v3 = 0;
							var skip1 = 0;
							var i2 = 0;
							while(i2 < start) {
								var n3 = bones2[v3];
								v3 += n3 + 1;
								skip1 += n3;
								i2 += 2;
							}
							var skeletonBones1 = target.bone.skeleton.getBones();
							if(deformArray1.length == 0) {
								var w4 = 0;
								var b4 = skip1 * 3;
								while(w4 < count1) {
									var wx2 = 0;
									var wy2 = 0;
									var n4 = bones2[v3++];
									n4 += v3;
									while(v3 < n4) {
										var result2 = skeletonBones1[bones2[v3]];
										var bone4 = result2;
										var vx4 = vertices1[b4];
										var vy4 = vertices1[b4 + 1];
										var weight2 = vertices1[b4 + 2];
										wx2 += (vx4 * bone4.a + vy4 * bone4.b + bone4.worldX) * weight2;
										wy2 += (vx4 * bone4.c + vy4 * bone4.d + bone4.worldY) * weight2;
										++v3;
										b4 += 3;
									}
									world[w4] = wx2;
									world[w4 + 1] = wy2;
									w4 += 2;
								}
							} else {
								var deform1 = deformArray1;
								var w5 = 0;
								var b5 = skip1 * 3;
								var f1 = skip1 << 1;
								while(w5 < count1) {
									var wx3 = 0;
									var wy3 = 0;
									var n5 = bones2[v3++];
									n5 += v3;
									while(v3 < n5) {
										var result3 = skeletonBones1[bones2[v3]];
										var bone5 = result3;
										var vx5 = vertices1[b5] + deform1[f1];
										var vy5 = vertices1[b5 + 1] + deform1[f1 + 1];
										var weight3 = vertices1[b5 + 2];
										wx3 += (vx5 * bone5.a + vy5 * bone5.b + bone5.worldX) * weight3;
										wy3 += (vx5 * bone5.c + vy5 * bone5.d + bone5.worldY) * weight3;
										++v3;
										b5 += 3;
										f1 += 2;
									}
									world[w5] = wx3;
									world[w5 + 1] = wy3;
									w5 += 2;
								}
							}
						}
					}
					var p1 = p - pathLength;
					var x11 = world[2];
					var y11 = world[3];
					var dx1 = x11 - world[0];
					var dy1 = y11 - world[1];
					var r1 = Math.atan2(dy1,dx1);
					out[o] = x11 + p1 * Math.cos(r1);
					out[o + 1] = y11 + p1 * Math.sin(r1);
					out[o + 2] = r1;
					++i;
					o += 3;
					continue;
				}
				while(true) {
					var length = lengths1[curve];
					if(p > length) {
						++curve;
						continue;
					}
					if(curve == 0) {
						p /= length;
					} else {
						var prev = lengths1[curve - 1];
						p = (p - prev) / (length - prev);
					}
					break;
				}
				if(curve != prevCurve) {
					prevCurve = curve;
					if(closed && curve == curveCount) {
						var start1 = verticesLength - 4;
						var count2 = 4;
						count2 = (count2 >> 1) * 2;
						var deformArray2 = target.deform;
						var vertices2 = path.vertices;
						var bones3 = path.bones;
						if(bones3 == null) {
							if(deformArray2.length > 0) {
								vertices2 = deformArray2;
							}
							var bone6 = target.bone;
							var x3 = bone6.worldX;
							var y3 = bone6.worldY;
							var a2 = bone6.a;
							var b6 = bone6.b;
							var c2 = bone6.c;
							var d2 = bone6.d;
							var v4 = start1;
							var w6 = 0;
							while(w6 < count2) {
								var vx6 = vertices2[v4];
								var vy6 = vertices2[v4 + 1];
								world[w6] = vx6 * a2 + vy6 * b6 + x3;
								world[w6 + 1] = vx6 * c2 + vy6 * d2 + y3;
								v4 += 2;
								w6 += 2;
							}
						} else {
							var v5 = 0;
							var skip2 = 0;
							var i3 = 0;
							while(i3 < start1) {
								var n6 = bones3[v5];
								v5 += n6 + 1;
								skip2 += n6;
								i3 += 2;
							}
							var skeletonBones2 = target.bone.skeleton.getBones();
							if(deformArray2.length == 0) {
								var w7 = 0;
								var b7 = skip2 * 3;
								while(w7 < count2) {
									var wx4 = 0;
									var wy4 = 0;
									var n7 = bones3[v5++];
									n7 += v5;
									while(v5 < n7) {
										var result4 = skeletonBones2[bones3[v5]];
										var bone7 = result4;
										var vx7 = vertices2[b7];
										var vy7 = vertices2[b7 + 1];
										var weight4 = vertices2[b7 + 2];
										wx4 += (vx7 * bone7.a + vy7 * bone7.b + bone7.worldX) * weight4;
										wy4 += (vx7 * bone7.c + vy7 * bone7.d + bone7.worldY) * weight4;
										++v5;
										b7 += 3;
									}
									world[w7] = wx4;
									world[w7 + 1] = wy4;
									w7 += 2;
								}
							} else {
								var deform2 = deformArray2;
								var w8 = 0;
								var b8 = skip2 * 3;
								var f2 = skip2 << 1;
								while(w8 < count2) {
									var wx5 = 0;
									var wy5 = 0;
									var n8 = bones3[v5++];
									n8 += v5;
									while(v5 < n8) {
										var result5 = skeletonBones2[bones3[v5]];
										var bone8 = result5;
										var vx8 = vertices2[b8] + deform2[f2];
										var vy8 = vertices2[b8 + 1] + deform2[f2 + 1];
										var weight5 = vertices2[b8 + 2];
										wx5 += (vx8 * bone8.a + vy8 * bone8.b + bone8.worldX) * weight5;
										wy5 += (vx8 * bone8.c + vy8 * bone8.d + bone8.worldY) * weight5;
										++v5;
										b8 += 3;
										f2 += 2;
									}
									world[w8] = wx5;
									world[w8 + 1] = wy5;
									w8 += 2;
								}
							}
						}
						var count3 = 4;
						count3 = 4 + (count3 >> 1) * 2;
						var deformArray3 = target.deform;
						var vertices3 = path.vertices;
						var bones4 = path.bones;
						if(bones4 == null) {
							if(deformArray3.length > 0) {
								vertices3 = deformArray3;
							}
							var bone9 = target.bone;
							var x4 = bone9.worldX;
							var y4 = bone9.worldY;
							var a3 = bone9.a;
							var b9 = bone9.b;
							var c3 = bone9.c;
							var d3 = bone9.d;
							var v6 = 0;
							var w9 = 4;
							while(w9 < count3) {
								var vx9 = vertices3[v6];
								var vy9 = vertices3[v6 + 1];
								world[w9] = vx9 * a3 + vy9 * b9 + x4;
								world[w9 + 1] = vx9 * c3 + vy9 * d3 + y4;
								v6 += 2;
								w9 += 2;
							}
						} else {
							var v7 = 0;
							var skip3 = 0;
							var i4 = 0;
							while(i4 < 0) {
								var n9 = bones4[v7];
								v7 += n9 + 1;
								skip3 += n9;
								i4 += 2;
							}
							var skeletonBones3 = target.bone.skeleton.getBones();
							if(deformArray3.length == 0) {
								var w10 = 4;
								var b10 = skip3 * 3;
								while(w10 < count3) {
									var wx6 = 0;
									var wy6 = 0;
									var n10 = bones4[v7++];
									n10 += v7;
									while(v7 < n10) {
										var result6 = skeletonBones3[bones4[v7]];
										var bone10 = result6;
										var vx10 = vertices3[b10];
										var vy10 = vertices3[b10 + 1];
										var weight6 = vertices3[b10 + 2];
										wx6 += (vx10 * bone10.a + vy10 * bone10.b + bone10.worldX) * weight6;
										wy6 += (vx10 * bone10.c + vy10 * bone10.d + bone10.worldY) * weight6;
										++v7;
										b10 += 3;
									}
									world[w10] = wx6;
									world[w10 + 1] = wy6;
									w10 += 2;
								}
							} else {
								var deform3 = deformArray3;
								var w11 = 4;
								var b11 = skip3 * 3;
								var f3 = skip3 << 1;
								while(w11 < count3) {
									var wx7 = 0;
									var wy7 = 0;
									var n11 = bones4[v7++];
									n11 += v7;
									while(v7 < n11) {
										var result7 = skeletonBones3[bones4[v7]];
										var bone11 = result7;
										var vx11 = vertices3[b11] + deform3[f3];
										var vy11 = vertices3[b11 + 1] + deform3[f3 + 1];
										var weight7 = vertices3[b11 + 2];
										wx7 += (vx11 * bone11.a + vy11 * bone11.b + bone11.worldX) * weight7;
										wy7 += (vx11 * bone11.c + vy11 * bone11.d + bone11.worldY) * weight7;
										++v7;
										b11 += 3;
										f3 += 2;
									}
									world[w11] = wx7;
									world[w11 + 1] = wy7;
									w11 += 2;
								}
							}
						}
					} else {
						var start2 = curve * 6 + 2;
						var count4 = 8;
						count4 = (count4 >> 1) * 2;
						var deformArray4 = target.deform;
						var vertices4 = path.vertices;
						var bones5 = path.bones;
						if(bones5 == null) {
							if(deformArray4.length > 0) {
								vertices4 = deformArray4;
							}
							var bone12 = target.bone;
							var x5 = bone12.worldX;
							var y5 = bone12.worldY;
							var a4 = bone12.a;
							var b12 = bone12.b;
							var c4 = bone12.c;
							var d4 = bone12.d;
							var v8 = start2;
							var w12 = 0;
							while(w12 < count4) {
								var vx12 = vertices4[v8];
								var vy12 = vertices4[v8 + 1];
								world[w12] = vx12 * a4 + vy12 * b12 + x5;
								world[w12 + 1] = vx12 * c4 + vy12 * d4 + y5;
								v8 += 2;
								w12 += 2;
							}
						} else {
							var v9 = 0;
							var skip4 = 0;
							var i5 = 0;
							while(i5 < start2) {
								var n12 = bones5[v9];
								v9 += n12 + 1;
								skip4 += n12;
								i5 += 2;
							}
							var skeletonBones4 = target.bone.skeleton.getBones();
							if(deformArray4.length == 0) {
								var w13 = 0;
								var b13 = skip4 * 3;
								while(w13 < count4) {
									var wx8 = 0;
									var wy8 = 0;
									var n13 = bones5[v9++];
									n13 += v9;
									while(v9 < n13) {
										var result8 = skeletonBones4[bones5[v9]];
										var bone13 = result8;
										var vx13 = vertices4[b13];
										var vy13 = vertices4[b13 + 1];
										var weight8 = vertices4[b13 + 2];
										wx8 += (vx13 * bone13.a + vy13 * bone13.b + bone13.worldX) * weight8;
										wy8 += (vx13 * bone13.c + vy13 * bone13.d + bone13.worldY) * weight8;
										++v9;
										b13 += 3;
									}
									world[w13] = wx8;
									world[w13 + 1] = wy8;
									w13 += 2;
								}
							} else {
								var deform4 = deformArray4;
								var w14 = 0;
								var b14 = skip4 * 3;
								var f4 = skip4 << 1;
								while(w14 < count4) {
									var wx9 = 0;
									var wy9 = 0;
									var n14 = bones5[v9++];
									n14 += v9;
									while(v9 < n14) {
										var result9 = skeletonBones4[bones5[v9]];
										var bone14 = result9;
										var vx14 = vertices4[b14] + deform4[f4];
										var vy14 = vertices4[b14 + 1] + deform4[f4 + 1];
										var weight9 = vertices4[b14 + 2];
										wx9 += (vx14 * bone14.a + vy14 * bone14.b + bone14.worldX) * weight9;
										wy9 += (vx14 * bone14.c + vy14 * bone14.d + bone14.worldY) * weight9;
										++v9;
										b14 += 3;
										f4 += 2;
									}
									world[w14] = wx9;
									world[w14 + 1] = wy9;
									w14 += 2;
								}
							}
						}
					}
				}
				var x12 = world[0];
				var y12 = world[1];
				var cx1 = world[2];
				var cy1 = world[3];
				var cx2 = world[4];
				var cy2 = world[5];
				var tangents1 = tangents || i > 0 && space < spine_PathConstraint.epsilon;
				if(p < spine_PathConstraint.epsilon || isNaN(p)) {
					out[o] = x12;
					out[o + 1] = y12;
					out[o + 2] = Math.atan2(cy1 - y12,cx1 - x12);
				} else {
					var tt = p * p;
					var ttt = tt * p;
					var u = 1 - p;
					var uu = u * u;
					var uuu = uu * u;
					var ut = u * p;
					var ut3 = ut * 3;
					var uut3 = u * ut3;
					var utt3 = ut3 * p;
					var x6 = x12 * uuu + cx1 * uut3 + cx2 * utt3 + world[6] * ttt;
					var y6 = y12 * uuu + cy1 * uut3 + cy2 * utt3 + world[7] * ttt;
					out[o] = x6;
					out[o + 1] = y6;
					if(tangents1) {
						if(p < 0.001) {
							out[o + 2] = Math.atan2(cy1 - y12,cx1 - x12);
						} else {
							out[o + 2] = Math.atan2(y6 - (y12 * uu + cy1 * ut * 2 + cy2 * tt),x6 - (x12 * uu + cx1 * ut * 2 + cx2 * tt));
						}
					}
				}
				++i;
				o += 3;
			}
			positions = out;
		} else {
			if(closed) {
				verticesLength += 2;
				var this1 = this.world;
				var len = this1.length;
				if(len > verticesLength) {
					this1.splice(verticesLength,verticesLength - len);
				} else if(len < verticesLength) {
					while(len < verticesLength) {
						this1.push(0);
						++len;
					}
				}
				world = this1;
				var count = verticesLength - 4;
				count = (count >> 1) * 2;
				var deformArray = target.deform;
				var vertices = path.vertices;
				var bones1 = path.bones;
				if(bones1 == null) {
					if(deformArray.length > 0) {
						vertices = deformArray;
					}
					var bone = target.bone;
					var x = bone.worldX;
					var y = bone.worldY;
					var a = bone.a;
					var b = bone.b;
					var c = bone.c;
					var d = bone.d;
					var v = 2;
					var w = 0;
					while(w < count) {
						var vx = vertices[v];
						var vy = vertices[v + 1];
						world[w] = vx * a + vy * b + x;
						world[w + 1] = vx * c + vy * d + y;
						v += 2;
						w += 2;
					}
				} else {
					var v = 0;
					var skip = 0;
					var i = 0;
					while(i < 2) {
						var n = bones1[v];
						v += n + 1;
						skip += n;
						i += 2;
					}
					var skeletonBones = target.bone.skeleton.getBones();
					if(deformArray.length == 0) {
						var w = 0;
						var b = skip * 3;
						while(w < count) {
							var wx = 0;
							var wy = 0;
							var n = bones1[v++];
							n += v;
							while(v < n) {
								var result = skeletonBones[bones1[v]];
								var bone = result;
								var vx = vertices[b];
								var vy = vertices[b + 1];
								var weight = vertices[b + 2];
								wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;
								wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;
								++v;
								b += 3;
							}
							world[w] = wx;
							world[w + 1] = wy;
							w += 2;
						}
					} else {
						var deform = deformArray;
						var w = 0;
						var b = skip * 3;
						var f = skip << 1;
						while(w < count) {
							var wx = 0;
							var wy = 0;
							var n = bones1[v++];
							n += v;
							while(v < n) {
								var result = skeletonBones[bones1[v]];
								var bone = result;
								var vx = vertices[b] + deform[f];
								var vy = vertices[b + 1] + deform[f + 1];
								var weight = vertices[b + 2];
								wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;
								wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;
								++v;
								b += 3;
								f += 2;
							}
							world[w] = wx;
							world[w + 1] = wy;
							w += 2;
						}
					}
				}
				var count = 2;
				var offset = verticesLength - 4;
				count = offset + (count >> 1) * 2;
				var deformArray = target.deform;
				var vertices = path.vertices;
				var bones1 = path.bones;
				if(bones1 == null) {
					if(deformArray.length > 0) {
						vertices = deformArray;
					}
					var bone = target.bone;
					var x = bone.worldX;
					var y = bone.worldY;
					var a = bone.a;
					var b = bone.b;
					var c = bone.c;
					var d = bone.d;
					var v = 0;
					var w = offset;
					while(w < count) {
						var vx = vertices[v];
						var vy = vertices[v + 1];
						world[w] = vx * a + vy * b + x;
						world[w + 1] = vx * c + vy * d + y;
						v += 2;
						w += 2;
					}
				} else {
					var v = 0;
					var skip = 0;
					var i = 0;
					while(i < 0) {
						var n = bones1[v];
						v += n + 1;
						skip += n;
						i += 2;
					}
					var skeletonBones = target.bone.skeleton.getBones();
					if(deformArray.length == 0) {
						var w = offset;
						var b = skip * 3;
						while(w < count) {
							var wx = 0;
							var wy = 0;
							var n = bones1[v++];
							n += v;
							while(v < n) {
								var result = skeletonBones[bones1[v]];
								var bone = result;
								var vx = vertices[b];
								var vy = vertices[b + 1];
								var weight = vertices[b + 2];
								wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;
								wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;
								++v;
								b += 3;
							}
							world[w] = wx;
							world[w + 1] = wy;
							w += 2;
						}
					} else {
						var deform = deformArray;
						var w = offset;
						var b = skip * 3;
						var f = skip << 1;
						while(w < count) {
							var wx = 0;
							var wy = 0;
							var n = bones1[v++];
							n += v;
							while(v < n) {
								var result = skeletonBones[bones1[v]];
								var bone = result;
								var vx = vertices[b] + deform[f];
								var vy = vertices[b + 1] + deform[f + 1];
								var weight = vertices[b + 2];
								wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;
								wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;
								++v;
								b += 3;
								f += 2;
							}
							world[w] = wx;
							world[w + 1] = wy;
							w += 2;
						}
					}
				}
				world[verticesLength - 2] = world[0];
				world[verticesLength - 1] = world[1];
			} else {
				--curveCount;
				verticesLength -= 4;
				var this1 = this.world;
				var len = this1.length;
				if(len > verticesLength) {
					this1.splice(verticesLength,verticesLength - len);
				} else if(len < verticesLength) {
					while(len < verticesLength) {
						this1.push(0);
						++len;
					}
				}
				world = this1;
				var count = verticesLength;
				count = (count >> 1) * 2;
				var deformArray = target.deform;
				var vertices = path.vertices;
				var bones1 = path.bones;
				if(bones1 == null) {
					if(deformArray.length > 0) {
						vertices = deformArray;
					}
					var bone = target.bone;
					var x = bone.worldX;
					var y = bone.worldY;
					var a = bone.a;
					var b = bone.b;
					var c = bone.c;
					var d = bone.d;
					var v = 2;
					var w = 0;
					while(w < count) {
						var vx = vertices[v];
						var vy = vertices[v + 1];
						world[w] = vx * a + vy * b + x;
						world[w + 1] = vx * c + vy * d + y;
						v += 2;
						w += 2;
					}
				} else {
					var v = 0;
					var skip = 0;
					var i = 0;
					while(i < 2) {
						var n = bones1[v];
						v += n + 1;
						skip += n;
						i += 2;
					}
					var skeletonBones = target.bone.skeleton.getBones();
					if(deformArray.length == 0) {
						var w = 0;
						var b = skip * 3;
						while(w < count) {
							var wx = 0;
							var wy = 0;
							var n = bones1[v++];
							n += v;
							while(v < n) {
								var result = skeletonBones[bones1[v]];
								var bone = result;
								var vx = vertices[b];
								var vy = vertices[b + 1];
								var weight = vertices[b + 2];
								wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;
								wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;
								++v;
								b += 3;
							}
							world[w] = wx;
							world[w + 1] = wy;
							w += 2;
						}
					} else {
						var deform = deformArray;
						var w = 0;
						var b = skip * 3;
						var f = skip << 1;
						while(w < count) {
							var wx = 0;
							var wy = 0;
							var n = bones1[v++];
							n += v;
							while(v < n) {
								var result = skeletonBones[bones1[v]];
								var bone = result;
								var vx = vertices[b] + deform[f];
								var vy = vertices[b + 1] + deform[f + 1];
								var weight = vertices[b + 2];
								wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;
								wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;
								++v;
								b += 3;
								f += 2;
							}
							world[w] = wx;
							world[w + 1] = wy;
							w += 2;
						}
					}
				}
			}
			var this1 = this.curves;
			var len = this1.length;
			if(len > curveCount) {
				this1.splice(curveCount,curveCount - len);
			} else if(len < curveCount) {
				while(len < curveCount) {
					this1.push(0);
					++len;
				}
			}
			var curves = this1;
			var pathLength = 0;
			var x1 = world[0];
			var y1 = world[1];
			var cx1 = 0;
			var cy1 = 0;
			var cx2 = 0;
			var cy2 = 0;
			var x2 = 0;
			var y2 = 0;
			var tmpx = 0;
			var tmpy = 0;
			var dddfx = 0;
			var dddfy = 0;
			var ddfx = 0;
			var ddfy = 0;
			var dfx = 0;
			var dfy = 0;
			var i = 0;
			var w = 2;
			while(i < curveCount) {
				cx1 = world[w];
				cy1 = world[w + 1];
				cx2 = world[w + 2];
				cy2 = world[w + 3];
				x2 = world[w + 4];
				y2 = world[w + 5];
				tmpx = (x1 - cx1 * 2 + cx2) * 0.1875;
				tmpy = (y1 - cy1 * 2 + cy2) * 0.1875;
				dddfx = ((cx1 - cx2) * 3 - x1 + x2) * 0.09375;
				dddfy = ((cy1 - cy2) * 3 - y1 + y2) * 0.09375;
				ddfx = tmpx * 2 + dddfx;
				ddfy = tmpy * 2 + dddfy;
				dfx = (cx1 - x1) * 0.75 + tmpx + dddfx * 0.16666667;
				dfy = (cy1 - y1) * 0.75 + tmpy + dddfy * 0.16666667;
				pathLength += Math.sqrt(dfx * dfx + dfy * dfy);
				dfx += ddfx;
				dfy += ddfy;
				ddfx += dddfx;
				ddfy += dddfy;
				pathLength += Math.sqrt(dfx * dfx + dfy * dfy);
				dfx += ddfx;
				dfy += ddfy;
				pathLength += Math.sqrt(dfx * dfx + dfy * dfy);
				dfx += ddfx + dddfx;
				dfy += ddfy + dddfy;
				pathLength += Math.sqrt(dfx * dfx + dfy * dfy);
				curves[i] = pathLength;
				x1 = x2;
				y1 = y2;
				++i;
				w += 6;
			}
			if(this.data.positionMode == 1) {
				position *= pathLength;
			}
			var multiplier = 0;
			while(true) {
				var _switchCond2 = this.data.spacingMode;
				if(_switchCond2 == 2) {
					multiplier = pathLength;
					break;
				} else if(_switchCond2 == 3) {
					multiplier = pathLength / spacesCount;
					break;
				} else {
					multiplier = 1;
				}
				break;
			}
			var segments = this.segments;
			var curveLength = 0;
			var i = 0;
			var o = 0;
			var curve = 0;
			var segment = 0;
			while(i < spacesCount) {
				var space = spaces1[i] * multiplier;
				var p = position += space;
				if(closed) {
					p %= pathLength;
					if(p < 0) {
						p += pathLength;
					}
					curve = 0;
				} else if(p < 0) {
					var x11 = world[0];
					var y11 = world[1];
					var dx = world[2] - x11;
					var dy = world[3] - y11;
					var r = Math.atan2(dy,dx);
					out[o] = x11 + p * Math.cos(r);
					out[o + 1] = y11 + p * Math.sin(r);
					out[o + 2] = r;
					++i;
					o += 3;
					continue;
				} else if(p > pathLength) {
					var p1 = p - pathLength;
					var i1 = verticesLength - 4;
					var x12 = world[i1 + 2];
					var y12 = world[i1 + 3];
					var dx1 = x12 - world[i1];
					var dy1 = y12 - world[i1 + 1];
					var r1 = Math.atan2(dy1,dx1);
					out[o] = x12 + p1 * Math.cos(r1);
					out[o + 1] = y12 + p1 * Math.sin(r1);
					out[o + 2] = r1;
					++i;
					o += 3;
					continue;
				}
				while(true) {
					var length = curves[curve];
					if(p > length) {
						++curve;
						continue;
					}
					if(curve == 0) {
						p /= length;
					} else {
						var prev = curves[curve - 1];
						p = (p - prev) / (length - prev);
					}
					break;
				}
				if(curve != prevCurve) {
					prevCurve = curve;
					var ii = curve * 6;
					x1 = world[ii];
					y1 = world[ii + 1];
					cx1 = world[ii + 2];
					cy1 = world[ii + 3];
					cx2 = world[ii + 4];
					cy2 = world[ii + 5];
					x2 = world[ii + 6];
					y2 = world[ii + 7];
					tmpx = (x1 - cx1 * 2 + cx2) * 0.03;
					tmpy = (y1 - cy1 * 2 + cy2) * 0.03;
					dddfx = ((cx1 - cx2) * 3 - x1 + x2) * 0.006;
					dddfy = ((cy1 - cy2) * 3 - y1 + y2) * 0.006;
					ddfx = tmpx * 2 + dddfx;
					ddfy = tmpy * 2 + dddfy;
					dfx = (cx1 - x1) * 0.3 + tmpx + dddfx * 0.16666667;
					dfy = (cy1 - y1) * 0.3 + tmpy + dddfy * 0.16666667;
					curveLength = Math.sqrt(dfx * dfx + dfy * dfy);
					segments[0] = curveLength;
					ii = 1;
					while(ii < 8) {
						dfx += ddfx;
						dfy += ddfy;
						ddfx += dddfx;
						ddfy += dddfy;
						curveLength += Math.sqrt(dfx * dfx + dfy * dfy);
						segments[ii] = curveLength;
						++ii;
					}
					dfx += ddfx;
					dfy += ddfy;
					curveLength += Math.sqrt(dfx * dfx + dfy * dfy);
					segments[8] = curveLength;
					dfx += ddfx + dddfx;
					dfy += ddfy + dddfy;
					curveLength += Math.sqrt(dfx * dfx + dfy * dfy);
					segments[9] = curveLength;
					segment = 0;
				}
				p *= curveLength;
				while(true) {
					var length1 = segments[segment];
					if(p > length1) {
						++segment;
						continue;
					}
					if(segment == 0) {
						p /= length1;
					} else {
						var prev1 = segments[segment - 1];
						p = segment + (p - prev1) / (length1 - prev1);
					}
					break;
				}
				var p2 = p * 0.1;
				var tangents1 = tangents || i > 0 && space < spine_PathConstraint.epsilon;
				if(p2 < spine_PathConstraint.epsilon || isNaN(p2)) {
					out[o] = x1;
					out[o + 1] = y1;
					out[o + 2] = Math.atan2(cy1 - y1,cx1 - x1);
				} else {
					var tt = p2 * p2;
					var ttt = tt * p2;
					var u = 1 - p2;
					var uu = u * u;
					var uuu = uu * u;
					var ut = u * p2;
					var ut3 = ut * 3;
					var uut3 = u * ut3;
					var utt3 = ut3 * p2;
					var x = x1 * uuu + cx1 * uut3 + cx2 * utt3 + x2 * ttt;
					var y = y1 * uuu + cy1 * uut3 + cy2 * utt3 + y2 * ttt;
					out[o] = x;
					out[o + 1] = y;
					if(tangents1) {
						if(p2 < 0.001) {
							out[o + 2] = Math.atan2(cy1 - y1,cx1 - x1);
						} else {
							out[o + 2] = Math.atan2(y - (y1 * uu + cy1 * ut * 2 + cy2 * tt),x - (x1 * uu + cx1 * ut * 2 + cx2 * tt));
						}
					}
				}
				++i;
				o += 3;
			}
			positions = out;
		}
		var boneX = positions[0];
		var boneY = positions[1];
		var offsetRotation = data.offsetRotation;
		var tip = false;
		if(offsetRotation == 0) {
			tip = data.rotateMode == 1;
		} else {
			tip = false;
			var p = this.target.bone;
			offsetRotation *= p.a * p.d - p.b * p.c > 0 ? spine_utils_SpineUtils.degRad : -spine_utils_SpineUtils.degRad;
		}
		var i = 0;
		var p = 3;
		while(i < boneCount) {
			var result = bones[i];
			var bone = result;
			bone.worldX += (boneX - bone.worldX) * mixX;
			bone.worldY += (boneY - bone.worldY) * mixY;
			var x = positions[p];
			var y = positions[p + 1];
			var dx = x - boneX;
			var dy = y - boneY;
			if(scale) {
				var length = lengths[i];
				if(length >= spine_PathConstraint.epsilon) {
					var s = (Math.sqrt(dx * dx + dy * dy) / length - 1) * mixRotate + 1;
					bone.a *= s;
					bone.c *= s;
				}
			}
			boneX = x;
			boneY = y;
			if(mixRotate > 0) {
				var a = bone.a;
				var b = bone.b;
				var c = bone.c;
				var d = bone.d;
				var r = 0;
				var cos = 0;
				var sin = 0;
				if(tangents) {
					r = positions[p - 1];
				} else if(spaces[i + 1] < spine_PathConstraint.epsilon) {
					r = positions[p + 2];
				} else {
					r = Math.atan2(dy,dx);
				}
				r -= Math.atan2(c,a);
				if(tip) {
					cos = Math.cos(r);
					sin = Math.sin(r);
					var length1 = bone.data.length;
					boneX += (length1 * (cos * a - sin * c) - dx) * mixRotate;
					boneY += (length1 * (sin * a + cos * c) - dy) * mixRotate;
				} else {
					r += offsetRotation;
				}
				if(r > 3.1415927) {
					r -= 6.2831854;
				} else if(r < -3.1415927) {
					r += 6.2831854;
				}
				r *= mixRotate;
				cos = Math.cos(r);
				sin = Math.sin(r);
				bone.a = cos * a - sin * c;
				bone.b = cos * b - sin * d;
				bone.c = sin * a + cos * c;
				bone.d = sin * b + cos * d;
			}
			var parent = bone.parent;
			if(parent == null) {
				bone.ax = bone.worldX;
				bone.ay = bone.worldY;
				var a1 = bone.a;
				var b1 = bone.b;
				var c1 = bone.c;
				var d1 = bone.d;
				bone.arotation = Math.atan2(c1,a1) * spine_utils_SpineUtils.radDeg;
				bone.ascaleX = Math.sqrt(a1 * a1 + c1 * c1);
				bone.ascaleY = Math.sqrt(b1 * b1 + d1 * d1);
				bone.ashearX = 0;
				bone.ashearY = Math.atan2(a1 * b1 + c1 * d1,a1 * d1 - b1 * c1) * spine_utils_SpineUtils.radDeg;
			} else {
				var pa = parent.a;
				var pb = parent.b;
				var pc = parent.c;
				var pd = parent.d;
				var pid = 1 / (pa * pd - pb * pc);
				var dx1 = bone.worldX - parent.worldX;
				var dy1 = bone.worldY - parent.worldY;
				bone.ax = dx1 * pd * pid - dy1 * pb * pid;
				bone.ay = dy1 * pa * pid - dx1 * pc * pid;
				var ia = pid * pd;
				var id = pid * pa;
				var ib = pid * pb;
				var ic = pid * pc;
				var ra = ia * bone.a - ib * bone.c;
				var rb = ia * bone.b - ib * bone.d;
				var rc = id * bone.c - ic * bone.a;
				var rd = id * bone.d - ic * bone.b;
				bone.ashearX = 0;
				bone.ascaleX = Math.sqrt(ra * ra + rc * rc);
				if(bone.ascaleX > 0.0001) {
					var det = ra * rd - rb * rc;
					bone.ascaleY = det / bone.ascaleX;
					bone.ashearY = Math.atan2(ra * rb + rc * rd,det) * spine_utils_SpineUtils.radDeg;
					bone.arotation = Math.atan2(rc,ra) * spine_utils_SpineUtils.radDeg;
				} else {
					bone.ascaleX = 0;
					bone.ascaleY = Math.sqrt(rb * rb + rd * rd);
					bone.ashearY = 0;
					bone.arotation = 90 - Math.atan2(rd,rb) * spine_utils_SpineUtils.radDeg;
				}
			}
			++i;
			p += 3;
		}
	}
	,computeWorldPositions: function(path,spacesCount,tangents) {
		var target = this.target;
		var position = this.position;
		var spaces = this.spaces;
		var this1 = this.positions;
		var size = spacesCount * 3 + 2;
		var len = this1.length;
		if(len > size) {
			this1.splice(size,size - len);
		} else if(len < size) {
			while(len < size) {
				this1.push(0);
				++len;
			}
		}
		var out = this1;
		var world = null;
		var closed = path.closed;
		var verticesLength = path.worldVerticesLength;
		var curveCount = verticesLength / 6 | 0;
		var prevCurve = -1;
		if(!path.constantSpeed) {
			var lengths = path.lengths;
			curveCount -= closed ? 1 : 2;
			var pathLength = lengths[curveCount];
			if(this.data.positionMode == 1) {
				position *= pathLength;
			}
			var multiplier = 0;
			var _continueAfterSwitch1 = false;
			while(true) {
				var _switchCond1 = this.data.spacingMode;
				if(_switchCond1 == 2) {
					multiplier = pathLength;
					break;
				} else if(_switchCond1 == 3) {
					multiplier = pathLength / spacesCount;
					break;
				} else {
					multiplier = 1;
				}
				break;
			}
			var this1 = this.world;
			var len = this1.length;
			if(len > 8) {
				this1.splice(8,8 - len);
			} else if(len < 8) {
				while(len < 8) {
					this1.push(0);
					++len;
				}
			}
			world = this1;
			var i = 0;
			var o = 0;
			var curve = 0;
			while(i < spacesCount) {
				var space = spaces[i] * multiplier;
				var p = position += space;
				if(closed) {
					p %= pathLength;
					if(p < 0) {
						p += pathLength;
					}
					curve = 0;
				} else if(p < 0) {
					if(prevCurve != -2) {
						prevCurve = -2;
						var count = 4;
						count = (count >> 1) * 2;
						var deformArray = target.deform;
						var vertices = path.vertices;
						var bones = path.bones;
						if(bones == null) {
							if(deformArray.length > 0) {
								vertices = deformArray;
							}
							var bone = target.bone;
							var x = bone.worldX;
							var y = bone.worldY;
							var a = bone.a;
							var b = bone.b;
							var c = bone.c;
							var d = bone.d;
							var v = 2;
							var w = 0;
							while(w < count) {
								var vx = vertices[v];
								var vy = vertices[v + 1];
								world[w] = vx * a + vy * b + x;
								world[w + 1] = vx * c + vy * d + y;
								v += 2;
								w += 2;
							}
						} else {
							var v1 = 0;
							var skip = 0;
							var i1 = 0;
							while(i1 < 2) {
								var n = bones[v1];
								v1 += n + 1;
								skip += n;
								i1 += 2;
							}
							var skeletonBones = target.bone.skeleton.getBones();
							if(deformArray.length == 0) {
								var w1 = 0;
								var b1 = skip * 3;
								while(w1 < count) {
									var wx = 0;
									var wy = 0;
									var n1 = bones[v1++];
									n1 += v1;
									while(v1 < n1) {
										var result = skeletonBones[bones[v1]];
										var bone1 = result;
										var vx1 = vertices[b1];
										var vy1 = vertices[b1 + 1];
										var weight = vertices[b1 + 2];
										wx += (vx1 * bone1.a + vy1 * bone1.b + bone1.worldX) * weight;
										wy += (vx1 * bone1.c + vy1 * bone1.d + bone1.worldY) * weight;
										++v1;
										b1 += 3;
									}
									world[w1] = wx;
									world[w1 + 1] = wy;
									w1 += 2;
								}
							} else {
								var deform = deformArray;
								var w2 = 0;
								var b2 = skip * 3;
								var f = skip << 1;
								while(w2 < count) {
									var wx1 = 0;
									var wy1 = 0;
									var n2 = bones[v1++];
									n2 += v1;
									while(v1 < n2) {
										var result1 = skeletonBones[bones[v1]];
										var bone2 = result1;
										var vx2 = vertices[b2] + deform[f];
										var vy2 = vertices[b2 + 1] + deform[f + 1];
										var weight1 = vertices[b2 + 2];
										wx1 += (vx2 * bone2.a + vy2 * bone2.b + bone2.worldX) * weight1;
										wy1 += (vx2 * bone2.c + vy2 * bone2.d + bone2.worldY) * weight1;
										++v1;
										b2 += 3;
										f += 2;
									}
									world[w2] = wx1;
									world[w2 + 1] = wy1;
									w2 += 2;
								}
							}
						}
					}
					var x1 = world[0];
					var y1 = world[1];
					var dx = world[2] - x1;
					var dy = world[3] - y1;
					var r = Math.atan2(dy,dx);
					out[o] = x1 + p * Math.cos(r);
					out[o + 1] = y1 + p * Math.sin(r);
					out[o + 2] = r;
					++i;
					o += 3;
					continue;
				} else if(p > pathLength) {
					if(prevCurve != -3) {
						prevCurve = -3;
						var start = verticesLength - 6;
						var count1 = 4;
						count1 = (count1 >> 1) * 2;
						var deformArray1 = target.deform;
						var vertices1 = path.vertices;
						var bones1 = path.bones;
						if(bones1 == null) {
							if(deformArray1.length > 0) {
								vertices1 = deformArray1;
							}
							var bone3 = target.bone;
							var x2 = bone3.worldX;
							var y2 = bone3.worldY;
							var a1 = bone3.a;
							var b3 = bone3.b;
							var c1 = bone3.c;
							var d1 = bone3.d;
							var v2 = start;
							var w3 = 0;
							while(w3 < count1) {
								var vx3 = vertices1[v2];
								var vy3 = vertices1[v2 + 1];
								world[w3] = vx3 * a1 + vy3 * b3 + x2;
								world[w3 + 1] = vx3 * c1 + vy3 * d1 + y2;
								v2 += 2;
								w3 += 2;
							}
						} else {
							var v3 = 0;
							var skip1 = 0;
							var i2 = 0;
							while(i2 < start) {
								var n3 = bones1[v3];
								v3 += n3 + 1;
								skip1 += n3;
								i2 += 2;
							}
							var skeletonBones1 = target.bone.skeleton.getBones();
							if(deformArray1.length == 0) {
								var w4 = 0;
								var b4 = skip1 * 3;
								while(w4 < count1) {
									var wx2 = 0;
									var wy2 = 0;
									var n4 = bones1[v3++];
									n4 += v3;
									while(v3 < n4) {
										var result2 = skeletonBones1[bones1[v3]];
										var bone4 = result2;
										var vx4 = vertices1[b4];
										var vy4 = vertices1[b4 + 1];
										var weight2 = vertices1[b4 + 2];
										wx2 += (vx4 * bone4.a + vy4 * bone4.b + bone4.worldX) * weight2;
										wy2 += (vx4 * bone4.c + vy4 * bone4.d + bone4.worldY) * weight2;
										++v3;
										b4 += 3;
									}
									world[w4] = wx2;
									world[w4 + 1] = wy2;
									w4 += 2;
								}
							} else {
								var deform1 = deformArray1;
								var w5 = 0;
								var b5 = skip1 * 3;
								var f1 = skip1 << 1;
								while(w5 < count1) {
									var wx3 = 0;
									var wy3 = 0;
									var n5 = bones1[v3++];
									n5 += v3;
									while(v3 < n5) {
										var result3 = skeletonBones1[bones1[v3]];
										var bone5 = result3;
										var vx5 = vertices1[b5] + deform1[f1];
										var vy5 = vertices1[b5 + 1] + deform1[f1 + 1];
										var weight3 = vertices1[b5 + 2];
										wx3 += (vx5 * bone5.a + vy5 * bone5.b + bone5.worldX) * weight3;
										wy3 += (vx5 * bone5.c + vy5 * bone5.d + bone5.worldY) * weight3;
										++v3;
										b5 += 3;
										f1 += 2;
									}
									world[w5] = wx3;
									world[w5 + 1] = wy3;
									w5 += 2;
								}
							}
						}
					}
					var p1 = p - pathLength;
					var x11 = world[2];
					var y11 = world[3];
					var dx1 = x11 - world[0];
					var dy1 = y11 - world[1];
					var r1 = Math.atan2(dy1,dx1);
					out[o] = x11 + p1 * Math.cos(r1);
					out[o + 1] = y11 + p1 * Math.sin(r1);
					out[o + 2] = r1;
					++i;
					o += 3;
					continue;
				}
				while(true) {
					var length = lengths[curve];
					if(p > length) {
						++curve;
						continue;
					}
					if(curve == 0) {
						p /= length;
					} else {
						var prev = lengths[curve - 1];
						p = (p - prev) / (length - prev);
					}
					break;
				}
				if(curve != prevCurve) {
					prevCurve = curve;
					if(closed && curve == curveCount) {
						var start1 = verticesLength - 4;
						var count2 = 4;
						count2 = (count2 >> 1) * 2;
						var deformArray2 = target.deform;
						var vertices2 = path.vertices;
						var bones2 = path.bones;
						if(bones2 == null) {
							if(deformArray2.length > 0) {
								vertices2 = deformArray2;
							}
							var bone6 = target.bone;
							var x3 = bone6.worldX;
							var y3 = bone6.worldY;
							var a2 = bone6.a;
							var b6 = bone6.b;
							var c2 = bone6.c;
							var d2 = bone6.d;
							var v4 = start1;
							var w6 = 0;
							while(w6 < count2) {
								var vx6 = vertices2[v4];
								var vy6 = vertices2[v4 + 1];
								world[w6] = vx6 * a2 + vy6 * b6 + x3;
								world[w6 + 1] = vx6 * c2 + vy6 * d2 + y3;
								v4 += 2;
								w6 += 2;
							}
						} else {
							var v5 = 0;
							var skip2 = 0;
							var i3 = 0;
							while(i3 < start1) {
								var n6 = bones2[v5];
								v5 += n6 + 1;
								skip2 += n6;
								i3 += 2;
							}
							var skeletonBones2 = target.bone.skeleton.getBones();
							if(deformArray2.length == 0) {
								var w7 = 0;
								var b7 = skip2 * 3;
								while(w7 < count2) {
									var wx4 = 0;
									var wy4 = 0;
									var n7 = bones2[v5++];
									n7 += v5;
									while(v5 < n7) {
										var result4 = skeletonBones2[bones2[v5]];
										var bone7 = result4;
										var vx7 = vertices2[b7];
										var vy7 = vertices2[b7 + 1];
										var weight4 = vertices2[b7 + 2];
										wx4 += (vx7 * bone7.a + vy7 * bone7.b + bone7.worldX) * weight4;
										wy4 += (vx7 * bone7.c + vy7 * bone7.d + bone7.worldY) * weight4;
										++v5;
										b7 += 3;
									}
									world[w7] = wx4;
									world[w7 + 1] = wy4;
									w7 += 2;
								}
							} else {
								var deform2 = deformArray2;
								var w8 = 0;
								var b8 = skip2 * 3;
								var f2 = skip2 << 1;
								while(w8 < count2) {
									var wx5 = 0;
									var wy5 = 0;
									var n8 = bones2[v5++];
									n8 += v5;
									while(v5 < n8) {
										var result5 = skeletonBones2[bones2[v5]];
										var bone8 = result5;
										var vx8 = vertices2[b8] + deform2[f2];
										var vy8 = vertices2[b8 + 1] + deform2[f2 + 1];
										var weight5 = vertices2[b8 + 2];
										wx5 += (vx8 * bone8.a + vy8 * bone8.b + bone8.worldX) * weight5;
										wy5 += (vx8 * bone8.c + vy8 * bone8.d + bone8.worldY) * weight5;
										++v5;
										b8 += 3;
										f2 += 2;
									}
									world[w8] = wx5;
									world[w8 + 1] = wy5;
									w8 += 2;
								}
							}
						}
						var count3 = 4;
						count3 = 4 + (count3 >> 1) * 2;
						var deformArray3 = target.deform;
						var vertices3 = path.vertices;
						var bones3 = path.bones;
						if(bones3 == null) {
							if(deformArray3.length > 0) {
								vertices3 = deformArray3;
							}
							var bone9 = target.bone;
							var x4 = bone9.worldX;
							var y4 = bone9.worldY;
							var a3 = bone9.a;
							var b9 = bone9.b;
							var c3 = bone9.c;
							var d3 = bone9.d;
							var v6 = 0;
							var w9 = 4;
							while(w9 < count3) {
								var vx9 = vertices3[v6];
								var vy9 = vertices3[v6 + 1];
								world[w9] = vx9 * a3 + vy9 * b9 + x4;
								world[w9 + 1] = vx9 * c3 + vy9 * d3 + y4;
								v6 += 2;
								w9 += 2;
							}
						} else {
							var v7 = 0;
							var skip3 = 0;
							var i4 = 0;
							while(i4 < 0) {
								var n9 = bones3[v7];
								v7 += n9 + 1;
								skip3 += n9;
								i4 += 2;
							}
							var skeletonBones3 = target.bone.skeleton.getBones();
							if(deformArray3.length == 0) {
								var w10 = 4;
								var b10 = skip3 * 3;
								while(w10 < count3) {
									var wx6 = 0;
									var wy6 = 0;
									var n10 = bones3[v7++];
									n10 += v7;
									while(v7 < n10) {
										var result6 = skeletonBones3[bones3[v7]];
										var bone10 = result6;
										var vx10 = vertices3[b10];
										var vy10 = vertices3[b10 + 1];
										var weight6 = vertices3[b10 + 2];
										wx6 += (vx10 * bone10.a + vy10 * bone10.b + bone10.worldX) * weight6;
										wy6 += (vx10 * bone10.c + vy10 * bone10.d + bone10.worldY) * weight6;
										++v7;
										b10 += 3;
									}
									world[w10] = wx6;
									world[w10 + 1] = wy6;
									w10 += 2;
								}
							} else {
								var deform3 = deformArray3;
								var w11 = 4;
								var b11 = skip3 * 3;
								var f3 = skip3 << 1;
								while(w11 < count3) {
									var wx7 = 0;
									var wy7 = 0;
									var n11 = bones3[v7++];
									n11 += v7;
									while(v7 < n11) {
										var result7 = skeletonBones3[bones3[v7]];
										var bone11 = result7;
										var vx11 = vertices3[b11] + deform3[f3];
										var vy11 = vertices3[b11 + 1] + deform3[f3 + 1];
										var weight7 = vertices3[b11 + 2];
										wx7 += (vx11 * bone11.a + vy11 * bone11.b + bone11.worldX) * weight7;
										wy7 += (vx11 * bone11.c + vy11 * bone11.d + bone11.worldY) * weight7;
										++v7;
										b11 += 3;
										f3 += 2;
									}
									world[w11] = wx7;
									world[w11 + 1] = wy7;
									w11 += 2;
								}
							}
						}
					} else {
						var start2 = curve * 6 + 2;
						var count4 = 8;
						count4 = (count4 >> 1) * 2;
						var deformArray4 = target.deform;
						var vertices4 = path.vertices;
						var bones4 = path.bones;
						if(bones4 == null) {
							if(deformArray4.length > 0) {
								vertices4 = deformArray4;
							}
							var bone12 = target.bone;
							var x5 = bone12.worldX;
							var y5 = bone12.worldY;
							var a4 = bone12.a;
							var b12 = bone12.b;
							var c4 = bone12.c;
							var d4 = bone12.d;
							var v8 = start2;
							var w12 = 0;
							while(w12 < count4) {
								var vx12 = vertices4[v8];
								var vy12 = vertices4[v8 + 1];
								world[w12] = vx12 * a4 + vy12 * b12 + x5;
								world[w12 + 1] = vx12 * c4 + vy12 * d4 + y5;
								v8 += 2;
								w12 += 2;
							}
						} else {
							var v9 = 0;
							var skip4 = 0;
							var i5 = 0;
							while(i5 < start2) {
								var n12 = bones4[v9];
								v9 += n12 + 1;
								skip4 += n12;
								i5 += 2;
							}
							var skeletonBones4 = target.bone.skeleton.getBones();
							if(deformArray4.length == 0) {
								var w13 = 0;
								var b13 = skip4 * 3;
								while(w13 < count4) {
									var wx8 = 0;
									var wy8 = 0;
									var n13 = bones4[v9++];
									n13 += v9;
									while(v9 < n13) {
										var result8 = skeletonBones4[bones4[v9]];
										var bone13 = result8;
										var vx13 = vertices4[b13];
										var vy13 = vertices4[b13 + 1];
										var weight8 = vertices4[b13 + 2];
										wx8 += (vx13 * bone13.a + vy13 * bone13.b + bone13.worldX) * weight8;
										wy8 += (vx13 * bone13.c + vy13 * bone13.d + bone13.worldY) * weight8;
										++v9;
										b13 += 3;
									}
									world[w13] = wx8;
									world[w13 + 1] = wy8;
									w13 += 2;
								}
							} else {
								var deform4 = deformArray4;
								var w14 = 0;
								var b14 = skip4 * 3;
								var f4 = skip4 << 1;
								while(w14 < count4) {
									var wx9 = 0;
									var wy9 = 0;
									var n14 = bones4[v9++];
									n14 += v9;
									while(v9 < n14) {
										var result9 = skeletonBones4[bones4[v9]];
										var bone14 = result9;
										var vx14 = vertices4[b14] + deform4[f4];
										var vy14 = vertices4[b14 + 1] + deform4[f4 + 1];
										var weight9 = vertices4[b14 + 2];
										wx9 += (vx14 * bone14.a + vy14 * bone14.b + bone14.worldX) * weight9;
										wy9 += (vx14 * bone14.c + vy14 * bone14.d + bone14.worldY) * weight9;
										++v9;
										b14 += 3;
										f4 += 2;
									}
									world[w14] = wx9;
									world[w14 + 1] = wy9;
									w14 += 2;
								}
							}
						}
					}
				}
				var x12 = world[0];
				var y12 = world[1];
				var cx1 = world[2];
				var cy1 = world[3];
				var cx2 = world[4];
				var cy2 = world[5];
				var tangents1 = tangents || i > 0 && space < spine_PathConstraint.epsilon;
				if(p < spine_PathConstraint.epsilon || isNaN(p)) {
					out[o] = x12;
					out[o + 1] = y12;
					out[o + 2] = Math.atan2(cy1 - y12,cx1 - x12);
				} else {
					var tt = p * p;
					var ttt = tt * p;
					var u = 1 - p;
					var uu = u * u;
					var uuu = uu * u;
					var ut = u * p;
					var ut3 = ut * 3;
					var uut3 = u * ut3;
					var utt3 = ut3 * p;
					var x6 = x12 * uuu + cx1 * uut3 + cx2 * utt3 + world[6] * ttt;
					var y6 = y12 * uuu + cy1 * uut3 + cy2 * utt3 + world[7] * ttt;
					out[o] = x6;
					out[o + 1] = y6;
					if(tangents1) {
						if(p < 0.001) {
							out[o + 2] = Math.atan2(cy1 - y12,cx1 - x12);
						} else {
							out[o + 2] = Math.atan2(y6 - (y12 * uu + cy1 * ut * 2 + cy2 * tt),x6 - (x12 * uu + cx1 * ut * 2 + cx2 * tt));
						}
					}
				}
				++i;
				o += 3;
			}
			return out;
		}
		if(closed) {
			verticesLength += 2;
			var this1 = this.world;
			var len = this1.length;
			if(len > verticesLength) {
				this1.splice(verticesLength,verticesLength - len);
			} else if(len < verticesLength) {
				while(len < verticesLength) {
					this1.push(0);
					++len;
				}
			}
			world = this1;
			var count = verticesLength - 4;
			count = (count >> 1) * 2;
			var deformArray = target.deform;
			var vertices = path.vertices;
			var bones = path.bones;
			if(bones == null) {
				if(deformArray.length > 0) {
					vertices = deformArray;
				}
				var bone = target.bone;
				var x = bone.worldX;
				var y = bone.worldY;
				var a = bone.a;
				var b = bone.b;
				var c = bone.c;
				var d = bone.d;
				var v = 2;
				var w = 0;
				while(w < count) {
					var vx = vertices[v];
					var vy = vertices[v + 1];
					world[w] = vx * a + vy * b + x;
					world[w + 1] = vx * c + vy * d + y;
					v += 2;
					w += 2;
				}
			} else {
				var v = 0;
				var skip = 0;
				var i = 0;
				while(i < 2) {
					var n = bones[v];
					v += n + 1;
					skip += n;
					i += 2;
				}
				var skeletonBones = target.bone.skeleton.getBones();
				if(deformArray.length == 0) {
					var w = 0;
					var b = skip * 3;
					while(w < count) {
						var wx = 0;
						var wy = 0;
						var n = bones[v++];
						n += v;
						while(v < n) {
							var result = skeletonBones[bones[v]];
							var bone = result;
							var vx = vertices[b];
							var vy = vertices[b + 1];
							var weight = vertices[b + 2];
							wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;
							wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;
							++v;
							b += 3;
						}
						world[w] = wx;
						world[w + 1] = wy;
						w += 2;
					}
				} else {
					var deform = deformArray;
					var w = 0;
					var b = skip * 3;
					var f = skip << 1;
					while(w < count) {
						var wx = 0;
						var wy = 0;
						var n = bones[v++];
						n += v;
						while(v < n) {
							var result = skeletonBones[bones[v]];
							var bone = result;
							var vx = vertices[b] + deform[f];
							var vy = vertices[b + 1] + deform[f + 1];
							var weight = vertices[b + 2];
							wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;
							wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;
							++v;
							b += 3;
							f += 2;
						}
						world[w] = wx;
						world[w + 1] = wy;
						w += 2;
					}
				}
			}
			var count = 2;
			var offset = verticesLength - 4;
			count = offset + (count >> 1) * 2;
			var deformArray = target.deform;
			var vertices = path.vertices;
			var bones = path.bones;
			if(bones == null) {
				if(deformArray.length > 0) {
					vertices = deformArray;
				}
				var bone = target.bone;
				var x = bone.worldX;
				var y = bone.worldY;
				var a = bone.a;
				var b = bone.b;
				var c = bone.c;
				var d = bone.d;
				var v = 0;
				var w = offset;
				while(w < count) {
					var vx = vertices[v];
					var vy = vertices[v + 1];
					world[w] = vx * a + vy * b + x;
					world[w + 1] = vx * c + vy * d + y;
					v += 2;
					w += 2;
				}
			} else {
				var v = 0;
				var skip = 0;
				var i = 0;
				while(i < 0) {
					var n = bones[v];
					v += n + 1;
					skip += n;
					i += 2;
				}
				var skeletonBones = target.bone.skeleton.getBones();
				if(deformArray.length == 0) {
					var w = offset;
					var b = skip * 3;
					while(w < count) {
						var wx = 0;
						var wy = 0;
						var n = bones[v++];
						n += v;
						while(v < n) {
							var result = skeletonBones[bones[v]];
							var bone = result;
							var vx = vertices[b];
							var vy = vertices[b + 1];
							var weight = vertices[b + 2];
							wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;
							wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;
							++v;
							b += 3;
						}
						world[w] = wx;
						world[w + 1] = wy;
						w += 2;
					}
				} else {
					var deform = deformArray;
					var w = offset;
					var b = skip * 3;
					var f = skip << 1;
					while(w < count) {
						var wx = 0;
						var wy = 0;
						var n = bones[v++];
						n += v;
						while(v < n) {
							var result = skeletonBones[bones[v]];
							var bone = result;
							var vx = vertices[b] + deform[f];
							var vy = vertices[b + 1] + deform[f + 1];
							var weight = vertices[b + 2];
							wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;
							wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;
							++v;
							b += 3;
							f += 2;
						}
						world[w] = wx;
						world[w + 1] = wy;
						w += 2;
					}
				}
			}
			world[verticesLength - 2] = world[0];
			world[verticesLength - 1] = world[1];
		} else {
			--curveCount;
			verticesLength -= 4;
			var this1 = this.world;
			var len = this1.length;
			if(len > verticesLength) {
				this1.splice(verticesLength,verticesLength - len);
			} else if(len < verticesLength) {
				while(len < verticesLength) {
					this1.push(0);
					++len;
				}
			}
			world = this1;
			var count = verticesLength;
			count = (count >> 1) * 2;
			var deformArray = target.deform;
			var vertices = path.vertices;
			var bones = path.bones;
			if(bones == null) {
				if(deformArray.length > 0) {
					vertices = deformArray;
				}
				var bone = target.bone;
				var x = bone.worldX;
				var y = bone.worldY;
				var a = bone.a;
				var b = bone.b;
				var c = bone.c;
				var d = bone.d;
				var v = 2;
				var w = 0;
				while(w < count) {
					var vx = vertices[v];
					var vy = vertices[v + 1];
					world[w] = vx * a + vy * b + x;
					world[w + 1] = vx * c + vy * d + y;
					v += 2;
					w += 2;
				}
			} else {
				var v = 0;
				var skip = 0;
				var i = 0;
				while(i < 2) {
					var n = bones[v];
					v += n + 1;
					skip += n;
					i += 2;
				}
				var skeletonBones = target.bone.skeleton.getBones();
				if(deformArray.length == 0) {
					var w = 0;
					var b = skip * 3;
					while(w < count) {
						var wx = 0;
						var wy = 0;
						var n = bones[v++];
						n += v;
						while(v < n) {
							var result = skeletonBones[bones[v]];
							var bone = result;
							var vx = vertices[b];
							var vy = vertices[b + 1];
							var weight = vertices[b + 2];
							wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;
							wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;
							++v;
							b += 3;
						}
						world[w] = wx;
						world[w + 1] = wy;
						w += 2;
					}
				} else {
					var deform = deformArray;
					var w = 0;
					var b = skip * 3;
					var f = skip << 1;
					while(w < count) {
						var wx = 0;
						var wy = 0;
						var n = bones[v++];
						n += v;
						while(v < n) {
							var result = skeletonBones[bones[v]];
							var bone = result;
							var vx = vertices[b] + deform[f];
							var vy = vertices[b + 1] + deform[f + 1];
							var weight = vertices[b + 2];
							wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;
							wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;
							++v;
							b += 3;
							f += 2;
						}
						world[w] = wx;
						world[w + 1] = wy;
						w += 2;
					}
				}
			}
		}
		var this1 = this.curves;
		var len = this1.length;
		if(len > curveCount) {
			this1.splice(curveCount,curveCount - len);
		} else if(len < curveCount) {
			while(len < curveCount) {
				this1.push(0);
				++len;
			}
		}
		var curves = this1;
		var pathLength = 0;
		var x1 = world[0];
		var y1 = world[1];
		var cx1 = 0;
		var cy1 = 0;
		var cx2 = 0;
		var cy2 = 0;
		var x2 = 0;
		var y2 = 0;
		var tmpx = 0;
		var tmpy = 0;
		var dddfx = 0;
		var dddfy = 0;
		var ddfx = 0;
		var ddfy = 0;
		var dfx = 0;
		var dfy = 0;
		var i = 0;
		var w = 2;
		while(i < curveCount) {
			cx1 = world[w];
			cy1 = world[w + 1];
			cx2 = world[w + 2];
			cy2 = world[w + 3];
			x2 = world[w + 4];
			y2 = world[w + 5];
			tmpx = (x1 - cx1 * 2 + cx2) * 0.1875;
			tmpy = (y1 - cy1 * 2 + cy2) * 0.1875;
			dddfx = ((cx1 - cx2) * 3 - x1 + x2) * 0.09375;
			dddfy = ((cy1 - cy2) * 3 - y1 + y2) * 0.09375;
			ddfx = tmpx * 2 + dddfx;
			ddfy = tmpy * 2 + dddfy;
			dfx = (cx1 - x1) * 0.75 + tmpx + dddfx * 0.16666667;
			dfy = (cy1 - y1) * 0.75 + tmpy + dddfy * 0.16666667;
			pathLength += Math.sqrt(dfx * dfx + dfy * dfy);
			dfx += ddfx;
			dfy += ddfy;
			ddfx += dddfx;
			ddfy += dddfy;
			pathLength += Math.sqrt(dfx * dfx + dfy * dfy);
			dfx += ddfx;
			dfy += ddfy;
			pathLength += Math.sqrt(dfx * dfx + dfy * dfy);
			dfx += ddfx + dddfx;
			dfy += ddfy + dddfy;
			pathLength += Math.sqrt(dfx * dfx + dfy * dfy);
			curves[i] = pathLength;
			x1 = x2;
			y1 = y2;
			++i;
			w += 6;
		}
		if(this.data.positionMode == 1) {
			position *= pathLength;
		}
		var multiplier = 0;
		var _continueAfterSwitch2 = false;
		while(true) {
			var _switchCond2 = this.data.spacingMode;
			if(_switchCond2 == 2) {
				multiplier = pathLength;
				break;
			} else if(_switchCond2 == 3) {
				multiplier = pathLength / spacesCount;
				break;
			} else {
				multiplier = 1;
			}
			break;
		}
		var segments = this.segments;
		var curveLength = 0;
		var i = 0;
		var o = 0;
		var curve = 0;
		var segment = 0;
		while(i < spacesCount) {
			var space = spaces[i] * multiplier;
			var p = position += space;
			if(closed) {
				p %= pathLength;
				if(p < 0) {
					p += pathLength;
				}
				curve = 0;
			} else if(p < 0) {
				var x11 = world[0];
				var y11 = world[1];
				var dx = world[2] - x11;
				var dy = world[3] - y11;
				var r = Math.atan2(dy,dx);
				out[o] = x11 + p * Math.cos(r);
				out[o + 1] = y11 + p * Math.sin(r);
				out[o + 2] = r;
				++i;
				o += 3;
				continue;
			} else if(p > pathLength) {
				var p1 = p - pathLength;
				var i1 = verticesLength - 4;
				var x12 = world[i1 + 2];
				var y12 = world[i1 + 3];
				var dx1 = x12 - world[i1];
				var dy1 = y12 - world[i1 + 1];
				var r1 = Math.atan2(dy1,dx1);
				out[o] = x12 + p1 * Math.cos(r1);
				out[o + 1] = y12 + p1 * Math.sin(r1);
				out[o + 2] = r1;
				++i;
				o += 3;
				continue;
			}
			while(true) {
				var length = curves[curve];
				if(p > length) {
					++curve;
					continue;
				}
				if(curve == 0) {
					p /= length;
				} else {
					var prev = curves[curve - 1];
					p = (p - prev) / (length - prev);
				}
				break;
			}
			if(curve != prevCurve) {
				prevCurve = curve;
				var ii = curve * 6;
				x1 = world[ii];
				y1 = world[ii + 1];
				cx1 = world[ii + 2];
				cy1 = world[ii + 3];
				cx2 = world[ii + 4];
				cy2 = world[ii + 5];
				x2 = world[ii + 6];
				y2 = world[ii + 7];
				tmpx = (x1 - cx1 * 2 + cx2) * 0.03;
				tmpy = (y1 - cy1 * 2 + cy2) * 0.03;
				dddfx = ((cx1 - cx2) * 3 - x1 + x2) * 0.006;
				dddfy = ((cy1 - cy2) * 3 - y1 + y2) * 0.006;
				ddfx = tmpx * 2 + dddfx;
				ddfy = tmpy * 2 + dddfy;
				dfx = (cx1 - x1) * 0.3 + tmpx + dddfx * 0.16666667;
				dfy = (cy1 - y1) * 0.3 + tmpy + dddfy * 0.16666667;
				curveLength = Math.sqrt(dfx * dfx + dfy * dfy);
				segments[0] = curveLength;
				ii = 1;
				while(ii < 8) {
					dfx += ddfx;
					dfy += ddfy;
					ddfx += dddfx;
					ddfy += dddfy;
					curveLength += Math.sqrt(dfx * dfx + dfy * dfy);
					segments[ii] = curveLength;
					++ii;
				}
				dfx += ddfx;
				dfy += ddfy;
				curveLength += Math.sqrt(dfx * dfx + dfy * dfy);
				segments[8] = curveLength;
				dfx += ddfx + dddfx;
				dfy += ddfy + dddfy;
				curveLength += Math.sqrt(dfx * dfx + dfy * dfy);
				segments[9] = curveLength;
				segment = 0;
			}
			p *= curveLength;
			while(true) {
				var length1 = segments[segment];
				if(p > length1) {
					++segment;
					continue;
				}
				if(segment == 0) {
					p /= length1;
				} else {
					var prev1 = segments[segment - 1];
					p = segment + (p - prev1) / (length1 - prev1);
				}
				break;
			}
			var p2 = p * 0.1;
			var tangents1 = tangents || i > 0 && space < spine_PathConstraint.epsilon;
			if(p2 < spine_PathConstraint.epsilon || isNaN(p2)) {
				out[o] = x1;
				out[o + 1] = y1;
				out[o + 2] = Math.atan2(cy1 - y1,cx1 - x1);
			} else {
				var tt = p2 * p2;
				var ttt = tt * p2;
				var u = 1 - p2;
				var uu = u * u;
				var uuu = uu * u;
				var ut = u * p2;
				var ut3 = ut * 3;
				var uut3 = u * ut3;
				var utt3 = ut3 * p2;
				var x = x1 * uuu + cx1 * uut3 + cx2 * utt3 + x2 * ttt;
				var y = y1 * uuu + cy1 * uut3 + cy2 * utt3 + y2 * ttt;
				out[o] = x;
				out[o + 1] = y;
				if(tangents1) {
					if(p2 < 0.001) {
						out[o + 2] = Math.atan2(cy1 - y1,cx1 - x1);
					} else {
						out[o + 2] = Math.atan2(y - (y1 * uu + cy1 * ut * 2 + cy2 * tt),x - (x1 * uu + cx1 * ut * 2 + cx2 * tt));
					}
				}
			}
			++i;
			o += 3;
		}
		return out;
	}
	,addBeforePosition: function(p,temp,i,out,o) {
		var x1 = temp[i];
		var y1 = temp[i + 1];
		var dx = temp[i + 2] - x1;
		var dy = temp[i + 3] - y1;
		var r = Math.atan2(dy,dx);
		out[o] = x1 + p * Math.cos(r);
		out[o + 1] = y1 + p * Math.sin(r);
		out[o + 2] = r;
	}
	,addAfterPosition: function(p,temp,i,out,o) {
		var x1 = temp[i + 2];
		var y1 = temp[i + 3];
		var dx = x1 - temp[i];
		var dy = y1 - temp[i + 1];
		var r = Math.atan2(dy,dx);
		out[o] = x1 + p * Math.cos(r);
		out[o + 1] = y1 + p * Math.sin(r);
		out[o + 2] = r;
	}
	,addCurvePosition: function(p,x1,y1,cx1,cy1,cx2,cy2,x2,y2,out,o,tangents) {
		if(p < spine_PathConstraint.epsilon || isNaN(p)) {
			out[o] = x1;
			out[o + 1] = y1;
			out[o + 2] = Math.atan2(cy1 - y1,cx1 - x1);
			return;
		}
		var tt = p * p;
		var ttt = tt * p;
		var u = 1 - p;
		var uu = u * u;
		var uuu = uu * u;
		var ut = u * p;
		var ut3 = ut * 3;
		var uut3 = u * ut3;
		var utt3 = ut3 * p;
		var x = x1 * uuu + cx1 * uut3 + cx2 * utt3 + x2 * ttt;
		var y = y1 * uuu + cy1 * uut3 + cy2 * utt3 + y2 * ttt;
		out[o] = x;
		out[o + 1] = y;
		if(tangents) {
			if(p < 0.001) {
				out[o + 2] = Math.atan2(cy1 - y1,cx1 - x1);
			} else {
				out[o + 2] = Math.atan2(y - (y1 * uu + cy1 * ut * 2 + cy2 * tt),x - (x1 * uu + cx1 * ut * 2 + cx2 * tt));
			}
		}
	}
	,getPosition: function() {
		return this.position;
	}
	,setPosition: function(position) {
		this.position = position;
	}
	,getSpacing: function() {
		return this.spacing;
	}
	,setSpacing: function(spacing) {
		this.spacing = spacing;
	}
	,getMixRotate: function() {
		return this.mixRotate;
	}
	,setMixRotate: function(mixRotate) {
		this.mixRotate = mixRotate;
	}
	,getMixX: function() {
		return this.mixX;
	}
	,setMixX: function(mixX) {
		this.mixX = mixX;
	}
	,getMixY: function() {
		return this.mixY;
	}
	,setMixY: function(mixY) {
		this.mixY = mixY;
	}
	,getBones: function() {
		return this.bones;
	}
	,getTarget: function() {
		return this.target;
	}
	,setTarget: function(target) {
		if(target == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("target cannot be null."));
		}
		this.target = target;
	}
	,isActive: function() {
		return this.active;
	}
	,getData: function() {
		return this.data;
	}
	,toString: function() {
		return this.data.name;
	}
	,__class__: spine_PathConstraint
};
var spine_PathConstraintData = function(name) {
	this.mixY = 0;
	this.mixX = 0;
	this.mixRotate = 0;
	this.spacing = 0;
	this.position = 0;
	this.offsetRotation = 0;
	var this1 = [];
	this.bones = this1;
	spine_ConstraintData.call(this,name);
};
$hxClasses["spine.PathConstraintData"] = spine_PathConstraintData;
spine_PathConstraintData.__name__ = "spine.PathConstraintData";
spine_PathConstraintData.__super__ = spine_ConstraintData;
spine_PathConstraintData.prototype = $extend(spine_ConstraintData.prototype,{
	getBones: function() {
		return this.bones;
	}
	,getTarget: function() {
		return this.target;
	}
	,setTarget: function(target) {
		if(target == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("target cannot be null."));
		}
		this.target = target;
	}
	,getPositionMode: function() {
		return this.positionMode;
	}
	,setPositionMode: function(positionMode) {
		this.positionMode = positionMode;
	}
	,getSpacingMode: function() {
		return this.spacingMode;
	}
	,setSpacingMode: function(spacingMode) {
		this.spacingMode = spacingMode;
	}
	,getRotateMode: function() {
		return this.rotateMode;
	}
	,setRotateMode: function(rotateMode) {
		this.rotateMode = rotateMode;
	}
	,getOffsetRotation: function() {
		return this.offsetRotation;
	}
	,setOffsetRotation: function(offsetRotation) {
		this.offsetRotation = offsetRotation;
	}
	,getPosition: function() {
		return this.position;
	}
	,setPosition: function(position) {
		this.position = position;
	}
	,getSpacing: function() {
		return this.spacing;
	}
	,setSpacing: function(spacing) {
		this.spacing = spacing;
	}
	,getMixRotate: function() {
		return this.mixRotate;
	}
	,setMixRotate: function(mixRotate) {
		this.mixRotate = mixRotate;
	}
	,getMixX: function() {
		return this.mixX;
	}
	,setMixX: function(mixX) {
		this.mixX = mixX;
	}
	,getMixY: function() {
		return this.mixY;
	}
	,setMixY: function(mixY) {
		this.mixY = mixY;
	}
	,__class__: spine_PathConstraintData
});
var spine_PositionMode_$enum = function() { };
$hxClasses["spine.PositionMode_enum"] = spine_PositionMode_$enum;
spine_PositionMode_$enum.__name__ = "spine.PositionMode_enum";
spine_PositionMode_$enum.valueOf = function(value) {
	switch(value) {
	case "fixed":
		return 0;
	case "percent":
		return 1;
	default:
		return 0;
	}
};
var spine_SpacingMode_$enum = function() { };
$hxClasses["spine.SpacingMode_enum"] = spine_SpacingMode_$enum;
spine_SpacingMode_$enum.__name__ = "spine.SpacingMode_enum";
spine_SpacingMode_$enum.valueOf = function(value) {
	switch(value) {
	case "fixed":
		return 1;
	case "length":
		return 0;
	case "percent":
		return 2;
	case "proportional":
		return 3;
	default:
		return 0;
	}
};
var spine_RotateMode_$enum = function() { };
$hxClasses["spine.RotateMode_enum"] = spine_RotateMode_$enum;
spine_RotateMode_$enum.__name__ = "spine.RotateMode_enum";
spine_RotateMode_$enum.valueOf = function(value) {
	switch(value) {
	case "chain":
		return 1;
	case "chainScale":
		return 2;
	case "tangent":
		return 0;
	default:
		return 0;
	}
};
var spine_Skeleton = function(data) {
	this.y = 0;
	this.x = 0;
	this.scaleY = 1;
	this.scaleX = 1;
	this.time = 0;
	var this1 = [];
	this.cache = this1;
	if(data == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("data cannot be null."));
	}
	this.data = data;
	var capacity = data.bones.length;
	var this1 = [];
	this.bones = this1;
	var bones = this.bones;
	var _g = 0;
	var _g1 = data.bones;
	while(_g < _g1.length) {
		var boneData = _g1[_g];
		++_g;
		var bone = null;
		if(boneData.parent == null) {
			bone = new spine_Bone(boneData,this,null);
		} else {
			var result = bones[boneData.parent.index];
			var parent = result;
			bone = new spine_Bone(boneData,this,parent);
			parent.children.push(bone);
		}
		this.bones.push(bone);
	}
	var capacity = data.slots.length;
	var this1 = [];
	this.slots = this1;
	var capacity = data.slots.length;
	var this1 = [];
	this.drawOrder = this1;
	var _g = 0;
	var _g1 = data.slots;
	while(_g < _g1.length) {
		var slotData = _g1[_g];
		++_g;
		var result = bones[slotData.boneData.index];
		var bone = result;
		var slot = new spine_Slot(slotData,bone);
		this.slots.push(slot);
		this.drawOrder.push(slot);
	}
	var capacity = data.ikConstraints.length;
	var this1 = [];
	this.ikConstraints = this1;
	var _g = 0;
	var _g1 = data.ikConstraints;
	while(_g < _g1.length) {
		var ikConstraintData = _g1[_g];
		++_g;
		this.ikConstraints.push(new spine_IkConstraint(ikConstraintData,this));
	}
	var capacity = data.transformConstraints.length;
	var this1 = [];
	this.transformConstraints = this1;
	var _g = 0;
	var _g1 = data.transformConstraints;
	while(_g < _g1.length) {
		var transformConstraintData = _g1[_g];
		++_g;
		this.transformConstraints.push(new spine_TransformConstraint(transformConstraintData,this));
	}
	var capacity = data.pathConstraints.length;
	var this1 = [];
	this.pathConstraints = this1;
	var _g = 0;
	var _g1 = data.pathConstraints;
	while(_g < _g1.length) {
		var pathConstraintData = _g1[_g];
		++_g;
		this.pathConstraints.push(new spine_PathConstraint(pathConstraintData,this));
	}
	this.color = new spine_support_graphics_Color(1,1,1,1);
	var cache = this.cache;
	cache.splice(0,cache.length);
	var boneCount = this.bones.length;
	var bones = this.bones;
	var i = 0;
	while(i < boneCount) {
		var result = bones[i];
		var bone = result;
		bone.sorted = bone.data.skinRequired;
		bone.active = !bone.sorted;
		++i;
	}
	if(this.skin != null) {
		var skinBones = this.skin.bones;
		var i = 0;
		var n = this.skin.bones.length;
		while(i < n) {
			var result = skinBones[i];
			var result1 = bones[result.index];
			var bone = result1;
			while(true) {
				bone.sorted = false;
				bone.active = true;
				bone = bone.parent;
				if(bone == null) {
					break;
				}
			}
			++i;
		}
	}
	var ikCount = this.ikConstraints.length;
	var transformCount = this.transformConstraints.length;
	var pathCount = this.pathConstraints.length;
	var ikConstraints = this.ikConstraints;
	var transformConstraints = this.transformConstraints;
	var pathConstraints = this.pathConstraints;
	var constraintCount = ikCount + transformCount + pathCount;
	var _gotoLabel_outer;
	while(true) {
		_gotoLabel_outer = 0;
		var i = 0;
		while(i < constraintCount) {
			var ii = 0;
			while(ii < ikCount) {
				var result = ikConstraints[ii];
				var constraint = result;
				if(constraint.data.order == i) {
					constraint.active = constraint.target.active && (!constraint.data.skinRequired || this.skin != null && this.skin.constraints.indexOf(constraint.data) != -1);
					if(constraint.active) {
						var target = constraint.target;
						if(!target.sorted) {
							var parent = target.parent;
							if(parent != null) {
								if(!parent.sorted) {
									var parent1 = parent.parent;
									if(parent1 != null) {
										this.sortBone(parent1);
									}
									parent.sorted = true;
									this.cache.push(parent);
								}
							}
							target.sorted = true;
							this.cache.push(target);
						}
						var constrained = constraint.bones;
						var parent2 = constrained.length > 0 ? constrained[0] : null;
						if(!parent2.sorted) {
							var parent3 = parent2.parent;
							if(parent3 != null) {
								if(!parent3.sorted) {
									var parent4 = parent3.parent;
									if(parent4 != null) {
										this.sortBone(parent4);
									}
									parent3.sorted = true;
									this.cache.push(parent3);
								}
							}
							parent2.sorted = true;
							this.cache.push(parent2);
						}
						if(constrained.length == 1) {
							this.cache.push(constraint);
							var bones1 = parent2.children;
							var items = bones1;
							var i1 = 0;
							var n = bones1.length;
							while(i1 < n) {
								var result1 = items[i1];
								var bone = result1;
								if(!bone.active) {
									++i1;
									continue;
								}
								if(bone.sorted) {
									var bones2 = bone.children;
									var items1 = bones2;
									var i2 = 0;
									var n1 = bones2.length;
									while(i2 < n1) {
										var result2 = items1[i2];
										var bone1 = result2;
										if(!bone1.active) {
											++i2;
											continue;
										}
										if(bone1.sorted) {
											this.sortReset(bone1.children);
										}
										bone1.sorted = false;
										++i2;
									}
								}
								bone.sorted = false;
								++i1;
							}
						} else {
							var child = constrained.length == 0 ? null : constrained[constrained.length - 1];
							if(!child.sorted) {
								var parent5 = child.parent;
								if(parent5 != null) {
									if(!parent5.sorted) {
										var parent6 = parent5.parent;
										if(parent6 != null) {
											this.sortBone(parent6);
										}
										parent5.sorted = true;
										this.cache.push(parent5);
									}
								}
								child.sorted = true;
								this.cache.push(child);
							}
							this.cache.push(constraint);
							var bones3 = parent2.children;
							var items2 = bones3;
							var i3 = 0;
							var n2 = bones3.length;
							while(i3 < n2) {
								var result3 = items2[i3];
								var bone2 = result3;
								if(!bone2.active) {
									++i3;
									continue;
								}
								if(bone2.sorted) {
									var bones4 = bone2.children;
									var items3 = bones4;
									var i4 = 0;
									var n3 = bones4.length;
									while(i4 < n3) {
										var result4 = items3[i4];
										var bone3 = result4;
										if(!bone3.active) {
											++i4;
											continue;
										}
										if(bone3.sorted) {
											this.sortReset(bone3.children);
										}
										bone3.sorted = false;
										++i4;
									}
								}
								bone2.sorted = false;
								++i3;
							}
							child.sorted = true;
						}
					}
					++ii;
					_gotoLabel_outer = 2;
					break;
				}
				++ii;
			}
			if(_gotoLabel_outer == 2) {
				_gotoLabel_outer = 0;
				++i;
				continue;
			}
			if(_gotoLabel_outer >= 1) {
				break;
			}
			var ii1 = 0;
			while(ii1 < transformCount) {
				var result5 = transformConstraints[ii1];
				var constraint1 = result5;
				if(constraint1.data.order == i) {
					constraint1.active = constraint1.target.active && (!constraint1.data.skinRequired || this.skin != null && this.skin.constraints.indexOf(constraint1.data) != -1);
					if(constraint1.active) {
						var bone4 = constraint1.target;
						if(!bone4.sorted) {
							var parent7 = bone4.parent;
							if(parent7 != null) {
								if(!parent7.sorted) {
									var parent8 = parent7.parent;
									if(parent8 != null) {
										this.sortBone(parent8);
									}
									parent7.sorted = true;
									this.cache.push(parent7);
								}
							}
							bone4.sorted = true;
							this.cache.push(bone4);
						}
						var constrained1 = constraint1.bones;
						var boneCount1 = constraint1.bones.length;
						if(constraint1.data.local) {
							var i5 = 0;
							while(i5 < boneCount1) {
								var result6 = constrained1[i5];
								var child1 = result6;
								var bone5 = child1.parent;
								if(!bone5.sorted) {
									var parent9 = bone5.parent;
									if(parent9 != null) {
										if(!parent9.sorted) {
											var parent10 = parent9.parent;
											if(parent10 != null) {
												this.sortBone(parent10);
											}
											parent9.sorted = true;
											this.cache.push(parent9);
										}
									}
									bone5.sorted = true;
									this.cache.push(bone5);
								}
								if(!child1.sorted) {
									var parent11 = child1.parent;
									if(parent11 != null) {
										if(!parent11.sorted) {
											var parent12 = parent11.parent;
											if(parent12 != null) {
												this.sortBone(parent12);
											}
											parent11.sorted = true;
											this.cache.push(parent11);
										}
									}
									child1.sorted = true;
									this.cache.push(child1);
								}
								++i5;
							}
						} else {
							var i6 = 0;
							while(i6 < boneCount1) {
								var result7 = constrained1[i6];
								var bone6 = result7;
								if(!bone6.sorted) {
									var parent13 = bone6.parent;
									if(parent13 != null) {
										if(!parent13.sorted) {
											var parent14 = parent13.parent;
											if(parent14 != null) {
												this.sortBone(parent14);
											}
											parent13.sorted = true;
											this.cache.push(parent13);
										}
									}
									bone6.sorted = true;
									this.cache.push(bone6);
								}
								++i6;
							}
						}
						this.cache.push(constraint1);
						var i7 = 0;
						while(i7 < boneCount1) {
							var result8 = constrained1[i7];
							var bones5 = result8.children;
							var items4 = bones5;
							var i8 = 0;
							var n4 = bones5.length;
							while(i8 < n4) {
								var result9 = items4[i8];
								var bone7 = result9;
								if(!bone7.active) {
									++i8;
									continue;
								}
								if(bone7.sorted) {
									var bones6 = bone7.children;
									var items5 = bones6;
									var i9 = 0;
									var n5 = bones6.length;
									while(i9 < n5) {
										var result10 = items5[i9];
										var bone8 = result10;
										if(!bone8.active) {
											++i9;
											continue;
										}
										if(bone8.sorted) {
											this.sortReset(bone8.children);
										}
										bone8.sorted = false;
										++i9;
									}
								}
								bone7.sorted = false;
								++i8;
							}
							++i7;
						}
						var i10 = 0;
						while(i10 < boneCount1) {
							var result11 = constrained1[i10];
							result11.sorted = true;
							++i10;
						}
					}
					++ii1;
					_gotoLabel_outer = 2;
					break;
				}
				++ii1;
			}
			if(_gotoLabel_outer == 2) {
				_gotoLabel_outer = 0;
				++i;
				continue;
			}
			if(_gotoLabel_outer >= 1) {
				break;
			}
			var ii2 = 0;
			while(ii2 < pathCount) {
				var result12 = pathConstraints[ii2];
				var constraint2 = result12;
				if(constraint2.data.order == i) {
					constraint2.active = constraint2.target.bone.active && (!constraint2.data.skinRequired || this.skin != null && this.skin.constraints.indexOf(constraint2.data) != -1);
					if(constraint2.active) {
						var slot = constraint2.target;
						var slotIndex = slot.data.index;
						var slotBone = slot.bone;
						if(this.skin != null) {
							var skin = this.skin;
							var entries = spine_support_utils_AttachmentSet.orderedItems(skin.attachments);
							var i11 = 0;
							var n6 = spine_support_utils_AttachmentSet.get_size(skin.attachments);
							while(i11 < n6) {
								var result13 = entries[i11];
								var entry = result13;
								if(entry.slotIndex == slotIndex) {
									var attachment = entry.attachment;
									if(((attachment) instanceof spine_attachments_PathAttachment)) {
										var result14 = attachment;
										var pathBones = result14.bones;
										if(pathBones == null) {
											if(!slotBone.sorted) {
												var parent15 = slotBone.parent;
												if(parent15 != null) {
													if(!parent15.sorted) {
														var parent16 = parent15.parent;
														if(parent16 != null) {
															this.sortBone(parent16);
														}
														parent15.sorted = true;
														this.cache.push(parent15);
													}
												}
												slotBone.sorted = true;
												this.cache.push(slotBone);
											}
										} else {
											var bones7 = this.bones;
											var i12 = 0;
											var n7 = pathBones.length;
											while(i12 < n7) {
												var nn = pathBones[i12++];
												nn += i12;
												while(i12 < nn) {
													var result15 = bones7[pathBones[i12++]];
													var bone9 = result15;
													if(!bone9.sorted) {
														var parent17 = bone9.parent;
														if(parent17 != null) {
															if(!parent17.sorted) {
																var parent18 = parent17.parent;
																if(parent18 != null) {
																	this.sortBone(parent18);
																}
																parent17.sorted = true;
																this.cache.push(parent17);
															}
														}
														bone9.sorted = true;
														this.cache.push(bone9);
													}
												}
											}
										}
									}
								}
								++i11;
							}
						}
						if(this.data.defaultSkin != null && this.data.defaultSkin != this.skin) {
							var skin1 = this.data.defaultSkin;
							var entries1 = spine_support_utils_AttachmentSet.orderedItems(skin1.attachments);
							var i13 = 0;
							var n8 = spine_support_utils_AttachmentSet.get_size(skin1.attachments);
							while(i13 < n8) {
								var result16 = entries1[i13];
								var entry1 = result16;
								if(entry1.slotIndex == slotIndex) {
									var attachment1 = entry1.attachment;
									if(((attachment1) instanceof spine_attachments_PathAttachment)) {
										var result17 = attachment1;
										var pathBones1 = result17.bones;
										if(pathBones1 == null) {
											if(!slotBone.sorted) {
												var parent19 = slotBone.parent;
												if(parent19 != null) {
													if(!parent19.sorted) {
														var parent20 = parent19.parent;
														if(parent20 != null) {
															this.sortBone(parent20);
														}
														parent19.sorted = true;
														this.cache.push(parent19);
													}
												}
												slotBone.sorted = true;
												this.cache.push(slotBone);
											}
										} else {
											var bones8 = this.bones;
											var i14 = 0;
											var n9 = pathBones1.length;
											while(i14 < n9) {
												var nn1 = pathBones1[i14++];
												nn1 += i14;
												while(i14 < nn1) {
													var result18 = bones8[pathBones1[i14++]];
													var bone10 = result18;
													if(!bone10.sorted) {
														var parent21 = bone10.parent;
														if(parent21 != null) {
															if(!parent21.sorted) {
																var parent22 = parent21.parent;
																if(parent22 != null) {
																	this.sortBone(parent22);
																}
																parent21.sorted = true;
																this.cache.push(parent21);
															}
														}
														bone10.sorted = true;
														this.cache.push(bone10);
													}
												}
											}
										}
									}
								}
								++i13;
							}
						}
						var attachment2 = slot.attachment;
						if(((attachment2) instanceof spine_attachments_PathAttachment)) {
							if(((attachment2) instanceof spine_attachments_PathAttachment)) {
								var result19 = attachment2;
								var pathBones2 = result19.bones;
								if(pathBones2 == null) {
									if(!slotBone.sorted) {
										var parent23 = slotBone.parent;
										if(parent23 != null) {
											if(!parent23.sorted) {
												var parent24 = parent23.parent;
												if(parent24 != null) {
													this.sortBone(parent24);
												}
												parent23.sorted = true;
												this.cache.push(parent23);
											}
										}
										slotBone.sorted = true;
										this.cache.push(slotBone);
									}
								} else {
									var bones9 = this.bones;
									var i15 = 0;
									var n10 = pathBones2.length;
									while(i15 < n10) {
										var nn2 = pathBones2[i15++];
										nn2 += i15;
										while(i15 < nn2) {
											var result20 = bones9[pathBones2[i15++]];
											var bone11 = result20;
											if(!bone11.sorted) {
												var parent25 = bone11.parent;
												if(parent25 != null) {
													if(!parent25.sorted) {
														var parent26 = parent25.parent;
														if(parent26 != null) {
															this.sortBone(parent26);
														}
														parent25.sorted = true;
														this.cache.push(parent25);
													}
												}
												bone11.sorted = true;
												this.cache.push(bone11);
											}
										}
									}
								}
							}
						}
						var constrained2 = constraint2.bones;
						var boneCount2 = constraint2.bones.length;
						var i16 = 0;
						while(i16 < boneCount2) {
							var result21 = constrained2[i16];
							var bone12 = result21;
							if(!bone12.sorted) {
								var parent27 = bone12.parent;
								if(parent27 != null) {
									if(!parent27.sorted) {
										var parent28 = parent27.parent;
										if(parent28 != null) {
											this.sortBone(parent28);
										}
										parent27.sorted = true;
										this.cache.push(parent27);
									}
								}
								bone12.sorted = true;
								this.cache.push(bone12);
							}
							++i16;
						}
						this.cache.push(constraint2);
						var i17 = 0;
						while(i17 < boneCount2) {
							var result22 = constrained2[i17];
							var bones10 = result22.children;
							var items6 = bones10;
							var i18 = 0;
							var n11 = bones10.length;
							while(i18 < n11) {
								var result23 = items6[i18];
								var bone13 = result23;
								if(!bone13.active) {
									++i18;
									continue;
								}
								if(bone13.sorted) {
									var bones11 = bone13.children;
									var items7 = bones11;
									var i19 = 0;
									var n12 = bones11.length;
									while(i19 < n12) {
										var result24 = items7[i19];
										var bone14 = result24;
										if(!bone14.active) {
											++i19;
											continue;
										}
										if(bone14.sorted) {
											this.sortReset(bone14.children);
										}
										bone14.sorted = false;
										++i19;
									}
								}
								bone13.sorted = false;
								++i18;
							}
							++i17;
						}
						var i20 = 0;
						while(i20 < boneCount2) {
							var result25 = constrained2[i20];
							result25.sorted = true;
							++i20;
						}
					}
					++ii2;
					_gotoLabel_outer = 2;
					break;
				}
				++ii2;
			}
			if(_gotoLabel_outer == 2) {
				_gotoLabel_outer = 0;
				++i;
				continue;
			}
			if(_gotoLabel_outer >= 1) {
				break;
			}
			++i;
		}
		if(_gotoLabel_outer == 0) {
			break;
		}
	}
	var i = 0;
	while(i < boneCount) {
		var result = bones[i];
		var bone = result;
		if(!bone.sorted) {
			var parent = bone.parent;
			if(parent != null) {
				if(!parent.sorted) {
					var parent1 = parent.parent;
					if(parent1 != null) {
						this.sortBone(parent1);
					}
					parent.sorted = true;
					this.cache.push(parent);
				}
			}
			bone.sorted = true;
			this.cache.push(bone);
		}
		++i;
	}
};
$hxClasses["spine.Skeleton"] = spine_Skeleton;
spine_Skeleton.__name__ = "spine.Skeleton";
spine_Skeleton.prototype = {
	updateCache: function() {
		var cache = this.cache;
		cache.splice(0,cache.length);
		var boneCount = this.bones.length;
		var bones = this.bones;
		var i = 0;
		while(i < boneCount) {
			var result = bones[i];
			var bone = result;
			bone.sorted = bone.data.skinRequired;
			bone.active = !bone.sorted;
			++i;
		}
		if(this.skin != null) {
			var skinBones = this.skin.bones;
			var i = 0;
			var n = this.skin.bones.length;
			while(i < n) {
				var result = skinBones[i];
				var result1 = bones[result.index];
				var bone = result1;
				while(true) {
					bone.sorted = false;
					bone.active = true;
					bone = bone.parent;
					if(!(bone != null)) {
						break;
					}
				}
				++i;
			}
		}
		var ikCount = this.ikConstraints.length;
		var transformCount = this.transformConstraints.length;
		var pathCount = this.pathConstraints.length;
		var ikConstraints = this.ikConstraints;
		var transformConstraints = this.transformConstraints;
		var pathConstraints = this.pathConstraints;
		var constraintCount = ikCount + transformCount + pathCount;
		var _gotoLabel_outer;
		while(true) {
			_gotoLabel_outer = 0;
			var i = 0;
			while(i < constraintCount) {
				var ii = 0;
				while(ii < ikCount) {
					var result = ikConstraints[ii];
					var constraint = result;
					if(constraint.data.order == i) {
						constraint.active = constraint.target.active && (!constraint.data.skinRequired || this.skin != null && this.skin.constraints.indexOf(constraint.data) != -1);
						if(constraint.active) {
							var target = constraint.target;
							if(!target.sorted) {
								var parent = target.parent;
								if(parent != null) {
									if(!parent.sorted) {
										var parent1 = parent.parent;
										if(parent1 != null) {
											this.sortBone(parent1);
										}
										parent.sorted = true;
										this.cache.push(parent);
									}
								}
								target.sorted = true;
								this.cache.push(target);
							}
							var constrained = constraint.bones;
							var parent2 = constrained.length > 0 ? constrained[0] : null;
							if(!parent2.sorted) {
								var parent3 = parent2.parent;
								if(parent3 != null) {
									if(!parent3.sorted) {
										var parent4 = parent3.parent;
										if(parent4 != null) {
											this.sortBone(parent4);
										}
										parent3.sorted = true;
										this.cache.push(parent3);
									}
								}
								parent2.sorted = true;
								this.cache.push(parent2);
							}
							if(constrained.length == 1) {
								this.cache.push(constraint);
								var bones1 = parent2.children;
								var items = bones1;
								var i1 = 0;
								var n = bones1.length;
								while(i1 < n) {
									var result1 = items[i1];
									var bone = result1;
									if(!bone.active) {
										++i1;
										continue;
									}
									if(bone.sorted) {
										var bones2 = bone.children;
										var items1 = bones2;
										var i2 = 0;
										var n1 = bones2.length;
										while(i2 < n1) {
											var result2 = items1[i2];
											var bone1 = result2;
											if(!bone1.active) {
												++i2;
												continue;
											}
											if(bone1.sorted) {
												this.sortReset(bone1.children);
											}
											bone1.sorted = false;
											++i2;
										}
									}
									bone.sorted = false;
									++i1;
								}
							} else {
								var child = constrained.length == 0 ? null : constrained[constrained.length - 1];
								if(!child.sorted) {
									var parent5 = child.parent;
									if(parent5 != null) {
										if(!parent5.sorted) {
											var parent6 = parent5.parent;
											if(parent6 != null) {
												this.sortBone(parent6);
											}
											parent5.sorted = true;
											this.cache.push(parent5);
										}
									}
									child.sorted = true;
									this.cache.push(child);
								}
								this.cache.push(constraint);
								var bones3 = parent2.children;
								var items2 = bones3;
								var i3 = 0;
								var n2 = bones3.length;
								while(i3 < n2) {
									var result3 = items2[i3];
									var bone2 = result3;
									if(!bone2.active) {
										++i3;
										continue;
									}
									if(bone2.sorted) {
										var bones4 = bone2.children;
										var items3 = bones4;
										var i4 = 0;
										var n3 = bones4.length;
										while(i4 < n3) {
											var result4 = items3[i4];
											var bone3 = result4;
											if(!bone3.active) {
												++i4;
												continue;
											}
											if(bone3.sorted) {
												this.sortReset(bone3.children);
											}
											bone3.sorted = false;
											++i4;
										}
									}
									bone2.sorted = false;
									++i3;
								}
								child.sorted = true;
							}
						}
						++ii;
						_gotoLabel_outer = 2;
						break;
					}
					++ii;
				}
				if(_gotoLabel_outer == 2) {
					_gotoLabel_outer = 0;
					++i;
					continue;
				}
				if(_gotoLabel_outer >= 1) {
					break;
				}
				var ii1 = 0;
				while(ii1 < transformCount) {
					var result5 = transformConstraints[ii1];
					var constraint1 = result5;
					if(constraint1.data.order == i) {
						constraint1.active = constraint1.target.active && (!constraint1.data.skinRequired || this.skin != null && this.skin.constraints.indexOf(constraint1.data) != -1);
						if(constraint1.active) {
							var bone4 = constraint1.target;
							if(!bone4.sorted) {
								var parent7 = bone4.parent;
								if(parent7 != null) {
									if(!parent7.sorted) {
										var parent8 = parent7.parent;
										if(parent8 != null) {
											this.sortBone(parent8);
										}
										parent7.sorted = true;
										this.cache.push(parent7);
									}
								}
								bone4.sorted = true;
								this.cache.push(bone4);
							}
							var constrained1 = constraint1.bones;
							var boneCount1 = constraint1.bones.length;
							if(constraint1.data.local) {
								var i5 = 0;
								while(i5 < boneCount1) {
									var result6 = constrained1[i5];
									var child1 = result6;
									var bone5 = child1.parent;
									if(!bone5.sorted) {
										var parent9 = bone5.parent;
										if(parent9 != null) {
											if(!parent9.sorted) {
												var parent10 = parent9.parent;
												if(parent10 != null) {
													this.sortBone(parent10);
												}
												parent9.sorted = true;
												this.cache.push(parent9);
											}
										}
										bone5.sorted = true;
										this.cache.push(bone5);
									}
									if(!child1.sorted) {
										var parent11 = child1.parent;
										if(parent11 != null) {
											if(!parent11.sorted) {
												var parent12 = parent11.parent;
												if(parent12 != null) {
													this.sortBone(parent12);
												}
												parent11.sorted = true;
												this.cache.push(parent11);
											}
										}
										child1.sorted = true;
										this.cache.push(child1);
									}
									++i5;
								}
							} else {
								var i6 = 0;
								while(i6 < boneCount1) {
									var result7 = constrained1[i6];
									var bone6 = result7;
									if(!bone6.sorted) {
										var parent13 = bone6.parent;
										if(parent13 != null) {
											if(!parent13.sorted) {
												var parent14 = parent13.parent;
												if(parent14 != null) {
													this.sortBone(parent14);
												}
												parent13.sorted = true;
												this.cache.push(parent13);
											}
										}
										bone6.sorted = true;
										this.cache.push(bone6);
									}
									++i6;
								}
							}
							this.cache.push(constraint1);
							var i7 = 0;
							while(i7 < boneCount1) {
								var result8 = constrained1[i7];
								var bones5 = result8.children;
								var items4 = bones5;
								var i8 = 0;
								var n4 = bones5.length;
								while(i8 < n4) {
									var result9 = items4[i8];
									var bone7 = result9;
									if(!bone7.active) {
										++i8;
										continue;
									}
									if(bone7.sorted) {
										var bones6 = bone7.children;
										var items5 = bones6;
										var i9 = 0;
										var n5 = bones6.length;
										while(i9 < n5) {
											var result10 = items5[i9];
											var bone8 = result10;
											if(!bone8.active) {
												++i9;
												continue;
											}
											if(bone8.sorted) {
												this.sortReset(bone8.children);
											}
											bone8.sorted = false;
											++i9;
										}
									}
									bone7.sorted = false;
									++i8;
								}
								++i7;
							}
							var i10 = 0;
							while(i10 < boneCount1) {
								var result11 = constrained1[i10];
								result11.sorted = true;
								++i10;
							}
						}
						++ii1;
						_gotoLabel_outer = 2;
						break;
					}
					++ii1;
				}
				if(_gotoLabel_outer == 2) {
					_gotoLabel_outer = 0;
					++i;
					continue;
				}
				if(_gotoLabel_outer >= 1) {
					break;
				}
				var ii2 = 0;
				while(ii2 < pathCount) {
					var result12 = pathConstraints[ii2];
					var constraint2 = result12;
					if(constraint2.data.order == i) {
						constraint2.active = constraint2.target.bone.active && (!constraint2.data.skinRequired || this.skin != null && this.skin.constraints.indexOf(constraint2.data) != -1);
						if(constraint2.active) {
							var slot = constraint2.target;
							var slotIndex = slot.data.index;
							var slotBone = slot.bone;
							if(this.skin != null) {
								var skin = this.skin;
								var entries = spine_support_utils_AttachmentSet.orderedItems(skin.attachments);
								var i11 = 0;
								var n6 = spine_support_utils_AttachmentSet.get_size(skin.attachments);
								while(i11 < n6) {
									var result13 = entries[i11];
									var entry = result13;
									if(entry.slotIndex == slotIndex) {
										var attachment = entry.attachment;
										if(((attachment) instanceof spine_attachments_PathAttachment)) {
											var result14 = attachment;
											var pathBones = result14.bones;
											if(pathBones == null) {
												if(!slotBone.sorted) {
													var parent15 = slotBone.parent;
													if(parent15 != null) {
														if(!parent15.sorted) {
															var parent16 = parent15.parent;
															if(parent16 != null) {
																this.sortBone(parent16);
															}
															parent15.sorted = true;
															this.cache.push(parent15);
														}
													}
													slotBone.sorted = true;
													this.cache.push(slotBone);
												}
											} else {
												var bones7 = this.bones;
												var i12 = 0;
												var n7 = pathBones.length;
												while(i12 < n7) {
													var nn = pathBones[i12++];
													nn += i12;
													while(i12 < nn) {
														var result15 = bones7[pathBones[i12++]];
														var bone9 = result15;
														if(!bone9.sorted) {
															var parent17 = bone9.parent;
															if(parent17 != null) {
																if(!parent17.sorted) {
																	var parent18 = parent17.parent;
																	if(parent18 != null) {
																		this.sortBone(parent18);
																	}
																	parent17.sorted = true;
																	this.cache.push(parent17);
																}
															}
															bone9.sorted = true;
															this.cache.push(bone9);
														}
													}
												}
											}
										}
									}
									++i11;
								}
							}
							if(this.data.defaultSkin != null && this.data.defaultSkin != this.skin) {
								var skin1 = this.data.defaultSkin;
								var entries1 = spine_support_utils_AttachmentSet.orderedItems(skin1.attachments);
								var i13 = 0;
								var n8 = spine_support_utils_AttachmentSet.get_size(skin1.attachments);
								while(i13 < n8) {
									var result16 = entries1[i13];
									var entry1 = result16;
									if(entry1.slotIndex == slotIndex) {
										var attachment1 = entry1.attachment;
										if(((attachment1) instanceof spine_attachments_PathAttachment)) {
											var result17 = attachment1;
											var pathBones1 = result17.bones;
											if(pathBones1 == null) {
												if(!slotBone.sorted) {
													var parent19 = slotBone.parent;
													if(parent19 != null) {
														if(!parent19.sorted) {
															var parent20 = parent19.parent;
															if(parent20 != null) {
																this.sortBone(parent20);
															}
															parent19.sorted = true;
															this.cache.push(parent19);
														}
													}
													slotBone.sorted = true;
													this.cache.push(slotBone);
												}
											} else {
												var bones8 = this.bones;
												var i14 = 0;
												var n9 = pathBones1.length;
												while(i14 < n9) {
													var nn1 = pathBones1[i14++];
													nn1 += i14;
													while(i14 < nn1) {
														var result18 = bones8[pathBones1[i14++]];
														var bone10 = result18;
														if(!bone10.sorted) {
															var parent21 = bone10.parent;
															if(parent21 != null) {
																if(!parent21.sorted) {
																	var parent22 = parent21.parent;
																	if(parent22 != null) {
																		this.sortBone(parent22);
																	}
																	parent21.sorted = true;
																	this.cache.push(parent21);
																}
															}
															bone10.sorted = true;
															this.cache.push(bone10);
														}
													}
												}
											}
										}
									}
									++i13;
								}
							}
							var attachment2 = slot.attachment;
							if(((attachment2) instanceof spine_attachments_PathAttachment)) {
								if(((attachment2) instanceof spine_attachments_PathAttachment)) {
									var result19 = attachment2;
									var pathBones2 = result19.bones;
									if(pathBones2 == null) {
										if(!slotBone.sorted) {
											var parent23 = slotBone.parent;
											if(parent23 != null) {
												if(!parent23.sorted) {
													var parent24 = parent23.parent;
													if(parent24 != null) {
														this.sortBone(parent24);
													}
													parent23.sorted = true;
													this.cache.push(parent23);
												}
											}
											slotBone.sorted = true;
											this.cache.push(slotBone);
										}
									} else {
										var bones9 = this.bones;
										var i15 = 0;
										var n10 = pathBones2.length;
										while(i15 < n10) {
											var nn2 = pathBones2[i15++];
											nn2 += i15;
											while(i15 < nn2) {
												var result20 = bones9[pathBones2[i15++]];
												var bone11 = result20;
												if(!bone11.sorted) {
													var parent25 = bone11.parent;
													if(parent25 != null) {
														if(!parent25.sorted) {
															var parent26 = parent25.parent;
															if(parent26 != null) {
																this.sortBone(parent26);
															}
															parent25.sorted = true;
															this.cache.push(parent25);
														}
													}
													bone11.sorted = true;
													this.cache.push(bone11);
												}
											}
										}
									}
								}
							}
							var constrained2 = constraint2.bones;
							var boneCount2 = constraint2.bones.length;
							var i16 = 0;
							while(i16 < boneCount2) {
								var result21 = constrained2[i16];
								var bone12 = result21;
								if(!bone12.sorted) {
									var parent27 = bone12.parent;
									if(parent27 != null) {
										if(!parent27.sorted) {
											var parent28 = parent27.parent;
											if(parent28 != null) {
												this.sortBone(parent28);
											}
											parent27.sorted = true;
											this.cache.push(parent27);
										}
									}
									bone12.sorted = true;
									this.cache.push(bone12);
								}
								++i16;
							}
							this.cache.push(constraint2);
							var i17 = 0;
							while(i17 < boneCount2) {
								var result22 = constrained2[i17];
								var bones10 = result22.children;
								var items6 = bones10;
								var i18 = 0;
								var n11 = bones10.length;
								while(i18 < n11) {
									var result23 = items6[i18];
									var bone13 = result23;
									if(!bone13.active) {
										++i18;
										continue;
									}
									if(bone13.sorted) {
										var bones11 = bone13.children;
										var items7 = bones11;
										var i19 = 0;
										var n12 = bones11.length;
										while(i19 < n12) {
											var result24 = items7[i19];
											var bone14 = result24;
											if(!bone14.active) {
												++i19;
												continue;
											}
											if(bone14.sorted) {
												this.sortReset(bone14.children);
											}
											bone14.sorted = false;
											++i19;
										}
									}
									bone13.sorted = false;
									++i18;
								}
								++i17;
							}
							var i20 = 0;
							while(i20 < boneCount2) {
								var result25 = constrained2[i20];
								result25.sorted = true;
								++i20;
							}
						}
						++ii2;
						_gotoLabel_outer = 2;
						break;
					}
					++ii2;
				}
				if(_gotoLabel_outer == 2) {
					_gotoLabel_outer = 0;
					++i;
					continue;
				}
				if(_gotoLabel_outer >= 1) {
					break;
				}
				++i;
			}
			if(_gotoLabel_outer == 0) {
				break;
			}
		}
		var i = 0;
		while(i < boneCount) {
			var result = bones[i];
			var bone = result;
			if(!bone.sorted) {
				var parent = bone.parent;
				if(parent != null) {
					if(!parent.sorted) {
						var parent1 = parent.parent;
						if(parent1 != null) {
							this.sortBone(parent1);
						}
						parent.sorted = true;
						this.cache.push(parent);
					}
				}
				bone.sorted = true;
				this.cache.push(bone);
			}
			++i;
		}
	}
	,sortIkConstraint: function(constraint) {
		constraint.active = constraint.target.active && (!constraint.data.skinRequired || this.skin != null && this.skin.constraints.indexOf(constraint.data) != -1);
		if(!constraint.active) {
			return;
		}
		var target = constraint.target;
		if(!target.sorted) {
			var parent = target.parent;
			if(parent != null) {
				if(!parent.sorted) {
					var parent1 = parent.parent;
					if(parent1 != null) {
						this.sortBone(parent1);
					}
					parent.sorted = true;
					this.cache.push(parent);
				}
			}
			target.sorted = true;
			this.cache.push(target);
		}
		var constrained = constraint.bones;
		var parent = constrained.length > 0 ? constrained[0] : null;
		if(!parent.sorted) {
			var parent1 = parent.parent;
			if(parent1 != null) {
				if(!parent1.sorted) {
					var parent2 = parent1.parent;
					if(parent2 != null) {
						this.sortBone(parent2);
					}
					parent1.sorted = true;
					this.cache.push(parent1);
				}
			}
			parent.sorted = true;
			this.cache.push(parent);
		}
		if(constrained.length == 1) {
			this.cache.push(constraint);
			var bones = parent.children;
			var items = bones;
			var i = 0;
			var n = bones.length;
			while(i < n) {
				var result = items[i];
				var bone = result;
				if(!bone.active) {
					++i;
					continue;
				}
				if(bone.sorted) {
					var bones = bone.children;
					var items1 = bones;
					var i1 = 0;
					var n1 = bones.length;
					while(i1 < n1) {
						var result1 = items1[i1];
						var bone1 = result1;
						if(!bone1.active) {
							++i1;
							continue;
						}
						if(bone1.sorted) {
							this.sortReset(bone1.children);
						}
						bone1.sorted = false;
						++i1;
					}
				}
				bone.sorted = false;
				++i;
			}
		} else {
			var child = constrained.length == 0 ? null : constrained[constrained.length - 1];
			if(!child.sorted) {
				var parent1 = child.parent;
				if(parent1 != null) {
					if(!parent1.sorted) {
						var parent2 = parent1.parent;
						if(parent2 != null) {
							this.sortBone(parent2);
						}
						parent1.sorted = true;
						this.cache.push(parent1);
					}
				}
				child.sorted = true;
				this.cache.push(child);
			}
			this.cache.push(constraint);
			var bones = parent.children;
			var items = bones;
			var i = 0;
			var n = bones.length;
			while(i < n) {
				var result = items[i];
				var bone = result;
				if(!bone.active) {
					++i;
					continue;
				}
				if(bone.sorted) {
					var bones = bone.children;
					var items1 = bones;
					var i1 = 0;
					var n1 = bones.length;
					while(i1 < n1) {
						var result1 = items1[i1];
						var bone1 = result1;
						if(!bone1.active) {
							++i1;
							continue;
						}
						if(bone1.sorted) {
							this.sortReset(bone1.children);
						}
						bone1.sorted = false;
						++i1;
					}
				}
				bone.sorted = false;
				++i;
			}
			child.sorted = true;
		}
	}
	,sortPathConstraint: function(constraint) {
		constraint.active = constraint.target.bone.active && (!constraint.data.skinRequired || this.skin != null && this.skin.constraints.indexOf(constraint.data) != -1);
		if(!constraint.active) {
			return;
		}
		var slot = constraint.target;
		var slotIndex = slot.data.index;
		var slotBone = slot.bone;
		if(this.skin != null) {
			var skin = this.skin;
			var entries = spine_support_utils_AttachmentSet.orderedItems(skin.attachments);
			var i = 0;
			var n = spine_support_utils_AttachmentSet.get_size(skin.attachments);
			while(i < n) {
				var result = entries[i];
				var entry = result;
				if(entry.slotIndex == slotIndex) {
					var attachment = entry.attachment;
					if(((attachment) instanceof spine_attachments_PathAttachment)) {
						var result1 = attachment;
						var pathBones = result1.bones;
						if(pathBones == null) {
							if(!slotBone.sorted) {
								var parent = slotBone.parent;
								if(parent != null) {
									if(!parent.sorted) {
										var parent1 = parent.parent;
										if(parent1 != null) {
											this.sortBone(parent1);
										}
										parent.sorted = true;
										this.cache.push(parent);
									}
								}
								slotBone.sorted = true;
								this.cache.push(slotBone);
							}
						} else {
							var bones = this.bones;
							var i1 = 0;
							var n1 = pathBones.length;
							while(i1 < n1) {
								var nn = pathBones[i1++];
								nn += i1;
								while(i1 < nn) {
									var result2 = bones[pathBones[i1++]];
									var bone = result2;
									if(!bone.sorted) {
										var parent2 = bone.parent;
										if(parent2 != null) {
											if(!parent2.sorted) {
												var parent3 = parent2.parent;
												if(parent3 != null) {
													this.sortBone(parent3);
												}
												parent2.sorted = true;
												this.cache.push(parent2);
											}
										}
										bone.sorted = true;
										this.cache.push(bone);
									}
								}
							}
						}
					}
				}
				++i;
			}
		}
		if(this.data.defaultSkin != null && this.data.defaultSkin != this.skin) {
			var skin = this.data.defaultSkin;
			var entries = spine_support_utils_AttachmentSet.orderedItems(skin.attachments);
			var i = 0;
			var n = spine_support_utils_AttachmentSet.get_size(skin.attachments);
			while(i < n) {
				var result = entries[i];
				var entry = result;
				if(entry.slotIndex == slotIndex) {
					var attachment = entry.attachment;
					if(((attachment) instanceof spine_attachments_PathAttachment)) {
						var result1 = attachment;
						var pathBones = result1.bones;
						if(pathBones == null) {
							if(!slotBone.sorted) {
								var parent = slotBone.parent;
								if(parent != null) {
									if(!parent.sorted) {
										var parent1 = parent.parent;
										if(parent1 != null) {
											this.sortBone(parent1);
										}
										parent.sorted = true;
										this.cache.push(parent);
									}
								}
								slotBone.sorted = true;
								this.cache.push(slotBone);
							}
						} else {
							var bones = this.bones;
							var i1 = 0;
							var n1 = pathBones.length;
							while(i1 < n1) {
								var nn = pathBones[i1++];
								nn += i1;
								while(i1 < nn) {
									var result2 = bones[pathBones[i1++]];
									var bone = result2;
									if(!bone.sorted) {
										var parent2 = bone.parent;
										if(parent2 != null) {
											if(!parent2.sorted) {
												var parent3 = parent2.parent;
												if(parent3 != null) {
													this.sortBone(parent3);
												}
												parent2.sorted = true;
												this.cache.push(parent2);
											}
										}
										bone.sorted = true;
										this.cache.push(bone);
									}
								}
							}
						}
					}
				}
				++i;
			}
		}
		var attachment = slot.attachment;
		if(((attachment) instanceof spine_attachments_PathAttachment)) {
			if(((attachment) instanceof spine_attachments_PathAttachment)) {
				var result = attachment;
				var pathBones = result.bones;
				if(pathBones == null) {
					if(!slotBone.sorted) {
						var parent = slotBone.parent;
						if(parent != null) {
							if(!parent.sorted) {
								var parent1 = parent.parent;
								if(parent1 != null) {
									this.sortBone(parent1);
								}
								parent.sorted = true;
								this.cache.push(parent);
							}
						}
						slotBone.sorted = true;
						this.cache.push(slotBone);
					}
				} else {
					var bones = this.bones;
					var i = 0;
					var n = pathBones.length;
					while(i < n) {
						var nn = pathBones[i++];
						nn += i;
						while(i < nn) {
							var result = bones[pathBones[i++]];
							var bone = result;
							if(!bone.sorted) {
								var parent = bone.parent;
								if(parent != null) {
									if(!parent.sorted) {
										var parent1 = parent.parent;
										if(parent1 != null) {
											this.sortBone(parent1);
										}
										parent.sorted = true;
										this.cache.push(parent);
									}
								}
								bone.sorted = true;
								this.cache.push(bone);
							}
						}
					}
				}
			}
		}
		var constrained = constraint.bones;
		var boneCount = constraint.bones.length;
		var i = 0;
		while(i < boneCount) {
			var result = constrained[i];
			var bone = result;
			if(!bone.sorted) {
				var parent = bone.parent;
				if(parent != null) {
					if(!parent.sorted) {
						var parent1 = parent.parent;
						if(parent1 != null) {
							this.sortBone(parent1);
						}
						parent.sorted = true;
						this.cache.push(parent);
					}
				}
				bone.sorted = true;
				this.cache.push(bone);
			}
			++i;
		}
		this.cache.push(constraint);
		var i = 0;
		while(i < boneCount) {
			var result = constrained[i];
			var bones = result.children;
			var items = bones;
			var i1 = 0;
			var n = bones.length;
			while(i1 < n) {
				var result1 = items[i1];
				var bone = result1;
				if(!bone.active) {
					++i1;
					continue;
				}
				if(bone.sorted) {
					var bones1 = bone.children;
					var items1 = bones1;
					var i2 = 0;
					var n1 = bones1.length;
					while(i2 < n1) {
						var result2 = items1[i2];
						var bone1 = result2;
						if(!bone1.active) {
							++i2;
							continue;
						}
						if(bone1.sorted) {
							this.sortReset(bone1.children);
						}
						bone1.sorted = false;
						++i2;
					}
				}
				bone.sorted = false;
				++i1;
			}
			++i;
		}
		var i = 0;
		while(i < boneCount) {
			var result = constrained[i];
			result.sorted = true;
			++i;
		}
	}
	,sortTransformConstraint: function(constraint) {
		constraint.active = constraint.target.active && (!constraint.data.skinRequired || this.skin != null && this.skin.constraints.indexOf(constraint.data) != -1);
		if(!constraint.active) {
			return;
		}
		var bone = constraint.target;
		if(!bone.sorted) {
			var parent = bone.parent;
			if(parent != null) {
				if(!parent.sorted) {
					var parent1 = parent.parent;
					if(parent1 != null) {
						this.sortBone(parent1);
					}
					parent.sorted = true;
					this.cache.push(parent);
				}
			}
			bone.sorted = true;
			this.cache.push(bone);
		}
		var constrained = constraint.bones;
		var boneCount = constraint.bones.length;
		if(constraint.data.local) {
			var i = 0;
			while(i < boneCount) {
				var result = constrained[i];
				var child = result;
				var bone = child.parent;
				if(!bone.sorted) {
					var parent = bone.parent;
					if(parent != null) {
						if(!parent.sorted) {
							var parent1 = parent.parent;
							if(parent1 != null) {
								this.sortBone(parent1);
							}
							parent.sorted = true;
							this.cache.push(parent);
						}
					}
					bone.sorted = true;
					this.cache.push(bone);
				}
				if(!child.sorted) {
					var parent2 = child.parent;
					if(parent2 != null) {
						if(!parent2.sorted) {
							var parent3 = parent2.parent;
							if(parent3 != null) {
								this.sortBone(parent3);
							}
							parent2.sorted = true;
							this.cache.push(parent2);
						}
					}
					child.sorted = true;
					this.cache.push(child);
				}
				++i;
			}
		} else {
			var i = 0;
			while(i < boneCount) {
				var result = constrained[i];
				var bone = result;
				if(!bone.sorted) {
					var parent = bone.parent;
					if(parent != null) {
						if(!parent.sorted) {
							var parent1 = parent.parent;
							if(parent1 != null) {
								this.sortBone(parent1);
							}
							parent.sorted = true;
							this.cache.push(parent);
						}
					}
					bone.sorted = true;
					this.cache.push(bone);
				}
				++i;
			}
		}
		this.cache.push(constraint);
		var i = 0;
		while(i < boneCount) {
			var result = constrained[i];
			var bones = result.children;
			var items = bones;
			var i1 = 0;
			var n = bones.length;
			while(i1 < n) {
				var result1 = items[i1];
				var bone = result1;
				if(!bone.active) {
					++i1;
					continue;
				}
				if(bone.sorted) {
					var bones1 = bone.children;
					var items1 = bones1;
					var i2 = 0;
					var n1 = bones1.length;
					while(i2 < n1) {
						var result2 = items1[i2];
						var bone1 = result2;
						if(!bone1.active) {
							++i2;
							continue;
						}
						if(bone1.sorted) {
							this.sortReset(bone1.children);
						}
						bone1.sorted = false;
						++i2;
					}
				}
				bone.sorted = false;
				++i1;
			}
			++i;
		}
		var i = 0;
		while(i < boneCount) {
			var result = constrained[i];
			result.sorted = true;
			++i;
		}
	}
	,sortPathConstraintAttachmentWithSkin: function(skin,slotIndex,slotBone) {
		var entries = spine_support_utils_AttachmentSet.orderedItems(skin.attachments);
		var i = 0;
		var n = spine_support_utils_AttachmentSet.get_size(skin.attachments);
		while(i < n) {
			var result = entries[i];
			var entry = result;
			if(entry.slotIndex == slotIndex) {
				var attachment = entry.attachment;
				if(((attachment) instanceof spine_attachments_PathAttachment)) {
					var result1 = attachment;
					var pathBones = result1.bones;
					if(pathBones == null) {
						if(!slotBone.sorted) {
							var parent = slotBone.parent;
							if(parent != null) {
								if(!parent.sorted) {
									var parent1 = parent.parent;
									if(parent1 != null) {
										this.sortBone(parent1);
									}
									parent.sorted = true;
									this.cache.push(parent);
								}
							}
							slotBone.sorted = true;
							this.cache.push(slotBone);
						}
					} else {
						var bones = this.bones;
						var i1 = 0;
						var n1 = pathBones.length;
						while(i1 < n1) {
							var nn = pathBones[i1++];
							nn += i1;
							while(i1 < nn) {
								var result2 = bones[pathBones[i1++]];
								var bone = result2;
								if(!bone.sorted) {
									var parent2 = bone.parent;
									if(parent2 != null) {
										if(!parent2.sorted) {
											var parent3 = parent2.parent;
											if(parent3 != null) {
												this.sortBone(parent3);
											}
											parent2.sorted = true;
											this.cache.push(parent2);
										}
									}
									bone.sorted = true;
									this.cache.push(bone);
								}
							}
						}
					}
				}
			}
			++i;
		}
	}
	,sortPathConstraintAttachment: function(attachment,slotBone) {
		if(!((attachment) instanceof spine_attachments_PathAttachment)) {
			return;
		}
		var result = attachment;
		var pathBones = result.bones;
		if(pathBones == null) {
			if(!slotBone.sorted) {
				var parent = slotBone.parent;
				if(parent != null) {
					if(!parent.sorted) {
						var parent1 = parent.parent;
						if(parent1 != null) {
							this.sortBone(parent1);
						}
						parent.sorted = true;
						this.cache.push(parent);
					}
				}
				slotBone.sorted = true;
				this.cache.push(slotBone);
			}
		} else {
			var bones = this.bones;
			var i = 0;
			var n = pathBones.length;
			while(i < n) {
				var nn = pathBones[i++];
				nn += i;
				while(i < nn) {
					var result = bones[pathBones[i++]];
					var bone = result;
					if(!bone.sorted) {
						var parent = bone.parent;
						if(parent != null) {
							if(!parent.sorted) {
								var parent1 = parent.parent;
								if(parent1 != null) {
									this.sortBone(parent1);
								}
								parent.sorted = true;
								this.cache.push(parent);
							}
						}
						bone.sorted = true;
						this.cache.push(bone);
					}
				}
			}
		}
	}
	,sortBone: function(bone) {
		if(bone.sorted) {
			return;
		}
		var parent = bone.parent;
		if(parent != null) {
			this.sortBone(parent);
		}
		bone.sorted = true;
		this.cache.push(bone);
	}
	,sortReset: function(bones) {
		var items = bones;
		var i = 0;
		var n = bones.length;
		while(i < n) {
			var result = items[i];
			var bone = result;
			if(!bone.active) {
				++i;
				continue;
			}
			if(bone.sorted) {
				this.sortReset(bone.children);
			}
			bone.sorted = false;
			++i;
		}
	}
	,updateWorldTransform: function() {
		var bones = this.bones;
		var i = 0;
		var n = this.bones.length;
		while(i < n) {
			var result = bones[i];
			var bone = result;
			bone.ax = bone.x;
			bone.ay = bone.y;
			bone.arotation = bone.rotation;
			bone.ascaleX = bone.scaleX;
			bone.ascaleY = bone.scaleY;
			bone.ashearX = bone.shearX;
			bone.ashearY = bone.shearY;
			++i;
		}
		var cache = this.cache;
		var i = 0;
		var n = this.cache.length;
		while(i < n) {
			var result = cache[i];
			result.update();
			++i;
		}
	}
	,updateWorldTransformWithParent: function(parent) {
		if(parent == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("parent cannot be null."));
		}
		var rootBone = this.getRootBone();
		var pa = parent.a;
		var pb = parent.b;
		var pc = parent.c;
		var pd = parent.d;
		rootBone.worldX = pa * this.x + pb * this.y + parent.worldX;
		rootBone.worldY = pc * this.x + pd * this.y + parent.worldY;
		var rotationY = rootBone.rotation + 90 + rootBone.shearY;
		var la = Math.cos((rootBone.rotation + rootBone.shearX) * spine_utils_SpineUtils.degRad) * rootBone.scaleX;
		var lb = Math.cos(rotationY * spine_utils_SpineUtils.degRad) * rootBone.scaleY;
		var lc = Math.sin((rootBone.rotation + rootBone.shearX) * spine_utils_SpineUtils.degRad) * rootBone.scaleX;
		var ld = Math.sin(rotationY * spine_utils_SpineUtils.degRad) * rootBone.scaleY;
		rootBone.a = (pa * la + pb * lc) * this.scaleX;
		rootBone.b = (pa * lb + pb * ld) * this.scaleX;
		rootBone.c = (pc * la + pd * lc) * this.scaleY;
		rootBone.d = (pc * lb + pd * ld) * this.scaleY;
		var cache = this.cache;
		var i = 0;
		var n = this.cache.length;
		while(i < n) {
			var result = cache[i];
			var updatable = result;
			if(updatable != rootBone) {
				updatable.update();
			}
			++i;
		}
	}
	,setToSetupPose: function() {
		var bones = this.bones;
		var i = 0;
		var n = this.bones.length;
		while(i < n) {
			var result = bones[i];
			var _this = result;
			var data = _this.data;
			_this.x = data.x;
			_this.y = data.y;
			_this.rotation = data.rotation;
			_this.scaleX = data.scaleX;
			_this.scaleY = data.scaleY;
			_this.shearX = data.shearX;
			_this.shearY = data.shearY;
			++i;
		}
		var ikConstraints = this.ikConstraints;
		var i = 0;
		var n = this.ikConstraints.length;
		while(i < n) {
			var result = ikConstraints[i];
			var constraint = result;
			constraint.mix = constraint.data.mix;
			constraint.softness = constraint.data.softness;
			constraint.bendDirection = constraint.data.bendDirection;
			constraint.compress = constraint.data.compress;
			constraint.stretch = constraint.data.stretch;
			++i;
		}
		var transformConstraints = this.transformConstraints;
		var i = 0;
		var n = this.transformConstraints.length;
		while(i < n) {
			var result = transformConstraints[i];
			var constraint = result;
			var data = constraint.data;
			constraint.mixRotate = data.mixRotate;
			constraint.mixX = data.mixX;
			constraint.mixY = data.mixY;
			constraint.mixScaleX = data.mixScaleX;
			constraint.mixScaleY = data.mixScaleY;
			constraint.mixShearY = data.mixShearY;
			++i;
		}
		var pathConstraints = this.pathConstraints;
		var i = 0;
		var n = this.pathConstraints.length;
		while(i < n) {
			var result = pathConstraints[i];
			var constraint = result;
			var data = constraint.data;
			constraint.position = data.position;
			constraint.spacing = data.spacing;
			constraint.mixRotate = data.mixRotate;
			constraint.mixX = data.mixX;
			constraint.mixY = data.mixY;
			++i;
		}
		var slots = this.slots;
		var n = this.slots.length;
		var src = slots;
		var dest = this.drawOrder;
		if(src == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("src cannot be null."));
		}
		if(dest == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("dest cannot be null."));
		}
		try {
			spine_support_utils_Array.copy(src,0,dest,0,n);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			throw haxe_Exception.thrown(new spine_support_error_ArrayIndexOutOfBoundsException("Src: " + src.length + ", " + 0 + ", dest: " + dest.length + ", " + 0 + ", count: " + n));
		}
		var i = 0;
		while(i < n) {
			var result = slots[i];
			var _this = result;
			var _this1 = _this.color;
			var color = _this.data.color;
			_this1.r = color.r;
			_this1.g = color.g;
			_this1.b = color.b;
			_this1.a = color.a;
			if(_this.darkColor != null) {
				var _this2 = _this.darkColor;
				var color1 = _this.data.darkColor;
				_this2.r = color1.r;
				_this2.g = color1.g;
				_this2.b = color1.b;
				_this2.a = color1.a;
			}
			if(_this.data.attachmentName == null) {
				var attachment = null;
				if(_this.attachment != attachment) {
					var tmp;
					if(!(!((attachment) instanceof spine_attachments_VertexAttachment) || !((_this.attachment) instanceof spine_attachments_VertexAttachment))) {
						var result1 = attachment;
						var _this3 = result1;
						var result2 = _this.attachment;
						var _this4 = result2;
						tmp = (_this3.deformAttachment != null ? _this3.deformAttachment : _this3) != (_this4.deformAttachment != null ? _this4.deformAttachment : _this4);
					} else {
						tmp = true;
					}
					if(tmp) {
						var this1 = _this.deform;
						this1.splice(0,this1.length);
					}
					_this.attachment = attachment;
					_this.attachmentTime = _this.bone.skeleton.time;
				}
			} else {
				_this.attachment = null;
				var attachment1 = _this.bone.skeleton.getAttachment(_this.data.index,_this.data.attachmentName);
				if(_this.attachment != attachment1) {
					var tmp1;
					if(!(!((attachment1) instanceof spine_attachments_VertexAttachment) || !((_this.attachment) instanceof spine_attachments_VertexAttachment))) {
						var result3 = attachment1;
						var _this5 = result3;
						var result4 = _this.attachment;
						var _this6 = result4;
						tmp1 = (_this5.deformAttachment != null ? _this5.deformAttachment : _this5) != (_this6.deformAttachment != null ? _this6.deformAttachment : _this6);
					} else {
						tmp1 = true;
					}
					if(tmp1) {
						var this2 = _this.deform;
						this2.splice(0,this2.length);
					}
					_this.attachment = attachment1;
					_this.attachmentTime = _this.bone.skeleton.time;
				}
			}
			++i;
		}
	}
	,setBonesToSetupPose: function() {
		var bones = this.bones;
		var i = 0;
		var n = this.bones.length;
		while(i < n) {
			var result = bones[i];
			var _this = result;
			var data = _this.data;
			_this.x = data.x;
			_this.y = data.y;
			_this.rotation = data.rotation;
			_this.scaleX = data.scaleX;
			_this.scaleY = data.scaleY;
			_this.shearX = data.shearX;
			_this.shearY = data.shearY;
			++i;
		}
		var ikConstraints = this.ikConstraints;
		var i = 0;
		var n = this.ikConstraints.length;
		while(i < n) {
			var result = ikConstraints[i];
			var constraint = result;
			constraint.mix = constraint.data.mix;
			constraint.softness = constraint.data.softness;
			constraint.bendDirection = constraint.data.bendDirection;
			constraint.compress = constraint.data.compress;
			constraint.stretch = constraint.data.stretch;
			++i;
		}
		var transformConstraints = this.transformConstraints;
		var i = 0;
		var n = this.transformConstraints.length;
		while(i < n) {
			var result = transformConstraints[i];
			var constraint = result;
			var data = constraint.data;
			constraint.mixRotate = data.mixRotate;
			constraint.mixX = data.mixX;
			constraint.mixY = data.mixY;
			constraint.mixScaleX = data.mixScaleX;
			constraint.mixScaleY = data.mixScaleY;
			constraint.mixShearY = data.mixShearY;
			++i;
		}
		var pathConstraints = this.pathConstraints;
		var i = 0;
		var n = this.pathConstraints.length;
		while(i < n) {
			var result = pathConstraints[i];
			var constraint = result;
			var data = constraint.data;
			constraint.position = data.position;
			constraint.spacing = data.spacing;
			constraint.mixRotate = data.mixRotate;
			constraint.mixX = data.mixX;
			constraint.mixY = data.mixY;
			++i;
		}
	}
	,setSlotsToSetupPose: function() {
		var slots = this.slots;
		var n = this.slots.length;
		var src = slots;
		var dest = this.drawOrder;
		if(src == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("src cannot be null."));
		}
		if(dest == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("dest cannot be null."));
		}
		try {
			spine_support_utils_Array.copy(src,0,dest,0,n);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			throw haxe_Exception.thrown(new spine_support_error_ArrayIndexOutOfBoundsException("Src: " + src.length + ", " + 0 + ", dest: " + dest.length + ", " + 0 + ", count: " + n));
		}
		var i = 0;
		while(i < n) {
			var result = slots[i];
			var _this = result;
			var _this1 = _this.color;
			var color = _this.data.color;
			_this1.r = color.r;
			_this1.g = color.g;
			_this1.b = color.b;
			_this1.a = color.a;
			if(_this.darkColor != null) {
				var _this2 = _this.darkColor;
				var color1 = _this.data.darkColor;
				_this2.r = color1.r;
				_this2.g = color1.g;
				_this2.b = color1.b;
				_this2.a = color1.a;
			}
			if(_this.data.attachmentName == null) {
				var attachment = null;
				if(_this.attachment != attachment) {
					var tmp;
					if(!(!((attachment) instanceof spine_attachments_VertexAttachment) || !((_this.attachment) instanceof spine_attachments_VertexAttachment))) {
						var result1 = attachment;
						var _this3 = result1;
						var result2 = _this.attachment;
						var _this4 = result2;
						tmp = (_this3.deformAttachment != null ? _this3.deformAttachment : _this3) != (_this4.deformAttachment != null ? _this4.deformAttachment : _this4);
					} else {
						tmp = true;
					}
					if(tmp) {
						var this1 = _this.deform;
						this1.splice(0,this1.length);
					}
					_this.attachment = attachment;
					_this.attachmentTime = _this.bone.skeleton.time;
				}
			} else {
				_this.attachment = null;
				var attachment1 = _this.bone.skeleton.getAttachment(_this.data.index,_this.data.attachmentName);
				if(_this.attachment != attachment1) {
					var tmp1;
					if(!(!((attachment1) instanceof spine_attachments_VertexAttachment) || !((_this.attachment) instanceof spine_attachments_VertexAttachment))) {
						var result3 = attachment1;
						var _this5 = result3;
						var result4 = _this.attachment;
						var _this6 = result4;
						tmp1 = (_this5.deformAttachment != null ? _this5.deformAttachment : _this5) != (_this6.deformAttachment != null ? _this6.deformAttachment : _this6);
					} else {
						tmp1 = true;
					}
					if(tmp1) {
						var this2 = _this.deform;
						this2.splice(0,this2.length);
					}
					_this.attachment = attachment1;
					_this.attachmentTime = _this.bone.skeleton.time;
				}
			}
			++i;
		}
	}
	,getData: function() {
		return this.data;
	}
	,getBones: function() {
		return this.bones;
	}
	,getUpdateCache: function() {
		return this.cache;
	}
	,getRootBone: function() {
		if(this.bones.length == 0) {
			return null;
		} else {
			var this1 = this.bones;
			if(this1.length > 0) {
				return this1[0];
			} else {
				return null;
			}
		}
	}
	,findBone: function(boneName) {
		if(boneName == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("boneName cannot be null."));
		}
		var bones = this.bones;
		var i = 0;
		var n = this.bones.length;
		while(i < n) {
			var result = bones[i];
			var bone = result;
			if(bone.data.name == boneName) {
				return bone;
			}
			++i;
		}
		return null;
	}
	,getSlots: function() {
		return this.slots;
	}
	,findSlot: function(slotName) {
		if(slotName == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("slotName cannot be null."));
		}
		var slots = this.slots;
		var i = 0;
		var n = this.slots.length;
		while(i < n) {
			var result = slots[i];
			var slot = result;
			if(slot.data.name == slotName) {
				return slot;
			}
			++i;
		}
		return null;
	}
	,getDrawOrder: function() {
		return this.drawOrder;
	}
	,setDrawOrder: function(drawOrder) {
		if(drawOrder == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("drawOrder cannot be null."));
		}
		this.drawOrder = drawOrder;
	}
	,getSkin: function() {
		return this.skin;
	}
	,setSkinByName: function(skinName) {
		var skin = this.data.findSkin(skinName);
		if(skin == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("Skin not found: " + skinName));
		}
		if(skin != this.skin) {
			if(skin != null) {
				if(this.skin != null) {
					var slots = this.slots;
					var _g = 0;
					var _g1 = spine_support_utils_AttachmentSet.orderedItems(this.skin.attachments);
					while(_g < _g1.length) {
						var entry = _g1[_g];
						++_g;
						var slotIndex = entry.slotIndex;
						var result = slots[slotIndex];
						var slot = result;
						if(slot.attachment == entry.attachment) {
							var name = entry.name;
							var _this = skin.lookup;
							if(slotIndex < 0) {
								throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("slotIndex must be >= 0."));
							}
							if(name == null) {
								throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("name cannot be null."));
							}
							_this.slotIndex = slotIndex;
							_this.name = name;
							var hash = 0;
							var chr;
							var x;
							if(name.length == 0) {
								x = hash;
							} else {
								var _g2 = 0;
								var _g3 = name.length;
								while(_g2 < _g3) {
									var i = _g2++;
									chr = HxOverrides.cca(name,i);
									hash = (hash << 5) - hash + chr;
								}
								x = hash;
							}
							_this.hashCode = x + slotIndex * 37 | 0;
							var key = skin.lookup;
							var entries = skin.attachments.h[key.hashCode];
							var result1 = null;
							if(entries != null) {
								var _g4 = 0;
								var _g5 = entries.length;
								while(_g4 < _g5) {
									var i1 = _g4++;
									var entry1 = entries[i1];
									var object = key;
									var tmp;
									if(object == null) {
										tmp = false;
									} else {
										var result2 = object;
										var other = result2;
										tmp = entry1.slotIndex != other.slotIndex ? false : entry1.name == other.name;
									}
									if(tmp) {
										result1 = entry1;
										break;
									}
								}
							}
							var entry2 = result1;
							var attachment = entry2 != null ? entry2.attachment : null;
							if(attachment != null) {
								if(slot.attachment != attachment) {
									var tmp1;
									if(!(!((attachment) instanceof spine_attachments_VertexAttachment) || !((slot.attachment) instanceof spine_attachments_VertexAttachment))) {
										var result3 = attachment;
										var _this1 = result3;
										var result4 = slot.attachment;
										var _this2 = result4;
										tmp1 = (_this1.deformAttachment != null ? _this1.deformAttachment : _this1) != (_this2.deformAttachment != null ? _this2.deformAttachment : _this2);
									} else {
										tmp1 = true;
									}
									if(tmp1) {
										var this1 = slot.deform;
										this1.splice(0,this1.length);
									}
									slot.attachment = attachment;
									slot.attachmentTime = slot.bone.skeleton.time;
								}
							}
						}
					}
				} else {
					var slots = this.slots;
					var i = 0;
					var n = this.slots.length;
					while(i < n) {
						var result = slots[i];
						var slot = result;
						var name = slot.data.attachmentName;
						if(name != null) {
							var _this = skin.lookup;
							if(i < 0) {
								throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("slotIndex must be >= 0."));
							}
							if(name == null) {
								throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("name cannot be null."));
							}
							_this.slotIndex = i;
							_this.name = name;
							var hash = 0;
							var chr;
							var x;
							if(name.length == 0) {
								x = hash;
							} else {
								var _g = 0;
								var _g1 = name.length;
								while(_g < _g1) {
									var i1 = _g++;
									chr = HxOverrides.cca(name,i1);
									hash = (hash << 5) - hash + chr;
								}
								x = hash;
							}
							_this.hashCode = x + i * 37 | 0;
							var key = skin.lookup;
							var entries = skin.attachments.h[key.hashCode];
							var result1 = null;
							if(entries != null) {
								var _g2 = 0;
								var _g3 = entries.length;
								while(_g2 < _g3) {
									var i2 = _g2++;
									var entry = entries[i2];
									var object = key;
									var tmp;
									if(object == null) {
										tmp = false;
									} else {
										var result2 = object;
										var other = result2;
										tmp = entry.slotIndex != other.slotIndex ? false : entry.name == other.name;
									}
									if(tmp) {
										result1 = entry;
										break;
									}
								}
							}
							var entry1 = result1;
							var attachment = entry1 != null ? entry1.attachment : null;
							if(attachment != null) {
								if(slot.attachment != attachment) {
									var tmp1;
									if(!(!((attachment) instanceof spine_attachments_VertexAttachment) || !((slot.attachment) instanceof spine_attachments_VertexAttachment))) {
										var result3 = attachment;
										var _this1 = result3;
										var result4 = slot.attachment;
										var _this2 = result4;
										tmp1 = (_this1.deformAttachment != null ? _this1.deformAttachment : _this1) != (_this2.deformAttachment != null ? _this2.deformAttachment : _this2);
									} else {
										tmp1 = true;
									}
									if(tmp1) {
										var this1 = slot.deform;
										this1.splice(0,this1.length);
									}
									slot.attachment = attachment;
									slot.attachmentTime = slot.bone.skeleton.time;
								}
							}
						}
						++i;
					}
				}
			}
			this.skin = skin;
			var cache = this.cache;
			cache.splice(0,cache.length);
			var boneCount = this.bones.length;
			var bones = this.bones;
			var i = 0;
			while(i < boneCount) {
				var result = bones[i];
				var bone = result;
				bone.sorted = bone.data.skinRequired;
				bone.active = !bone.sorted;
				++i;
			}
			if(this.skin != null) {
				var skinBones = this.skin.bones;
				var i = 0;
				var n = this.skin.bones.length;
				while(i < n) {
					var result = skinBones[i];
					var result1 = bones[result.index];
					var bone = result1;
					while(true) {
						bone.sorted = false;
						bone.active = true;
						bone = bone.parent;
						if(!(bone != null)) {
							break;
						}
					}
					++i;
				}
			}
			var ikCount = this.ikConstraints.length;
			var transformCount = this.transformConstraints.length;
			var pathCount = this.pathConstraints.length;
			var ikConstraints = this.ikConstraints;
			var transformConstraints = this.transformConstraints;
			var pathConstraints = this.pathConstraints;
			var constraintCount = ikCount + transformCount + pathCount;
			var _gotoLabel_outer;
			while(true) {
				_gotoLabel_outer = 0;
				var i = 0;
				while(i < constraintCount) {
					var ii = 0;
					while(ii < ikCount) {
						var result = ikConstraints[ii];
						var constraint = result;
						if(constraint.data.order == i) {
							constraint.active = constraint.target.active && (!constraint.data.skinRequired || this.skin != null && this.skin.constraints.indexOf(constraint.data) != -1);
							if(constraint.active) {
								var target = constraint.target;
								if(!target.sorted) {
									var parent = target.parent;
									if(parent != null) {
										if(!parent.sorted) {
											var parent1 = parent.parent;
											if(parent1 != null) {
												this.sortBone(parent1);
											}
											parent.sorted = true;
											this.cache.push(parent);
										}
									}
									target.sorted = true;
									this.cache.push(target);
								}
								var constrained = constraint.bones;
								var parent2 = constrained.length > 0 ? constrained[0] : null;
								if(!parent2.sorted) {
									var parent3 = parent2.parent;
									if(parent3 != null) {
										if(!parent3.sorted) {
											var parent4 = parent3.parent;
											if(parent4 != null) {
												this.sortBone(parent4);
											}
											parent3.sorted = true;
											this.cache.push(parent3);
										}
									}
									parent2.sorted = true;
									this.cache.push(parent2);
								}
								if(constrained.length == 1) {
									this.cache.push(constraint);
									var bones1 = parent2.children;
									var items = bones1;
									var i1 = 0;
									var n = bones1.length;
									while(i1 < n) {
										var result1 = items[i1];
										var bone = result1;
										if(!bone.active) {
											++i1;
											continue;
										}
										if(bone.sorted) {
											var bones2 = bone.children;
											var items1 = bones2;
											var i2 = 0;
											var n1 = bones2.length;
											while(i2 < n1) {
												var result2 = items1[i2];
												var bone1 = result2;
												if(!bone1.active) {
													++i2;
													continue;
												}
												if(bone1.sorted) {
													this.sortReset(bone1.children);
												}
												bone1.sorted = false;
												++i2;
											}
										}
										bone.sorted = false;
										++i1;
									}
								} else {
									var child = constrained.length == 0 ? null : constrained[constrained.length - 1];
									if(!child.sorted) {
										var parent5 = child.parent;
										if(parent5 != null) {
											if(!parent5.sorted) {
												var parent6 = parent5.parent;
												if(parent6 != null) {
													this.sortBone(parent6);
												}
												parent5.sorted = true;
												this.cache.push(parent5);
											}
										}
										child.sorted = true;
										this.cache.push(child);
									}
									this.cache.push(constraint);
									var bones3 = parent2.children;
									var items2 = bones3;
									var i3 = 0;
									var n2 = bones3.length;
									while(i3 < n2) {
										var result3 = items2[i3];
										var bone2 = result3;
										if(!bone2.active) {
											++i3;
											continue;
										}
										if(bone2.sorted) {
											var bones4 = bone2.children;
											var items3 = bones4;
											var i4 = 0;
											var n3 = bones4.length;
											while(i4 < n3) {
												var result4 = items3[i4];
												var bone3 = result4;
												if(!bone3.active) {
													++i4;
													continue;
												}
												if(bone3.sorted) {
													this.sortReset(bone3.children);
												}
												bone3.sorted = false;
												++i4;
											}
										}
										bone2.sorted = false;
										++i3;
									}
									child.sorted = true;
								}
							}
							++ii;
							_gotoLabel_outer = 2;
							break;
						}
						++ii;
					}
					if(_gotoLabel_outer == 2) {
						_gotoLabel_outer = 0;
						++i;
						continue;
					}
					if(_gotoLabel_outer >= 1) {
						break;
					}
					var ii1 = 0;
					while(ii1 < transformCount) {
						var result5 = transformConstraints[ii1];
						var constraint1 = result5;
						if(constraint1.data.order == i) {
							constraint1.active = constraint1.target.active && (!constraint1.data.skinRequired || this.skin != null && this.skin.constraints.indexOf(constraint1.data) != -1);
							if(constraint1.active) {
								var bone4 = constraint1.target;
								if(!bone4.sorted) {
									var parent7 = bone4.parent;
									if(parent7 != null) {
										if(!parent7.sorted) {
											var parent8 = parent7.parent;
											if(parent8 != null) {
												this.sortBone(parent8);
											}
											parent7.sorted = true;
											this.cache.push(parent7);
										}
									}
									bone4.sorted = true;
									this.cache.push(bone4);
								}
								var constrained1 = constraint1.bones;
								var boneCount1 = constraint1.bones.length;
								if(constraint1.data.local) {
									var i5 = 0;
									while(i5 < boneCount1) {
										var result6 = constrained1[i5];
										var child1 = result6;
										var bone5 = child1.parent;
										if(!bone5.sorted) {
											var parent9 = bone5.parent;
											if(parent9 != null) {
												if(!parent9.sorted) {
													var parent10 = parent9.parent;
													if(parent10 != null) {
														this.sortBone(parent10);
													}
													parent9.sorted = true;
													this.cache.push(parent9);
												}
											}
											bone5.sorted = true;
											this.cache.push(bone5);
										}
										if(!child1.sorted) {
											var parent11 = child1.parent;
											if(parent11 != null) {
												if(!parent11.sorted) {
													var parent12 = parent11.parent;
													if(parent12 != null) {
														this.sortBone(parent12);
													}
													parent11.sorted = true;
													this.cache.push(parent11);
												}
											}
											child1.sorted = true;
											this.cache.push(child1);
										}
										++i5;
									}
								} else {
									var i6 = 0;
									while(i6 < boneCount1) {
										var result7 = constrained1[i6];
										var bone6 = result7;
										if(!bone6.sorted) {
											var parent13 = bone6.parent;
											if(parent13 != null) {
												if(!parent13.sorted) {
													var parent14 = parent13.parent;
													if(parent14 != null) {
														this.sortBone(parent14);
													}
													parent13.sorted = true;
													this.cache.push(parent13);
												}
											}
											bone6.sorted = true;
											this.cache.push(bone6);
										}
										++i6;
									}
								}
								this.cache.push(constraint1);
								var i7 = 0;
								while(i7 < boneCount1) {
									var result8 = constrained1[i7];
									var bones5 = result8.children;
									var items4 = bones5;
									var i8 = 0;
									var n4 = bones5.length;
									while(i8 < n4) {
										var result9 = items4[i8];
										var bone7 = result9;
										if(!bone7.active) {
											++i8;
											continue;
										}
										if(bone7.sorted) {
											var bones6 = bone7.children;
											var items5 = bones6;
											var i9 = 0;
											var n5 = bones6.length;
											while(i9 < n5) {
												var result10 = items5[i9];
												var bone8 = result10;
												if(!bone8.active) {
													++i9;
													continue;
												}
												if(bone8.sorted) {
													this.sortReset(bone8.children);
												}
												bone8.sorted = false;
												++i9;
											}
										}
										bone7.sorted = false;
										++i8;
									}
									++i7;
								}
								var i10 = 0;
								while(i10 < boneCount1) {
									var result11 = constrained1[i10];
									result11.sorted = true;
									++i10;
								}
							}
							++ii1;
							_gotoLabel_outer = 2;
							break;
						}
						++ii1;
					}
					if(_gotoLabel_outer == 2) {
						_gotoLabel_outer = 0;
						++i;
						continue;
					}
					if(_gotoLabel_outer >= 1) {
						break;
					}
					var ii2 = 0;
					while(ii2 < pathCount) {
						var result12 = pathConstraints[ii2];
						var constraint2 = result12;
						if(constraint2.data.order == i) {
							constraint2.active = constraint2.target.bone.active && (!constraint2.data.skinRequired || this.skin != null && this.skin.constraints.indexOf(constraint2.data) != -1);
							if(constraint2.active) {
								var slot = constraint2.target;
								var slotIndex = slot.data.index;
								var slotBone = slot.bone;
								if(this.skin != null) {
									var skin = this.skin;
									var entries = spine_support_utils_AttachmentSet.orderedItems(skin.attachments);
									var i11 = 0;
									var n6 = spine_support_utils_AttachmentSet.get_size(skin.attachments);
									while(i11 < n6) {
										var result13 = entries[i11];
										var entry = result13;
										if(entry.slotIndex == slotIndex) {
											var attachment = entry.attachment;
											if(((attachment) instanceof spine_attachments_PathAttachment)) {
												var result14 = attachment;
												var pathBones = result14.bones;
												if(pathBones == null) {
													if(!slotBone.sorted) {
														var parent15 = slotBone.parent;
														if(parent15 != null) {
															if(!parent15.sorted) {
																var parent16 = parent15.parent;
																if(parent16 != null) {
																	this.sortBone(parent16);
																}
																parent15.sorted = true;
																this.cache.push(parent15);
															}
														}
														slotBone.sorted = true;
														this.cache.push(slotBone);
													}
												} else {
													var bones7 = this.bones;
													var i12 = 0;
													var n7 = pathBones.length;
													while(i12 < n7) {
														var nn = pathBones[i12++];
														nn += i12;
														while(i12 < nn) {
															var result15 = bones7[pathBones[i12++]];
															var bone9 = result15;
															if(!bone9.sorted) {
																var parent17 = bone9.parent;
																if(parent17 != null) {
																	if(!parent17.sorted) {
																		var parent18 = parent17.parent;
																		if(parent18 != null) {
																			this.sortBone(parent18);
																		}
																		parent17.sorted = true;
																		this.cache.push(parent17);
																	}
																}
																bone9.sorted = true;
																this.cache.push(bone9);
															}
														}
													}
												}
											}
										}
										++i11;
									}
								}
								if(this.data.defaultSkin != null && this.data.defaultSkin != this.skin) {
									var skin1 = this.data.defaultSkin;
									var entries1 = spine_support_utils_AttachmentSet.orderedItems(skin1.attachments);
									var i13 = 0;
									var n8 = spine_support_utils_AttachmentSet.get_size(skin1.attachments);
									while(i13 < n8) {
										var result16 = entries1[i13];
										var entry1 = result16;
										if(entry1.slotIndex == slotIndex) {
											var attachment1 = entry1.attachment;
											if(((attachment1) instanceof spine_attachments_PathAttachment)) {
												var result17 = attachment1;
												var pathBones1 = result17.bones;
												if(pathBones1 == null) {
													if(!slotBone.sorted) {
														var parent19 = slotBone.parent;
														if(parent19 != null) {
															if(!parent19.sorted) {
																var parent20 = parent19.parent;
																if(parent20 != null) {
																	this.sortBone(parent20);
																}
																parent19.sorted = true;
																this.cache.push(parent19);
															}
														}
														slotBone.sorted = true;
														this.cache.push(slotBone);
													}
												} else {
													var bones8 = this.bones;
													var i14 = 0;
													var n9 = pathBones1.length;
													while(i14 < n9) {
														var nn1 = pathBones1[i14++];
														nn1 += i14;
														while(i14 < nn1) {
															var result18 = bones8[pathBones1[i14++]];
															var bone10 = result18;
															if(!bone10.sorted) {
																var parent21 = bone10.parent;
																if(parent21 != null) {
																	if(!parent21.sorted) {
																		var parent22 = parent21.parent;
																		if(parent22 != null) {
																			this.sortBone(parent22);
																		}
																		parent21.sorted = true;
																		this.cache.push(parent21);
																	}
																}
																bone10.sorted = true;
																this.cache.push(bone10);
															}
														}
													}
												}
											}
										}
										++i13;
									}
								}
								var attachment2 = slot.attachment;
								if(((attachment2) instanceof spine_attachments_PathAttachment)) {
									if(((attachment2) instanceof spine_attachments_PathAttachment)) {
										var result19 = attachment2;
										var pathBones2 = result19.bones;
										if(pathBones2 == null) {
											if(!slotBone.sorted) {
												var parent23 = slotBone.parent;
												if(parent23 != null) {
													if(!parent23.sorted) {
														var parent24 = parent23.parent;
														if(parent24 != null) {
															this.sortBone(parent24);
														}
														parent23.sorted = true;
														this.cache.push(parent23);
													}
												}
												slotBone.sorted = true;
												this.cache.push(slotBone);
											}
										} else {
											var bones9 = this.bones;
											var i15 = 0;
											var n10 = pathBones2.length;
											while(i15 < n10) {
												var nn2 = pathBones2[i15++];
												nn2 += i15;
												while(i15 < nn2) {
													var result20 = bones9[pathBones2[i15++]];
													var bone11 = result20;
													if(!bone11.sorted) {
														var parent25 = bone11.parent;
														if(parent25 != null) {
															if(!parent25.sorted) {
																var parent26 = parent25.parent;
																if(parent26 != null) {
																	this.sortBone(parent26);
																}
																parent25.sorted = true;
																this.cache.push(parent25);
															}
														}
														bone11.sorted = true;
														this.cache.push(bone11);
													}
												}
											}
										}
									}
								}
								var constrained2 = constraint2.bones;
								var boneCount2 = constraint2.bones.length;
								var i16 = 0;
								while(i16 < boneCount2) {
									var result21 = constrained2[i16];
									var bone12 = result21;
									if(!bone12.sorted) {
										var parent27 = bone12.parent;
										if(parent27 != null) {
											if(!parent27.sorted) {
												var parent28 = parent27.parent;
												if(parent28 != null) {
													this.sortBone(parent28);
												}
												parent27.sorted = true;
												this.cache.push(parent27);
											}
										}
										bone12.sorted = true;
										this.cache.push(bone12);
									}
									++i16;
								}
								this.cache.push(constraint2);
								var i17 = 0;
								while(i17 < boneCount2) {
									var result22 = constrained2[i17];
									var bones10 = result22.children;
									var items6 = bones10;
									var i18 = 0;
									var n11 = bones10.length;
									while(i18 < n11) {
										var result23 = items6[i18];
										var bone13 = result23;
										if(!bone13.active) {
											++i18;
											continue;
										}
										if(bone13.sorted) {
											var bones11 = bone13.children;
											var items7 = bones11;
											var i19 = 0;
											var n12 = bones11.length;
											while(i19 < n12) {
												var result24 = items7[i19];
												var bone14 = result24;
												if(!bone14.active) {
													++i19;
													continue;
												}
												if(bone14.sorted) {
													this.sortReset(bone14.children);
												}
												bone14.sorted = false;
												++i19;
											}
										}
										bone13.sorted = false;
										++i18;
									}
									++i17;
								}
								var i20 = 0;
								while(i20 < boneCount2) {
									var result25 = constrained2[i20];
									result25.sorted = true;
									++i20;
								}
							}
							++ii2;
							_gotoLabel_outer = 2;
							break;
						}
						++ii2;
					}
					if(_gotoLabel_outer == 2) {
						_gotoLabel_outer = 0;
						++i;
						continue;
					}
					if(_gotoLabel_outer >= 1) {
						break;
					}
					++i;
				}
				if(_gotoLabel_outer == 0) {
					break;
				}
			}
			var i = 0;
			while(i < boneCount) {
				var result = bones[i];
				var bone = result;
				if(!bone.sorted) {
					var parent = bone.parent;
					if(parent != null) {
						if(!parent.sorted) {
							var parent1 = parent.parent;
							if(parent1 != null) {
								this.sortBone(parent1);
							}
							parent.sorted = true;
							this.cache.push(parent);
						}
					}
					bone.sorted = true;
					this.cache.push(bone);
				}
				++i;
			}
		}
	}
	,setSkin: function(newSkin) {
		if(newSkin == this.skin) {
			return;
		}
		if(newSkin != null) {
			if(this.skin != null) {
				var slots = this.slots;
				var _g = 0;
				var _g1 = spine_support_utils_AttachmentSet.orderedItems(this.skin.attachments);
				while(_g < _g1.length) {
					var entry = _g1[_g];
					++_g;
					var slotIndex = entry.slotIndex;
					var result = slots[slotIndex];
					var slot = result;
					if(slot.attachment == entry.attachment) {
						var name = entry.name;
						var _this = newSkin.lookup;
						if(slotIndex < 0) {
							throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("slotIndex must be >= 0."));
						}
						if(name == null) {
							throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("name cannot be null."));
						}
						_this.slotIndex = slotIndex;
						_this.name = name;
						var hash = 0;
						var chr;
						var x;
						if(name.length == 0) {
							x = hash;
						} else {
							var _g2 = 0;
							var _g3 = name.length;
							while(_g2 < _g3) {
								var i = _g2++;
								chr = HxOverrides.cca(name,i);
								hash = (hash << 5) - hash + chr;
							}
							x = hash;
						}
						_this.hashCode = x + slotIndex * 37 | 0;
						var key = newSkin.lookup;
						var entries = newSkin.attachments.h[key.hashCode];
						var result1 = null;
						if(entries != null) {
							var _g4 = 0;
							var _g5 = entries.length;
							while(_g4 < _g5) {
								var i1 = _g4++;
								var entry1 = entries[i1];
								var object = key;
								var tmp;
								if(object == null) {
									tmp = false;
								} else {
									var result2 = object;
									var other = result2;
									tmp = entry1.slotIndex != other.slotIndex ? false : entry1.name == other.name;
								}
								if(tmp) {
									result1 = entry1;
									break;
								}
							}
						}
						var entry2 = result1;
						var attachment = entry2 != null ? entry2.attachment : null;
						if(attachment != null) {
							if(slot.attachment != attachment) {
								var tmp1;
								if(!(!((attachment) instanceof spine_attachments_VertexAttachment) || !((slot.attachment) instanceof spine_attachments_VertexAttachment))) {
									var result3 = attachment;
									var _this1 = result3;
									var result4 = slot.attachment;
									var _this2 = result4;
									tmp1 = (_this1.deformAttachment != null ? _this1.deformAttachment : _this1) != (_this2.deformAttachment != null ? _this2.deformAttachment : _this2);
								} else {
									tmp1 = true;
								}
								if(tmp1) {
									var this1 = slot.deform;
									this1.splice(0,this1.length);
								}
								slot.attachment = attachment;
								slot.attachmentTime = slot.bone.skeleton.time;
							}
						}
					}
				}
			} else {
				var slots = this.slots;
				var i = 0;
				var n = this.slots.length;
				while(i < n) {
					var result = slots[i];
					var slot = result;
					var name = slot.data.attachmentName;
					if(name != null) {
						var _this = newSkin.lookup;
						if(i < 0) {
							throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("slotIndex must be >= 0."));
						}
						if(name == null) {
							throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("name cannot be null."));
						}
						_this.slotIndex = i;
						_this.name = name;
						var hash = 0;
						var chr;
						var x;
						if(name.length == 0) {
							x = hash;
						} else {
							var _g = 0;
							var _g1 = name.length;
							while(_g < _g1) {
								var i1 = _g++;
								chr = HxOverrides.cca(name,i1);
								hash = (hash << 5) - hash + chr;
							}
							x = hash;
						}
						_this.hashCode = x + i * 37 | 0;
						var key = newSkin.lookup;
						var entries = newSkin.attachments.h[key.hashCode];
						var result1 = null;
						if(entries != null) {
							var _g2 = 0;
							var _g3 = entries.length;
							while(_g2 < _g3) {
								var i2 = _g2++;
								var entry = entries[i2];
								var object = key;
								var tmp;
								if(object == null) {
									tmp = false;
								} else {
									var result2 = object;
									var other = result2;
									tmp = entry.slotIndex != other.slotIndex ? false : entry.name == other.name;
								}
								if(tmp) {
									result1 = entry;
									break;
								}
							}
						}
						var entry1 = result1;
						var attachment = entry1 != null ? entry1.attachment : null;
						if(attachment != null) {
							if(slot.attachment != attachment) {
								var tmp1;
								if(!(!((attachment) instanceof spine_attachments_VertexAttachment) || !((slot.attachment) instanceof spine_attachments_VertexAttachment))) {
									var result3 = attachment;
									var _this1 = result3;
									var result4 = slot.attachment;
									var _this2 = result4;
									tmp1 = (_this1.deformAttachment != null ? _this1.deformAttachment : _this1) != (_this2.deformAttachment != null ? _this2.deformAttachment : _this2);
								} else {
									tmp1 = true;
								}
								if(tmp1) {
									var this1 = slot.deform;
									this1.splice(0,this1.length);
								}
								slot.attachment = attachment;
								slot.attachmentTime = slot.bone.skeleton.time;
							}
						}
					}
					++i;
				}
			}
		}
		this.skin = newSkin;
		var cache = this.cache;
		cache.splice(0,cache.length);
		var boneCount = this.bones.length;
		var bones = this.bones;
		var i = 0;
		while(i < boneCount) {
			var result = bones[i];
			var bone = result;
			bone.sorted = bone.data.skinRequired;
			bone.active = !bone.sorted;
			++i;
		}
		if(this.skin != null) {
			var skinBones = this.skin.bones;
			var i = 0;
			var n = this.skin.bones.length;
			while(i < n) {
				var result = skinBones[i];
				var result1 = bones[result.index];
				var bone = result1;
				while(true) {
					bone.sorted = false;
					bone.active = true;
					bone = bone.parent;
					if(!(bone != null)) {
						break;
					}
				}
				++i;
			}
		}
		var ikCount = this.ikConstraints.length;
		var transformCount = this.transformConstraints.length;
		var pathCount = this.pathConstraints.length;
		var ikConstraints = this.ikConstraints;
		var transformConstraints = this.transformConstraints;
		var pathConstraints = this.pathConstraints;
		var constraintCount = ikCount + transformCount + pathCount;
		var _gotoLabel_outer;
		while(true) {
			_gotoLabel_outer = 0;
			var i = 0;
			while(i < constraintCount) {
				var ii = 0;
				while(ii < ikCount) {
					var result = ikConstraints[ii];
					var constraint = result;
					if(constraint.data.order == i) {
						constraint.active = constraint.target.active && (!constraint.data.skinRequired || this.skin != null && this.skin.constraints.indexOf(constraint.data) != -1);
						if(constraint.active) {
							var target = constraint.target;
							if(!target.sorted) {
								var parent = target.parent;
								if(parent != null) {
									if(!parent.sorted) {
										var parent1 = parent.parent;
										if(parent1 != null) {
											this.sortBone(parent1);
										}
										parent.sorted = true;
										this.cache.push(parent);
									}
								}
								target.sorted = true;
								this.cache.push(target);
							}
							var constrained = constraint.bones;
							var parent2 = constrained.length > 0 ? constrained[0] : null;
							if(!parent2.sorted) {
								var parent3 = parent2.parent;
								if(parent3 != null) {
									if(!parent3.sorted) {
										var parent4 = parent3.parent;
										if(parent4 != null) {
											this.sortBone(parent4);
										}
										parent3.sorted = true;
										this.cache.push(parent3);
									}
								}
								parent2.sorted = true;
								this.cache.push(parent2);
							}
							if(constrained.length == 1) {
								this.cache.push(constraint);
								var bones1 = parent2.children;
								var items = bones1;
								var i1 = 0;
								var n = bones1.length;
								while(i1 < n) {
									var result1 = items[i1];
									var bone = result1;
									if(!bone.active) {
										++i1;
										continue;
									}
									if(bone.sorted) {
										var bones2 = bone.children;
										var items1 = bones2;
										var i2 = 0;
										var n1 = bones2.length;
										while(i2 < n1) {
											var result2 = items1[i2];
											var bone1 = result2;
											if(!bone1.active) {
												++i2;
												continue;
											}
											if(bone1.sorted) {
												this.sortReset(bone1.children);
											}
											bone1.sorted = false;
											++i2;
										}
									}
									bone.sorted = false;
									++i1;
								}
							} else {
								var child = constrained.length == 0 ? null : constrained[constrained.length - 1];
								if(!child.sorted) {
									var parent5 = child.parent;
									if(parent5 != null) {
										if(!parent5.sorted) {
											var parent6 = parent5.parent;
											if(parent6 != null) {
												this.sortBone(parent6);
											}
											parent5.sorted = true;
											this.cache.push(parent5);
										}
									}
									child.sorted = true;
									this.cache.push(child);
								}
								this.cache.push(constraint);
								var bones3 = parent2.children;
								var items2 = bones3;
								var i3 = 0;
								var n2 = bones3.length;
								while(i3 < n2) {
									var result3 = items2[i3];
									var bone2 = result3;
									if(!bone2.active) {
										++i3;
										continue;
									}
									if(bone2.sorted) {
										var bones4 = bone2.children;
										var items3 = bones4;
										var i4 = 0;
										var n3 = bones4.length;
										while(i4 < n3) {
											var result4 = items3[i4];
											var bone3 = result4;
											if(!bone3.active) {
												++i4;
												continue;
											}
											if(bone3.sorted) {
												this.sortReset(bone3.children);
											}
											bone3.sorted = false;
											++i4;
										}
									}
									bone2.sorted = false;
									++i3;
								}
								child.sorted = true;
							}
						}
						++ii;
						_gotoLabel_outer = 2;
						break;
					}
					++ii;
				}
				if(_gotoLabel_outer == 2) {
					_gotoLabel_outer = 0;
					++i;
					continue;
				}
				if(_gotoLabel_outer >= 1) {
					break;
				}
				var ii1 = 0;
				while(ii1 < transformCount) {
					var result5 = transformConstraints[ii1];
					var constraint1 = result5;
					if(constraint1.data.order == i) {
						constraint1.active = constraint1.target.active && (!constraint1.data.skinRequired || this.skin != null && this.skin.constraints.indexOf(constraint1.data) != -1);
						if(constraint1.active) {
							var bone4 = constraint1.target;
							if(!bone4.sorted) {
								var parent7 = bone4.parent;
								if(parent7 != null) {
									if(!parent7.sorted) {
										var parent8 = parent7.parent;
										if(parent8 != null) {
											this.sortBone(parent8);
										}
										parent7.sorted = true;
										this.cache.push(parent7);
									}
								}
								bone4.sorted = true;
								this.cache.push(bone4);
							}
							var constrained1 = constraint1.bones;
							var boneCount1 = constraint1.bones.length;
							if(constraint1.data.local) {
								var i5 = 0;
								while(i5 < boneCount1) {
									var result6 = constrained1[i5];
									var child1 = result6;
									var bone5 = child1.parent;
									if(!bone5.sorted) {
										var parent9 = bone5.parent;
										if(parent9 != null) {
											if(!parent9.sorted) {
												var parent10 = parent9.parent;
												if(parent10 != null) {
													this.sortBone(parent10);
												}
												parent9.sorted = true;
												this.cache.push(parent9);
											}
										}
										bone5.sorted = true;
										this.cache.push(bone5);
									}
									if(!child1.sorted) {
										var parent11 = child1.parent;
										if(parent11 != null) {
											if(!parent11.sorted) {
												var parent12 = parent11.parent;
												if(parent12 != null) {
													this.sortBone(parent12);
												}
												parent11.sorted = true;
												this.cache.push(parent11);
											}
										}
										child1.sorted = true;
										this.cache.push(child1);
									}
									++i5;
								}
							} else {
								var i6 = 0;
								while(i6 < boneCount1) {
									var result7 = constrained1[i6];
									var bone6 = result7;
									if(!bone6.sorted) {
										var parent13 = bone6.parent;
										if(parent13 != null) {
											if(!parent13.sorted) {
												var parent14 = parent13.parent;
												if(parent14 != null) {
													this.sortBone(parent14);
												}
												parent13.sorted = true;
												this.cache.push(parent13);
											}
										}
										bone6.sorted = true;
										this.cache.push(bone6);
									}
									++i6;
								}
							}
							this.cache.push(constraint1);
							var i7 = 0;
							while(i7 < boneCount1) {
								var result8 = constrained1[i7];
								var bones5 = result8.children;
								var items4 = bones5;
								var i8 = 0;
								var n4 = bones5.length;
								while(i8 < n4) {
									var result9 = items4[i8];
									var bone7 = result9;
									if(!bone7.active) {
										++i8;
										continue;
									}
									if(bone7.sorted) {
										var bones6 = bone7.children;
										var items5 = bones6;
										var i9 = 0;
										var n5 = bones6.length;
										while(i9 < n5) {
											var result10 = items5[i9];
											var bone8 = result10;
											if(!bone8.active) {
												++i9;
												continue;
											}
											if(bone8.sorted) {
												this.sortReset(bone8.children);
											}
											bone8.sorted = false;
											++i9;
										}
									}
									bone7.sorted = false;
									++i8;
								}
								++i7;
							}
							var i10 = 0;
							while(i10 < boneCount1) {
								var result11 = constrained1[i10];
								result11.sorted = true;
								++i10;
							}
						}
						++ii1;
						_gotoLabel_outer = 2;
						break;
					}
					++ii1;
				}
				if(_gotoLabel_outer == 2) {
					_gotoLabel_outer = 0;
					++i;
					continue;
				}
				if(_gotoLabel_outer >= 1) {
					break;
				}
				var ii2 = 0;
				while(ii2 < pathCount) {
					var result12 = pathConstraints[ii2];
					var constraint2 = result12;
					if(constraint2.data.order == i) {
						constraint2.active = constraint2.target.bone.active && (!constraint2.data.skinRequired || this.skin != null && this.skin.constraints.indexOf(constraint2.data) != -1);
						if(constraint2.active) {
							var slot = constraint2.target;
							var slotIndex = slot.data.index;
							var slotBone = slot.bone;
							if(this.skin != null) {
								var skin = this.skin;
								var entries = spine_support_utils_AttachmentSet.orderedItems(skin.attachments);
								var i11 = 0;
								var n6 = spine_support_utils_AttachmentSet.get_size(skin.attachments);
								while(i11 < n6) {
									var result13 = entries[i11];
									var entry = result13;
									if(entry.slotIndex == slotIndex) {
										var attachment = entry.attachment;
										if(((attachment) instanceof spine_attachments_PathAttachment)) {
											var result14 = attachment;
											var pathBones = result14.bones;
											if(pathBones == null) {
												if(!slotBone.sorted) {
													var parent15 = slotBone.parent;
													if(parent15 != null) {
														if(!parent15.sorted) {
															var parent16 = parent15.parent;
															if(parent16 != null) {
																this.sortBone(parent16);
															}
															parent15.sorted = true;
															this.cache.push(parent15);
														}
													}
													slotBone.sorted = true;
													this.cache.push(slotBone);
												}
											} else {
												var bones7 = this.bones;
												var i12 = 0;
												var n7 = pathBones.length;
												while(i12 < n7) {
													var nn = pathBones[i12++];
													nn += i12;
													while(i12 < nn) {
														var result15 = bones7[pathBones[i12++]];
														var bone9 = result15;
														if(!bone9.sorted) {
															var parent17 = bone9.parent;
															if(parent17 != null) {
																if(!parent17.sorted) {
																	var parent18 = parent17.parent;
																	if(parent18 != null) {
																		this.sortBone(parent18);
																	}
																	parent17.sorted = true;
																	this.cache.push(parent17);
																}
															}
															bone9.sorted = true;
															this.cache.push(bone9);
														}
													}
												}
											}
										}
									}
									++i11;
								}
							}
							if(this.data.defaultSkin != null && this.data.defaultSkin != this.skin) {
								var skin1 = this.data.defaultSkin;
								var entries1 = spine_support_utils_AttachmentSet.orderedItems(skin1.attachments);
								var i13 = 0;
								var n8 = spine_support_utils_AttachmentSet.get_size(skin1.attachments);
								while(i13 < n8) {
									var result16 = entries1[i13];
									var entry1 = result16;
									if(entry1.slotIndex == slotIndex) {
										var attachment1 = entry1.attachment;
										if(((attachment1) instanceof spine_attachments_PathAttachment)) {
											var result17 = attachment1;
											var pathBones1 = result17.bones;
											if(pathBones1 == null) {
												if(!slotBone.sorted) {
													var parent19 = slotBone.parent;
													if(parent19 != null) {
														if(!parent19.sorted) {
															var parent20 = parent19.parent;
															if(parent20 != null) {
																this.sortBone(parent20);
															}
															parent19.sorted = true;
															this.cache.push(parent19);
														}
													}
													slotBone.sorted = true;
													this.cache.push(slotBone);
												}
											} else {
												var bones8 = this.bones;
												var i14 = 0;
												var n9 = pathBones1.length;
												while(i14 < n9) {
													var nn1 = pathBones1[i14++];
													nn1 += i14;
													while(i14 < nn1) {
														var result18 = bones8[pathBones1[i14++]];
														var bone10 = result18;
														if(!bone10.sorted) {
															var parent21 = bone10.parent;
															if(parent21 != null) {
																if(!parent21.sorted) {
																	var parent22 = parent21.parent;
																	if(parent22 != null) {
																		this.sortBone(parent22);
																	}
																	parent21.sorted = true;
																	this.cache.push(parent21);
																}
															}
															bone10.sorted = true;
															this.cache.push(bone10);
														}
													}
												}
											}
										}
									}
									++i13;
								}
							}
							var attachment2 = slot.attachment;
							if(((attachment2) instanceof spine_attachments_PathAttachment)) {
								if(((attachment2) instanceof spine_attachments_PathAttachment)) {
									var result19 = attachment2;
									var pathBones2 = result19.bones;
									if(pathBones2 == null) {
										if(!slotBone.sorted) {
											var parent23 = slotBone.parent;
											if(parent23 != null) {
												if(!parent23.sorted) {
													var parent24 = parent23.parent;
													if(parent24 != null) {
														this.sortBone(parent24);
													}
													parent23.sorted = true;
													this.cache.push(parent23);
												}
											}
											slotBone.sorted = true;
											this.cache.push(slotBone);
										}
									} else {
										var bones9 = this.bones;
										var i15 = 0;
										var n10 = pathBones2.length;
										while(i15 < n10) {
											var nn2 = pathBones2[i15++];
											nn2 += i15;
											while(i15 < nn2) {
												var result20 = bones9[pathBones2[i15++]];
												var bone11 = result20;
												if(!bone11.sorted) {
													var parent25 = bone11.parent;
													if(parent25 != null) {
														if(!parent25.sorted) {
															var parent26 = parent25.parent;
															if(parent26 != null) {
																this.sortBone(parent26);
															}
															parent25.sorted = true;
															this.cache.push(parent25);
														}
													}
													bone11.sorted = true;
													this.cache.push(bone11);
												}
											}
										}
									}
								}
							}
							var constrained2 = constraint2.bones;
							var boneCount2 = constraint2.bones.length;
							var i16 = 0;
							while(i16 < boneCount2) {
								var result21 = constrained2[i16];
								var bone12 = result21;
								if(!bone12.sorted) {
									var parent27 = bone12.parent;
									if(parent27 != null) {
										if(!parent27.sorted) {
											var parent28 = parent27.parent;
											if(parent28 != null) {
												this.sortBone(parent28);
											}
											parent27.sorted = true;
											this.cache.push(parent27);
										}
									}
									bone12.sorted = true;
									this.cache.push(bone12);
								}
								++i16;
							}
							this.cache.push(constraint2);
							var i17 = 0;
							while(i17 < boneCount2) {
								var result22 = constrained2[i17];
								var bones10 = result22.children;
								var items6 = bones10;
								var i18 = 0;
								var n11 = bones10.length;
								while(i18 < n11) {
									var result23 = items6[i18];
									var bone13 = result23;
									if(!bone13.active) {
										++i18;
										continue;
									}
									if(bone13.sorted) {
										var bones11 = bone13.children;
										var items7 = bones11;
										var i19 = 0;
										var n12 = bones11.length;
										while(i19 < n12) {
											var result24 = items7[i19];
											var bone14 = result24;
											if(!bone14.active) {
												++i19;
												continue;
											}
											if(bone14.sorted) {
												this.sortReset(bone14.children);
											}
											bone14.sorted = false;
											++i19;
										}
									}
									bone13.sorted = false;
									++i18;
								}
								++i17;
							}
							var i20 = 0;
							while(i20 < boneCount2) {
								var result25 = constrained2[i20];
								result25.sorted = true;
								++i20;
							}
						}
						++ii2;
						_gotoLabel_outer = 2;
						break;
					}
					++ii2;
				}
				if(_gotoLabel_outer == 2) {
					_gotoLabel_outer = 0;
					++i;
					continue;
				}
				if(_gotoLabel_outer >= 1) {
					break;
				}
				++i;
			}
			if(_gotoLabel_outer == 0) {
				break;
			}
		}
		var i = 0;
		while(i < boneCount) {
			var result = bones[i];
			var bone = result;
			if(!bone.sorted) {
				var parent = bone.parent;
				if(parent != null) {
					if(!parent.sorted) {
						var parent1 = parent.parent;
						if(parent1 != null) {
							this.sortBone(parent1);
						}
						parent.sorted = true;
						this.cache.push(parent);
					}
				}
				bone.sorted = true;
				this.cache.push(bone);
			}
			++i;
		}
	}
	,getAttachmentWithSlotName: function(slotName,attachmentName) {
		var slot = this.data.findSlot(slotName);
		if(slot == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("Slot not found: " + slotName));
		}
		return this.getAttachment(slot.index,attachmentName);
	}
	,getAttachment: function(slotIndex,attachmentName) {
		if(attachmentName == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("attachmentName cannot be null."));
		}
		if(this.skin != null) {
			var _this = this.skin;
			var _this1 = _this.lookup;
			if(slotIndex < 0) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("slotIndex must be >= 0."));
			}
			if(attachmentName == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("name cannot be null."));
			}
			_this1.slotIndex = slotIndex;
			_this1.name = attachmentName;
			var hash = 0;
			var chr;
			var x;
			if(attachmentName.length == 0) {
				x = hash;
			} else {
				var _g = 0;
				var _g1 = attachmentName.length;
				while(_g < _g1) {
					var i = _g++;
					chr = HxOverrides.cca(attachmentName,i);
					hash = (hash << 5) - hash + chr;
				}
				x = hash;
			}
			_this1.hashCode = x + slotIndex * 37 | 0;
			var key = _this.lookup;
			var entries = _this.attachments.h[key.hashCode];
			var result = null;
			if(entries != null) {
				var _g = 0;
				var _g1 = entries.length;
				while(_g < _g1) {
					var i = _g++;
					var entry = entries[i];
					var object = key;
					var tmp;
					if(object == null) {
						tmp = false;
					} else {
						var result1 = object;
						var other = result1;
						tmp = entry.slotIndex != other.slotIndex ? false : entry.name == other.name;
					}
					if(tmp) {
						result = entry;
						break;
					}
				}
			}
			var entry = result;
			var attachment = entry != null ? entry.attachment : null;
			if(attachment != null) {
				return attachment;
			}
		}
		if(this.data.defaultSkin != null) {
			var _this = this.data.defaultSkin;
			var _this1 = _this.lookup;
			if(slotIndex < 0) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("slotIndex must be >= 0."));
			}
			if(attachmentName == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("name cannot be null."));
			}
			_this1.slotIndex = slotIndex;
			_this1.name = attachmentName;
			var hash = 0;
			var chr;
			var x;
			if(attachmentName.length == 0) {
				x = hash;
			} else {
				var _g = 0;
				var _g1 = attachmentName.length;
				while(_g < _g1) {
					var i = _g++;
					chr = HxOverrides.cca(attachmentName,i);
					hash = (hash << 5) - hash + chr;
				}
				x = hash;
			}
			_this1.hashCode = x + slotIndex * 37 | 0;
			var key = _this.lookup;
			var entries = _this.attachments.h[key.hashCode];
			var result = null;
			if(entries != null) {
				var _g = 0;
				var _g1 = entries.length;
				while(_g < _g1) {
					var i = _g++;
					var entry = entries[i];
					var object = key;
					var tmp;
					if(object == null) {
						tmp = false;
					} else {
						var result1 = object;
						var other = result1;
						tmp = entry.slotIndex != other.slotIndex ? false : entry.name == other.name;
					}
					if(tmp) {
						result = entry;
						break;
					}
				}
			}
			var entry = result;
			if(entry != null) {
				return entry.attachment;
			} else {
				return null;
			}
		}
		return null;
	}
	,setAttachment: function(slotName,attachmentName) {
		if(slotName == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("slotName cannot be null."));
		}
		var slot = this.findSlot(slotName);
		if(slot == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("Slot not found: " + slotName));
		}
		var attachment = null;
		if(attachmentName != null) {
			attachment = this.getAttachment(slot.data.index,attachmentName);
			if(attachment == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("Attachment not found: " + attachmentName + ", for slot: " + slotName));
			}
		}
		if(slot.attachment != attachment) {
			var tmp;
			if(!(!((attachment) instanceof spine_attachments_VertexAttachment) || !((slot.attachment) instanceof spine_attachments_VertexAttachment))) {
				var result = attachment;
				var _this = result;
				var result = slot.attachment;
				var _this1 = result;
				tmp = (_this.deformAttachment != null ? _this.deformAttachment : _this) != (_this1.deformAttachment != null ? _this1.deformAttachment : _this1);
			} else {
				tmp = true;
			}
			if(tmp) {
				var this1 = slot.deform;
				this1.splice(0,this1.length);
			}
			slot.attachment = attachment;
			slot.attachmentTime = slot.bone.skeleton.time;
		}
	}
	,getIkConstraints: function() {
		return this.ikConstraints;
	}
	,findIkConstraint: function(constraintName) {
		if(constraintName == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("constraintName cannot be null."));
		}
		var ikConstraints = this.ikConstraints;
		var i = 0;
		var n = this.ikConstraints.length;
		while(i < n) {
			var result = ikConstraints[i];
			var ikConstraint = result;
			if(ikConstraint.data.name == constraintName) {
				return ikConstraint;
			}
			++i;
		}
		return null;
	}
	,getTransformConstraints: function() {
		return this.transformConstraints;
	}
	,findTransformConstraint: function(constraintName) {
		if(constraintName == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("constraintName cannot be null."));
		}
		var transformConstraints = this.transformConstraints;
		var i = 0;
		var n = this.transformConstraints.length;
		while(i < n) {
			var result = transformConstraints[i];
			var constraint = result;
			if(constraint.data.name == constraintName) {
				return constraint;
			}
			++i;
		}
		return null;
	}
	,getPathConstraints: function() {
		return this.pathConstraints;
	}
	,findPathConstraint: function(constraintName) {
		if(constraintName == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("constraintName cannot be null."));
		}
		var pathConstraints = this.pathConstraints;
		var i = 0;
		var n = this.pathConstraints.length;
		while(i < n) {
			var result = pathConstraints[i];
			var constraint = result;
			if(constraint.data.name == constraintName) {
				return constraint;
			}
			++i;
		}
		return null;
	}
	,getBounds: function(offset,size,temp) {
		if(offset == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("offset cannot be null."));
		}
		if(size == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("size cannot be null."));
		}
		if(temp == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("temp cannot be null."));
		}
		var drawOrder = this.drawOrder;
		var minX = 999999999;
		var minY = 999999999;
		var maxX = -999999999;
		var maxY = -999999999;
		var i = 0;
		var n = this.drawOrder.length;
		while(i < n) {
			var result = drawOrder[i];
			var slot = result;
			if(!slot.bone.active) {
				++i;
				continue;
			}
			var verticesLength = 0;
			var vertices = null;
			var attachment = slot.attachment;
			if(((attachment) instanceof spine_attachments_RegionAttachment)) {
				verticesLength = 8;
				var len = temp.length;
				if(len > 8) {
					temp.splice(8,8 - len);
				} else if(len < 8) {
					while(len < 8) {
						temp.push(0);
						++len;
					}
				}
				vertices = temp;
				var bone = slot.bone;
				var offset1 = 0;
				var result1 = attachment;
				var vertexOffset = result1.offset;
				var x = bone.worldX;
				var y = bone.worldY;
				var a = bone.a;
				var b = bone.b;
				var c = bone.c;
				var d = bone.d;
				var offsetX = 0;
				var offsetY = 0;
				offsetX = vertexOffset[6];
				offsetY = vertexOffset[7];
				vertices[offset1] = offsetX * a + offsetY * b + x;
				vertices[offset1 + 1] = offsetX * c + offsetY * d + y;
				offset1 += 2;
				offsetX = vertexOffset[0];
				offsetY = vertexOffset[1];
				vertices[offset1] = offsetX * a + offsetY * b + x;
				vertices[offset1 + 1] = offsetX * c + offsetY * d + y;
				offset1 += 2;
				offsetX = vertexOffset[2];
				offsetY = vertexOffset[3];
				vertices[offset1] = offsetX * a + offsetY * b + x;
				vertices[offset1 + 1] = offsetX * c + offsetY * d + y;
				offset1 += 2;
				offsetX = vertexOffset[4];
				offsetY = vertexOffset[5];
				vertices[offset1] = offsetX * a + offsetY * b + x;
				vertices[offset1 + 1] = offsetX * c + offsetY * d + y;
			} else if(((attachment) instanceof spine_attachments_MeshAttachment)) {
				var result2 = attachment;
				var mesh = result2;
				verticesLength = mesh.worldVerticesLength;
				var len1 = temp.length;
				if(len1 > verticesLength) {
					temp.splice(verticesLength,verticesLength - len1);
				} else if(len1 < verticesLength) {
					while(len1 < verticesLength) {
						temp.push(0);
						++len1;
					}
				}
				vertices = temp;
				var count = verticesLength;
				count = (count >> 1) * 2;
				var deformArray = slot.deform;
				var vertices1 = mesh.vertices;
				var bones = mesh.bones;
				if(bones == null) {
					if(deformArray.length > 0) {
						vertices1 = deformArray;
					}
					var bone1 = slot.bone;
					var x1 = bone1.worldX;
					var y1 = bone1.worldY;
					var a1 = bone1.a;
					var b1 = bone1.b;
					var c1 = bone1.c;
					var d1 = bone1.d;
					var v = 0;
					var w = 0;
					while(w < count) {
						var vx = vertices1[v];
						var vy = vertices1[v + 1];
						vertices[w] = vx * a1 + vy * b1 + x1;
						vertices[w + 1] = vx * c1 + vy * d1 + y1;
						v += 2;
						w += 2;
					}
				} else {
					var v1 = 0;
					var skip = 0;
					var i1 = 0;
					while(i1 < 0) {
						var n1 = bones[v1];
						v1 += n1 + 1;
						skip += n1;
						i1 += 2;
					}
					var skeletonBones = slot.bone.skeleton.getBones();
					if(deformArray.length == 0) {
						var w1 = 0;
						var b2 = skip * 3;
						while(w1 < count) {
							var wx = 0;
							var wy = 0;
							var n2 = bones[v1++];
							n2 += v1;
							while(v1 < n2) {
								var result3 = skeletonBones[bones[v1]];
								var bone2 = result3;
								var vx1 = vertices1[b2];
								var vy1 = vertices1[b2 + 1];
								var weight = vertices1[b2 + 2];
								wx += (vx1 * bone2.a + vy1 * bone2.b + bone2.worldX) * weight;
								wy += (vx1 * bone2.c + vy1 * bone2.d + bone2.worldY) * weight;
								++v1;
								b2 += 3;
							}
							vertices[w1] = wx;
							vertices[w1 + 1] = wy;
							w1 += 2;
						}
					} else {
						var deform = deformArray;
						var w2 = 0;
						var b3 = skip * 3;
						var f = skip << 1;
						while(w2 < count) {
							var wx1 = 0;
							var wy1 = 0;
							var n3 = bones[v1++];
							n3 += v1;
							while(v1 < n3) {
								var result4 = skeletonBones[bones[v1]];
								var bone3 = result4;
								var vx2 = vertices1[b3] + deform[f];
								var vy2 = vertices1[b3 + 1] + deform[f + 1];
								var weight1 = vertices1[b3 + 2];
								wx1 += (vx2 * bone3.a + vy2 * bone3.b + bone3.worldX) * weight1;
								wy1 += (vx2 * bone3.c + vy2 * bone3.d + bone3.worldY) * weight1;
								++v1;
								b3 += 3;
								f += 2;
							}
							vertices[w2] = wx1;
							vertices[w2 + 1] = wy1;
							w2 += 2;
						}
					}
				}
			}
			if(vertices != null) {
				var ii = 0;
				while(ii < verticesLength) {
					var x2 = vertices[ii];
					var y2 = vertices[ii + 1];
					minX = Math.min(minX,x2);
					minY = Math.min(minY,y2);
					maxX = Math.max(maxX,x2);
					maxY = Math.max(maxY,y2);
					ii += 2;
				}
			}
			++i;
		}
		offset.x = minX;
		offset.y = minY;
		size.x = maxX - minX;
		size.y = maxY - minY;
	}
	,getColor: function() {
		return this.color;
	}
	,setColor: function(color) {
		if(color == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("color cannot be null."));
		}
		var _this = this.color;
		_this.r = color.r;
		_this.g = color.g;
		_this.b = color.b;
		_this.a = color.a;
	}
	,setColorWithRGBA: function(r,g,b,a) {
		var _this = this.color;
		_this.r = r;
		_this.g = g;
		_this.b = b;
		_this.a = a;
	}
	,getScaleX: function() {
		return this.scaleX;
	}
	,setScaleX: function(scaleX) {
		this.scaleX = scaleX;
	}
	,getScaleY: function() {
		return this.scaleY;
	}
	,setScaleY: function(scaleY) {
		this.scaleY = scaleY;
	}
	,setScale: function(scaleX,scaleY) {
		this.scaleX = scaleX;
		this.scaleY = scaleY;
	}
	,getX: function() {
		return this.x;
	}
	,setX: function(x) {
		this.x = x;
	}
	,getY: function() {
		return this.y;
	}
	,setY: function(y) {
		this.y = y;
	}
	,setPosition: function(x,y) {
		this.x = x;
		this.y = y;
	}
	,getTime: function() {
		return this.time;
	}
	,setTime: function(time) {
		this.time = time;
	}
	,update: function(delta) {
		this.time += delta;
	}
	,toString: function() {
		if(this.data.name != null) {
			return this.data.name;
		} else {
			var c = js_Boot.getClass(this);
			return c.__name__;
		}
	}
	,__class__: spine_Skeleton
};
var spine_SkeletonBounds = function() {
	this.polygonPool = new spine__$SkeletonBounds_PolygonPool();
	var this1 = [];
	this.polygons = this1;
	var this1 = [];
	this.boundingBoxes = this1;
	this.maxY = 0;
	this.maxX = 0;
	this.minY = 0;
	this.minX = 0;
};
$hxClasses["spine.SkeletonBounds"] = spine_SkeletonBounds;
spine_SkeletonBounds.__name__ = "spine.SkeletonBounds";
spine_SkeletonBounds.prototype = {
	update: function(skeleton,updateAabb) {
		if(skeleton == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("skeleton cannot be null."));
		}
		var boundingBoxes = this.boundingBoxes;
		var polygons = this.polygons;
		var slots = skeleton.slots;
		var slotCount = skeleton.slots.length;
		boundingBoxes.splice(0,boundingBoxes.length);
		this.polygonPool.freeAll(polygons);
		polygons.splice(0,polygons.length);
		var i = 0;
		while(i < slotCount) {
			var result = slots[i];
			var slot = result;
			if(!slot.bone.active) {
				++i;
				continue;
			}
			var attachment = slot.attachment;
			if(((attachment) instanceof spine_attachments_BoundingBoxAttachment)) {
				var result1 = attachment;
				var boundingBox = result1;
				boundingBoxes.push(boundingBox);
				var polygon = this.polygonPool.obtain();
				polygons.push(polygon);
				var count = boundingBox.worldVerticesLength;
				var size = boundingBox.worldVerticesLength;
				var len = polygon.length;
				if(len > size) {
					polygon.splice(size,size - len);
				} else if(len < size) {
					while(len < size) {
						polygon.push(0);
						++len;
					}
				}
				var worldVertices = polygon;
				count = (count >> 1) * 2;
				var deformArray = slot.deform;
				var vertices = boundingBox.vertices;
				var bones = boundingBox.bones;
				if(bones == null) {
					if(deformArray.length > 0) {
						vertices = deformArray;
					}
					var bone = slot.bone;
					var x = bone.worldX;
					var y = bone.worldY;
					var a = bone.a;
					var b = bone.b;
					var c = bone.c;
					var d = bone.d;
					var v = 0;
					var w = 0;
					while(w < count) {
						var vx = vertices[v];
						var vy = vertices[v + 1];
						worldVertices[w] = vx * a + vy * b + x;
						worldVertices[w + 1] = vx * c + vy * d + y;
						v += 2;
						w += 2;
					}
				} else {
					var v1 = 0;
					var skip = 0;
					var i1 = 0;
					while(i1 < 0) {
						var n = bones[v1];
						v1 += n + 1;
						skip += n;
						i1 += 2;
					}
					var skeletonBones = slot.bone.skeleton.getBones();
					if(deformArray.length == 0) {
						var w1 = 0;
						var b1 = skip * 3;
						while(w1 < count) {
							var wx = 0;
							var wy = 0;
							var n1 = bones[v1++];
							n1 += v1;
							while(v1 < n1) {
								var result2 = skeletonBones[bones[v1]];
								var bone1 = result2;
								var vx1 = vertices[b1];
								var vy1 = vertices[b1 + 1];
								var weight = vertices[b1 + 2];
								wx += (vx1 * bone1.a + vy1 * bone1.b + bone1.worldX) * weight;
								wy += (vx1 * bone1.c + vy1 * bone1.d + bone1.worldY) * weight;
								++v1;
								b1 += 3;
							}
							worldVertices[w1] = wx;
							worldVertices[w1 + 1] = wy;
							w1 += 2;
						}
					} else {
						var deform = deformArray;
						var w2 = 0;
						var b2 = skip * 3;
						var f = skip << 1;
						while(w2 < count) {
							var wx1 = 0;
							var wy1 = 0;
							var n2 = bones[v1++];
							n2 += v1;
							while(v1 < n2) {
								var result3 = skeletonBones[bones[v1]];
								var bone2 = result3;
								var vx2 = vertices[b2] + deform[f];
								var vy2 = vertices[b2 + 1] + deform[f + 1];
								var weight1 = vertices[b2 + 2];
								wx1 += (vx2 * bone2.a + vy2 * bone2.b + bone2.worldX) * weight1;
								wy1 += (vx2 * bone2.c + vy2 * bone2.d + bone2.worldY) * weight1;
								++v1;
								b2 += 3;
								f += 2;
							}
							worldVertices[w2] = wx1;
							worldVertices[w2 + 1] = wy1;
							w2 += 2;
						}
					}
				}
			}
			++i;
		}
		if(updateAabb) {
			var minX = 999999999;
			var minY = 999999999;
			var maxX = -999999999;
			var maxY = -999999999;
			var polygons = this.polygons;
			var i = 0;
			var n = this.polygons.length;
			while(i < n) {
				var polygon = polygons[i];
				var vertices = polygon;
				var ii = 0;
				var nn = polygon.length;
				while(ii < nn) {
					var x = vertices[ii];
					var y = vertices[ii + 1];
					minX = Math.min(minX,x);
					minY = Math.min(minY,y);
					maxX = Math.max(maxX,x);
					maxY = Math.max(maxY,y);
					ii += 2;
				}
				++i;
			}
			this.minX = minX;
			this.minY = minY;
			this.maxX = maxX;
			this.maxY = maxY;
		} else {
			this.minX = -999999999;
			this.minY = -999999999;
			this.maxX = 999999999;
			this.maxY = 999999999;
		}
	}
	,aabbCompute: function() {
		var minX = 999999999;
		var minY = 999999999;
		var maxX = -999999999;
		var maxY = -999999999;
		var polygons = this.polygons;
		var i = 0;
		var n = this.polygons.length;
		while(i < n) {
			var polygon = polygons[i];
			var vertices = polygon;
			var ii = 0;
			var nn = polygon.length;
			while(ii < nn) {
				var x = vertices[ii];
				var y = vertices[ii + 1];
				minX = Math.min(minX,x);
				minY = Math.min(minY,y);
				maxX = Math.max(maxX,x);
				maxY = Math.max(maxY,y);
				ii += 2;
			}
			++i;
		}
		this.minX = minX;
		this.minY = minY;
		this.maxX = maxX;
		this.maxY = maxY;
	}
	,aabbContainsPoint: function(x,y) {
		if(x >= this.minX && x <= this.maxX && y >= this.minY) {
			return y <= this.maxY;
		} else {
			return false;
		}
	}
	,aabbIntersectsSegment: function(x1,y1,x2,y2) {
		var minX = this.minX;
		var minY = this.minY;
		var maxX = this.maxX;
		var maxY = this.maxY;
		if(x1 <= minX && x2 <= minX || y1 <= minY && y2 <= minY || x1 >= maxX && x2 >= maxX || y1 >= maxY && y2 >= maxY) {
			return false;
		}
		var m = (y2 - y1) / (x2 - x1);
		var y = m * (minX - x1) + y1;
		if(y > minY && y < maxY) {
			return true;
		}
		y = m * (maxX - x1) + y1;
		if(y > minY && y < maxY) {
			return true;
		}
		var x = (minY - y1) / m + x1;
		if(x > minX && x < maxX) {
			return true;
		}
		x = (maxY - y1) / m + x1;
		if(x > minX && x < maxX) {
			return true;
		}
		return false;
	}
	,aabbIntersectsSkeleton: function(bounds) {
		if(bounds == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("bounds cannot be null."));
		}
		if(this.minX < bounds.maxX && this.maxX > bounds.minX && this.minY < bounds.maxY) {
			return this.maxY > bounds.minY;
		} else {
			return false;
		}
	}
	,containsPoint: function(x,y) {
		var polygons = this.polygons;
		var i = 0;
		var n = this.polygons.length;
		while(i < n) {
			var polygon = polygons[i];
			if(polygon == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("polygon cannot be null."));
			}
			var vertices = polygon;
			var nn = polygon.length;
			var prevIndex = nn - 2;
			var inside = false;
			var ii = 0;
			while(ii < nn) {
				var vertexY = vertices[ii + 1];
				var prevY = vertices[prevIndex + 1];
				if(vertexY < y && prevY >= y || prevY < y && vertexY >= y) {
					var vertexX = vertices[ii];
					if(vertexX + (y - vertexY) / (prevY - vertexY) * (vertices[prevIndex] - vertexX) < x) {
						inside = !inside;
					}
				}
				prevIndex = ii;
				ii += 2;
			}
			if(inside) {
				return this.boundingBoxes[i];
			}
			++i;
		}
		return null;
	}
	,polygonContainsPoint: function(polygon,x,y) {
		if(polygon == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("polygon cannot be null."));
		}
		var vertices = polygon;
		var nn = polygon.length;
		var prevIndex = nn - 2;
		var inside = false;
		var ii = 0;
		while(ii < nn) {
			var vertexY = vertices[ii + 1];
			var prevY = vertices[prevIndex + 1];
			if(vertexY < y && prevY >= y || prevY < y && vertexY >= y) {
				var vertexX = vertices[ii];
				if(vertexX + (y - vertexY) / (prevY - vertexY) * (vertices[prevIndex] - vertexX) < x) {
					inside = !inside;
				}
			}
			prevIndex = ii;
			ii += 2;
		}
		return inside;
	}
	,intersectsSegment: function(x1,y1,x2,y2) {
		var polygons = this.polygons;
		var i = 0;
		var n = this.polygons.length;
		while(i < n) {
			if(this.polygonIntersectsSegment(polygons[i],x1,y1,x2,y2)) {
				return this.boundingBoxes[i];
			}
			++i;
		}
		return null;
	}
	,polygonIntersectsSegment: function(polygon,x1,y1,x2,y2) {
		if(polygon == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("polygon cannot be null."));
		}
		var vertices = polygon;
		var nn = polygon.length;
		var width12 = x1 - x2;
		var height12 = y1 - y2;
		var det1 = x1 * y2 - y1 * x2;
		var x3 = vertices[nn - 2];
		var y3 = vertices[nn - 1];
		var ii = 0;
		while(ii < nn) {
			var x4 = vertices[ii];
			var y4 = vertices[ii + 1];
			var det2 = x3 * y4 - y3 * x4;
			var width34 = x3 - x4;
			var height34 = y3 - y4;
			var det3 = width12 * height34 - height12 * width34;
			var x = (det1 * width34 - width12 * det2) / det3;
			if((x >= x3 && x <= x4 || x >= x4 && x <= x3) && (x >= x1 && x <= x2 || x >= x2 && x <= x1)) {
				var y = (det1 * height34 - height12 * det2) / det3;
				if((y >= y3 && y <= y4 || y >= y4 && y <= y3) && (y >= y1 && y <= y2 || y >= y2 && y <= y1)) {
					return true;
				}
			}
			x3 = x4;
			y3 = y4;
			ii += 2;
		}
		return false;
	}
	,getMinX: function() {
		return this.minX;
	}
	,getMinY: function() {
		return this.minY;
	}
	,getMaxX: function() {
		return this.maxX;
	}
	,getMaxY: function() {
		return this.maxY;
	}
	,getWidth: function() {
		return this.maxX - this.minX;
	}
	,getHeight: function() {
		return this.maxY - this.minY;
	}
	,getBoundingBoxes: function() {
		return this.boundingBoxes;
	}
	,getPolygons: function() {
		return this.polygons;
	}
	,getPolygon: function(boundingBox) {
		if(boundingBox == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("boundingBox cannot be null."));
		}
		var index = this.boundingBoxes.indexOf(boundingBox);
		if(index == -1) {
			return null;
		} else {
			return this.polygons[index];
		}
	}
	,__class__: spine_SkeletonBounds
};
var spine__$SkeletonBounds_PolygonPool = function(initialCapacity,max) {
	spine_support_utils_Pool.call(this,initialCapacity,max);
};
$hxClasses["spine._SkeletonBounds.PolygonPool"] = spine__$SkeletonBounds_PolygonPool;
spine__$SkeletonBounds_PolygonPool.__name__ = "spine._SkeletonBounds.PolygonPool";
spine__$SkeletonBounds_PolygonPool.__super__ = spine_support_utils_Pool;
spine__$SkeletonBounds_PolygonPool.prototype = $extend(spine_support_utils_Pool.prototype,{
	newObject: function() {
		var this1 = [];
		return this1;
	}
	,__class__: spine__$SkeletonBounds_PolygonPool
});
var spine_SkeletonData = function() {
	this.audioPath = null;
	this.fps = 30;
	this.hash = null;
	this.height = 0;
	this.width = 0;
	this.y = 0;
	this.x = 0;
	var this1 = [];
	this.pathConstraints = this1;
	var this1 = [];
	this.transformConstraints = this1;
	var this1 = [];
	this.ikConstraints = this1;
	var this1 = [];
	this.animations = this1;
	var this1 = [];
	this.events = this1;
	var this1 = [];
	this.skins = this1;
	var this1 = [];
	this.slots = this1;
	var this1 = [];
	this.bones = this1;
};
$hxClasses["spine.SkeletonData"] = spine_SkeletonData;
spine_SkeletonData.__name__ = "spine.SkeletonData";
spine_SkeletonData.prototype = {
	getBones: function() {
		return this.bones;
	}
	,findBone: function(boneName) {
		if(boneName == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("boneName cannot be null."));
		}
		var bones = this.bones;
		var i = 0;
		var n = this.bones.length;
		while(i < n) {
			var result = bones[i];
			var bone = result;
			if(bone.name == boneName) {
				return bone;
			}
			++i;
		}
		return null;
	}
	,getSlots: function() {
		return this.slots;
	}
	,findSlot: function(slotName) {
		if(slotName == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("slotName cannot be null."));
		}
		var slots = this.slots;
		var i = 0;
		var n = this.slots.length;
		while(i < n) {
			var result = slots[i];
			var slot = result;
			if(slot.name == slotName) {
				return slot;
			}
			++i;
		}
		return null;
	}
	,getDefaultSkin: function() {
		return this.defaultSkin;
	}
	,setDefaultSkin: function(defaultSkin) {
		this.defaultSkin = defaultSkin;
	}
	,findSkin: function(skinName) {
		if(skinName == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("skinName cannot be null."));
		}
		var _g = 0;
		var _g1 = this.skins;
		while(_g < _g1.length) {
			var skin = _g1[_g];
			++_g;
			if(skin.name == skinName) {
				return skin;
			}
		}
		return null;
	}
	,getSkins: function() {
		return this.skins;
	}
	,findEvent: function(eventDataName) {
		if(eventDataName == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("eventDataName cannot be null."));
		}
		var _g = 0;
		var _g1 = this.events;
		while(_g < _g1.length) {
			var eventData = _g1[_g];
			++_g;
			if(eventData.name == eventDataName) {
				return eventData;
			}
		}
		return null;
	}
	,getEvents: function() {
		return this.events;
	}
	,getAnimations: function() {
		return this.animations;
	}
	,findAnimation: function(animationName) {
		if(animationName == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("animationName cannot be null."));
		}
		var animations = this.animations;
		var i = 0;
		var n = this.animations.length;
		while(i < n) {
			var result = animations[i];
			var animation = result;
			if(animation.name == animationName) {
				return animation;
			}
			++i;
		}
		return null;
	}
	,getIkConstraints: function() {
		return this.ikConstraints;
	}
	,findIkConstraint: function(constraintName) {
		if(constraintName == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("constraintName cannot be null."));
		}
		var ikConstraints = this.ikConstraints;
		var i = 0;
		var n = this.ikConstraints.length;
		while(i < n) {
			var result = ikConstraints[i];
			var constraint = result;
			if(constraint.name == constraintName) {
				return constraint;
			}
			++i;
		}
		return null;
	}
	,getTransformConstraints: function() {
		return this.transformConstraints;
	}
	,findTransformConstraint: function(constraintName) {
		if(constraintName == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("constraintName cannot be null."));
		}
		var transformConstraints = this.transformConstraints;
		var i = 0;
		var n = this.transformConstraints.length;
		while(i < n) {
			var result = transformConstraints[i];
			var constraint = result;
			if(constraint.name == constraintName) {
				return constraint;
			}
			++i;
		}
		return null;
	}
	,getPathConstraints: function() {
		return this.pathConstraints;
	}
	,findPathConstraint: function(constraintName) {
		if(constraintName == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("constraintName cannot be null."));
		}
		var pathConstraints = this.pathConstraints;
		var i = 0;
		var n = this.pathConstraints.length;
		while(i < n) {
			var result = pathConstraints[i];
			var constraint = result;
			if(constraint.name == constraintName) {
				return constraint;
			}
			++i;
		}
		return null;
	}
	,getName: function() {
		return this.name;
	}
	,setName: function(name) {
		this.name = name;
	}
	,getX: function() {
		return this.x;
	}
	,setX: function(x) {
		this.x = x;
	}
	,getY: function() {
		return this.y;
	}
	,setY: function(y) {
		this.y = y;
	}
	,getWidth: function() {
		return this.width;
	}
	,setWidth: function(width) {
		this.width = width;
	}
	,getHeight: function() {
		return this.height;
	}
	,setHeight: function(height) {
		this.height = height;
	}
	,getVersion: function() {
		return this.version;
	}
	,setVersion: function(version) {
		this.version = version;
	}
	,getHash: function() {
		return this.hash;
	}
	,setHash: function(hash) {
		this.hash = hash;
	}
	,getImagesPath: function() {
		return this.imagesPath;
	}
	,setImagesPath: function(imagesPath) {
		this.imagesPath = imagesPath;
	}
	,getAudioPath: function() {
		return this.audioPath;
	}
	,setAudioPath: function(audioPath) {
		this.audioPath = audioPath;
	}
	,getFps: function() {
		return this.fps;
	}
	,setFps: function(fps) {
		this.fps = fps;
	}
	,toString: function() {
		if(this.name != null) {
			return this.name;
		} else {
			var c = js_Boot.getClass(this);
			return c.__name__;
		}
	}
	,__class__: spine_SkeletonData
};
var spine_SkeletonLoader = function(attachmentLoader) {
	var this1 = [];
	this.linkedMeshes = this1;
	this.scale = 1;
	if(attachmentLoader == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("attachmentLoader cannot be null."));
	}
	this.attachmentLoader = attachmentLoader;
};
$hxClasses["spine.SkeletonLoader"] = spine_SkeletonLoader;
spine_SkeletonLoader.__name__ = "spine.SkeletonLoader";
spine_SkeletonLoader.prototype = {
	getScale: function() {
		return this.scale;
	}
	,setScale: function(scale) {
		if(scale == 0) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("scale cannot be 0."));
		}
		this.scale = scale;
	}
	,__class__: spine_SkeletonLoader
};
var spine_SkeletonJson = function(attachmentLoader) {
	spine_SkeletonLoader.call(this,attachmentLoader);
};
$hxClasses["spine.SkeletonJson"] = spine_SkeletonJson;
spine_SkeletonJson.__name__ = "spine.SkeletonJson";
spine_SkeletonJson.setBezier = function(timeline,frame,value,bezier,time1,value1,cx1,cy1,cx2,cy2,time2,value2) {
	timeline.setBezier(bezier,frame,value,time1,value1,cx1,cy1,cx2,cy2,time2,value2);
};
spine_SkeletonJson.__super__ = spine_SkeletonLoader;
spine_SkeletonJson.prototype = $extend(spine_SkeletonLoader.prototype,{
	readSkeletonData: function(root) {
		if(root == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("root cannot be null."));
		}
		var scale = this.scale;
		var skeletonData = new spine_SkeletonData();
		var skeletonMap = root.get("skeleton");
		if(skeletonMap != null) {
			skeletonData.hash = skeletonMap.getString("hash",null);
			skeletonData.version = skeletonMap.getString("spine",null);
			skeletonData.x = skeletonMap.getFloat("x",0);
			skeletonData.y = skeletonMap.getFloat("y",0);
			skeletonData.width = skeletonMap.getFloat("width",0);
			skeletonData.height = skeletonMap.getFloat("height",0);
			skeletonData.fps = skeletonMap.getFloat("fps",30);
			skeletonData.imagesPath = skeletonMap.getString("images",null);
			skeletonData.audioPath = skeletonMap.getString("audio",null);
		}
		var boneMap = root.getChild("bones");
		while(boneMap != null) {
			var parent = null;
			var parentName = boneMap.getString("parent",null);
			if(parentName != null) {
				parent = skeletonData.findBone(parentName);
				if(parent == null) {
					throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Parent bone not found: " + parentName));
				}
			}
			var data = new spine_BoneData(skeletonData.bones.length,boneMap.getString("name"),parent);
			data.length = boneMap.getFloat("length",0) * scale;
			data.x = boneMap.getFloat("x",0) * scale;
			data.y = boneMap.getFloat("y",0) * scale;
			data.rotation = boneMap.getFloat("rotation",0);
			data.scaleX = boneMap.getFloat("scaleX",1);
			data.scaleY = boneMap.getFloat("scaleY",1);
			data.shearX = boneMap.getFloat("shearX",0);
			data.shearY = boneMap.getFloat("shearY",0);
			var tmp;
			switch(boneMap.getString("transform","normal")) {
			case "noRotationOrReflection":
				tmp = 2;
				break;
			case "noScale":
				tmp = 3;
				break;
			case "noScaleOrReflection":
				tmp = 4;
				break;
			case "normal":
				tmp = 0;
				break;
			case "onlyTranslation":
				tmp = 1;
				break;
			default:
				tmp = 0;
			}
			data.transformMode = tmp;
			data.skinRequired = boneMap.getBoolean("skin",false);
			var color = boneMap.getString("color",null);
			if(color != null) {
				spine_support_graphics_Color.valueOfIntoColor(color,data.color);
			}
			skeletonData.bones.push(data);
			boneMap = boneMap.get_next();
		}
		var slotMap = root.getChild("slots");
		while(slotMap != null) {
			var slotName = slotMap.getString("name");
			var boneName = slotMap.getString("bone");
			var boneData = skeletonData.findBone(boneName);
			if(boneData == null) {
				throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Slot bone not found: " + boneName));
			}
			var data = new spine_SlotData(skeletonData.slots.length,slotName,boneData);
			var color = slotMap.getString("color",null);
			if(color != null) {
				spine_support_graphics_Color.valueOfIntoColor(color,data.color);
			}
			var dark = slotMap.getString("dark",null);
			if(dark != null) {
				data.darkColor = spine_support_graphics_Color.valueOf(dark);
			}
			data.attachmentName = slotMap.getString("attachment",null);
			var tmp;
			switch(slotMap.getString("blend","normal")) {
			case "additive":
				tmp = 1;
				break;
			case "multiply":
				tmp = 2;
				break;
			case "normal":
				tmp = 0;
				break;
			case "screen":
				tmp = 3;
				break;
			default:
				tmp = 0;
			}
			data.blendMode = tmp;
			skeletonData.slots.push(data);
			slotMap = slotMap.get_next();
		}
		var constraintMap = root.getChild("ik");
		while(constraintMap != null) {
			var data = new spine_IkConstraintData(constraintMap.getString("name"));
			data.order = constraintMap.getInt("order",0);
			data.skinRequired = constraintMap.getBoolean("skin",false);
			var entry = constraintMap.getChild("bones");
			while(entry != null) {
				var bone = skeletonData.findBone(entry.asString());
				if(bone == null) {
					throw haxe_Exception.thrown(new spine_support_utils_SerializationException("IK bone not found: " + Std.string(entry)));
				}
				data.bones.push(bone);
				entry = entry.get_next();
			}
			var targetName = constraintMap.getString("target");
			data.target = skeletonData.findBone(targetName);
			if(data.target == null) {
				throw haxe_Exception.thrown(new spine_support_utils_SerializationException("IK target bone not found: " + targetName));
			}
			data.mix = constraintMap.getFloat("mix",1);
			data.softness = constraintMap.getFloat("softness",0) * scale;
			data.bendDirection = constraintMap.getBoolean("bendPositive",true) ? 1 : -1;
			data.compress = constraintMap.getBoolean("compress",false);
			data.stretch = constraintMap.getBoolean("stretch",false);
			data.uniform = constraintMap.getBoolean("uniform",false);
			skeletonData.ikConstraints.push(data);
			constraintMap = constraintMap.get_next();
		}
		var constraintMap = root.getChild("transform");
		while(constraintMap != null) {
			var data = new spine_TransformConstraintData(constraintMap.getString("name"));
			data.order = constraintMap.getInt("order",0);
			data.skinRequired = constraintMap.getBoolean("skin",false);
			var entry = constraintMap.getChild("bones");
			while(entry != null) {
				var bone = skeletonData.findBone(entry.asString());
				if(bone == null) {
					throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Transform constraint bone not found: " + Std.string(entry)));
				}
				data.bones.push(bone);
				entry = entry.get_next();
			}
			var targetName = constraintMap.getString("target");
			data.target = skeletonData.findBone(targetName);
			if(data.target == null) {
				throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Transform constraint target bone not found: " + targetName));
			}
			data.local = constraintMap.getBoolean("local",false);
			data.relative = constraintMap.getBoolean("relative",false);
			data.offsetRotation = constraintMap.getFloat("rotation",0);
			data.offsetX = constraintMap.getFloat("x",0) * scale;
			data.offsetY = constraintMap.getFloat("y",0) * scale;
			data.offsetScaleX = constraintMap.getFloat("scaleX",0);
			data.offsetScaleY = constraintMap.getFloat("scaleY",0);
			data.offsetShearY = constraintMap.getFloat("shearY",0);
			data.mixRotate = constraintMap.getFloat("mixRotate",1);
			data.mixX = constraintMap.getFloat("mixX",1);
			data.mixY = constraintMap.getFloat("mixY",data.mixX);
			data.mixScaleX = constraintMap.getFloat("mixScaleX",1);
			data.mixScaleY = constraintMap.getFloat("mixScaleY",data.mixScaleX);
			data.mixShearY = constraintMap.getFloat("mixShearY",1);
			skeletonData.transformConstraints.push(data);
			constraintMap = constraintMap.get_next();
		}
		var constraintMap = root.getChild("path");
		while(constraintMap != null) {
			var data = new spine_PathConstraintData(constraintMap.getString("name"));
			data.order = constraintMap.getInt("order",0);
			data.skinRequired = constraintMap.getBoolean("skin",false);
			var entry = constraintMap.getChild("bones");
			while(entry != null) {
				var bone = skeletonData.findBone(entry.asString());
				if(bone == null) {
					throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Path bone not found: " + Std.string(entry)));
				}
				data.bones.push(bone);
				entry = entry.get_next();
			}
			var targetName = constraintMap.getString("target");
			data.target = skeletonData.findSlot(targetName);
			if(data.target == null) {
				throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Path target slot not found: " + targetName));
			}
			var tmp;
			switch(constraintMap.getString("positionMode","percent")) {
			case "fixed":
				tmp = 0;
				break;
			case "percent":
				tmp = 1;
				break;
			default:
				tmp = 0;
			}
			data.positionMode = tmp;
			var tmp1;
			switch(constraintMap.getString("spacingMode","length")) {
			case "fixed":
				tmp1 = 1;
				break;
			case "length":
				tmp1 = 0;
				break;
			case "percent":
				tmp1 = 2;
				break;
			case "proportional":
				tmp1 = 3;
				break;
			default:
				tmp1 = 0;
			}
			data.spacingMode = tmp1;
			var tmp2;
			switch(constraintMap.getString("rotateMode","tangent")) {
			case "chain":
				tmp2 = 1;
				break;
			case "chainScale":
				tmp2 = 2;
				break;
			case "tangent":
				tmp2 = 0;
				break;
			default:
				tmp2 = 0;
			}
			data.rotateMode = tmp2;
			data.offsetRotation = constraintMap.getFloat("rotation",0);
			data.position = constraintMap.getFloat("position",0);
			if(data.positionMode == 0) {
				data.position *= scale;
			}
			data.spacing = constraintMap.getFloat("spacing",0);
			if(data.spacingMode == 0 || data.spacingMode == 1) {
				data.spacing *= scale;
			}
			data.mixRotate = constraintMap.getFloat("mixRotate",1);
			data.mixX = constraintMap.getFloat("mixX",1);
			data.mixY = constraintMap.getFloat("mixY",1);
			skeletonData.pathConstraints.push(data);
			constraintMap = constraintMap.get_next();
		}
		var skinMap = root.getChild("skins");
		while(skinMap != null) {
			var skin = new spine_Skin(skinMap.getString("name"));
			var entry = skinMap.getChild("bones");
			while(entry != null) {
				var bone = skeletonData.findBone(entry.asString());
				if(bone == null) {
					throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Skin bone not found: " + Std.string(entry)));
				}
				skin.bones.push(bone);
				entry = entry.get_next();
			}
			var entry1 = skinMap.getChild("ik");
			while(entry1 != null) {
				var constraint = skeletonData.findIkConstraint(entry1.asString());
				if(constraint == null) {
					throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Skin IK constraint not found: " + Std.string(entry1)));
				}
				skin.constraints.push(constraint);
				entry1 = entry1.get_next();
			}
			var entry2 = skinMap.getChild("transform");
			while(entry2 != null) {
				var constraint1 = skeletonData.findTransformConstraint(entry2.asString());
				if(constraint1 == null) {
					throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Skin transform constraint not found: " + Std.string(entry2)));
				}
				skin.constraints.push(constraint1);
				entry2 = entry2.get_next();
			}
			var entry3 = skinMap.getChild("path");
			while(entry3 != null) {
				var constraint2 = skeletonData.findPathConstraint(entry3.asString());
				if(constraint2 == null) {
					throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Skin path constraint not found: " + Std.string(entry3)));
				}
				skin.constraints.push(constraint2);
				entry3 = entry3.get_next();
			}
			var slotEntry = skinMap.getChild("attachments");
			while(slotEntry != null) {
				var slot = skeletonData.findSlot(slotEntry.get_name());
				if(slot == null) {
					throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Slot not found: " + slotEntry.get_name()));
				}
				var entry4 = slotEntry.get_child();
				while(entry4 != null) {
					try {
						var attachment = this.readAttachment(entry4,skin,slot.index,entry4.get_name(),skeletonData);
						if(attachment != null) {
							var slotIndex = slot.index;
							var name = entry4.get_name();
							if(attachment == null) {
								throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("attachment cannot be null."));
							}
							var entry5 = new spine_SkinEntry(slotIndex,name,attachment);
							if(!spine_support_utils_AttachmentSet.add(skin.attachments,entry5)) {
								var entries = skin.attachments.h[entry5.hashCode];
								var result = null;
								if(entries != null) {
									var _g = 0;
									var _g1 = entries.length;
									while(_g < _g1) {
										var i = _g++;
										var entry6 = entries[i];
										var object = entry5;
										var tmp;
										if(object == null) {
											tmp = false;
										} else {
											var result1 = object;
											var other = result1;
											tmp = entry6.slotIndex != other.slotIndex ? false : entry6.name == other.name;
										}
										if(tmp) {
											result = entry6;
											break;
										}
									}
								}
								result.attachment = attachment;
							}
						}
					} catch( _g2 ) {
						haxe_NativeStackTrace.lastError = _g2;
						var ex = haxe_Exception.caught(_g2).unwrap();
						throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Error reading attachment: " + entry4.get_name() + ", skin: " + Std.string(skin),ex));
					}
					entry4 = entry4.get_next();
				}
				slotEntry = slotEntry.get_next();
			}
			skeletonData.skins.push(skin);
			if(skin.name == "default") {
				skeletonData.defaultSkin = skin;
			}
			skinMap = skinMap.get_next();
		}
		var items = this.linkedMeshes;
		var i = 0;
		var n = this.linkedMeshes.length;
		while(i < n) {
			var result = items[i];
			var linkedMesh = result;
			var skin = linkedMesh.skin == null ? skeletonData.defaultSkin : skeletonData.findSkin(linkedMesh.skin);
			if(skin == null) {
				throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Skin not found: " + linkedMesh.skin));
			}
			var slotIndex = linkedMesh.slotIndex;
			var name = linkedMesh.parent;
			var _this = skin.lookup;
			if(slotIndex < 0) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("slotIndex must be >= 0."));
			}
			if(name == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("name cannot be null."));
			}
			_this.slotIndex = slotIndex;
			_this.name = name;
			var hash = 0;
			var chr;
			var x;
			if(name.length == 0) {
				x = hash;
			} else {
				var _g = 0;
				var _g1 = name.length;
				while(_g < _g1) {
					var i1 = _g++;
					chr = HxOverrides.cca(name,i1);
					hash = (hash << 5) - hash + chr;
				}
				x = hash;
			}
			_this.hashCode = x + slotIndex * 37 | 0;
			var key = skin.lookup;
			var entries = skin.attachments.h[key.hashCode];
			var result1 = null;
			if(entries != null) {
				var _g2 = 0;
				var _g3 = entries.length;
				while(_g2 < _g3) {
					var i2 = _g2++;
					var entry = entries[i2];
					var object = key;
					var tmp;
					if(object == null) {
						tmp = false;
					} else {
						var result2 = object;
						var other = result2;
						tmp = entry.slotIndex != other.slotIndex ? false : entry.name == other.name;
					}
					if(tmp) {
						result1 = entry;
						break;
					}
				}
			}
			var entry1 = result1;
			var parent = entry1 != null ? entry1.attachment : null;
			if(parent == null) {
				throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Parent mesh not found: " + linkedMesh.parent));
			}
			var deformAttachment;
			if(linkedMesh.inheritDeform) {
				var result3 = parent;
				deformAttachment = result3;
			} else {
				deformAttachment = linkedMesh.mesh;
			}
			linkedMesh.mesh.deformAttachment = deformAttachment;
			var _this1 = linkedMesh.mesh;
			var result4 = parent;
			var parentMesh = result4;
			_this1.parentMesh = parentMesh;
			if(parentMesh != null) {
				_this1.bones = parentMesh.bones;
				_this1.vertices = parentMesh.vertices;
				_this1.regionUVs = parentMesh.regionUVs;
				_this1.triangles = parentMesh.triangles;
				_this1.hullLength = parentMesh.hullLength;
				_this1.worldVerticesLength = parentMesh.worldVerticesLength;
				_this1.edges = parentMesh.edges;
				_this1.width = parentMesh.width;
				_this1.height = parentMesh.height;
			}
			linkedMesh.mesh.updateUVs();
			++i;
		}
		var this1 = this.linkedMeshes;
		this1.splice(0,this1.length);
		var eventMap = root.getChild("events");
		while(eventMap != null) {
			var data = new spine_EventData(eventMap.get_name());
			data.intValue = eventMap.getInt("int",0);
			data.floatValue = eventMap.getFloat("float",0);
			data.stringValue = eventMap.getString("string","");
			data.audioPath = eventMap.getString("audio",null);
			if(data.audioPath != null) {
				data.volume = eventMap.getFloat("volume",1);
				data.balance = eventMap.getFloat("balance",0);
			}
			skeletonData.events.push(data);
			eventMap = eventMap.get_next();
		}
		var animationMap = root.getChild("animations");
		while(animationMap != null) {
			try {
				this.readAnimation(animationMap,animationMap.get_name(),skeletonData);
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var ex = haxe_Exception.caught(_g).unwrap();
				throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Error reading animation: " + animationMap.get_name(),ex));
			}
			animationMap = animationMap.get_next();
		}
		return skeletonData;
	}
	,readAttachment: function(map,skin,slotIndex,name,skeletonData) {
		var scale = this.scale;
		name = map.getString("name",name);
		var _continueAfterSwitch0 = false;
		while(true) {
			var _switchCond0;
			switch(map.getString("type","region")) {
			case "boundingbox":
				_switchCond0 = 1;
				break;
			case "clipping":
				_switchCond0 = 6;
				break;
			case "linkedmesh":
				_switchCond0 = 3;
				break;
			case "mesh":
				_switchCond0 = 2;
				break;
			case "path":
				_switchCond0 = 4;
				break;
			case "point":
				_switchCond0 = 5;
				break;
			case "region":
				_switchCond0 = 0;
				break;
			default:
				_switchCond0 = 0;
			}
			if(_switchCond0 == 0) {
				var path = map.getString("path",name);
				var region = this.attachmentLoader.newRegionAttachment(skin,name,path);
				if(region == null) {
					return null;
				}
				region.path = path;
				region.x = map.getFloat("x",0) * scale;
				region.y = map.getFloat("y",0) * scale;
				region.scaleX = map.getFloat("scaleX",1);
				region.scaleY = map.getFloat("scaleY",1);
				region.rotation = map.getFloat("rotation",0);
				region.width = map.getFloat("width") * scale;
				region.height = map.getFloat("height") * scale;
				var color = map.getString("color",null);
				if(color != null) {
					spine_support_graphics_Color.valueOfIntoColor(color,region.color);
				}
				var width = region.width;
				var height = region.height;
				var localX2 = width / 2;
				var localY2 = height / 2;
				var localX = -localX2;
				var localY = -localY2;
				if(((region.region) instanceof spine_support_graphics_AtlasRegion)) {
					var result = region.region;
					var region1 = result;
					localX += region1.offsetX / region1.originalWidth * width;
					localY += region1.offsetY / region1.originalHeight * height;
					if(region1.degrees == 90) {
						localX2 -= (region1.originalWidth - region1.offsetX - region1.packedHeight) / region1.originalWidth * width;
						localY2 -= (region1.originalHeight - region1.offsetY - region1.packedWidth) / region1.originalHeight * height;
					} else {
						localX2 -= (region1.originalWidth - region1.offsetX - region1.packedWidth) / region1.originalWidth * width;
						localY2 -= (region1.originalHeight - region1.offsetY - region1.packedHeight) / region1.originalHeight * height;
					}
				}
				var scaleX = region.scaleX;
				var scaleY = region.scaleY;
				localX *= scaleX;
				localY *= scaleY;
				localX2 *= scaleX;
				localY2 *= scaleY;
				var rotation = region.rotation;
				var cos = Math.cos(spine_utils_SpineUtils.degRad * rotation);
				var sin = Math.sin(spine_utils_SpineUtils.degRad * rotation);
				var x = region.x;
				var y = region.y;
				var localXCos = localX * cos + x;
				var localXSin = localX * sin;
				var localYCos = localY * cos + y;
				var localYSin = localY * sin;
				var localX2Cos = localX2 * cos + x;
				var localX2Sin = localX2 * sin;
				var localY2Cos = localY2 * cos + y;
				var localY2Sin = localY2 * sin;
				var offset = region.offset;
				offset[0] = localXCos - localYSin;
				offset[1] = localYCos + localXSin;
				offset[2] = localXCos - localY2Sin;
				offset[3] = localY2Cos + localXSin;
				offset[4] = localX2Cos - localY2Sin;
				offset[5] = localY2Cos + localX2Sin;
				offset[6] = localX2Cos - localYSin;
				offset[7] = localYCos + localX2Sin;
				return region;
			} else if(_switchCond0 == 1) {
				var box = this.attachmentLoader.newBoundingBoxAttachment(skin,name);
				if(box == null) {
					return null;
				}
				this.readVertices(map,box,map.getInt("vertexCount") << 1);
				var color1 = map.getString("color",null);
				if(color1 != null) {
					spine_support_graphics_Color.valueOfIntoColor(color1,box.color);
				}
				return box;
			} else if(_switchCond0 == 2) {
				var path1 = map.getString("path",name);
				var mesh = this.attachmentLoader.newMeshAttachment(skin,name,path1);
				if(mesh == null) {
					return null;
				}
				mesh.path = path1;
				var color2 = map.getString("color",null);
				if(color2 != null) {
					spine_support_graphics_Color.valueOfIntoColor(color2,mesh.color);
				}
				mesh.width = map.getFloat("width",0) * scale;
				mesh.height = map.getFloat("height",0) * scale;
				var parent = map.getString("parent",null);
				if(parent != null) {
					this.linkedMeshes.push(new spine_LinkedMesh(mesh,map.getString("skin",null),slotIndex,parent,map.getBoolean("deform",true)));
					return mesh;
				}
				var uvs = map.require("uvs").asFloatArray();
				this.readVertices(map,mesh,uvs.length);
				mesh.triangles = map.require("triangles").asShortArray();
				mesh.regionUVs = uvs;
				mesh.updateUVs();
				if(map.has("hull")) {
					mesh.hullLength = map.require("hull").asInt() << 1;
				}
				if(map.has("edges")) {
					mesh.edges = map.require("edges").asShortArray();
				}
				return mesh;
			} else if(_switchCond0 == 3) {
				var path2 = map.getString("path",name);
				var mesh1 = this.attachmentLoader.newMeshAttachment(skin,name,path2);
				if(mesh1 == null) {
					return null;
				}
				mesh1.path = path2;
				var color3 = map.getString("color",null);
				if(color3 != null) {
					spine_support_graphics_Color.valueOfIntoColor(color3,mesh1.color);
				}
				mesh1.width = map.getFloat("width",0) * scale;
				mesh1.height = map.getFloat("height",0) * scale;
				var parent1 = map.getString("parent",null);
				if(parent1 != null) {
					this.linkedMeshes.push(new spine_LinkedMesh(mesh1,map.getString("skin",null),slotIndex,parent1,map.getBoolean("deform",true)));
					return mesh1;
				}
				var uvs1 = map.require("uvs").asFloatArray();
				this.readVertices(map,mesh1,uvs1.length);
				mesh1.triangles = map.require("triangles").asShortArray();
				mesh1.regionUVs = uvs1;
				mesh1.updateUVs();
				if(map.has("hull")) {
					mesh1.hullLength = map.require("hull").asInt() << 1;
				}
				if(map.has("edges")) {
					mesh1.edges = map.require("edges").asShortArray();
				}
				return mesh1;
			} else if(_switchCond0 == 4) {
				var path3 = this.attachmentLoader.newPathAttachment(skin,name);
				if(path3 == null) {
					return null;
				}
				path3.closed = map.getBoolean("closed",false);
				path3.constantSpeed = map.getBoolean("constantSpeed",true);
				var vertexCount = map.getInt("vertexCount");
				this.readVertices(map,path3,vertexCount << 1);
				var length = vertexCount / 3;
				if(length == null) {
					length = 0;
				}
				var len = length | 0;
				var capacity = len != 0 ? len : 16;
				var this1 = [];
				var array = this1;
				if(length > 0) {
					var len1 = array.length;
					if(len1 > len) {
						array.splice(len,len - len1);
					} else if(len1 < len) {
						while(len1 < len) {
							array.push(0);
							++len1;
						}
					}
				}
				var lengths = array;
				var i = 0;
				var curves = map.require("lengths").get_child();
				while(curves != null) {
					lengths[i++] = curves.asFloat() * scale;
					curves = curves.get_next();
				}
				path3.lengths = lengths;
				var color4 = map.getString("color",null);
				if(color4 != null) {
					spine_support_graphics_Color.valueOfIntoColor(color4,path3.color);
				}
				return path3;
			} else if(_switchCond0 == 5) {
				var point = this.attachmentLoader.newPointAttachment(skin,name);
				if(point == null) {
					return null;
				}
				point.x = map.getFloat("x",0) * scale;
				point.y = map.getFloat("y",0) * scale;
				point.rotation = map.getFloat("rotation",0);
				var color5 = map.getString("color",null);
				if(color5 != null) {
					spine_support_graphics_Color.valueOfIntoColor(color5,point.color);
				}
				return point;
			} else if(_switchCond0 == 6) {
				var clip = this.attachmentLoader.newClippingAttachment(skin,name);
				if(clip == null) {
					return null;
				}
				var end = map.getString("end",null);
				if(end != null) {
					var slot = skeletonData.findSlot(end);
					if(slot == null) {
						throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Clipping end slot not found: " + end));
					}
					clip.endSlot = slot;
				}
				this.readVertices(map,clip,map.getInt("vertexCount") << 1);
				var color6 = map.getString("color",null);
				if(color6 != null) {
					spine_support_graphics_Color.valueOfIntoColor(color6,clip.color);
				}
				return clip;
			}
			break;
		}
		return null;
	}
	,readVertices: function(map,attachment,verticesLength) {
		attachment.worldVerticesLength = verticesLength;
		var vertices = map.require("vertices").asFloatArray();
		if(verticesLength == vertices.length) {
			if(this.scale != 1) {
				var i = 0;
				var n = vertices.length;
				while(i < n) {
					vertices[i] *= this.scale;
					++i;
				}
			}
			attachment.vertices = vertices;
			return;
		}
		var capacity = verticesLength * 3 * 3;
		var this1 = [];
		var weights = this1;
		var capacity = verticesLength * 3;
		var this1 = [];
		var bones = this1;
		var i = 0;
		var n = vertices.length;
		while(i < n) {
			var boneCount = vertices[i++] | 0;
			bones.push(boneCount);
			var nn = i + (boneCount << 2);
			while(i < nn) {
				bones.push(vertices[i] | 0);
				weights.push(vertices[i + 1] * this.scale);
				weights.push(vertices[i + 2] * this.scale);
				weights.push(vertices[i + 3]);
				i += 4;
			}
		}
		attachment.bones = bones;
		attachment.vertices = weights;
	}
	,readAnimation: function(map,name,skeletonData) {
		var scale = this.scale;
		var this1 = [];
		var timelines = this1;
		var slotMap = map.getChild("slots");
		while(slotMap != null) {
			var slot = skeletonData.findSlot(slotMap.get_name());
			if(slot == null) {
				throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Slot not found: " + slotMap.get_name()));
			}
			var timelineMap = slotMap.get_child();
			while(timelineMap != null) {
				var keyMap = timelineMap.get_child();
				if(keyMap == null) {
					timelineMap = timelineMap.get_next();
					continue;
				}
				var timelineName = timelineMap.get_name();
				if(timelineName == "attachment") {
					var timeline = new spine_AttachmentTimeline(timelineMap.get_size(),slot.index);
					var frame = 0;
					while(keyMap != null) {
						var time = keyMap.getFloat("time",0);
						var attachmentName = keyMap.getString("name");
						timeline.frames[frame] = time;
						timeline.attachmentNames[frame] = attachmentName;
						keyMap = keyMap.get_next();
						++frame;
					}
					timelines.push(timeline);
				} else if(timelineName == "rgba") {
					var timeline1 = new spine_RGBATimeline(timelineMap.get_size(),timelineMap.get_size() << 2,slot.index);
					var time1 = keyMap.getFloat("time",0);
					var color = keyMap.getString("color");
					var val = color.substring(0,2);
					var r = Std.parseInt("0x" + val) / 255;
					var val1 = color.substring(2,4);
					var g = Std.parseInt("0x" + val1) / 255;
					var val2 = color.substring(4,6);
					var b = Std.parseInt("0x" + val2) / 255;
					var val3 = color.substring(6,8);
					var a = Std.parseInt("0x" + val3) / 255;
					var frame1 = 0;
					var bezier = 0;
					while(true) {
						var frame2 = frame1;
						frame2 *= 5;
						timeline1.frames[frame2] = time1;
						timeline1.frames[frame2 + 1] = r;
						timeline1.frames[frame2 + 2] = g;
						timeline1.frames[frame2 + 3] = b;
						timeline1.frames[frame2 + 4] = a;
						var nextMap = keyMap.get_next();
						if(nextMap == null) {
							timeline1.shrink(bezier);
							break;
						}
						var time2 = nextMap.getFloat("time",0);
						color = nextMap.getString("color");
						var val4 = color.substring(0,2);
						var nr = Std.parseInt("0x" + val4) / 255;
						var val5 = color.substring(2,4);
						var ng = Std.parseInt("0x" + val5) / 255;
						var val6 = color.substring(4,6);
						var nb = Std.parseInt("0x" + val6) / 255;
						var val7 = color.substring(6,8);
						var na = Std.parseInt("0x" + val7) / 255;
						var curve = keyMap.get("curve");
						if(curve != null) {
							var curve1 = curve;
							if(curve1.isString()) {
								if(curve1.asString() == "stepped") {
									timeline1.setStepped(frame1);
								}
							} else {
								curve1 = curve1.getAtIndex(0);
								var cx1 = curve1.asFloat();
								curve1 = curve1.get_next();
								var cy1 = curve1.asFloat();
								curve1 = curve1.get_next();
								var cx2 = curve1.asFloat();
								curve1 = curve1.get_next();
								var cy2 = curve1.asFloat();
								timeline1.setBezier(bezier,frame1,0,time1,r,cx1,cy1,cx2,cy2,time2,nr);
								++bezier;
							}
							var curve2 = curve;
							if(curve2.isString()) {
								if(curve2.asString() == "stepped") {
									timeline1.setStepped(frame1);
								}
							} else {
								curve2 = curve2.getAtIndex(4);
								var cx11 = curve2.asFloat();
								curve2 = curve2.get_next();
								var cy11 = curve2.asFloat();
								curve2 = curve2.get_next();
								var cx21 = curve2.asFloat();
								curve2 = curve2.get_next();
								var cy21 = curve2.asFloat();
								timeline1.setBezier(bezier,frame1,1,time1,g,cx11,cy11,cx21,cy21,time2,ng);
								++bezier;
							}
							var curve3 = curve;
							if(curve3.isString()) {
								if(curve3.asString() == "stepped") {
									timeline1.setStepped(frame1);
								}
							} else {
								curve3 = curve3.getAtIndex(8);
								var cx12 = curve3.asFloat();
								curve3 = curve3.get_next();
								var cy12 = curve3.asFloat();
								curve3 = curve3.get_next();
								var cx22 = curve3.asFloat();
								curve3 = curve3.get_next();
								var cy22 = curve3.asFloat();
								timeline1.setBezier(bezier,frame1,2,time1,b,cx12,cy12,cx22,cy22,time2,nb);
								++bezier;
							}
							var curve4 = curve;
							if(curve4.isString()) {
								if(curve4.asString() == "stepped") {
									timeline1.setStepped(frame1);
								}
							} else {
								curve4 = curve4.getAtIndex(12);
								var cx13 = curve4.asFloat();
								curve4 = curve4.get_next();
								var cy13 = curve4.asFloat();
								curve4 = curve4.get_next();
								var cx23 = curve4.asFloat();
								curve4 = curve4.get_next();
								var cy23 = curve4.asFloat();
								timeline1.setBezier(bezier,frame1,3,time1,a,cx13,cy13,cx23,cy23,time2,na);
								++bezier;
							}
						}
						time1 = time2;
						r = nr;
						g = ng;
						b = nb;
						a = na;
						keyMap = nextMap;
						++frame1;
					}
					timelines.push(timeline1);
				} else if(timelineName == "rgb") {
					var timeline2 = new spine_RGBTimeline(timelineMap.get_size(),timelineMap.get_size() * 3,slot.index);
					var time3 = keyMap.getFloat("time",0);
					var color1 = keyMap.getString("color");
					var val8 = color1.substring(0,2);
					var r1 = Std.parseInt("0x" + val8) / 255;
					var val9 = color1.substring(2,4);
					var g1 = Std.parseInt("0x" + val9) / 255;
					var val10 = color1.substring(4,6);
					var b1 = Std.parseInt("0x" + val10) / 255;
					var frame3 = 0;
					var bezier1 = 0;
					while(true) {
						var frame4 = frame3;
						frame4 <<= 2;
						timeline2.frames[frame4] = time3;
						timeline2.frames[frame4 + 1] = r1;
						timeline2.frames[frame4 + 2] = g1;
						timeline2.frames[frame4 + 3] = b1;
						var nextMap1 = keyMap.get_next();
						if(nextMap1 == null) {
							timeline2.shrink(bezier1);
							break;
						}
						var time21 = nextMap1.getFloat("time",0);
						color1 = nextMap1.getString("color");
						var val11 = color1.substring(0,2);
						var nr1 = Std.parseInt("0x" + val11) / 255;
						var val12 = color1.substring(2,4);
						var ng1 = Std.parseInt("0x" + val12) / 255;
						var val13 = color1.substring(4,6);
						var nb1 = Std.parseInt("0x" + val13) / 255;
						var curve5 = keyMap.get("curve");
						if(curve5 != null) {
							var curve6 = curve5;
							if(curve6.isString()) {
								if(curve6.asString() == "stepped") {
									timeline2.setStepped(frame3);
								}
							} else {
								curve6 = curve6.getAtIndex(0);
								var cx14 = curve6.asFloat();
								curve6 = curve6.get_next();
								var cy14 = curve6.asFloat();
								curve6 = curve6.get_next();
								var cx24 = curve6.asFloat();
								curve6 = curve6.get_next();
								var cy24 = curve6.asFloat();
								timeline2.setBezier(bezier1,frame3,0,time3,r1,cx14,cy14,cx24,cy24,time21,nr1);
								++bezier1;
							}
							var curve7 = curve5;
							if(curve7.isString()) {
								if(curve7.asString() == "stepped") {
									timeline2.setStepped(frame3);
								}
							} else {
								curve7 = curve7.getAtIndex(4);
								var cx15 = curve7.asFloat();
								curve7 = curve7.get_next();
								var cy15 = curve7.asFloat();
								curve7 = curve7.get_next();
								var cx25 = curve7.asFloat();
								curve7 = curve7.get_next();
								var cy25 = curve7.asFloat();
								timeline2.setBezier(bezier1,frame3,1,time3,g1,cx15,cy15,cx25,cy25,time21,ng1);
								++bezier1;
							}
							var curve8 = curve5;
							if(curve8.isString()) {
								if(curve8.asString() == "stepped") {
									timeline2.setStepped(frame3);
								}
							} else {
								curve8 = curve8.getAtIndex(8);
								var cx16 = curve8.asFloat();
								curve8 = curve8.get_next();
								var cy16 = curve8.asFloat();
								curve8 = curve8.get_next();
								var cx26 = curve8.asFloat();
								curve8 = curve8.get_next();
								var cy26 = curve8.asFloat();
								timeline2.setBezier(bezier1,frame3,2,time3,b1,cx16,cy16,cx26,cy26,time21,nb1);
								++bezier1;
							}
						}
						time3 = time21;
						r1 = nr1;
						g1 = ng1;
						b1 = nb1;
						keyMap = nextMap1;
						++frame3;
					}
					timelines.push(timeline2);
				} else if(timelineName == "alpha") {
					timelines.push(this.readTimeline(keyMap,new spine_AlphaTimeline(timelineMap.get_size(),timelineMap.get_size(),slot.index),0,1));
				} else if(timelineName == "rgba2") {
					var timeline3 = new spine_RGBA2Timeline(timelineMap.get_size(),timelineMap.get_size() * 7,slot.index);
					var time4 = keyMap.getFloat("time",0);
					var color2 = keyMap.getString("light");
					var val14 = color2.substring(0,2);
					var r2 = Std.parseInt("0x" + val14) / 255;
					var val15 = color2.substring(2,4);
					var g2 = Std.parseInt("0x" + val15) / 255;
					var val16 = color2.substring(4,6);
					var b2 = Std.parseInt("0x" + val16) / 255;
					var val17 = color2.substring(6,8);
					var a1 = Std.parseInt("0x" + val17) / 255;
					color2 = keyMap.getString("dark");
					var val18 = color2.substring(0,2);
					var r21 = Std.parseInt("0x" + val18) / 255;
					var val19 = color2.substring(2,4);
					var g21 = Std.parseInt("0x" + val19) / 255;
					var val20 = color2.substring(4,6);
					var b21 = Std.parseInt("0x" + val20) / 255;
					var frame5 = 0;
					var bezier2 = 0;
					while(true) {
						var frame6 = frame5;
						frame6 <<= 3;
						timeline3.frames[frame6] = time4;
						timeline3.frames[frame6 + 1] = r2;
						timeline3.frames[frame6 + 2] = g2;
						timeline3.frames[frame6 + 3] = b2;
						timeline3.frames[frame6 + 4] = a1;
						timeline3.frames[frame6 + 5] = r21;
						timeline3.frames[frame6 + 6] = g21;
						timeline3.frames[frame6 + 7] = b21;
						var nextMap2 = keyMap.get_next();
						if(nextMap2 == null) {
							timeline3.shrink(bezier2);
							break;
						}
						var time22 = nextMap2.getFloat("time",0);
						color2 = nextMap2.getString("light");
						var val21 = color2.substring(0,2);
						var nr2 = Std.parseInt("0x" + val21) / 255;
						var val22 = color2.substring(2,4);
						var ng2 = Std.parseInt("0x" + val22) / 255;
						var val23 = color2.substring(4,6);
						var nb2 = Std.parseInt("0x" + val23) / 255;
						var val24 = color2.substring(6,8);
						var na1 = Std.parseInt("0x" + val24) / 255;
						color2 = nextMap2.getString("dark");
						var val25 = color2.substring(0,2);
						var nr21 = Std.parseInt("0x" + val25) / 255;
						var val26 = color2.substring(2,4);
						var ng21 = Std.parseInt("0x" + val26) / 255;
						var val27 = color2.substring(4,6);
						var nb21 = Std.parseInt("0x" + val27) / 255;
						var curve9 = keyMap.get("curve");
						if(curve9 != null) {
							var curve10 = curve9;
							if(curve10.isString()) {
								if(curve10.asString() == "stepped") {
									timeline3.setStepped(frame5);
								}
							} else {
								curve10 = curve10.getAtIndex(0);
								var cx17 = curve10.asFloat();
								curve10 = curve10.get_next();
								var cy17 = curve10.asFloat();
								curve10 = curve10.get_next();
								var cx27 = curve10.asFloat();
								curve10 = curve10.get_next();
								var cy27 = curve10.asFloat();
								timeline3.setBezier(bezier2,frame5,0,time4,r2,cx17,cy17,cx27,cy27,time22,nr2);
								++bezier2;
							}
							var curve11 = curve9;
							if(curve11.isString()) {
								if(curve11.asString() == "stepped") {
									timeline3.setStepped(frame5);
								}
							} else {
								curve11 = curve11.getAtIndex(4);
								var cx18 = curve11.asFloat();
								curve11 = curve11.get_next();
								var cy18 = curve11.asFloat();
								curve11 = curve11.get_next();
								var cx28 = curve11.asFloat();
								curve11 = curve11.get_next();
								var cy28 = curve11.asFloat();
								timeline3.setBezier(bezier2,frame5,1,time4,g2,cx18,cy18,cx28,cy28,time22,ng2);
								++bezier2;
							}
							var curve12 = curve9;
							if(curve12.isString()) {
								if(curve12.asString() == "stepped") {
									timeline3.setStepped(frame5);
								}
							} else {
								curve12 = curve12.getAtIndex(8);
								var cx19 = curve12.asFloat();
								curve12 = curve12.get_next();
								var cy19 = curve12.asFloat();
								curve12 = curve12.get_next();
								var cx29 = curve12.asFloat();
								curve12 = curve12.get_next();
								var cy29 = curve12.asFloat();
								timeline3.setBezier(bezier2,frame5,2,time4,b2,cx19,cy19,cx29,cy29,time22,nb2);
								++bezier2;
							}
							var curve13 = curve9;
							if(curve13.isString()) {
								if(curve13.asString() == "stepped") {
									timeline3.setStepped(frame5);
								}
							} else {
								curve13 = curve13.getAtIndex(12);
								var cx110 = curve13.asFloat();
								curve13 = curve13.get_next();
								var cy110 = curve13.asFloat();
								curve13 = curve13.get_next();
								var cx210 = curve13.asFloat();
								curve13 = curve13.get_next();
								var cy210 = curve13.asFloat();
								timeline3.setBezier(bezier2,frame5,3,time4,a1,cx110,cy110,cx210,cy210,time22,na1);
								++bezier2;
							}
							var curve14 = curve9;
							if(curve14.isString()) {
								if(curve14.asString() == "stepped") {
									timeline3.setStepped(frame5);
								}
							} else {
								curve14 = curve14.getAtIndex(16);
								var cx111 = curve14.asFloat();
								curve14 = curve14.get_next();
								var cy111 = curve14.asFloat();
								curve14 = curve14.get_next();
								var cx211 = curve14.asFloat();
								curve14 = curve14.get_next();
								var cy211 = curve14.asFloat();
								timeline3.setBezier(bezier2,frame5,4,time4,r21,cx111,cy111,cx211,cy211,time22,nr21);
								++bezier2;
							}
							var curve15 = curve9;
							if(curve15.isString()) {
								if(curve15.asString() == "stepped") {
									timeline3.setStepped(frame5);
								}
							} else {
								curve15 = curve15.getAtIndex(20);
								var cx112 = curve15.asFloat();
								curve15 = curve15.get_next();
								var cy112 = curve15.asFloat();
								curve15 = curve15.get_next();
								var cx212 = curve15.asFloat();
								curve15 = curve15.get_next();
								var cy212 = curve15.asFloat();
								timeline3.setBezier(bezier2,frame5,5,time4,g21,cx112,cy112,cx212,cy212,time22,ng21);
								++bezier2;
							}
							var curve16 = curve9;
							if(curve16.isString()) {
								if(curve16.asString() == "stepped") {
									timeline3.setStepped(frame5);
								}
							} else {
								curve16 = curve16.getAtIndex(24);
								var cx113 = curve16.asFloat();
								curve16 = curve16.get_next();
								var cy113 = curve16.asFloat();
								curve16 = curve16.get_next();
								var cx213 = curve16.asFloat();
								curve16 = curve16.get_next();
								var cy213 = curve16.asFloat();
								timeline3.setBezier(bezier2,frame5,6,time4,b21,cx113,cy113,cx213,cy213,time22,nb21);
								++bezier2;
							}
						}
						time4 = time22;
						r2 = nr2;
						g2 = ng2;
						b2 = nb2;
						a1 = na1;
						r21 = nr21;
						g21 = ng21;
						b21 = nb21;
						keyMap = nextMap2;
						++frame5;
					}
					timelines.push(timeline3);
				} else if(timelineName == "rgb2") {
					var timeline4 = new spine_RGB2Timeline(timelineMap.get_size(),timelineMap.get_size() * 6,slot.index);
					var time5 = keyMap.getFloat("time",0);
					var color3 = keyMap.getString("light");
					var val28 = color3.substring(0,2);
					var r3 = Std.parseInt("0x" + val28) / 255;
					var val29 = color3.substring(2,4);
					var g3 = Std.parseInt("0x" + val29) / 255;
					var val30 = color3.substring(4,6);
					var b3 = Std.parseInt("0x" + val30) / 255;
					color3 = keyMap.getString("dark");
					var val31 = color3.substring(0,2);
					var r22 = Std.parseInt("0x" + val31) / 255;
					var val32 = color3.substring(2,4);
					var g22 = Std.parseInt("0x" + val32) / 255;
					var val33 = color3.substring(4,6);
					var b22 = Std.parseInt("0x" + val33) / 255;
					var frame7 = 0;
					var bezier3 = 0;
					while(true) {
						var frame8 = frame7;
						frame8 *= 7;
						timeline4.frames[frame8] = time5;
						timeline4.frames[frame8 + 1] = r3;
						timeline4.frames[frame8 + 2] = g3;
						timeline4.frames[frame8 + 3] = b3;
						timeline4.frames[frame8 + 4] = r22;
						timeline4.frames[frame8 + 5] = g22;
						timeline4.frames[frame8 + 6] = b22;
						var nextMap3 = keyMap.get_next();
						if(nextMap3 == null) {
							timeline4.shrink(bezier3);
							break;
						}
						var time23 = nextMap3.getFloat("time",0);
						color3 = nextMap3.getString("light");
						var val34 = color3.substring(0,2);
						var nr3 = Std.parseInt("0x" + val34) / 255;
						var val35 = color3.substring(2,4);
						var ng3 = Std.parseInt("0x" + val35) / 255;
						var val36 = color3.substring(4,6);
						var nb3 = Std.parseInt("0x" + val36) / 255;
						color3 = nextMap3.getString("dark");
						var val37 = color3.substring(0,2);
						var nr22 = Std.parseInt("0x" + val37) / 255;
						var val38 = color3.substring(2,4);
						var ng22 = Std.parseInt("0x" + val38) / 255;
						var val39 = color3.substring(4,6);
						var nb22 = Std.parseInt("0x" + val39) / 255;
						var curve17 = keyMap.get("curve");
						if(curve17 != null) {
							var curve18 = curve17;
							if(curve18.isString()) {
								if(curve18.asString() == "stepped") {
									timeline4.setStepped(frame7);
								}
							} else {
								curve18 = curve18.getAtIndex(0);
								var cx114 = curve18.asFloat();
								curve18 = curve18.get_next();
								var cy114 = curve18.asFloat();
								curve18 = curve18.get_next();
								var cx214 = curve18.asFloat();
								curve18 = curve18.get_next();
								var cy214 = curve18.asFloat();
								timeline4.setBezier(bezier3,frame7,0,time5,r3,cx114,cy114,cx214,cy214,time23,nr3);
								++bezier3;
							}
							var curve19 = curve17;
							if(curve19.isString()) {
								if(curve19.asString() == "stepped") {
									timeline4.setStepped(frame7);
								}
							} else {
								curve19 = curve19.getAtIndex(4);
								var cx115 = curve19.asFloat();
								curve19 = curve19.get_next();
								var cy115 = curve19.asFloat();
								curve19 = curve19.get_next();
								var cx215 = curve19.asFloat();
								curve19 = curve19.get_next();
								var cy215 = curve19.asFloat();
								timeline4.setBezier(bezier3,frame7,1,time5,g3,cx115,cy115,cx215,cy215,time23,ng3);
								++bezier3;
							}
							var curve20 = curve17;
							if(curve20.isString()) {
								if(curve20.asString() == "stepped") {
									timeline4.setStepped(frame7);
								}
							} else {
								curve20 = curve20.getAtIndex(8);
								var cx116 = curve20.asFloat();
								curve20 = curve20.get_next();
								var cy116 = curve20.asFloat();
								curve20 = curve20.get_next();
								var cx216 = curve20.asFloat();
								curve20 = curve20.get_next();
								var cy216 = curve20.asFloat();
								timeline4.setBezier(bezier3,frame7,2,time5,b3,cx116,cy116,cx216,cy216,time23,nb3);
								++bezier3;
							}
							var curve21 = curve17;
							if(curve21.isString()) {
								if(curve21.asString() == "stepped") {
									timeline4.setStepped(frame7);
								}
							} else {
								curve21 = curve21.getAtIndex(12);
								var cx117 = curve21.asFloat();
								curve21 = curve21.get_next();
								var cy117 = curve21.asFloat();
								curve21 = curve21.get_next();
								var cx217 = curve21.asFloat();
								curve21 = curve21.get_next();
								var cy217 = curve21.asFloat();
								timeline4.setBezier(bezier3,frame7,3,time5,r22,cx117,cy117,cx217,cy217,time23,nr22);
								++bezier3;
							}
							var curve22 = curve17;
							if(curve22.isString()) {
								if(curve22.asString() == "stepped") {
									timeline4.setStepped(frame7);
								}
							} else {
								curve22 = curve22.getAtIndex(16);
								var cx118 = curve22.asFloat();
								curve22 = curve22.get_next();
								var cy118 = curve22.asFloat();
								curve22 = curve22.get_next();
								var cx218 = curve22.asFloat();
								curve22 = curve22.get_next();
								var cy218 = curve22.asFloat();
								timeline4.setBezier(bezier3,frame7,4,time5,g22,cx118,cy118,cx218,cy218,time23,ng22);
								++bezier3;
							}
							var curve23 = curve17;
							if(curve23.isString()) {
								if(curve23.asString() == "stepped") {
									timeline4.setStepped(frame7);
								}
							} else {
								curve23 = curve23.getAtIndex(20);
								var cx119 = curve23.asFloat();
								curve23 = curve23.get_next();
								var cy119 = curve23.asFloat();
								curve23 = curve23.get_next();
								var cx219 = curve23.asFloat();
								curve23 = curve23.get_next();
								var cy219 = curve23.asFloat();
								timeline4.setBezier(bezier3,frame7,5,time5,b22,cx119,cy119,cx219,cy219,time23,nb22);
								++bezier3;
							}
						}
						time5 = time23;
						r3 = nr3;
						g3 = ng3;
						b3 = nb3;
						r22 = nr22;
						g22 = ng22;
						b22 = nb22;
						keyMap = nextMap3;
						++frame7;
					}
					timelines.push(timeline4);
				} else {
					throw haxe_Exception.thrown(new spine_support_error_RuntimeException("Invalid timeline type for a slot: " + timelineName + " (" + slotMap.get_name() + ")"));
				}
				timelineMap = timelineMap.get_next();
			}
			slotMap = slotMap.get_next();
		}
		var boneMap = map.getChild("bones");
		while(boneMap != null) {
			var bone = skeletonData.findBone(boneMap.get_name());
			if(bone == null) {
				throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Bone not found: " + boneMap.get_name()));
			}
			var timelineMap = boneMap.get_child();
			while(timelineMap != null) {
				var keyMap = timelineMap.get_child();
				if(keyMap == null) {
					timelineMap = timelineMap.get_next();
					continue;
				}
				var timelineName = timelineMap.get_name();
				if(timelineName == "rotate") {
					timelines.push(this.readTimeline(keyMap,new spine_RotateTimeline(timelineMap.get_size(),timelineMap.get_size(),bone.index),0,1));
				} else if(timelineName == "translate") {
					var timeline = new spine_TranslateTimeline(timelineMap.get_size(),timelineMap.get_size() << 1,bone.index);
					timelines.push(this.readTimeline2(keyMap,timeline,"x","y",0,scale));
				} else if(timelineName == "translatex") {
					timelines.push(this.readTimeline(keyMap,new spine_TranslateXTimeline(timelineMap.get_size(),timelineMap.get_size(),bone.index),0,scale));
				} else if(timelineName == "translatey") {
					timelines.push(this.readTimeline(keyMap,new spine_TranslateYTimeline(timelineMap.get_size(),timelineMap.get_size(),bone.index),0,scale));
				} else if(timelineName == "scale") {
					var timeline1 = new spine_ScaleTimeline(timelineMap.get_size(),timelineMap.get_size() << 1,bone.index);
					timelines.push(this.readTimeline2(keyMap,timeline1,"x","y",1,1));
				} else if(timelineName == "scalex") {
					timelines.push(this.readTimeline(keyMap,new spine_ScaleXTimeline(timelineMap.get_size(),timelineMap.get_size(),bone.index),1,1));
				} else if(timelineName == "scaley") {
					timelines.push(this.readTimeline(keyMap,new spine_ScaleYTimeline(timelineMap.get_size(),timelineMap.get_size(),bone.index),1,1));
				} else if(timelineName == "shear") {
					var timeline2 = new spine_ShearTimeline(timelineMap.get_size(),timelineMap.get_size() << 1,bone.index);
					timelines.push(this.readTimeline2(keyMap,timeline2,"x","y",0,1));
				} else if(timelineName == "shearx") {
					timelines.push(this.readTimeline(keyMap,new spine_ShearXTimeline(timelineMap.get_size(),timelineMap.get_size(),bone.index),0,1));
				} else if(timelineName == "sheary") {
					timelines.push(this.readTimeline(keyMap,new spine_ShearYTimeline(timelineMap.get_size(),timelineMap.get_size(),bone.index),0,1));
				} else {
					throw haxe_Exception.thrown(new spine_support_error_RuntimeException("Invalid timeline type for a bone: " + timelineName + " (" + boneMap.get_name() + ")"));
				}
				timelineMap = timelineMap.get_next();
			}
			boneMap = boneMap.get_next();
		}
		var timelineMap = map.getChild("ik");
		while(timelineMap != null) {
			var keyMap = timelineMap.get_child();
			if(keyMap == null) {
				timelineMap = timelineMap.get_next();
				continue;
			}
			var constraint = skeletonData.findIkConstraint(timelineMap.get_name());
			var timeline = new spine_IkConstraintTimeline(timelineMap.get_size(),timelineMap.get_size() << 1,skeletonData.getIkConstraints().indexOf(constraint));
			var time = keyMap.getFloat("time",0);
			var mix = keyMap.getFloat("mix",1);
			var softness = keyMap.getFloat("softness",0) * scale;
			var frame = 0;
			var bezier = 0;
			while(true) {
				var frame1 = frame;
				var bendDirection = keyMap.getBoolean("bendPositive",true) ? 1 : -1;
				var compress = keyMap.getBoolean("compress",false);
				var stretch = keyMap.getBoolean("stretch",false);
				frame1 *= 6;
				timeline.frames[frame1] = time;
				timeline.frames[frame1 + 1] = mix;
				timeline.frames[frame1 + 2] = softness;
				timeline.frames[frame1 + 3] = bendDirection;
				timeline.frames[frame1 + 4] = compress ? 1 : 0;
				timeline.frames[frame1 + 5] = stretch ? 1 : 0;
				var nextMap = keyMap.get_next();
				if(nextMap == null) {
					timeline.shrink(bezier);
					break;
				}
				var time2 = nextMap.getFloat("time",0);
				var mix2 = nextMap.getFloat("mix",1);
				var softness2 = nextMap.getFloat("softness",0) * scale;
				var curve = keyMap.get("curve");
				if(curve != null) {
					var curve1 = curve;
					if(curve1.isString()) {
						if(curve1.asString() == "stepped") {
							timeline.setStepped(frame);
						}
					} else {
						curve1 = curve1.getAtIndex(0);
						var cx1 = curve1.asFloat();
						curve1 = curve1.get_next();
						var cy1 = curve1.asFloat();
						curve1 = curve1.get_next();
						var cx2 = curve1.asFloat();
						curve1 = curve1.get_next();
						var cy2 = curve1.asFloat();
						timeline.setBezier(bezier,frame,0,time,mix,cx1,cy1,cx2,cy2,time2,mix2);
						++bezier;
					}
					var curve2 = curve;
					if(curve2.isString()) {
						if(curve2.asString() == "stepped") {
							timeline.setStepped(frame);
						}
					} else {
						curve2 = curve2.getAtIndex(4);
						var cx11 = curve2.asFloat();
						curve2 = curve2.get_next();
						var cy11 = curve2.asFloat() * scale;
						curve2 = curve2.get_next();
						var cx21 = curve2.asFloat();
						curve2 = curve2.get_next();
						var cy21 = curve2.asFloat() * scale;
						timeline.setBezier(bezier,frame,1,time,softness,cx11,cy11,cx21,cy21,time2,softness2);
						++bezier;
					}
				}
				time = time2;
				mix = mix2;
				softness = softness2;
				keyMap = nextMap;
				++frame;
			}
			timelines.push(timeline);
			timelineMap = timelineMap.get_next();
		}
		var timelineMap = map.getChild("transform");
		while(timelineMap != null) {
			var keyMap = timelineMap.get_child();
			if(keyMap == null) {
				timelineMap = timelineMap.get_next();
				continue;
			}
			var constraint = skeletonData.findTransformConstraint(timelineMap.get_name());
			var timeline = new spine_TransformConstraintTimeline(timelineMap.get_size(),timelineMap.get_size() << 2,skeletonData.getTransformConstraints().indexOf(constraint));
			var time = keyMap.getFloat("time",0);
			var mixRotate = keyMap.getFloat("mixRotate",1);
			var mixX = keyMap.getFloat("mixX",1);
			var mixY = keyMap.getFloat("mixY",mixX);
			var mixScaleX = keyMap.getFloat("mixScaleX",1);
			var mixScaleY = keyMap.getFloat("mixScaleY",mixScaleX);
			var mixShearY = keyMap.getFloat("mixShearY",1);
			var frame = 0;
			var bezier = 0;
			while(true) {
				var frame1 = frame;
				frame1 *= 7;
				timeline.frames[frame1] = time;
				timeline.frames[frame1 + 1] = mixRotate;
				timeline.frames[frame1 + 2] = mixX;
				timeline.frames[frame1 + 3] = mixY;
				timeline.frames[frame1 + 4] = mixScaleX;
				timeline.frames[frame1 + 5] = mixScaleY;
				timeline.frames[frame1 + 6] = mixShearY;
				var nextMap = keyMap.get_next();
				if(nextMap == null) {
					timeline.shrink(bezier);
					break;
				}
				var time2 = nextMap.getFloat("time",0);
				var mixRotate2 = nextMap.getFloat("mixRotate",1);
				var mixX2 = nextMap.getFloat("mixX",1);
				var mixY2 = nextMap.getFloat("mixY",mixX2);
				var mixScaleX2 = nextMap.getFloat("mixScaleX",1);
				var mixScaleY2 = nextMap.getFloat("mixScaleY",mixScaleX2);
				var mixShearY2 = nextMap.getFloat("mixShearY",1);
				var curve = keyMap.get("curve");
				if(curve != null) {
					var curve1 = curve;
					if(curve1.isString()) {
						if(curve1.asString() == "stepped") {
							timeline.setStepped(frame);
						}
					} else {
						curve1 = curve1.getAtIndex(0);
						var cx1 = curve1.asFloat();
						curve1 = curve1.get_next();
						var cy1 = curve1.asFloat();
						curve1 = curve1.get_next();
						var cx2 = curve1.asFloat();
						curve1 = curve1.get_next();
						var cy2 = curve1.asFloat();
						timeline.setBezier(bezier,frame,0,time,mixRotate,cx1,cy1,cx2,cy2,time2,mixRotate2);
						++bezier;
					}
					var curve2 = curve;
					if(curve2.isString()) {
						if(curve2.asString() == "stepped") {
							timeline.setStepped(frame);
						}
					} else {
						curve2 = curve2.getAtIndex(4);
						var cx11 = curve2.asFloat();
						curve2 = curve2.get_next();
						var cy11 = curve2.asFloat();
						curve2 = curve2.get_next();
						var cx21 = curve2.asFloat();
						curve2 = curve2.get_next();
						var cy21 = curve2.asFloat();
						timeline.setBezier(bezier,frame,1,time,mixX,cx11,cy11,cx21,cy21,time2,mixX2);
						++bezier;
					}
					var curve3 = curve;
					if(curve3.isString()) {
						if(curve3.asString() == "stepped") {
							timeline.setStepped(frame);
						}
					} else {
						curve3 = curve3.getAtIndex(8);
						var cx12 = curve3.asFloat();
						curve3 = curve3.get_next();
						var cy12 = curve3.asFloat();
						curve3 = curve3.get_next();
						var cx22 = curve3.asFloat();
						curve3 = curve3.get_next();
						var cy22 = curve3.asFloat();
						timeline.setBezier(bezier,frame,2,time,mixY,cx12,cy12,cx22,cy22,time2,mixY2);
						++bezier;
					}
					var curve4 = curve;
					if(curve4.isString()) {
						if(curve4.asString() == "stepped") {
							timeline.setStepped(frame);
						}
					} else {
						curve4 = curve4.getAtIndex(12);
						var cx13 = curve4.asFloat();
						curve4 = curve4.get_next();
						var cy13 = curve4.asFloat();
						curve4 = curve4.get_next();
						var cx23 = curve4.asFloat();
						curve4 = curve4.get_next();
						var cy23 = curve4.asFloat();
						timeline.setBezier(bezier,frame,3,time,mixScaleX,cx13,cy13,cx23,cy23,time2,mixScaleX2);
						++bezier;
					}
					var curve5 = curve;
					if(curve5.isString()) {
						if(curve5.asString() == "stepped") {
							timeline.setStepped(frame);
						}
					} else {
						curve5 = curve5.getAtIndex(16);
						var cx14 = curve5.asFloat();
						curve5 = curve5.get_next();
						var cy14 = curve5.asFloat();
						curve5 = curve5.get_next();
						var cx24 = curve5.asFloat();
						curve5 = curve5.get_next();
						var cy24 = curve5.asFloat();
						timeline.setBezier(bezier,frame,4,time,mixScaleY,cx14,cy14,cx24,cy24,time2,mixScaleY2);
						++bezier;
					}
					var curve6 = curve;
					if(curve6.isString()) {
						if(curve6.asString() == "stepped") {
							timeline.setStepped(frame);
						}
					} else {
						curve6 = curve6.getAtIndex(20);
						var cx15 = curve6.asFloat();
						curve6 = curve6.get_next();
						var cy15 = curve6.asFloat();
						curve6 = curve6.get_next();
						var cx25 = curve6.asFloat();
						curve6 = curve6.get_next();
						var cy25 = curve6.asFloat();
						timeline.setBezier(bezier,frame,5,time,mixShearY,cx15,cy15,cx25,cy25,time2,mixShearY2);
						++bezier;
					}
				}
				time = time2;
				mixRotate = mixRotate2;
				mixX = mixX2;
				mixY = mixY2;
				mixScaleX = mixScaleX2;
				mixScaleY = mixScaleY2;
				mixScaleX = mixScaleX2;
				keyMap = nextMap;
				++frame;
			}
			timelines.push(timeline);
			timelineMap = timelineMap.get_next();
		}
		var constraintMap = map.getChild("path");
		while(constraintMap != null) {
			var constraint = skeletonData.findPathConstraint(constraintMap.get_name());
			if(constraint == null) {
				throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Path constraint not found: " + constraintMap.get_name()));
			}
			var index = skeletonData.pathConstraints.indexOf(constraint);
			var timelineMap = constraintMap.get_child();
			while(timelineMap != null) {
				var keyMap = timelineMap.get_child();
				if(keyMap == null) {
					timelineMap = timelineMap.get_next();
					continue;
				}
				var timelineName = timelineMap.get_name();
				if(timelineName == "position") {
					var timeline = new spine_PathConstraintPositionTimeline(timelineMap.get_size(),timelineMap.get_size(),index);
					timelines.push(this.readTimeline(keyMap,timeline,0,constraint.positionMode == 0 ? scale : 1));
				} else if(timelineName == "spacing") {
					var timeline1 = new spine_PathConstraintSpacingTimeline(timelineMap.get_size(),timelineMap.get_size(),index);
					timelines.push(this.readTimeline(keyMap,timeline1,0,constraint.spacingMode == 0 || constraint.spacingMode == 1 ? scale : 1));
				} else if(timelineName == "mix") {
					var timeline2 = new spine_PathConstraintMixTimeline(timelineMap.get_size(),timelineMap.get_size() * 3,index);
					var time = keyMap.getFloat("time",0);
					var mixRotate = keyMap.getFloat("mixRotate",1);
					var mixX = keyMap.getFloat("mixX",1);
					var mixY = keyMap.getFloat("mixY",mixX);
					var frame = 0;
					var bezier = 0;
					while(true) {
						var frame1 = frame;
						frame1 <<= 2;
						timeline2.frames[frame1] = time;
						timeline2.frames[frame1 + 1] = mixRotate;
						timeline2.frames[frame1 + 2] = mixX;
						timeline2.frames[frame1 + 3] = mixY;
						var nextMap = keyMap.get_next();
						if(nextMap == null) {
							timeline2.shrink(bezier);
							break;
						}
						var time2 = nextMap.getFloat("time",0);
						var mixRotate2 = nextMap.getFloat("mixRotate",1);
						var mixX2 = nextMap.getFloat("mixX",1);
						var mixY2 = nextMap.getFloat("mixY",mixX2);
						var curve = keyMap.get("curve");
						if(curve != null) {
							var curve1 = curve;
							if(curve1.isString()) {
								if(curve1.asString() == "stepped") {
									timeline2.setStepped(frame);
								}
							} else {
								curve1 = curve1.getAtIndex(0);
								var cx1 = curve1.asFloat();
								curve1 = curve1.get_next();
								var cy1 = curve1.asFloat();
								curve1 = curve1.get_next();
								var cx2 = curve1.asFloat();
								curve1 = curve1.get_next();
								var cy2 = curve1.asFloat();
								timeline2.setBezier(bezier,frame,0,time,mixRotate,cx1,cy1,cx2,cy2,time2,mixRotate2);
								++bezier;
							}
							var curve2 = curve;
							if(curve2.isString()) {
								if(curve2.asString() == "stepped") {
									timeline2.setStepped(frame);
								}
							} else {
								curve2 = curve2.getAtIndex(4);
								var cx11 = curve2.asFloat();
								curve2 = curve2.get_next();
								var cy11 = curve2.asFloat();
								curve2 = curve2.get_next();
								var cx21 = curve2.asFloat();
								curve2 = curve2.get_next();
								var cy21 = curve2.asFloat();
								timeline2.setBezier(bezier,frame,1,time,mixX,cx11,cy11,cx21,cy21,time2,mixX2);
								++bezier;
							}
							var curve3 = curve;
							if(curve3.isString()) {
								if(curve3.asString() == "stepped") {
									timeline2.setStepped(frame);
								}
							} else {
								curve3 = curve3.getAtIndex(8);
								var cx12 = curve3.asFloat();
								curve3 = curve3.get_next();
								var cy12 = curve3.asFloat();
								curve3 = curve3.get_next();
								var cx22 = curve3.asFloat();
								curve3 = curve3.get_next();
								var cy22 = curve3.asFloat();
								timeline2.setBezier(bezier,frame,2,time,mixY,cx12,cy12,cx22,cy22,time2,mixY2);
								++bezier;
							}
						}
						time = time2;
						mixRotate = mixRotate2;
						mixX = mixX2;
						mixY = mixY2;
						keyMap = nextMap;
						++frame;
					}
					timelines.push(timeline2);
				}
				timelineMap = timelineMap.get_next();
			}
			constraintMap = constraintMap.get_next();
		}
		var deformMap = map.getChild("deform");
		while(deformMap != null) {
			var skin = skeletonData.findSkin(deformMap.get_name());
			if(skin == null) {
				throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Skin not found: " + deformMap.get_name()));
			}
			var slotMap = deformMap.get_child();
			while(slotMap != null) {
				var slot = skeletonData.findSlot(slotMap.get_name());
				if(slot == null) {
					throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Slot not found: " + slotMap.get_name()));
				}
				var timelineMap = slotMap.get_child();
				while(timelineMap != null) {
					var keyMap = timelineMap.get_child();
					if(keyMap == null) {
						timelineMap = timelineMap.get_next();
						continue;
					}
					var slotIndex = slot.index;
					var name1 = timelineMap.get_name();
					var _this = skin.lookup;
					if(slotIndex < 0) {
						throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("slotIndex must be >= 0."));
					}
					if(name1 == null) {
						throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("name cannot be null."));
					}
					_this.slotIndex = slotIndex;
					_this.name = name1;
					var hash = 0;
					var chr;
					var x;
					if(name1.length == 0) {
						x = hash;
					} else {
						var _g = 0;
						var _g1 = name1.length;
						while(_g < _g1) {
							var i = _g++;
							chr = HxOverrides.cca(name1,i);
							hash = (hash << 5) - hash + chr;
						}
						x = hash;
					}
					_this.hashCode = x + slotIndex * 37 | 0;
					var key = skin.lookup;
					var entries = skin.attachments.h[key.hashCode];
					var result = null;
					if(entries != null) {
						var _g2 = 0;
						var _g3 = entries.length;
						while(_g2 < _g3) {
							var i1 = _g2++;
							var entry = entries[i1];
							var object = key;
							var value;
							if(object == null) {
								value = false;
							} else {
								var result1 = object;
								var other = result1;
								value = entry.slotIndex != other.slotIndex ? false : entry.name == other.name;
							}
							if(value) {
								result = entry;
								break;
							}
						}
					}
					var entry1 = result;
					var result2 = entry1 != null ? entry1.attachment : null;
					var attachment = result2;
					if(attachment == null) {
						throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Deform attachment not found: " + timelineMap.get_name()));
					}
					var weighted = attachment.bones != null;
					var vertices = attachment.vertices;
					var deformLength = weighted ? (vertices.length / 3 | 0) << 1 : vertices.length;
					var timeline = new spine_DeformTimeline(timelineMap.get_size(),timelineMap.get_size(),slot.index,attachment);
					var time = keyMap.getFloat("time",0);
					var frame = 0;
					var bezier = 0;
					while(true) {
						var deform = null;
						var verticesValue = keyMap.get("vertices");
						if(verticesValue == null) {
							if(weighted) {
								var length = deformLength;
								if(length == null) {
									length = 0;
								}
								var len = length | 0;
								var capacity = len != 0 ? len : 16;
								var this1 = [];
								var array = this1;
								if(length > 0) {
									var len1 = array.length;
									if(len1 > len) {
										array.splice(len,len - len1);
									} else if(len1 < len) {
										while(len1 < len) {
											array.push(0);
											++len1;
										}
									}
								}
								deform = array;
							} else {
								deform = vertices;
							}
						} else {
							var length1 = deformLength;
							if(length1 == null) {
								length1 = 0;
							}
							var len2 = length1 | 0;
							var capacity1 = len2 != 0 ? len2 : 16;
							var this2 = [];
							var array1 = this2;
							if(length1 > 0) {
								var len3 = array1.length;
								if(len3 > len2) {
									array1.splice(len2,len2 - len3);
								} else if(len3 < len2) {
									while(len3 < len2) {
										array1.push(0);
										++len3;
									}
								}
							}
							deform = array1;
							var start = keyMap.getInt("offset",0);
							var src = verticesValue.asFloatArray();
							var dest = deform;
							var length2 = verticesValue.get_size();
							if(src == null) {
								throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("src cannot be null."));
							}
							if(dest == null) {
								throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("dest cannot be null."));
							}
							try {
								spine_support_utils_Array.copy(src,0,dest,start,length2);
							} catch( _g4 ) {
								haxe_NativeStackTrace.lastError = _g4;
								throw haxe_Exception.thrown(new spine_support_error_ArrayIndexOutOfBoundsException("Src: " + src.length + ", " + 0 + ", dest: " + dest.length + ", " + start + ", count: " + length2));
							}
							if(scale != 1) {
								var i2 = start;
								var n = i2 + verticesValue.get_size();
								while(i2 < n) {
									deform[i2] *= scale;
									++i2;
								}
							}
							if(!weighted) {
								var i3 = 0;
								while(i3 < deformLength) {
									deform[i3] += vertices[i3];
									++i3;
								}
							}
						}
						timeline.frames[frame] = time;
						timeline.vertices[frame] = deform;
						var nextMap = keyMap.get_next();
						if(nextMap == null) {
							timeline.shrink(bezier);
							break;
						}
						var time2 = nextMap.getFloat("time",0);
						var curve = keyMap.get("curve");
						if(curve != null) {
							var curve1 = curve;
							if(curve1.isString()) {
								if(curve1.asString() == "stepped") {
									timeline.setStepped(frame);
								}
							} else {
								curve1 = curve1.getAtIndex(0);
								var cx1 = curve1.asFloat();
								curve1 = curve1.get_next();
								var cy1 = curve1.asFloat();
								curve1 = curve1.get_next();
								var cx2 = curve1.asFloat();
								curve1 = curve1.get_next();
								var cy2 = curve1.asFloat();
								var curves = timeline.curves;
								var i4 = timeline.frames.length + bezier * 18;
								curves[frame] = 2 + i4;
								var tmpx = (time - cx1 * 2 + cx2) * 0.03;
								var tmpy = cy2 * 0.03 - cy1 * 0.06;
								var dddx = ((cx1 - cx2) * 3 - time + time2) * 0.006;
								var dddy = (cy1 - cy2 + 0.33333333) * 0.018;
								var ddx = tmpx * 2 + dddx;
								var ddy = tmpy * 2 + dddy;
								var dx = (cx1 - time) * 0.3 + tmpx + dddx * 0.16666667;
								var dy = cy1 * 0.3 + tmpy + dddy * 0.16666667;
								var x1 = time + dx;
								var y = dy;
								var n1 = i4 + 18;
								while(i4 < n1) {
									curves[i4] = x1;
									curves[i4 + 1] = y;
									dx += ddx;
									dy += ddy;
									ddx += dddx;
									ddy += dddy;
									x1 += dx;
									y += dy;
									i4 += 2;
								}
								++bezier;
							}
						}
						time = time2;
						keyMap = nextMap;
						++frame;
					}
					timelines.push(timeline);
					timelineMap = timelineMap.get_next();
				}
				slotMap = slotMap.get_next();
			}
			deformMap = deformMap.get_next();
		}
		var drawOrdersMap = map.get("drawOrder");
		if(drawOrdersMap != null) {
			var timeline = new spine_DrawOrderTimeline(drawOrdersMap.get_size());
			var slotCount = skeletonData.slots.length;
			var frame = 0;
			var drawOrderMap = drawOrdersMap.get_child();
			while(drawOrderMap != null) {
				var drawOrder = null;
				var offsets = drawOrderMap.get("offsets");
				if(offsets != null) {
					var length = slotCount;
					if(length == null) {
						length = 0;
					}
					var len = length | 0;
					var capacity = len != 0 ? len : 16;
					var this1 = [];
					var array = this1;
					if(length != 0) {
						var len1 = array.length;
						if(len1 > len) {
							array.splice(len,len - len1);
						} else if(len1 < len) {
							while(len1 < len) {
								array.push(0);
								++len1;
							}
						}
					}
					drawOrder = array;
					var i = slotCount - 1;
					while(i >= 0) {
						drawOrder[i] = -1;
						--i;
					}
					var length1 = slotCount - offsets.get_size();
					if(length1 == null) {
						length1 = 0;
					}
					var len2 = length1 | 0;
					var capacity1 = len2 != 0 ? len2 : 16;
					var this2 = [];
					var array1 = this2;
					if(length1 != 0) {
						var len3 = array1.length;
						if(len3 > len2) {
							array1.splice(len2,len2 - len3);
						} else if(len3 < len2) {
							while(len3 < len2) {
								array1.push(0);
								++len3;
							}
						}
					}
					var unchanged = array1;
					var originalIndex = 0;
					var unchangedIndex = 0;
					var offsetMap = offsets.get_child();
					while(offsetMap != null) {
						var slot = skeletonData.findSlot(offsetMap.getString("slot"));
						if(slot == null) {
							throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Slot not found: " + offsetMap.getString("slot")));
						}
						while(originalIndex != slot.index) unchanged[unchangedIndex++] = originalIndex++;
						drawOrder[originalIndex++ + offsetMap.getInt("offset")] = originalIndex - 1;
						offsetMap = offsetMap.get_next();
					}
					while(originalIndex < slotCount) unchanged[unchangedIndex++] = originalIndex++;
					var i1 = slotCount - 1;
					while(i1 >= 0) {
						if(drawOrder[i1] == -1) {
							drawOrder[i1] = unchanged[--unchangedIndex];
						}
						--i1;
					}
				}
				var time = drawOrderMap.getFloat("time",0);
				timeline.frames[frame] = time;
				timeline.drawOrders[frame] = drawOrder;
				drawOrderMap = drawOrderMap.get_next();
				++frame;
			}
			timelines.push(timeline);
		}
		var eventsMap = map.get("events");
		if(eventsMap != null) {
			var timeline = new spine_EventTimeline(eventsMap.get_size());
			var frame = 0;
			var eventMap = eventsMap.get_child();
			while(eventMap != null) {
				var eventData = skeletonData.findEvent(eventMap.getString("name"));
				if(eventData == null) {
					throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Event not found: " + eventMap.getString("name")));
				}
				var event = new spine_Event(eventMap.getFloat("time",0),eventData);
				event.intValue = eventMap.getInt("int",eventData.intValue);
				event.floatValue = eventMap.getFloat("float",eventData.floatValue);
				event.stringValue = eventMap.getString("string",eventData.stringValue);
				if(event.data.audioPath != null) {
					event.volume = eventMap.getFloat("volume",eventData.volume);
					event.balance = eventMap.getFloat("balance",eventData.balance);
				}
				timeline.frames[frame] = event.time;
				timeline.events[frame] = event;
				eventMap = eventMap.get_next();
				++frame;
			}
			timelines.push(timeline);
		}
		var duration = 0;
		var items = timelines;
		var i = 0;
		var n = timelines.length;
		while(i < n) {
			var result = items[i];
			duration = Math.max(duration,result.getDuration());
			++i;
		}
		skeletonData.animations.push(new spine_Animation(name,timelines,duration));
	}
	,readTimeline: function(keyMap,timeline,defaultValue,scale) {
		var time = keyMap.getFloat("time",0);
		var value = keyMap.getFloat("value",defaultValue) * scale;
		var frame = 0;
		var bezier = 0;
		while(true) {
			timeline.setFrame(frame,time,value);
			var nextMap = keyMap.get_next();
			if(nextMap == null) {
				timeline.shrink(bezier);
				return timeline;
			}
			var time2 = nextMap.getFloat("time",0);
			var value2 = nextMap.getFloat("value",defaultValue) * scale;
			var curve = keyMap.get("curve");
			if(curve != null) {
				var curve1 = curve;
				if(curve1.isString()) {
					if(curve1.asString() == "stepped") {
						timeline.setStepped(frame);
					}
				} else {
					curve1 = curve1.getAtIndex(0);
					var cx1 = curve1.asFloat();
					curve1 = curve1.get_next();
					var cy1 = curve1.asFloat() * scale;
					curve1 = curve1.get_next();
					var cx2 = curve1.asFloat();
					curve1 = curve1.get_next();
					var cy2 = curve1.asFloat() * scale;
					timeline.setBezier(bezier,frame,0,time,value,cx1,cy1,cx2,cy2,time2,value2);
					++bezier;
				}
			}
			time = time2;
			value = value2;
			keyMap = nextMap;
			++frame;
		}
	}
	,readTimeline2: function(keyMap,timeline,name1,name2,defaultValue,scale) {
		var time = keyMap.getFloat("time",0);
		var value1 = keyMap.getFloat(name1,defaultValue) * scale;
		var value2 = keyMap.getFloat(name2,defaultValue) * scale;
		var frame = 0;
		var bezier = 0;
		while(true) {
			var frame1 = frame;
			frame1 *= 3;
			timeline.frames[frame1] = time;
			timeline.frames[frame1 + 1] = value1;
			timeline.frames[frame1 + 2] = value2;
			var nextMap = keyMap.get_next();
			if(nextMap == null) {
				timeline.shrink(bezier);
				return timeline;
			}
			var time2 = nextMap.getFloat("time",0);
			var nvalue1 = nextMap.getFloat(name1,defaultValue) * scale;
			var nvalue2 = nextMap.getFloat(name2,defaultValue) * scale;
			var curve = keyMap.get("curve");
			if(curve != null) {
				var curve1 = curve;
				if(curve1.isString()) {
					if(curve1.asString() == "stepped") {
						timeline.setStepped(frame);
					}
				} else {
					curve1 = curve1.getAtIndex(0);
					var cx1 = curve1.asFloat();
					curve1 = curve1.get_next();
					var cy1 = curve1.asFloat() * scale;
					curve1 = curve1.get_next();
					var cx2 = curve1.asFloat();
					curve1 = curve1.get_next();
					var cy2 = curve1.asFloat() * scale;
					timeline.setBezier(bezier,frame,0,time,value1,cx1,cy1,cx2,cy2,time2,nvalue1);
					++bezier;
				}
				var curve2 = curve;
				if(curve2.isString()) {
					if(curve2.asString() == "stepped") {
						timeline.setStepped(frame);
					}
				} else {
					curve2 = curve2.getAtIndex(4);
					var cx11 = curve2.asFloat();
					curve2 = curve2.get_next();
					var cy11 = curve2.asFloat() * scale;
					curve2 = curve2.get_next();
					var cx21 = curve2.asFloat();
					curve2 = curve2.get_next();
					var cy21 = curve2.asFloat() * scale;
					timeline.setBezier(bezier,frame,1,time,value2,cx11,cy11,cx21,cy21,time2,nvalue2);
					++bezier;
				}
			}
			time = time2;
			value1 = nvalue1;
			value2 = nvalue2;
			keyMap = nextMap;
			++frame;
		}
	}
	,readCurve: function(curve,timeline,bezier,frame,value,time1,time2,value1,value2,scale) {
		if(curve.isString()) {
			if(curve.asString() == "stepped") {
				timeline.setStepped(frame);
			}
			return bezier;
		}
		curve = curve.getAtIndex(value << 2);
		var cx1 = curve.asFloat();
		curve = curve.get_next();
		var cy1 = curve.asFloat() * scale;
		curve = curve.get_next();
		var cx2 = curve.asFloat();
		curve = curve.get_next();
		var cy2 = curve.asFloat() * scale;
		timeline.setBezier(bezier,frame,value,time1,value1,cx1,cy1,cx2,cy2,time2,value2);
		return bezier + 1;
	}
	,__class__: spine_SkeletonJson
});
var spine_LinkedMesh = function(mesh,skin,slotIndex,parent,inheritDeform) {
	this.inheritDeform = false;
	this.slotIndex = 0;
	this.skin = null;
	this.mesh = mesh;
	this.skin = skin;
	this.slotIndex = slotIndex;
	this.parent = parent;
	this.inheritDeform = inheritDeform;
};
$hxClasses["spine.LinkedMesh"] = spine_LinkedMesh;
spine_LinkedMesh.__name__ = "spine.LinkedMesh";
spine_LinkedMesh.prototype = {
	__class__: spine_LinkedMesh
};
var spine_Skin = function(name) {
	this.lookup = new spine_SkinEntry(0,"",null);
	var this1 = [];
	this.constraints = this1;
	var this1 = [];
	this.bones = this1;
	var this1 = new haxe_ds_IntMap();
	this.attachments = this1;
	if(name == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("name cannot be null."));
	}
	this.name = name;
	var this1 = spine_support_utils_AttachmentSet.orderedItems(this.attachments);
};
$hxClasses["spine.Skin"] = spine_Skin;
spine_Skin.__name__ = "spine.Skin";
spine_Skin.prototype = {
	setAttachment: function(slotIndex,name,attachment) {
		if(attachment == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("attachment cannot be null."));
		}
		var entry = new spine_SkinEntry(slotIndex,name,attachment);
		if(!spine_support_utils_AttachmentSet.add(this.attachments,entry)) {
			var entries = this.attachments.h[entry.hashCode];
			var result = null;
			if(entries != null) {
				var _g = 0;
				var _g1 = entries.length;
				while(_g < _g1) {
					var i = _g++;
					var entry1 = entries[i];
					var object = entry;
					var tmp;
					if(object == null) {
						tmp = false;
					} else {
						var result1 = object;
						var other = result1;
						tmp = entry1.slotIndex != other.slotIndex ? false : entry1.name == other.name;
					}
					if(tmp) {
						result = entry1;
						break;
					}
				}
			}
			result.attachment = attachment;
		}
	}
	,addSkin: function(skin) {
		if(skin == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("skin cannot be null."));
		}
		var _g = 0;
		var _g1 = skin.bones;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			if(this.bones.indexOf(data) == -1) {
				this.bones.push(data);
			}
		}
		var _g = 0;
		var _g1 = skin.constraints;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			if(this.constraints.indexOf(data) == -1) {
				this.constraints.push(data);
			}
		}
		var _g = 0;
		var _g1 = spine_support_utils_AttachmentSet.orderedItems(skin.attachments);
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			var slotIndex = entry.slotIndex;
			var name = entry.name;
			var attachment = entry.attachment;
			if(attachment == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("attachment cannot be null."));
			}
			var entry1 = new spine_SkinEntry(slotIndex,name,attachment);
			if(!spine_support_utils_AttachmentSet.add(this.attachments,entry1)) {
				var entries = this.attachments.h[entry1.hashCode];
				var result = null;
				if(entries != null) {
					var _g2 = 0;
					var _g3 = entries.length;
					while(_g2 < _g3) {
						var i = _g2++;
						var entry2 = entries[i];
						var object = entry1;
						var tmp;
						if(object == null) {
							tmp = false;
						} else {
							var result1 = object;
							var other = result1;
							tmp = entry2.slotIndex != other.slotIndex ? false : entry2.name == other.name;
						}
						if(tmp) {
							result = entry2;
							break;
						}
					}
				}
				result.attachment = attachment;
			}
		}
	}
	,copySkin: function(skin) {
		if(skin == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("skin cannot be null."));
		}
		var _g = 0;
		var _g1 = skin.bones;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			if(this.bones.indexOf(data) == -1) {
				this.bones.push(data);
			}
		}
		var _g = 0;
		var _g1 = skin.constraints;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			if(this.constraints.indexOf(data) == -1) {
				this.constraints.push(data);
			}
		}
		var _g = 0;
		var _g1 = spine_support_utils_AttachmentSet.orderedItems(skin.attachments);
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			if(((entry.attachment) instanceof spine_attachments_MeshAttachment)) {
				var slotIndex = entry.slotIndex;
				var name = entry.name;
				var result = entry.attachment;
				var _this = result;
				var mesh = new spine_attachments_MeshAttachment(_this.name);
				mesh.region = _this.region;
				mesh.path = _this.path;
				var _this1 = mesh.color;
				var color = _this.color;
				_this1.r = color.r;
				_this1.g = color.g;
				_this1.b = color.b;
				_this1.a = color.a;
				mesh.deformAttachment = _this.deformAttachment != null ? _this.deformAttachment : _this;
				var parentMesh = _this.parentMesh != null ? _this.parentMesh : _this;
				mesh.parentMesh = parentMesh;
				if(parentMesh != null) {
					mesh.bones = parentMesh.bones;
					mesh.vertices = parentMesh.vertices;
					mesh.regionUVs = parentMesh.regionUVs;
					mesh.triangles = parentMesh.triangles;
					mesh.hullLength = parentMesh.hullLength;
					mesh.worldVerticesLength = parentMesh.worldVerticesLength;
					mesh.edges = parentMesh.edges;
					mesh.width = parentMesh.width;
					mesh.height = parentMesh.height;
				}
				mesh.updateUVs();
				var attachment = mesh;
				if(attachment == null) {
					throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("attachment cannot be null."));
				}
				var entry1 = new spine_SkinEntry(slotIndex,name,attachment);
				if(!spine_support_utils_AttachmentSet.add(this.attachments,entry1)) {
					var entries = this.attachments.h[entry1.hashCode];
					var result1 = null;
					if(entries != null) {
						var _g2 = 0;
						var _g3 = entries.length;
						while(_g2 < _g3) {
							var i = _g2++;
							var entry2 = entries[i];
							var object = entry1;
							var tmp;
							if(object == null) {
								tmp = false;
							} else {
								var result2 = object;
								var other = result2;
								tmp = entry2.slotIndex != other.slotIndex ? false : entry2.name == other.name;
							}
							if(tmp) {
								result1 = entry2;
								break;
							}
						}
					}
					result1.attachment = attachment;
				}
			} else {
				var slotIndex1 = entry.slotIndex;
				var name1 = entry.name;
				var attachment1 = entry.attachment != null ? entry.attachment.copy() : null;
				if(attachment1 == null) {
					throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("attachment cannot be null."));
				}
				var entry3 = new spine_SkinEntry(slotIndex1,name1,attachment1);
				if(!spine_support_utils_AttachmentSet.add(this.attachments,entry3)) {
					var entries1 = this.attachments.h[entry3.hashCode];
					var result3 = null;
					if(entries1 != null) {
						var _g4 = 0;
						var _g5 = entries1.length;
						while(_g4 < _g5) {
							var i1 = _g4++;
							var entry4 = entries1[i1];
							var object1 = entry3;
							var tmp1;
							if(object1 == null) {
								tmp1 = false;
							} else {
								var result4 = object1;
								var other1 = result4;
								tmp1 = entry4.slotIndex != other1.slotIndex ? false : entry4.name == other1.name;
							}
							if(tmp1) {
								result3 = entry4;
								break;
							}
						}
					}
					result3.attachment = attachment1;
				}
			}
		}
	}
	,getAttachment: function(slotIndex,name) {
		var _this = this.lookup;
		if(slotIndex < 0) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("slotIndex must be >= 0."));
		}
		if(name == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("name cannot be null."));
		}
		_this.slotIndex = slotIndex;
		_this.name = name;
		var hash = 0;
		var chr;
		var x;
		if(name.length == 0) {
			x = hash;
		} else {
			var _g = 0;
			var _g1 = name.length;
			while(_g < _g1) {
				var i = _g++;
				chr = HxOverrides.cca(name,i);
				hash = (hash << 5) - hash + chr;
			}
			x = hash;
		}
		_this.hashCode = x + slotIndex * 37 | 0;
		var key = this.lookup;
		var entries = this.attachments.h[key.hashCode];
		var result = null;
		if(entries != null) {
			var _g = 0;
			var _g1 = entries.length;
			while(_g < _g1) {
				var i = _g++;
				var entry = entries[i];
				var object = key;
				var tmp;
				if(object == null) {
					tmp = false;
				} else {
					var result1 = object;
					var other = result1;
					tmp = entry.slotIndex != other.slotIndex ? false : entry.name == other.name;
				}
				if(tmp) {
					result = entry;
					break;
				}
			}
		}
		var entry = result;
		if(entry != null) {
			return entry.attachment;
		} else {
			return null;
		}
	}
	,removeAttachment: function(slotIndex,name) {
		var _this = this.lookup;
		if(slotIndex < 0) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("slotIndex must be >= 0."));
		}
		if(name == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("name cannot be null."));
		}
		_this.slotIndex = slotIndex;
		_this.name = name;
		var hash = 0;
		var chr;
		var x;
		if(name.length == 0) {
			x = hash;
		} else {
			var _g = 0;
			var _g1 = name.length;
			while(_g < _g1) {
				var i = _g++;
				chr = HxOverrides.cca(name,i);
				hash = (hash << 5) - hash + chr;
			}
			x = hash;
		}
		_this.hashCode = x + slotIndex * 37 | 0;
		spine_support_utils_AttachmentSet.remove(this.attachments,this.lookup);
	}
	,getAttachments: function() {
		return spine_support_utils_AttachmentSet.orderedItems(this.attachments);
	}
	,getAttachmentsInSkinForSlot: function(slotIndex,attachments) {
		if(slotIndex < 0) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("slotIndex must be >= 0."));
		}
		if(attachments == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("attachments cannot be null."));
		}
		var _g = 0;
		var _g1 = spine_support_utils_AttachmentSet.orderedItems(this.attachments);
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			if(entry.slotIndex == slotIndex) {
				attachments.push(entry);
			}
		}
	}
	,clear: function() {
		this.attachments.h = { };
		var this1 = this.bones;
		this1.splice(0,this1.length);
		var this1 = this.constraints;
		this1.splice(0,this1.length);
	}
	,getBones: function() {
		return this.bones;
	}
	,getConstraints: function() {
		return this.constraints;
	}
	,getName: function() {
		return this.name;
	}
	,toString: function() {
		return this.name;
	}
	,attachAll: function(skeleton,oldSkin) {
		var slots = skeleton.slots;
		var _g = 0;
		var _g1 = spine_support_utils_AttachmentSet.orderedItems(oldSkin.attachments);
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			var slotIndex = entry.slotIndex;
			var result = slots[slotIndex];
			var slot = result;
			if(slot.attachment == entry.attachment) {
				var name = entry.name;
				var _this = this.lookup;
				if(slotIndex < 0) {
					throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("slotIndex must be >= 0."));
				}
				if(name == null) {
					throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("name cannot be null."));
				}
				_this.slotIndex = slotIndex;
				_this.name = name;
				var hash = 0;
				var chr;
				var x;
				if(name.length == 0) {
					x = hash;
				} else {
					var _g2 = 0;
					var _g3 = name.length;
					while(_g2 < _g3) {
						var i = _g2++;
						chr = HxOverrides.cca(name,i);
						hash = (hash << 5) - hash + chr;
					}
					x = hash;
				}
				_this.hashCode = x + slotIndex * 37 | 0;
				var key = this.lookup;
				var entries = this.attachments.h[key.hashCode];
				var result1 = null;
				if(entries != null) {
					var _g4 = 0;
					var _g5 = entries.length;
					while(_g4 < _g5) {
						var i1 = _g4++;
						var entry1 = entries[i1];
						var object = key;
						var tmp;
						if(object == null) {
							tmp = false;
						} else {
							var result2 = object;
							var other = result2;
							tmp = entry1.slotIndex != other.slotIndex ? false : entry1.name == other.name;
						}
						if(tmp) {
							result1 = entry1;
							break;
						}
					}
				}
				var entry2 = result1;
				var attachment = entry2 != null ? entry2.attachment : null;
				if(attachment != null) {
					if(slot.attachment != attachment) {
						var tmp1;
						if(!(!((attachment) instanceof spine_attachments_VertexAttachment) || !((slot.attachment) instanceof spine_attachments_VertexAttachment))) {
							var result3 = attachment;
							var _this1 = result3;
							var result4 = slot.attachment;
							var _this2 = result4;
							tmp1 = (_this1.deformAttachment != null ? _this1.deformAttachment : _this1) != (_this2.deformAttachment != null ? _this2.deformAttachment : _this2);
						} else {
							tmp1 = true;
						}
						if(tmp1) {
							var this1 = slot.deform;
							this1.splice(0,this1.length);
						}
						slot.attachment = attachment;
						slot.attachmentTime = slot.bone.skeleton.time;
					}
				}
			}
		}
	}
	,__class__: spine_Skin
};
var spine_SkinEntry = function(slotIndex,name,attachment) {
	this.hashCode = 0;
	this.slotIndex = 0;
	if(slotIndex < 0) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("slotIndex must be >= 0."));
	}
	if(name == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("name cannot be null."));
	}
	this.slotIndex = slotIndex;
	this.name = name;
	var hash = 0;
	var chr;
	var x;
	if(name.length == 0) {
		x = hash;
	} else {
		var _g = 0;
		var _g1 = name.length;
		while(_g < _g1) {
			var i = _g++;
			chr = HxOverrides.cca(name,i);
			hash = (hash << 5) - hash + chr;
		}
		x = hash;
	}
	this.hashCode = x + slotIndex * 37 | 0;
	this.attachment = attachment;
};
$hxClasses["spine.SkinEntry"] = spine_SkinEntry;
spine_SkinEntry.__name__ = "spine.SkinEntry";
spine_SkinEntry.prototype = {
	set: function(slotIndex,name) {
		if(slotIndex < 0) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("slotIndex must be >= 0."));
		}
		if(name == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("name cannot be null."));
		}
		this.slotIndex = slotIndex;
		this.name = name;
		var hash = 0;
		var chr;
		var x;
		if(name.length == 0) {
			x = hash;
		} else {
			var _g = 0;
			var _g1 = name.length;
			while(_g < _g1) {
				var i = _g++;
				chr = HxOverrides.cca(name,i);
				hash = (hash << 5) - hash + chr;
			}
			x = hash;
		}
		this.hashCode = x + slotIndex * 37 | 0;
	}
	,getSlotIndex: function() {
		return this.slotIndex;
	}
	,getName: function() {
		return this.name;
	}
	,getAttachment: function() {
		return this.attachment;
	}
	,getHashCode: function() {
		return this.hashCode;
	}
	,equals: function(object) {
		if(object == null) {
			return false;
		}
		var result = object;
		var other = result;
		if(this.slotIndex != other.slotIndex) {
			return false;
		}
		return this.name == other.name;
	}
	,toString: function() {
		return this.slotIndex + ":" + this.name;
	}
	,__class__: spine_SkinEntry
};
var spine_Slot = function(data,bone) {
	this.attachmentState = 0;
	var this1 = [];
	this.deform = this1;
	this.attachmentTime = 0;
	this.color = new spine_support_graphics_Color();
	if(data == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("data cannot be null."));
	}
	if(bone == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("bone cannot be null."));
	}
	this.data = data;
	this.bone = bone;
	this.darkColor = data.darkColor == null ? null : new spine_support_graphics_Color();
	var _this = this.color;
	var color = this.data.color;
	_this.r = color.r;
	_this.g = color.g;
	_this.b = color.b;
	_this.a = color.a;
	if(this.darkColor != null) {
		var _this = this.darkColor;
		var color = this.data.darkColor;
		_this.r = color.r;
		_this.g = color.g;
		_this.b = color.b;
		_this.a = color.a;
	}
	if(this.data.attachmentName == null) {
		var attachment = null;
		if(this.attachment != attachment) {
			var tmp;
			if(!(!((attachment) instanceof spine_attachments_VertexAttachment) || !((this.attachment) instanceof spine_attachments_VertexAttachment))) {
				var result = attachment;
				var _this = result;
				var result = this.attachment;
				var _this1 = result;
				tmp = (_this.deformAttachment != null ? _this.deformAttachment : _this) != (_this1.deformAttachment != null ? _this1.deformAttachment : _this1);
			} else {
				tmp = true;
			}
			if(tmp) {
				var this1 = this.deform;
				this1.splice(0,this1.length);
			}
			this.attachment = attachment;
			this.attachmentTime = this.bone.skeleton.time;
		}
	} else {
		this.attachment = null;
		var attachment = this.bone.skeleton.getAttachment(this.data.index,this.data.attachmentName);
		if(this.attachment != attachment) {
			var tmp;
			if(!(!((attachment) instanceof spine_attachments_VertexAttachment) || !((this.attachment) instanceof spine_attachments_VertexAttachment))) {
				var result = attachment;
				var _this = result;
				var result = this.attachment;
				var _this1 = result;
				tmp = (_this.deformAttachment != null ? _this.deformAttachment : _this) != (_this1.deformAttachment != null ? _this1.deformAttachment : _this1);
			} else {
				tmp = true;
			}
			if(tmp) {
				var this1 = this.deform;
				this1.splice(0,this1.length);
			}
			this.attachment = attachment;
			this.attachmentTime = this.bone.skeleton.time;
		}
	}
};
$hxClasses["spine.Slot"] = spine_Slot;
spine_Slot.__name__ = "spine.Slot";
spine_Slot.prototype = {
	getData: function() {
		return this.data;
	}
	,getBone: function() {
		return this.bone;
	}
	,getSkeleton: function() {
		return this.bone.skeleton;
	}
	,getColor: function() {
		return this.color;
	}
	,getDarkColor: function() {
		return this.darkColor;
	}
	,getAttachment: function() {
		return this.attachment;
	}
	,setAttachment: function(attachment) {
		if(this.attachment == attachment) {
			return;
		}
		var tmp;
		if(!(!((attachment) instanceof spine_attachments_VertexAttachment) || !((this.attachment) instanceof spine_attachments_VertexAttachment))) {
			var result = attachment;
			var _this = result;
			var result = this.attachment;
			var _this1 = result;
			tmp = (_this.deformAttachment != null ? _this.deformAttachment : _this) != (_this1.deformAttachment != null ? _this1.deformAttachment : _this1);
		} else {
			tmp = true;
		}
		if(tmp) {
			var this1 = this.deform;
			this1.splice(0,this1.length);
		}
		this.attachment = attachment;
		this.attachmentTime = this.bone.skeleton.time;
	}
	,getAttachmentTime: function() {
		return this.bone.skeleton.time - this.attachmentTime;
	}
	,setAttachmentTime: function(time) {
		this.attachmentTime = this.bone.skeleton.time - time;
	}
	,getDeform: function() {
		return this.deform;
	}
	,setDeform: function(deform) {
		if(deform == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("deform cannot be null."));
		}
		this.deform = deform;
	}
	,setToSetupPose: function() {
		var _this = this.color;
		var color = this.data.color;
		_this.r = color.r;
		_this.g = color.g;
		_this.b = color.b;
		_this.a = color.a;
		if(this.darkColor != null) {
			var _this = this.darkColor;
			var color = this.data.darkColor;
			_this.r = color.r;
			_this.g = color.g;
			_this.b = color.b;
			_this.a = color.a;
		}
		if(this.data.attachmentName == null) {
			var attachment = null;
			if(this.attachment != attachment) {
				var tmp;
				if(!(!((attachment) instanceof spine_attachments_VertexAttachment) || !((this.attachment) instanceof spine_attachments_VertexAttachment))) {
					var result = attachment;
					var _this = result;
					var result = this.attachment;
					var _this1 = result;
					tmp = (_this.deformAttachment != null ? _this.deformAttachment : _this) != (_this1.deformAttachment != null ? _this1.deformAttachment : _this1);
				} else {
					tmp = true;
				}
				if(tmp) {
					var this1 = this.deform;
					this1.splice(0,this1.length);
				}
				this.attachment = attachment;
				this.attachmentTime = this.bone.skeleton.time;
			}
		} else {
			this.attachment = null;
			var attachment = this.bone.skeleton.getAttachment(this.data.index,this.data.attachmentName);
			if(this.attachment != attachment) {
				var tmp;
				if(!(!((attachment) instanceof spine_attachments_VertexAttachment) || !((this.attachment) instanceof spine_attachments_VertexAttachment))) {
					var result = attachment;
					var _this = result;
					var result = this.attachment;
					var _this1 = result;
					tmp = (_this.deformAttachment != null ? _this.deformAttachment : _this) != (_this1.deformAttachment != null ? _this1.deformAttachment : _this1);
				} else {
					tmp = true;
				}
				if(tmp) {
					var this1 = this.deform;
					this1.splice(0,this1.length);
				}
				this.attachment = attachment;
				this.attachmentTime = this.bone.skeleton.time;
			}
		}
	}
	,toString: function() {
		return this.data.name;
	}
	,__class__: spine_Slot
};
var spine_SlotData = function(index,name,boneData) {
	this.color = new spine_support_graphics_Color(1,1,1,1);
	this.index = 0;
	if(index < 0) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("index must be >= 0."));
	}
	if(name == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("name cannot be null."));
	}
	if(boneData == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("boneData cannot be null."));
	}
	this.index = index;
	this.name = name;
	this.boneData = boneData;
};
$hxClasses["spine.SlotData"] = spine_SlotData;
spine_SlotData.__name__ = "spine.SlotData";
spine_SlotData.prototype = {
	getIndex: function() {
		return this.index;
	}
	,getName: function() {
		return this.name;
	}
	,getBoneData: function() {
		return this.boneData;
	}
	,getColor: function() {
		return this.color;
	}
	,getDarkColor: function() {
		return this.darkColor;
	}
	,setDarkColor: function(darkColor) {
		this.darkColor = darkColor;
	}
	,setAttachmentName: function(attachmentName) {
		this.attachmentName = attachmentName;
	}
	,getAttachmentName: function() {
		return this.attachmentName;
	}
	,getBlendMode: function() {
		return this.blendMode;
	}
	,setBlendMode: function(blendMode) {
		this.blendMode = blendMode;
	}
	,toString: function() {
		return this.name;
	}
	,__class__: spine_SlotData
};
var spine_TransformConstraint = function(data,skeleton) {
	this.temp = new spine_support_math_Vector2();
	this.active = false;
	this.mixShearY = 0;
	this.mixScaleY = 0;
	this.mixScaleX = 0;
	this.mixY = 0;
	this.mixX = 0;
	this.mixRotate = 0;
	if(data == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("data cannot be null."));
	}
	if(skeleton == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("skeleton cannot be null."));
	}
	this.data = data;
	this.mixRotate = data.mixRotate;
	this.mixX = data.mixX;
	this.mixY = data.mixY;
	this.mixScaleX = data.mixScaleX;
	this.mixScaleY = data.mixScaleY;
	this.mixShearY = data.mixShearY;
	var capacity = data.bones.length;
	var this1 = [];
	this.bones = this1;
	var _g = 0;
	var _g1 = data.bones;
	while(_g < _g1.length) {
		var boneData = _g1[_g];
		++_g;
		this.bones.push(skeleton.findBone(boneData.name));
	}
	this.target = skeleton.findBone(data.target.name);
};
$hxClasses["spine.TransformConstraint"] = spine_TransformConstraint;
spine_TransformConstraint.__name__ = "spine.TransformConstraint";
spine_TransformConstraint.__interfaces__ = [spine_Updatable];
spine_TransformConstraint.prototype = {
	update: function() {
		if(this.mixRotate == 0 && this.mixX == 0 && this.mixY == 0 && this.mixScaleX == 0 && this.mixScaleX == 0 && this.mixShearY == 0) {
			return;
		}
		if(this.data.local) {
			if(this.data.relative) {
				var mixRotate = this.mixRotate;
				var mixX = this.mixX;
				var mixY = this.mixY;
				var mixScaleX = this.mixScaleX;
				var mixScaleY = this.mixScaleY;
				var mixShearY = this.mixShearY;
				var target = this.target;
				var bones = this.bones;
				var i = 0;
				var n = this.bones.length;
				while(i < n) {
					var result = bones[i];
					var bone = result;
					var rotation = bone.arotation + (target.arotation + this.data.offsetRotation) * mixRotate;
					var x = bone.ax + (target.ax + this.data.offsetX) * mixX;
					var y = bone.ay + (target.ay + this.data.offsetY) * mixY;
					var scaleX = bone.ascaleX * ((target.ascaleX - 1 + this.data.offsetScaleX) * mixScaleX) + 1;
					var scaleY = bone.ascaleY * ((target.ascaleY - 1 + this.data.offsetScaleY) * mixScaleY) + 1;
					var shearY = bone.ashearY + (target.ashearY + this.data.offsetShearY) * mixShearY;
					bone.updateWorldTransformWithData(x,y,rotation,scaleX,scaleY,bone.ashearX,shearY);
					++i;
				}
			} else {
				var mixRotate = this.mixRotate;
				var mixX = this.mixX;
				var mixY = this.mixY;
				var mixScaleX = this.mixScaleX;
				var mixScaleY = this.mixScaleY;
				var mixShearY = this.mixShearY;
				var target = this.target;
				var bones = this.bones;
				var i = 0;
				var n = this.bones.length;
				while(i < n) {
					var result = bones[i];
					var bone = result;
					var rotation = bone.arotation;
					if(mixRotate != 0) {
						var r = target.arotation - rotation + this.data.offsetRotation;
						r -= (16384 - (16384.499999999996 - r / 360 | 0)) * 360;
						rotation += r * mixRotate;
					}
					var x = bone.ax;
					var y = bone.ay;
					x += (target.ax - x + this.data.offsetX) * mixX;
					y += (target.ay - y + this.data.offsetY) * mixY;
					var scaleX = bone.ascaleX;
					var scaleY = bone.ascaleY;
					if(mixScaleX != 0 && scaleX != 0) {
						scaleX = (scaleX + (target.ascaleX - scaleX + this.data.offsetScaleX) * mixScaleX) / scaleX;
					}
					if(mixScaleY != 0 && scaleY != 0) {
						scaleY = (scaleY + (target.ascaleY - scaleY + this.data.offsetScaleY) * mixScaleY) / scaleY;
					}
					var shearY = bone.ashearY;
					if(mixShearY != 0) {
						var r1 = target.ashearY - shearY + this.data.offsetShearY;
						r1 -= (16384 - (16384.499999999996 - r1 / 360 | 0)) * 360;
						shearY += r1 * mixShearY;
					}
					bone.updateWorldTransformWithData(x,y,rotation,scaleX,scaleY,bone.ashearX,shearY);
					++i;
				}
			}
		} else if(this.data.relative) {
			var mixRotate = this.mixRotate;
			var mixX = this.mixX;
			var mixY = this.mixY;
			var mixScaleX = this.mixScaleX;
			var mixScaleY = this.mixScaleY;
			var mixShearY = this.mixShearY;
			var translate = mixX != 0 || mixY != 0;
			var target = this.target;
			var ta = target.a;
			var tb = target.b;
			var tc = target.c;
			var td = target.d;
			var degRadReflect = ta * td - tb * tc > 0 ? spine_utils_SpineUtils.degRad : -spine_utils_SpineUtils.degRad;
			var offsetRotation = this.data.offsetRotation * degRadReflect;
			var offsetShearY = this.data.offsetShearY * degRadReflect;
			var bones = this.bones;
			var i = 0;
			var n = this.bones.length;
			while(i < n) {
				var result = bones[i];
				var bone = result;
				if(mixRotate != 0) {
					var a = bone.a;
					var b = bone.b;
					var c = bone.c;
					var d = bone.d;
					var r = Math.atan2(tc,ta) + offsetRotation;
					if(r > 3.1415927) {
						r -= 6.2831854;
					} else if(r < -3.1415927) {
						r += 6.2831854;
					}
					r *= mixRotate;
					var cos = Math.cos(r);
					var sin = Math.sin(r);
					bone.a = cos * a - sin * c;
					bone.b = cos * b - sin * d;
					bone.c = sin * a + cos * c;
					bone.d = sin * b + cos * d;
				}
				if(translate) {
					var temp = this.temp;
					temp.x = this.data.offsetX;
					temp.y = this.data.offsetY;
					var local = temp;
					if(local == null) {
						throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("local cannot be null."));
					}
					var x = local.x;
					var y = local.y;
					local.x = x * target.a + y * target.b + target.worldX;
					local.y = x * target.c + y * target.d + target.worldY;
					bone.worldX += temp.x * mixX;
					bone.worldY += temp.y * mixY;
				}
				if(mixScaleX != 0) {
					var s = (Math.sqrt(ta * ta + tc * tc) - 1 + this.data.offsetScaleX) * mixScaleX + 1;
					bone.a *= s;
					bone.c *= s;
				}
				if(mixScaleY != 0) {
					var s1 = (Math.sqrt(tb * tb + td * td) - 1 + this.data.offsetScaleY) * mixScaleY + 1;
					bone.b *= s1;
					bone.d *= s1;
				}
				if(mixShearY > 0) {
					var r1 = Math.atan2(td,tb) - Math.atan2(tc,ta);
					if(r1 > 3.1415927) {
						r1 -= 6.2831854;
					} else if(r1 < -3.1415927) {
						r1 += 6.2831854;
					}
					var b1 = bone.b;
					var d1 = bone.d;
					r1 = Math.atan2(d1,b1) + (r1 - 1.57079635 + offsetShearY) * mixShearY;
					var s2 = Math.sqrt(b1 * b1 + d1 * d1);
					bone.b = Math.cos(r1) * s2;
					bone.d = Math.sin(r1) * s2;
				}
				var parent = bone.parent;
				if(parent == null) {
					bone.ax = bone.worldX;
					bone.ay = bone.worldY;
					var a1 = bone.a;
					var b2 = bone.b;
					var c1 = bone.c;
					var d2 = bone.d;
					bone.arotation = Math.atan2(c1,a1) * spine_utils_SpineUtils.radDeg;
					bone.ascaleX = Math.sqrt(a1 * a1 + c1 * c1);
					bone.ascaleY = Math.sqrt(b2 * b2 + d2 * d2);
					bone.ashearX = 0;
					bone.ashearY = Math.atan2(a1 * b2 + c1 * d2,a1 * d2 - b2 * c1) * spine_utils_SpineUtils.radDeg;
				} else {
					var pa = parent.a;
					var pb = parent.b;
					var pc = parent.c;
					var pd = parent.d;
					var pid = 1 / (pa * pd - pb * pc);
					var dx = bone.worldX - parent.worldX;
					var dy = bone.worldY - parent.worldY;
					bone.ax = dx * pd * pid - dy * pb * pid;
					bone.ay = dy * pa * pid - dx * pc * pid;
					var ia = pid * pd;
					var id = pid * pa;
					var ib = pid * pb;
					var ic = pid * pc;
					var ra = ia * bone.a - ib * bone.c;
					var rb = ia * bone.b - ib * bone.d;
					var rc = id * bone.c - ic * bone.a;
					var rd = id * bone.d - ic * bone.b;
					bone.ashearX = 0;
					bone.ascaleX = Math.sqrt(ra * ra + rc * rc);
					if(bone.ascaleX > 0.0001) {
						var det = ra * rd - rb * rc;
						bone.ascaleY = det / bone.ascaleX;
						bone.ashearY = Math.atan2(ra * rb + rc * rd,det) * spine_utils_SpineUtils.radDeg;
						bone.arotation = Math.atan2(rc,ra) * spine_utils_SpineUtils.radDeg;
					} else {
						bone.ascaleX = 0;
						bone.ascaleY = Math.sqrt(rb * rb + rd * rd);
						bone.ashearY = 0;
						bone.arotation = 90 - Math.atan2(rd,rb) * spine_utils_SpineUtils.radDeg;
					}
				}
				++i;
			}
		} else {
			var mixRotate = this.mixRotate;
			var mixX = this.mixX;
			var mixY = this.mixY;
			var mixScaleX = this.mixScaleX;
			var mixScaleY = this.mixScaleY;
			var mixShearY = this.mixShearY;
			var translate = mixX != 0 || mixY != 0;
			var target = this.target;
			var ta = target.a;
			var tb = target.b;
			var tc = target.c;
			var td = target.d;
			var degRadReflect = ta * td - tb * tc > 0 ? spine_utils_SpineUtils.degRad : -spine_utils_SpineUtils.degRad;
			var offsetRotation = this.data.offsetRotation * degRadReflect;
			var offsetShearY = this.data.offsetShearY * degRadReflect;
			var bones = this.bones;
			var i = 0;
			var n = this.bones.length;
			while(i < n) {
				var result = bones[i];
				var bone = result;
				if(mixRotate != 0) {
					var a = bone.a;
					var b = bone.b;
					var c = bone.c;
					var d = bone.d;
					var r = Math.atan2(tc,ta) - Math.atan2(c,a) + offsetRotation;
					if(r > 3.1415927) {
						r -= 6.2831854;
					} else if(r < -3.1415927) {
						r += 6.2831854;
					}
					r *= mixRotate;
					var cos = Math.cos(r);
					var sin = Math.sin(r);
					bone.a = cos * a - sin * c;
					bone.b = cos * b - sin * d;
					bone.c = sin * a + cos * c;
					bone.d = sin * b + cos * d;
				}
				if(translate) {
					var temp = this.temp;
					temp.x = this.data.offsetX;
					temp.y = this.data.offsetY;
					var local = temp;
					if(local == null) {
						throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("local cannot be null."));
					}
					var x = local.x;
					var y = local.y;
					local.x = x * target.a + y * target.b + target.worldX;
					local.y = x * target.c + y * target.d + target.worldY;
					bone.worldX += (temp.x - bone.worldX) * mixX;
					bone.worldY += (temp.y - bone.worldY) * mixY;
				}
				if(mixScaleX != 0) {
					var s = Math.sqrt(bone.a * bone.a + bone.c * bone.c);
					if(s != 0) {
						s = (s + (Math.sqrt(ta * ta + tc * tc) - s + this.data.offsetScaleX) * mixScaleX) / s;
					}
					bone.a *= s;
					bone.c *= s;
				}
				if(mixScaleY != 0) {
					var s1 = Math.sqrt(bone.b * bone.b + bone.d * bone.d);
					if(s1 != 0) {
						s1 = (s1 + (Math.sqrt(tb * tb + td * td) - s1 + this.data.offsetScaleY) * mixScaleY) / s1;
					}
					bone.b *= s1;
					bone.d *= s1;
				}
				if(mixShearY > 0) {
					var b1 = bone.b;
					var d1 = bone.d;
					var by = Math.atan2(d1,b1);
					var r1 = Math.atan2(td,tb) - Math.atan2(tc,ta) - (by - Math.atan2(bone.c,bone.a));
					if(r1 > 3.1415927) {
						r1 -= 6.2831854;
					} else if(r1 < -3.1415927) {
						r1 += 6.2831854;
					}
					r1 = by + (r1 + offsetShearY) * mixShearY;
					var s2 = Math.sqrt(b1 * b1 + d1 * d1);
					bone.b = Math.cos(r1) * s2;
					bone.d = Math.sin(r1) * s2;
				}
				var parent = bone.parent;
				if(parent == null) {
					bone.ax = bone.worldX;
					bone.ay = bone.worldY;
					var a1 = bone.a;
					var b2 = bone.b;
					var c1 = bone.c;
					var d2 = bone.d;
					bone.arotation = Math.atan2(c1,a1) * spine_utils_SpineUtils.radDeg;
					bone.ascaleX = Math.sqrt(a1 * a1 + c1 * c1);
					bone.ascaleY = Math.sqrt(b2 * b2 + d2 * d2);
					bone.ashearX = 0;
					bone.ashearY = Math.atan2(a1 * b2 + c1 * d2,a1 * d2 - b2 * c1) * spine_utils_SpineUtils.radDeg;
				} else {
					var pa = parent.a;
					var pb = parent.b;
					var pc = parent.c;
					var pd = parent.d;
					var pid = 1 / (pa * pd - pb * pc);
					var dx = bone.worldX - parent.worldX;
					var dy = bone.worldY - parent.worldY;
					bone.ax = dx * pd * pid - dy * pb * pid;
					bone.ay = dy * pa * pid - dx * pc * pid;
					var ia = pid * pd;
					var id = pid * pa;
					var ib = pid * pb;
					var ic = pid * pc;
					var ra = ia * bone.a - ib * bone.c;
					var rb = ia * bone.b - ib * bone.d;
					var rc = id * bone.c - ic * bone.a;
					var rd = id * bone.d - ic * bone.b;
					bone.ashearX = 0;
					bone.ascaleX = Math.sqrt(ra * ra + rc * rc);
					if(bone.ascaleX > 0.0001) {
						var det = ra * rd - rb * rc;
						bone.ascaleY = det / bone.ascaleX;
						bone.ashearY = Math.atan2(ra * rb + rc * rd,det) * spine_utils_SpineUtils.radDeg;
						bone.arotation = Math.atan2(rc,ra) * spine_utils_SpineUtils.radDeg;
					} else {
						bone.ascaleX = 0;
						bone.ascaleY = Math.sqrt(rb * rb + rd * rd);
						bone.ashearY = 0;
						bone.arotation = 90 - Math.atan2(rd,rb) * spine_utils_SpineUtils.radDeg;
					}
				}
				++i;
			}
		}
	}
	,applyAbsoluteWorld: function() {
		var mixRotate = this.mixRotate;
		var mixX = this.mixX;
		var mixY = this.mixY;
		var mixScaleX = this.mixScaleX;
		var mixScaleY = this.mixScaleY;
		var mixShearY = this.mixShearY;
		var translate = mixX != 0 || mixY != 0;
		var target = this.target;
		var ta = target.a;
		var tb = target.b;
		var tc = target.c;
		var td = target.d;
		var degRadReflect = ta * td - tb * tc > 0 ? spine_utils_SpineUtils.degRad : -spine_utils_SpineUtils.degRad;
		var offsetRotation = this.data.offsetRotation * degRadReflect;
		var offsetShearY = this.data.offsetShearY * degRadReflect;
		var bones = this.bones;
		var i = 0;
		var n = this.bones.length;
		while(i < n) {
			var result = bones[i];
			var bone = result;
			if(mixRotate != 0) {
				var a = bone.a;
				var b = bone.b;
				var c = bone.c;
				var d = bone.d;
				var r = Math.atan2(tc,ta) - Math.atan2(c,a) + offsetRotation;
				if(r > 3.1415927) {
					r -= 6.2831854;
				} else if(r < -3.1415927) {
					r += 6.2831854;
				}
				r *= mixRotate;
				var cos = Math.cos(r);
				var sin = Math.sin(r);
				bone.a = cos * a - sin * c;
				bone.b = cos * b - sin * d;
				bone.c = sin * a + cos * c;
				bone.d = sin * b + cos * d;
			}
			if(translate) {
				var temp = this.temp;
				temp.x = this.data.offsetX;
				temp.y = this.data.offsetY;
				var local = temp;
				if(local == null) {
					throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("local cannot be null."));
				}
				var x = local.x;
				var y = local.y;
				local.x = x * target.a + y * target.b + target.worldX;
				local.y = x * target.c + y * target.d + target.worldY;
				bone.worldX += (temp.x - bone.worldX) * mixX;
				bone.worldY += (temp.y - bone.worldY) * mixY;
			}
			if(mixScaleX != 0) {
				var s = Math.sqrt(bone.a * bone.a + bone.c * bone.c);
				if(s != 0) {
					s = (s + (Math.sqrt(ta * ta + tc * tc) - s + this.data.offsetScaleX) * mixScaleX) / s;
				}
				bone.a *= s;
				bone.c *= s;
			}
			if(mixScaleY != 0) {
				var s1 = Math.sqrt(bone.b * bone.b + bone.d * bone.d);
				if(s1 != 0) {
					s1 = (s1 + (Math.sqrt(tb * tb + td * td) - s1 + this.data.offsetScaleY) * mixScaleY) / s1;
				}
				bone.b *= s1;
				bone.d *= s1;
			}
			if(mixShearY > 0) {
				var b1 = bone.b;
				var d1 = bone.d;
				var by = Math.atan2(d1,b1);
				var r1 = Math.atan2(td,tb) - Math.atan2(tc,ta) - (by - Math.atan2(bone.c,bone.a));
				if(r1 > 3.1415927) {
					r1 -= 6.2831854;
				} else if(r1 < -3.1415927) {
					r1 += 6.2831854;
				}
				r1 = by + (r1 + offsetShearY) * mixShearY;
				var s2 = Math.sqrt(b1 * b1 + d1 * d1);
				bone.b = Math.cos(r1) * s2;
				bone.d = Math.sin(r1) * s2;
			}
			var parent = bone.parent;
			if(parent == null) {
				bone.ax = bone.worldX;
				bone.ay = bone.worldY;
				var a1 = bone.a;
				var b2 = bone.b;
				var c1 = bone.c;
				var d2 = bone.d;
				bone.arotation = Math.atan2(c1,a1) * spine_utils_SpineUtils.radDeg;
				bone.ascaleX = Math.sqrt(a1 * a1 + c1 * c1);
				bone.ascaleY = Math.sqrt(b2 * b2 + d2 * d2);
				bone.ashearX = 0;
				bone.ashearY = Math.atan2(a1 * b2 + c1 * d2,a1 * d2 - b2 * c1) * spine_utils_SpineUtils.radDeg;
			} else {
				var pa = parent.a;
				var pb = parent.b;
				var pc = parent.c;
				var pd = parent.d;
				var pid = 1 / (pa * pd - pb * pc);
				var dx = bone.worldX - parent.worldX;
				var dy = bone.worldY - parent.worldY;
				bone.ax = dx * pd * pid - dy * pb * pid;
				bone.ay = dy * pa * pid - dx * pc * pid;
				var ia = pid * pd;
				var id = pid * pa;
				var ib = pid * pb;
				var ic = pid * pc;
				var ra = ia * bone.a - ib * bone.c;
				var rb = ia * bone.b - ib * bone.d;
				var rc = id * bone.c - ic * bone.a;
				var rd = id * bone.d - ic * bone.b;
				bone.ashearX = 0;
				bone.ascaleX = Math.sqrt(ra * ra + rc * rc);
				if(bone.ascaleX > 0.0001) {
					var det = ra * rd - rb * rc;
					bone.ascaleY = det / bone.ascaleX;
					bone.ashearY = Math.atan2(ra * rb + rc * rd,det) * spine_utils_SpineUtils.radDeg;
					bone.arotation = Math.atan2(rc,ra) * spine_utils_SpineUtils.radDeg;
				} else {
					bone.ascaleX = 0;
					bone.ascaleY = Math.sqrt(rb * rb + rd * rd);
					bone.ashearY = 0;
					bone.arotation = 90 - Math.atan2(rd,rb) * spine_utils_SpineUtils.radDeg;
				}
			}
			++i;
		}
	}
	,applyRelativeWorld: function() {
		var mixRotate = this.mixRotate;
		var mixX = this.mixX;
		var mixY = this.mixY;
		var mixScaleX = this.mixScaleX;
		var mixScaleY = this.mixScaleY;
		var mixShearY = this.mixShearY;
		var translate = mixX != 0 || mixY != 0;
		var target = this.target;
		var ta = target.a;
		var tb = target.b;
		var tc = target.c;
		var td = target.d;
		var degRadReflect = ta * td - tb * tc > 0 ? spine_utils_SpineUtils.degRad : -spine_utils_SpineUtils.degRad;
		var offsetRotation = this.data.offsetRotation * degRadReflect;
		var offsetShearY = this.data.offsetShearY * degRadReflect;
		var bones = this.bones;
		var i = 0;
		var n = this.bones.length;
		while(i < n) {
			var result = bones[i];
			var bone = result;
			if(mixRotate != 0) {
				var a = bone.a;
				var b = bone.b;
				var c = bone.c;
				var d = bone.d;
				var r = Math.atan2(tc,ta) + offsetRotation;
				if(r > 3.1415927) {
					r -= 6.2831854;
				} else if(r < -3.1415927) {
					r += 6.2831854;
				}
				r *= mixRotate;
				var cos = Math.cos(r);
				var sin = Math.sin(r);
				bone.a = cos * a - sin * c;
				bone.b = cos * b - sin * d;
				bone.c = sin * a + cos * c;
				bone.d = sin * b + cos * d;
			}
			if(translate) {
				var temp = this.temp;
				temp.x = this.data.offsetX;
				temp.y = this.data.offsetY;
				var local = temp;
				if(local == null) {
					throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("local cannot be null."));
				}
				var x = local.x;
				var y = local.y;
				local.x = x * target.a + y * target.b + target.worldX;
				local.y = x * target.c + y * target.d + target.worldY;
				bone.worldX += temp.x * mixX;
				bone.worldY += temp.y * mixY;
			}
			if(mixScaleX != 0) {
				var s = (Math.sqrt(ta * ta + tc * tc) - 1 + this.data.offsetScaleX) * mixScaleX + 1;
				bone.a *= s;
				bone.c *= s;
			}
			if(mixScaleY != 0) {
				var s1 = (Math.sqrt(tb * tb + td * td) - 1 + this.data.offsetScaleY) * mixScaleY + 1;
				bone.b *= s1;
				bone.d *= s1;
			}
			if(mixShearY > 0) {
				var r1 = Math.atan2(td,tb) - Math.atan2(tc,ta);
				if(r1 > 3.1415927) {
					r1 -= 6.2831854;
				} else if(r1 < -3.1415927) {
					r1 += 6.2831854;
				}
				var b1 = bone.b;
				var d1 = bone.d;
				r1 = Math.atan2(d1,b1) + (r1 - 1.57079635 + offsetShearY) * mixShearY;
				var s2 = Math.sqrt(b1 * b1 + d1 * d1);
				bone.b = Math.cos(r1) * s2;
				bone.d = Math.sin(r1) * s2;
			}
			var parent = bone.parent;
			if(parent == null) {
				bone.ax = bone.worldX;
				bone.ay = bone.worldY;
				var a1 = bone.a;
				var b2 = bone.b;
				var c1 = bone.c;
				var d2 = bone.d;
				bone.arotation = Math.atan2(c1,a1) * spine_utils_SpineUtils.radDeg;
				bone.ascaleX = Math.sqrt(a1 * a1 + c1 * c1);
				bone.ascaleY = Math.sqrt(b2 * b2 + d2 * d2);
				bone.ashearX = 0;
				bone.ashearY = Math.atan2(a1 * b2 + c1 * d2,a1 * d2 - b2 * c1) * spine_utils_SpineUtils.radDeg;
			} else {
				var pa = parent.a;
				var pb = parent.b;
				var pc = parent.c;
				var pd = parent.d;
				var pid = 1 / (pa * pd - pb * pc);
				var dx = bone.worldX - parent.worldX;
				var dy = bone.worldY - parent.worldY;
				bone.ax = dx * pd * pid - dy * pb * pid;
				bone.ay = dy * pa * pid - dx * pc * pid;
				var ia = pid * pd;
				var id = pid * pa;
				var ib = pid * pb;
				var ic = pid * pc;
				var ra = ia * bone.a - ib * bone.c;
				var rb = ia * bone.b - ib * bone.d;
				var rc = id * bone.c - ic * bone.a;
				var rd = id * bone.d - ic * bone.b;
				bone.ashearX = 0;
				bone.ascaleX = Math.sqrt(ra * ra + rc * rc);
				if(bone.ascaleX > 0.0001) {
					var det = ra * rd - rb * rc;
					bone.ascaleY = det / bone.ascaleX;
					bone.ashearY = Math.atan2(ra * rb + rc * rd,det) * spine_utils_SpineUtils.radDeg;
					bone.arotation = Math.atan2(rc,ra) * spine_utils_SpineUtils.radDeg;
				} else {
					bone.ascaleX = 0;
					bone.ascaleY = Math.sqrt(rb * rb + rd * rd);
					bone.ashearY = 0;
					bone.arotation = 90 - Math.atan2(rd,rb) * spine_utils_SpineUtils.radDeg;
				}
			}
			++i;
		}
	}
	,applyAbsoluteLocal: function() {
		var mixRotate = this.mixRotate;
		var mixX = this.mixX;
		var mixY = this.mixY;
		var mixScaleX = this.mixScaleX;
		var mixScaleY = this.mixScaleY;
		var mixShearY = this.mixShearY;
		var target = this.target;
		var bones = this.bones;
		var i = 0;
		var n = this.bones.length;
		while(i < n) {
			var result = bones[i];
			var bone = result;
			var rotation = bone.arotation;
			if(mixRotate != 0) {
				var r = target.arotation - rotation + this.data.offsetRotation;
				r -= (16384 - (16384.499999999996 - r / 360 | 0)) * 360;
				rotation += r * mixRotate;
			}
			var x = bone.ax;
			var y = bone.ay;
			x += (target.ax - x + this.data.offsetX) * mixX;
			y += (target.ay - y + this.data.offsetY) * mixY;
			var scaleX = bone.ascaleX;
			var scaleY = bone.ascaleY;
			if(mixScaleX != 0 && scaleX != 0) {
				scaleX = (scaleX + (target.ascaleX - scaleX + this.data.offsetScaleX) * mixScaleX) / scaleX;
			}
			if(mixScaleY != 0 && scaleY != 0) {
				scaleY = (scaleY + (target.ascaleY - scaleY + this.data.offsetScaleY) * mixScaleY) / scaleY;
			}
			var shearY = bone.ashearY;
			if(mixShearY != 0) {
				var r1 = target.ashearY - shearY + this.data.offsetShearY;
				r1 -= (16384 - (16384.499999999996 - r1 / 360 | 0)) * 360;
				shearY += r1 * mixShearY;
			}
			bone.updateWorldTransformWithData(x,y,rotation,scaleX,scaleY,bone.ashearX,shearY);
			++i;
		}
	}
	,applyRelativeLocal: function() {
		var mixRotate = this.mixRotate;
		var mixX = this.mixX;
		var mixY = this.mixY;
		var mixScaleX = this.mixScaleX;
		var mixScaleY = this.mixScaleY;
		var mixShearY = this.mixShearY;
		var target = this.target;
		var bones = this.bones;
		var i = 0;
		var n = this.bones.length;
		while(i < n) {
			var result = bones[i];
			var bone = result;
			var rotation = bone.arotation + (target.arotation + this.data.offsetRotation) * mixRotate;
			var x = bone.ax + (target.ax + this.data.offsetX) * mixX;
			var y = bone.ay + (target.ay + this.data.offsetY) * mixY;
			var scaleX = bone.ascaleX * ((target.ascaleX - 1 + this.data.offsetScaleX) * mixScaleX) + 1;
			var scaleY = bone.ascaleY * ((target.ascaleY - 1 + this.data.offsetScaleY) * mixScaleY) + 1;
			var shearY = bone.ashearY + (target.ashearY + this.data.offsetShearY) * mixShearY;
			bone.updateWorldTransformWithData(x,y,rotation,scaleX,scaleY,bone.ashearX,shearY);
			++i;
		}
	}
	,getBones: function() {
		return this.bones;
	}
	,getTarget: function() {
		return this.target;
	}
	,setTarget: function(target) {
		if(target == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("target cannot be null."));
		}
		this.target = target;
	}
	,getMixRotate: function() {
		return this.mixRotate;
	}
	,setMixRotate: function(mixRotate) {
		this.mixRotate = mixRotate;
	}
	,getMixX: function() {
		return this.mixX;
	}
	,setMixX: function(mixX) {
		this.mixX = mixX;
	}
	,getMixY: function() {
		return this.mixY;
	}
	,setMixY: function(mixY) {
		this.mixY = mixY;
	}
	,getMixScaleX: function() {
		return this.mixScaleX;
	}
	,setMixScaleX: function(mixScaleX) {
		this.mixScaleX = mixScaleX;
	}
	,getMixScaleY: function() {
		return this.mixScaleY;
	}
	,setMixScaleY: function(mixScaleY) {
		this.mixScaleY = mixScaleY;
	}
	,getMixShearY: function() {
		return this.mixShearY;
	}
	,setMixShearY: function(mixShearY) {
		this.mixShearY = mixShearY;
	}
	,isActive: function() {
		return this.active;
	}
	,getData: function() {
		return this.data;
	}
	,toString: function() {
		return this.data.name;
	}
	,__class__: spine_TransformConstraint
};
var spine_TransformConstraintData = function(name) {
	this.local = false;
	this.relative = false;
	this.offsetShearY = 0;
	this.offsetScaleY = 0;
	this.offsetScaleX = 0;
	this.offsetY = 0;
	this.offsetX = 0;
	this.offsetRotation = 0;
	this.mixShearY = 0;
	this.mixScaleY = 0;
	this.mixScaleX = 0;
	this.mixY = 0;
	this.mixX = 0;
	this.mixRotate = 0;
	var this1 = [];
	this.bones = this1;
	spine_ConstraintData.call(this,name);
};
$hxClasses["spine.TransformConstraintData"] = spine_TransformConstraintData;
spine_TransformConstraintData.__name__ = "spine.TransformConstraintData";
spine_TransformConstraintData.__super__ = spine_ConstraintData;
spine_TransformConstraintData.prototype = $extend(spine_ConstraintData.prototype,{
	getBones: function() {
		return this.bones;
	}
	,getTarget: function() {
		return this.target;
	}
	,setTarget: function(target) {
		if(target == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("target cannot be null."));
		}
		this.target = target;
	}
	,getMixRotate: function() {
		return this.mixRotate;
	}
	,setMixRotate: function(mixRotate) {
		this.mixRotate = mixRotate;
	}
	,getMixX: function() {
		return this.mixX;
	}
	,setMixX: function(mixX) {
		this.mixX = mixX;
	}
	,getMixY: function() {
		return this.mixY;
	}
	,setMixY: function(mixY) {
		this.mixY = mixY;
	}
	,getMixScaleX: function() {
		return this.mixScaleX;
	}
	,setMixScaleX: function(mixScaleX) {
		this.mixScaleX = mixScaleX;
	}
	,getMixScaleY: function() {
		return this.mixScaleY;
	}
	,setMixScaleY: function(mixScaleY) {
		this.mixScaleY = mixScaleY;
	}
	,getMixShearY: function() {
		return this.mixShearY;
	}
	,setMixShearY: function(mixShearY) {
		this.mixShearY = mixShearY;
	}
	,getOffsetRotation: function() {
		return this.offsetRotation;
	}
	,setOffsetRotation: function(offsetRotation) {
		this.offsetRotation = offsetRotation;
	}
	,getOffsetX: function() {
		return this.offsetX;
	}
	,setOffsetX: function(offsetX) {
		this.offsetX = offsetX;
	}
	,getOffsetY: function() {
		return this.offsetY;
	}
	,setOffsetY: function(offsetY) {
		this.offsetY = offsetY;
	}
	,getOffsetScaleX: function() {
		return this.offsetScaleX;
	}
	,setOffsetScaleX: function(offsetScaleX) {
		this.offsetScaleX = offsetScaleX;
	}
	,getOffsetScaleY: function() {
		return this.offsetScaleY;
	}
	,setOffsetScaleY: function(offsetScaleY) {
		this.offsetScaleY = offsetScaleY;
	}
	,getOffsetShearY: function() {
		return this.offsetShearY;
	}
	,setOffsetShearY: function(offsetShearY) {
		this.offsetShearY = offsetShearY;
	}
	,getRelative: function() {
		return this.relative;
	}
	,setRelative: function(relative) {
		this.relative = relative;
	}
	,getLocal: function() {
		return this.local;
	}
	,setLocal: function(local) {
		this.local = local;
	}
	,__class__: spine_TransformConstraintData
});
var spine_attachments_AtlasAttachmentLoader = function(atlas) {
	if(atlas == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("atlas cannot be null."));
	}
	this.atlas = atlas;
};
$hxClasses["spine.attachments.AtlasAttachmentLoader"] = spine_attachments_AtlasAttachmentLoader;
spine_attachments_AtlasAttachmentLoader.__name__ = "spine.attachments.AtlasAttachmentLoader";
spine_attachments_AtlasAttachmentLoader.__interfaces__ = [spine_attachments_AttachmentLoader];
spine_attachments_AtlasAttachmentLoader.prototype = {
	newRegionAttachment: function(skin,name,path) {
		var region = this.atlas.findRegion(path);
		if(region == null) {
			throw haxe_Exception.thrown(new spine_support_error_RuntimeException("Region not found in atlas: " + path + " (region attachment: " + name + ")"));
		}
		var attachment = new spine_attachments_RegionAttachment(name);
		if(region == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("region cannot be null."));
		}
		attachment.region = region;
		var uvs = attachment.uvs;
		var tmp;
		if(((region) instanceof spine_support_graphics_AtlasRegion)) {
			var result = region;
			tmp = result.degrees == 90;
		} else {
			tmp = false;
		}
		if(tmp) {
			uvs[4] = region.u;
			uvs[5] = region.v2;
			uvs[6] = region.u;
			uvs[7] = region.v;
			uvs[0] = region.u2;
			uvs[1] = region.v;
			uvs[2] = region.u2;
			uvs[3] = region.v2;
		} else {
			uvs[2] = region.u;
			uvs[3] = region.v2;
			uvs[4] = region.u;
			uvs[5] = region.v;
			uvs[6] = region.u2;
			uvs[7] = region.v;
			uvs[0] = region.u2;
			uvs[1] = region.v2;
		}
		return attachment;
	}
	,newMeshAttachment: function(skin,name,path) {
		var region = this.atlas.findRegion(path);
		if(region == null) {
			throw haxe_Exception.thrown(new spine_support_error_RuntimeException("Region not found in atlas: " + path + " (mesh attachment: " + name + ")"));
		}
		var attachment = new spine_attachments_MeshAttachment(name);
		attachment.setRegion(region);
		return attachment;
	}
	,newBoundingBoxAttachment: function(skin,name) {
		return new spine_attachments_BoundingBoxAttachment(name);
	}
	,newClippingAttachment: function(skin,name) {
		return new spine_attachments_ClippingAttachment(name);
	}
	,newPathAttachment: function(skin,name) {
		return new spine_attachments_PathAttachment(name);
	}
	,newPointAttachment: function(skin,name) {
		return new spine_attachments_PointAttachment(name);
	}
	,__class__: spine_attachments_AtlasAttachmentLoader
};
var spine_attachments_Attachment = function(name) {
	if(name == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("name cannot be null."));
	}
	this.name = name;
};
$hxClasses["spine.attachments.Attachment"] = spine_attachments_Attachment;
spine_attachments_Attachment.__name__ = "spine.attachments.Attachment";
spine_attachments_Attachment.prototype = {
	getName: function() {
		return this.name;
	}
	,toString: function() {
		return this.name;
	}
	,copy: function() {
		return null;
	}
	,__class__: spine_attachments_Attachment
};
var spine_attachments_AttachmentType_$enum = function() { };
$hxClasses["spine.attachments.AttachmentType_enum"] = spine_attachments_AttachmentType_$enum;
spine_attachments_AttachmentType_$enum.__name__ = "spine.attachments.AttachmentType_enum";
spine_attachments_AttachmentType_$enum.valueOf = function(value) {
	switch(value) {
	case "boundingbox":
		return 1;
	case "clipping":
		return 6;
	case "linkedmesh":
		return 3;
	case "mesh":
		return 2;
	case "path":
		return 4;
	case "point":
		return 5;
	case "region":
		return 0;
	default:
		return 0;
	}
};
var spine_attachments_VertexAttachment = function(name) {
	this.deformAttachment = null;
	this.worldVerticesLength = 0;
	this.id = spine_attachments_VertexAttachment.nextID++;
	spine_attachments_Attachment.call(this,name);
};
$hxClasses["spine.attachments.VertexAttachment"] = spine_attachments_VertexAttachment;
spine_attachments_VertexAttachment.__name__ = "spine.attachments.VertexAttachment";
spine_attachments_VertexAttachment.getNextID = function() {
	return spine_attachments_VertexAttachment.nextID++;
};
spine_attachments_VertexAttachment.__super__ = spine_attachments_Attachment;
spine_attachments_VertexAttachment.prototype = $extend(spine_attachments_Attachment.prototype,{
	get_deformAttachment: function() {
		if(this.deformAttachment != null) {
			return this.deformAttachment;
		} else {
			return this;
		}
	}
	,set_deformAttachment: function(deformAttachment) {
		return this.deformAttachment = deformAttachment;
	}
	,computeWorldVertices: function(slot,start,count,worldVertices,offset,stride) {
		count = offset + (count >> 1) * stride;
		var deformArray = slot.deform;
		var vertices = this.vertices;
		var bones = this.bones;
		if(bones == null) {
			if(deformArray.length > 0) {
				vertices = deformArray;
			}
			var bone = slot.bone;
			var x = bone.worldX;
			var y = bone.worldY;
			var a = bone.a;
			var b = bone.b;
			var c = bone.c;
			var d = bone.d;
			var v = start;
			var w = offset;
			while(w < count) {
				var vx = vertices[v];
				var vy = vertices[v + 1];
				worldVertices[w] = vx * a + vy * b + x;
				worldVertices[w + 1] = vx * c + vy * d + y;
				v += 2;
				w += stride;
			}
			return;
		}
		var v = 0;
		var skip = 0;
		var i = 0;
		while(i < start) {
			var n = bones[v];
			v += n + 1;
			skip += n;
			i += 2;
		}
		var skeletonBones = slot.bone.skeleton.getBones();
		if(deformArray.length == 0) {
			var w = offset;
			var b = skip * 3;
			while(w < count) {
				var wx = 0;
				var wy = 0;
				var n = bones[v++];
				n += v;
				while(v < n) {
					var result = skeletonBones[bones[v]];
					var bone = result;
					var vx = vertices[b];
					var vy = vertices[b + 1];
					var weight = vertices[b + 2];
					wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;
					wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;
					++v;
					b += 3;
				}
				worldVertices[w] = wx;
				worldVertices[w + 1] = wy;
				w += stride;
			}
		} else {
			var deform = deformArray;
			var w = offset;
			var b = skip * 3;
			var f = skip << 1;
			while(w < count) {
				var wx = 0;
				var wy = 0;
				var n = bones[v++];
				n += v;
				while(v < n) {
					var result = skeletonBones[bones[v]];
					var bone = result;
					var vx = vertices[b] + deform[f];
					var vy = vertices[b + 1] + deform[f + 1];
					var weight = vertices[b + 2];
					wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;
					wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;
					++v;
					b += 3;
					f += 2;
				}
				worldVertices[w] = wx;
				worldVertices[w + 1] = wy;
				w += stride;
			}
		}
	}
	,getDeformAttachment: function() {
		if(this.deformAttachment != null) {
			return this.deformAttachment;
		} else {
			return this;
		}
	}
	,setDeformAttachment: function(deformAttachment) {
		this.deformAttachment = deformAttachment;
	}
	,getBones: function() {
		return this.bones;
	}
	,setBones: function(bones) {
		this.bones = bones;
	}
	,getVertices: function() {
		return this.vertices;
	}
	,setVertices: function(vertices) {
		this.vertices = vertices;
	}
	,getWorldVerticesLength: function() {
		return this.worldVerticesLength;
	}
	,setWorldVerticesLength: function(worldVerticesLength) {
		this.worldVerticesLength = worldVerticesLength;
	}
	,getId: function() {
		return this.id;
	}
	,copyTo: function(attachment) {
		if(this.bones != null) {
			var length = this.bones.length;
			if(length == null) {
				length = 0;
			}
			var len = length | 0;
			var capacity = len != 0 ? len : 16;
			var this1 = [];
			var array = this1;
			if(length != 0) {
				var len1 = array.length;
				if(len1 > len) {
					array.splice(len,len - len1);
				} else if(len1 < len) {
					while(len1 < len) {
						array.push(0);
						++len1;
					}
				}
			}
			attachment.bones = array;
			var src = this.bones;
			var dest = attachment.bones;
			var length = this.bones.length;
			if(src == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("src cannot be null."));
			}
			if(dest == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("dest cannot be null."));
			}
			try {
				spine_support_utils_Array.copy(src,0,dest,0,length);
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				throw haxe_Exception.thrown(new spine_support_error_ArrayIndexOutOfBoundsException("Src: " + src.length + ", " + 0 + ", dest: " + dest.length + ", " + 0 + ", count: " + length));
			}
		} else {
			attachment.bones = null;
		}
		if(this.vertices != null) {
			var length = this.vertices.length;
			if(length == null) {
				length = 0;
			}
			var len = length | 0;
			var capacity = len != 0 ? len : 16;
			var this1 = [];
			var array = this1;
			if(length > 0) {
				var len1 = array.length;
				if(len1 > len) {
					array.splice(len,len - len1);
				} else if(len1 < len) {
					while(len1 < len) {
						array.push(0);
						++len1;
					}
				}
			}
			attachment.vertices = array;
			var src = this.vertices;
			var dest = attachment.vertices;
			var length = this.vertices.length;
			if(src == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("src cannot be null."));
			}
			if(dest == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("dest cannot be null."));
			}
			try {
				spine_support_utils_Array.copy(src,0,dest,0,length);
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				throw haxe_Exception.thrown(new spine_support_error_ArrayIndexOutOfBoundsException("Src: " + src.length + ", " + 0 + ", dest: " + dest.length + ", " + 0 + ", count: " + length));
			}
		} else {
			attachment.vertices = null;
		}
		attachment.worldVerticesLength = this.worldVerticesLength;
		attachment.deformAttachment = this.deformAttachment != null ? this.deformAttachment : this;
	}
	,__class__: spine_attachments_VertexAttachment
	,__properties__: {set_deformAttachment:"set_deformAttachment",get_deformAttachment:"get_deformAttachment"}
});
var spine_attachments_BoundingBoxAttachment = function(name) {
	this.color = new spine_support_graphics_Color(0.38,0.94,0,1);
	spine_attachments_VertexAttachment.call(this,name);
};
$hxClasses["spine.attachments.BoundingBoxAttachment"] = spine_attachments_BoundingBoxAttachment;
spine_attachments_BoundingBoxAttachment.__name__ = "spine.attachments.BoundingBoxAttachment";
spine_attachments_BoundingBoxAttachment.__super__ = spine_attachments_VertexAttachment;
spine_attachments_BoundingBoxAttachment.prototype = $extend(spine_attachments_VertexAttachment.prototype,{
	getColor: function() {
		return this.color;
	}
	,copy: function() {
		var copy = new spine_attachments_BoundingBoxAttachment(this.name);
		if(this.bones != null) {
			var length = this.bones.length;
			if(length == null) {
				length = 0;
			}
			var len = length | 0;
			var capacity = len != 0 ? len : 16;
			var this1 = [];
			var array = this1;
			if(length != 0) {
				var len1 = array.length;
				if(len1 > len) {
					array.splice(len,len - len1);
				} else if(len1 < len) {
					while(len1 < len) {
						array.push(0);
						++len1;
					}
				}
			}
			copy.bones = array;
			var src = this.bones;
			var dest = copy.bones;
			var length = this.bones.length;
			if(src == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("src cannot be null."));
			}
			if(dest == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("dest cannot be null."));
			}
			try {
				spine_support_utils_Array.copy(src,0,dest,0,length);
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				throw haxe_Exception.thrown(new spine_support_error_ArrayIndexOutOfBoundsException("Src: " + src.length + ", " + 0 + ", dest: " + dest.length + ", " + 0 + ", count: " + length));
			}
		} else {
			copy.bones = null;
		}
		if(this.vertices != null) {
			var length = this.vertices.length;
			if(length == null) {
				length = 0;
			}
			var len = length | 0;
			var capacity = len != 0 ? len : 16;
			var this1 = [];
			var array = this1;
			if(length > 0) {
				var len1 = array.length;
				if(len1 > len) {
					array.splice(len,len - len1);
				} else if(len1 < len) {
					while(len1 < len) {
						array.push(0);
						++len1;
					}
				}
			}
			copy.vertices = array;
			var src = this.vertices;
			var dest = copy.vertices;
			var length = this.vertices.length;
			if(src == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("src cannot be null."));
			}
			if(dest == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("dest cannot be null."));
			}
			try {
				spine_support_utils_Array.copy(src,0,dest,0,length);
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				throw haxe_Exception.thrown(new spine_support_error_ArrayIndexOutOfBoundsException("Src: " + src.length + ", " + 0 + ", dest: " + dest.length + ", " + 0 + ", count: " + length));
			}
		} else {
			copy.vertices = null;
		}
		copy.worldVerticesLength = this.worldVerticesLength;
		copy.deformAttachment = this.deformAttachment != null ? this.deformAttachment : this;
		var _this = copy.color;
		var color = this.color;
		_this.r = color.r;
		_this.g = color.g;
		_this.b = color.b;
		_this.a = color.a;
		return copy;
	}
	,__class__: spine_attachments_BoundingBoxAttachment
});
var spine_attachments_ClippingAttachment = function(name) {
	this.color = new spine_support_graphics_Color(0.2275,0.2275,0.8078,1);
	spine_attachments_VertexAttachment.call(this,name);
};
$hxClasses["spine.attachments.ClippingAttachment"] = spine_attachments_ClippingAttachment;
spine_attachments_ClippingAttachment.__name__ = "spine.attachments.ClippingAttachment";
spine_attachments_ClippingAttachment.__super__ = spine_attachments_VertexAttachment;
spine_attachments_ClippingAttachment.prototype = $extend(spine_attachments_VertexAttachment.prototype,{
	getEndSlot: function() {
		return this.endSlot;
	}
	,setEndSlot: function(endSlot) {
		this.endSlot = endSlot;
	}
	,getColor: function() {
		return this.color;
	}
	,copy: function() {
		var copy = new spine_attachments_ClippingAttachment(this.name);
		if(this.bones != null) {
			var length = this.bones.length;
			if(length == null) {
				length = 0;
			}
			var len = length | 0;
			var capacity = len != 0 ? len : 16;
			var this1 = [];
			var array = this1;
			if(length != 0) {
				var len1 = array.length;
				if(len1 > len) {
					array.splice(len,len - len1);
				} else if(len1 < len) {
					while(len1 < len) {
						array.push(0);
						++len1;
					}
				}
			}
			copy.bones = array;
			var src = this.bones;
			var dest = copy.bones;
			var length = this.bones.length;
			if(src == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("src cannot be null."));
			}
			if(dest == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("dest cannot be null."));
			}
			try {
				spine_support_utils_Array.copy(src,0,dest,0,length);
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				throw haxe_Exception.thrown(new spine_support_error_ArrayIndexOutOfBoundsException("Src: " + src.length + ", " + 0 + ", dest: " + dest.length + ", " + 0 + ", count: " + length));
			}
		} else {
			copy.bones = null;
		}
		if(this.vertices != null) {
			var length = this.vertices.length;
			if(length == null) {
				length = 0;
			}
			var len = length | 0;
			var capacity = len != 0 ? len : 16;
			var this1 = [];
			var array = this1;
			if(length > 0) {
				var len1 = array.length;
				if(len1 > len) {
					array.splice(len,len - len1);
				} else if(len1 < len) {
					while(len1 < len) {
						array.push(0);
						++len1;
					}
				}
			}
			copy.vertices = array;
			var src = this.vertices;
			var dest = copy.vertices;
			var length = this.vertices.length;
			if(src == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("src cannot be null."));
			}
			if(dest == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("dest cannot be null."));
			}
			try {
				spine_support_utils_Array.copy(src,0,dest,0,length);
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				throw haxe_Exception.thrown(new spine_support_error_ArrayIndexOutOfBoundsException("Src: " + src.length + ", " + 0 + ", dest: " + dest.length + ", " + 0 + ", count: " + length));
			}
		} else {
			copy.vertices = null;
		}
		copy.worldVerticesLength = this.worldVerticesLength;
		copy.deformAttachment = this.deformAttachment != null ? this.deformAttachment : this;
		copy.endSlot = this.endSlot;
		var _this = copy.color;
		var color = this.color;
		_this.r = color.r;
		_this.g = color.g;
		_this.b = color.b;
		_this.a = color.a;
		return copy;
	}
	,__class__: spine_attachments_ClippingAttachment
});
var spine_attachments_MeshAttachment = function(name) {
	this.height = 0;
	this.width = 0;
	this.hullLength = 0;
	this.color = new spine_support_graphics_Color(1,1,1,1);
	this.uvs = null;
	spine_attachments_VertexAttachment.call(this,name);
};
$hxClasses["spine.attachments.MeshAttachment"] = spine_attachments_MeshAttachment;
spine_attachments_MeshAttachment.__name__ = "spine.attachments.MeshAttachment";
spine_attachments_MeshAttachment.__super__ = spine_attachments_VertexAttachment;
spine_attachments_MeshAttachment.prototype = $extend(spine_attachments_VertexAttachment.prototype,{
	setRegion: function(region) {
		if(region == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("region cannot be null."));
		}
		this.region = region;
	}
	,getRegion: function() {
		if(this.region == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalStateException("Region has not been set: " + Std.string(this)));
		}
		return this.region;
	}
	,updateUVs: function() {
		var regionUVs = this.regionUVs;
		if(this.uvs == null || this.uvs.length != regionUVs.length) {
			var length = regionUVs.length;
			if(length == null) {
				length = 0;
			}
			var len = length | 0;
			var capacity = len != 0 ? len : 16;
			var this1 = [];
			var array = this1;
			if(length > 0) {
				var len1 = array.length;
				if(len1 > len) {
					array.splice(len,len - len1);
				} else if(len1 < len) {
					while(len1 < len) {
						array.push(0);
						++len1;
					}
				}
			}
			this.uvs = array;
		}
		var uvs = this.uvs;
		var n = uvs.length;
		var u = 0;
		var v = 0;
		var width = 0;
		var height = 0;
		if(((this.region) instanceof spine_support_graphics_AtlasRegion)) {
			u = this.region.u;
			v = this.region.v;
			var result = this.region;
			var region = result;
			var textureWidth = region.page.width;
			var textureHeight = region.page.height;
			var _continueAfterSwitch0 = false;
			while(true) {
				var _switchCond0 = region.degrees;
				if(_switchCond0 == 90) {
					u -= (region.originalHeight - region.offsetY - region.packedWidth) / textureWidth;
					v -= (region.originalWidth - region.offsetX - region.packedHeight) / textureHeight;
					width = region.originalHeight / textureWidth;
					height = region.originalWidth / textureHeight;
					var i = 0;
					while(i < n) {
						uvs[i] = u + regionUVs[i + 1] * width;
						uvs[i + 1] = v + (1 - regionUVs[i]) * height;
						i += 2;
					}
					return;
				} else if(_switchCond0 == 180) {
					u -= (region.originalWidth - region.offsetX - region.packedWidth) / textureWidth;
					v -= region.offsetY / textureHeight;
					width = region.originalWidth / textureWidth;
					height = region.originalHeight / textureHeight;
					var i1 = 0;
					while(i1 < n) {
						uvs[i1] = u + (1 - regionUVs[i1]) * width;
						uvs[i1 + 1] = v + (1 - regionUVs[i1 + 1]) * height;
						i1 += 2;
					}
					return;
				} else if(_switchCond0 == 270) {
					u -= region.offsetY / textureWidth;
					v -= region.offsetX / textureHeight;
					width = region.originalHeight / textureWidth;
					height = region.originalWidth / textureHeight;
					var i2 = 0;
					while(i2 < n) {
						uvs[i2] = u + (1 - regionUVs[i2 + 1]) * width;
						uvs[i2 + 1] = v + regionUVs[i2] * height;
						i2 += 2;
					}
					return;
				}
				break;
			}
			u -= region.offsetX / textureWidth;
			v -= (region.originalHeight - region.offsetY - region.packedHeight) / textureHeight;
			width = region.originalWidth / textureWidth;
			height = region.originalHeight / textureHeight;
		} else if(this.region == null) {
			v = 0;
			u = v;
			height = 1;
			width = height;
		} else {
			u = this.region.u;
			v = this.region.v;
			width = this.region.u2 - u;
			height = this.region.v2 - v;
		}
		var i = 0;
		while(i < n) {
			uvs[i] = u + regionUVs[i] * width;
			uvs[i + 1] = v + regionUVs[i + 1] * height;
			i += 2;
		}
	}
	,getTriangles: function() {
		return this.triangles;
	}
	,setTriangles: function(triangles) {
		this.triangles = triangles;
	}
	,getRegionUVs: function() {
		return this.regionUVs;
	}
	,setRegionUVs: function(regionUVs) {
		this.regionUVs = regionUVs;
	}
	,getUVs: function() {
		return this.uvs;
	}
	,setUVs: function(uvs) {
		this.uvs = uvs;
	}
	,getColor: function() {
		return this.color;
	}
	,getPath: function() {
		return this.path;
	}
	,setPath: function(path) {
		this.path = path;
	}
	,getHullLength: function() {
		return this.hullLength;
	}
	,setHullLength: function(hullLength) {
		this.hullLength = hullLength;
	}
	,setEdges: function(edges) {
		this.edges = edges;
	}
	,getEdges: function() {
		return this.edges;
	}
	,getWidth: function() {
		return this.width;
	}
	,setWidth: function(width) {
		this.width = width;
	}
	,getHeight: function() {
		return this.height;
	}
	,setHeight: function(height) {
		this.height = height;
	}
	,getParentMesh: function() {
		return this.parentMesh;
	}
	,setParentMesh: function(parentMesh) {
		this.parentMesh = parentMesh;
		if(parentMesh != null) {
			this.bones = parentMesh.bones;
			this.vertices = parentMesh.vertices;
			this.regionUVs = parentMesh.regionUVs;
			this.triangles = parentMesh.triangles;
			this.hullLength = parentMesh.hullLength;
			this.worldVerticesLength = parentMesh.worldVerticesLength;
			this.edges = parentMesh.edges;
			this.width = parentMesh.width;
			this.height = parentMesh.height;
		}
	}
	,copy: function() {
		if(this.parentMesh != null) {
			var mesh = new spine_attachments_MeshAttachment(this.name);
			mesh.region = this.region;
			mesh.path = this.path;
			var _this = mesh.color;
			var color = this.color;
			_this.r = color.r;
			_this.g = color.g;
			_this.b = color.b;
			_this.a = color.a;
			mesh.deformAttachment = this.deformAttachment != null ? this.deformAttachment : this;
			var parentMesh = this.parentMesh != null ? this.parentMesh : this;
			mesh.parentMesh = parentMesh;
			if(parentMesh != null) {
				mesh.bones = parentMesh.bones;
				mesh.vertices = parentMesh.vertices;
				mesh.regionUVs = parentMesh.regionUVs;
				mesh.triangles = parentMesh.triangles;
				mesh.hullLength = parentMesh.hullLength;
				mesh.worldVerticesLength = parentMesh.worldVerticesLength;
				mesh.edges = parentMesh.edges;
				mesh.width = parentMesh.width;
				mesh.height = parentMesh.height;
			}
			mesh.updateUVs();
			return mesh;
		}
		var copy = new spine_attachments_MeshAttachment(this.name);
		copy.region = this.region;
		copy.path = this.path;
		var _this = copy.color;
		var color = this.color;
		_this.r = color.r;
		_this.g = color.g;
		_this.b = color.b;
		_this.a = color.a;
		if(this.bones != null) {
			var length = this.bones.length;
			if(length == null) {
				length = 0;
			}
			var len = length | 0;
			var capacity = len != 0 ? len : 16;
			var this1 = [];
			var array = this1;
			if(length != 0) {
				var len1 = array.length;
				if(len1 > len) {
					array.splice(len,len - len1);
				} else if(len1 < len) {
					while(len1 < len) {
						array.push(0);
						++len1;
					}
				}
			}
			copy.bones = array;
			var src = this.bones;
			var dest = copy.bones;
			var length = this.bones.length;
			if(src == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("src cannot be null."));
			}
			if(dest == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("dest cannot be null."));
			}
			try {
				spine_support_utils_Array.copy(src,0,dest,0,length);
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				throw haxe_Exception.thrown(new spine_support_error_ArrayIndexOutOfBoundsException("Src: " + src.length + ", " + 0 + ", dest: " + dest.length + ", " + 0 + ", count: " + length));
			}
		} else {
			copy.bones = null;
		}
		if(this.vertices != null) {
			var length = this.vertices.length;
			if(length == null) {
				length = 0;
			}
			var len = length | 0;
			var capacity = len != 0 ? len : 16;
			var this1 = [];
			var array = this1;
			if(length > 0) {
				var len1 = array.length;
				if(len1 > len) {
					array.splice(len,len - len1);
				} else if(len1 < len) {
					while(len1 < len) {
						array.push(0);
						++len1;
					}
				}
			}
			copy.vertices = array;
			var src = this.vertices;
			var dest = copy.vertices;
			var length = this.vertices.length;
			if(src == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("src cannot be null."));
			}
			if(dest == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("dest cannot be null."));
			}
			try {
				spine_support_utils_Array.copy(src,0,dest,0,length);
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				throw haxe_Exception.thrown(new spine_support_error_ArrayIndexOutOfBoundsException("Src: " + src.length + ", " + 0 + ", dest: " + dest.length + ", " + 0 + ", count: " + length));
			}
		} else {
			copy.vertices = null;
		}
		copy.worldVerticesLength = this.worldVerticesLength;
		copy.deformAttachment = this.deformAttachment != null ? this.deformAttachment : this;
		var length = this.regionUVs.length;
		if(length == null) {
			length = 0;
		}
		var len = length | 0;
		var capacity = len != 0 ? len : 16;
		var this1 = [];
		var array = this1;
		if(length > 0) {
			var len1 = array.length;
			if(len1 > len) {
				array.splice(len,len - len1);
			} else if(len1 < len) {
				while(len1 < len) {
					array.push(0);
					++len1;
				}
			}
		}
		copy.regionUVs = array;
		var src = this.regionUVs;
		var dest = copy.regionUVs;
		var length = this.regionUVs.length;
		if(src == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("src cannot be null."));
		}
		if(dest == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("dest cannot be null."));
		}
		try {
			spine_support_utils_Array.copy(src,0,dest,0,length);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			throw haxe_Exception.thrown(new spine_support_error_ArrayIndexOutOfBoundsException("Src: " + src.length + ", " + 0 + ", dest: " + dest.length + ", " + 0 + ", count: " + length));
		}
		var length = this.uvs.length;
		if(length == null) {
			length = 0;
		}
		var len = length | 0;
		var capacity = len != 0 ? len : 16;
		var this1 = [];
		var array = this1;
		if(length > 0) {
			var len1 = array.length;
			if(len1 > len) {
				array.splice(len,len - len1);
			} else if(len1 < len) {
				while(len1 < len) {
					array.push(0);
					++len1;
				}
			}
		}
		copy.uvs = array;
		var src = this.uvs;
		var dest = copy.uvs;
		var length = this.uvs.length;
		if(src == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("src cannot be null."));
		}
		if(dest == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("dest cannot be null."));
		}
		try {
			spine_support_utils_Array.copy(src,0,dest,0,length);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			throw haxe_Exception.thrown(new spine_support_error_ArrayIndexOutOfBoundsException("Src: " + src.length + ", " + 0 + ", dest: " + dest.length + ", " + 0 + ", count: " + length));
		}
		var length = this.triangles.length;
		if(length == null) {
			length = 0;
		}
		var len = length | 0;
		var capacity = len != 0 ? len : 16;
		var this1 = [];
		var array = this1;
		if(length != 0) {
			var len1 = array.length;
			if(len1 > len) {
				array.splice(len,len - len1);
			} else if(len1 < len) {
				while(len1 < len) {
					array.push(0);
					++len1;
				}
			}
		}
		copy.triangles = array;
		var src = this.triangles;
		var dest = copy.triangles;
		var length = this.triangles.length;
		if(src == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("src cannot be null."));
		}
		if(dest == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("dest cannot be null."));
		}
		try {
			spine_support_utils_Array.copy(src,0,dest,0,length);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			throw haxe_Exception.thrown(new spine_support_error_ArrayIndexOutOfBoundsException("Src: " + src.length + ", " + 0 + ", dest: " + dest.length + ", " + 0 + ", count: " + length));
		}
		copy.hullLength = this.hullLength;
		if(this.edges != null) {
			var length = this.edges.length;
			if(length == null) {
				length = 0;
			}
			var len = length | 0;
			var capacity = len != 0 ? len : 16;
			var this1 = [];
			var array = this1;
			if(length != 0) {
				var len1 = array.length;
				if(len1 > len) {
					array.splice(len,len - len1);
				} else if(len1 < len) {
					while(len1 < len) {
						array.push(0);
						++len1;
					}
				}
			}
			copy.edges = array;
			var src = this.edges;
			var dest = copy.edges;
			var length = this.edges.length;
			if(src == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("src cannot be null."));
			}
			if(dest == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("dest cannot be null."));
			}
			try {
				spine_support_utils_Array.copy(src,0,dest,0,length);
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				throw haxe_Exception.thrown(new spine_support_error_ArrayIndexOutOfBoundsException("Src: " + src.length + ", " + 0 + ", dest: " + dest.length + ", " + 0 + ", count: " + length));
			}
		}
		copy.width = this.width;
		copy.height = this.height;
		return copy;
	}
	,newLinkedMesh: function() {
		var mesh = new spine_attachments_MeshAttachment(this.name);
		mesh.region = this.region;
		mesh.path = this.path;
		var _this = mesh.color;
		var color = this.color;
		_this.r = color.r;
		_this.g = color.g;
		_this.b = color.b;
		_this.a = color.a;
		mesh.deformAttachment = this.deformAttachment != null ? this.deformAttachment : this;
		var parentMesh = this.parentMesh != null ? this.parentMesh : this;
		mesh.parentMesh = parentMesh;
		if(parentMesh != null) {
			mesh.bones = parentMesh.bones;
			mesh.vertices = parentMesh.vertices;
			mesh.regionUVs = parentMesh.regionUVs;
			mesh.triangles = parentMesh.triangles;
			mesh.hullLength = parentMesh.hullLength;
			mesh.worldVerticesLength = parentMesh.worldVerticesLength;
			mesh.edges = parentMesh.edges;
			mesh.width = parentMesh.width;
			mesh.height = parentMesh.height;
		}
		mesh.updateUVs();
		return mesh;
	}
	,__class__: spine_attachments_MeshAttachment
});
var spine_attachments_PathAttachment = function(name) {
	this.color = new spine_support_graphics_Color(1,0.5,0,1);
	this.constantSpeed = false;
	this.closed = false;
	spine_attachments_VertexAttachment.call(this,name);
};
$hxClasses["spine.attachments.PathAttachment"] = spine_attachments_PathAttachment;
spine_attachments_PathAttachment.__name__ = "spine.attachments.PathAttachment";
spine_attachments_PathAttachment.__super__ = spine_attachments_VertexAttachment;
spine_attachments_PathAttachment.prototype = $extend(spine_attachments_VertexAttachment.prototype,{
	getClosed: function() {
		return this.closed;
	}
	,setClosed: function(closed) {
		this.closed = closed;
	}
	,getConstantSpeed: function() {
		return this.constantSpeed;
	}
	,setConstantSpeed: function(constantSpeed) {
		this.constantSpeed = constantSpeed;
	}
	,getLengths: function() {
		return this.lengths;
	}
	,setLengths: function(lengths) {
		this.lengths = lengths;
	}
	,getColor: function() {
		return this.color;
	}
	,copy: function() {
		var copy = new spine_attachments_PathAttachment(this.name);
		if(this.bones != null) {
			var length = this.bones.length;
			if(length == null) {
				length = 0;
			}
			var len = length | 0;
			var capacity = len != 0 ? len : 16;
			var this1 = [];
			var array = this1;
			if(length != 0) {
				var len1 = array.length;
				if(len1 > len) {
					array.splice(len,len - len1);
				} else if(len1 < len) {
					while(len1 < len) {
						array.push(0);
						++len1;
					}
				}
			}
			copy.bones = array;
			var src = this.bones;
			var dest = copy.bones;
			var length = this.bones.length;
			if(src == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("src cannot be null."));
			}
			if(dest == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("dest cannot be null."));
			}
			try {
				spine_support_utils_Array.copy(src,0,dest,0,length);
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				throw haxe_Exception.thrown(new spine_support_error_ArrayIndexOutOfBoundsException("Src: " + src.length + ", " + 0 + ", dest: " + dest.length + ", " + 0 + ", count: " + length));
			}
		} else {
			copy.bones = null;
		}
		if(this.vertices != null) {
			var length = this.vertices.length;
			if(length == null) {
				length = 0;
			}
			var len = length | 0;
			var capacity = len != 0 ? len : 16;
			var this1 = [];
			var array = this1;
			if(length > 0) {
				var len1 = array.length;
				if(len1 > len) {
					array.splice(len,len - len1);
				} else if(len1 < len) {
					while(len1 < len) {
						array.push(0);
						++len1;
					}
				}
			}
			copy.vertices = array;
			var src = this.vertices;
			var dest = copy.vertices;
			var length = this.vertices.length;
			if(src == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("src cannot be null."));
			}
			if(dest == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("dest cannot be null."));
			}
			try {
				spine_support_utils_Array.copy(src,0,dest,0,length);
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				throw haxe_Exception.thrown(new spine_support_error_ArrayIndexOutOfBoundsException("Src: " + src.length + ", " + 0 + ", dest: " + dest.length + ", " + 0 + ", count: " + length));
			}
		} else {
			copy.vertices = null;
		}
		copy.worldVerticesLength = this.worldVerticesLength;
		copy.deformAttachment = this.deformAttachment != null ? this.deformAttachment : this;
		var length = this.lengths.length;
		if(length == null) {
			length = 0;
		}
		var len = length | 0;
		var capacity = len != 0 ? len : 16;
		var this1 = [];
		var array = this1;
		if(length > 0) {
			var len1 = array.length;
			if(len1 > len) {
				array.splice(len,len - len1);
			} else if(len1 < len) {
				while(len1 < len) {
					array.push(0);
					++len1;
				}
			}
		}
		copy.lengths = array;
		var src = this.lengths;
		var dest = copy.lengths;
		var length = this.lengths.length;
		if(src == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("src cannot be null."));
		}
		if(dest == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("dest cannot be null."));
		}
		try {
			spine_support_utils_Array.copy(src,0,dest,0,length);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			throw haxe_Exception.thrown(new spine_support_error_ArrayIndexOutOfBoundsException("Src: " + src.length + ", " + 0 + ", dest: " + dest.length + ", " + 0 + ", count: " + length));
		}
		copy.closed = this.closed;
		copy.constantSpeed = this.constantSpeed;
		var _this = copy.color;
		var color = this.color;
		_this.r = color.r;
		_this.g = color.g;
		_this.b = color.b;
		_this.a = color.a;
		return copy;
	}
	,__class__: spine_attachments_PathAttachment
});
var spine_attachments_PointAttachment = function(name) {
	this.color = new spine_support_graphics_Color(0.9451,0.9451,0,1);
	this.rotation = 0;
	this.y = 0;
	this.x = 0;
	spine_attachments_Attachment.call(this,name);
};
$hxClasses["spine.attachments.PointAttachment"] = spine_attachments_PointAttachment;
spine_attachments_PointAttachment.__name__ = "spine.attachments.PointAttachment";
spine_attachments_PointAttachment.__super__ = spine_attachments_Attachment;
spine_attachments_PointAttachment.prototype = $extend(spine_attachments_Attachment.prototype,{
	getX: function() {
		return this.x;
	}
	,setX: function(x) {
		this.x = x;
	}
	,getY: function() {
		return this.y;
	}
	,setY: function(y) {
		this.y = y;
	}
	,getRotation: function() {
		return this.rotation;
	}
	,setRotation: function(rotation) {
		this.rotation = rotation;
	}
	,getColor: function() {
		return this.color;
	}
	,computeWorldPosition: function(bone,point) {
		point.x = this.x * bone.a + this.y * bone.b + bone.worldX;
		point.y = this.x * bone.c + this.y * bone.d + bone.worldY;
		return point;
	}
	,computeWorldRotation: function(bone) {
		var cos = Math.cos(this.rotation * spine_support_math_MathUtils.degRad);
		var sin = Math.sin(this.rotation * spine_support_math_MathUtils.degRad);
		var x = cos * bone.a + sin * bone.b;
		var y = cos * bone.c + sin * bone.d;
		return Math.atan2(y,x) * spine_support_math_MathUtils.radDeg;
	}
	,copy: function() {
		var copy = new spine_attachments_PointAttachment(this.name);
		copy.x = this.x;
		copy.y = this.y;
		copy.rotation = this.rotation;
		var _this = copy.color;
		var color = this.color;
		_this.r = color.r;
		_this.g = color.g;
		_this.b = color.b;
		_this.a = color.a;
		return copy;
	}
	,__class__: spine_attachments_PointAttachment
});
var spine_attachments_RegionAttachment = function(name) {
	this.color = new spine_support_graphics_Color(1,1,1,1);
	var length = 8;
	if(length == null) {
		length = 0;
	}
	var len = length | 0;
	var capacity = len != 0 ? len : 16;
	var this1 = [];
	var array = this1;
	if(length > 0) {
		var len1 = array.length;
		if(len1 > len) {
			array.splice(len,len - len1);
		} else if(len1 < len) {
			while(len1 < len) {
				array.push(0);
				++len1;
			}
		}
	}
	this.offset = array;
	var length = 8;
	if(length == null) {
		length = 0;
	}
	var len = length | 0;
	var capacity = len != 0 ? len : 16;
	var this1 = [];
	var array = this1;
	if(length > 0) {
		var len1 = array.length;
		if(len1 > len) {
			array.splice(len,len - len1);
		} else if(len1 < len) {
			while(len1 < len) {
				array.push(0);
				++len1;
			}
		}
	}
	this.uvs = array;
	this.height = 0;
	this.width = 0;
	this.rotation = 0;
	this.scaleY = 1;
	this.scaleX = 1;
	this.y = 0;
	this.x = 0;
	spine_attachments_Attachment.call(this,name);
};
$hxClasses["spine.attachments.RegionAttachment"] = spine_attachments_RegionAttachment;
spine_attachments_RegionAttachment.__name__ = "spine.attachments.RegionAttachment";
spine_attachments_RegionAttachment.__super__ = spine_attachments_Attachment;
spine_attachments_RegionAttachment.prototype = $extend(spine_attachments_Attachment.prototype,{
	updateOffset: function() {
		var width = this.width;
		var height = this.height;
		var localX2 = width / 2;
		var localY2 = height / 2;
		var localX = -localX2;
		var localY = -localY2;
		if(((this.region) instanceof spine_support_graphics_AtlasRegion)) {
			var result = this.region;
			var region = result;
			localX += region.offsetX / region.originalWidth * width;
			localY += region.offsetY / region.originalHeight * height;
			if(region.degrees == 90) {
				localX2 -= (region.originalWidth - region.offsetX - region.packedHeight) / region.originalWidth * width;
				localY2 -= (region.originalHeight - region.offsetY - region.packedWidth) / region.originalHeight * height;
			} else {
				localX2 -= (region.originalWidth - region.offsetX - region.packedWidth) / region.originalWidth * width;
				localY2 -= (region.originalHeight - region.offsetY - region.packedHeight) / region.originalHeight * height;
			}
		}
		var scaleX = this.scaleX;
		var scaleY = this.scaleY;
		localX *= scaleX;
		localY *= scaleY;
		localX2 *= scaleX;
		localY2 *= scaleY;
		var rotation = this.rotation;
		var cos = Math.cos(spine_utils_SpineUtils.degRad * rotation);
		var sin = Math.sin(spine_utils_SpineUtils.degRad * rotation);
		var x = this.x;
		var y = this.y;
		var localXCos = localX * cos + x;
		var localXSin = localX * sin;
		var localYCos = localY * cos + y;
		var localYSin = localY * sin;
		var localX2Cos = localX2 * cos + x;
		var localX2Sin = localX2 * sin;
		var localY2Cos = localY2 * cos + y;
		var localY2Sin = localY2 * sin;
		var offset = this.offset;
		offset[0] = localXCos - localYSin;
		offset[1] = localYCos + localXSin;
		offset[2] = localXCos - localY2Sin;
		offset[3] = localY2Cos + localXSin;
		offset[4] = localX2Cos - localY2Sin;
		offset[5] = localY2Cos + localX2Sin;
		offset[6] = localX2Cos - localYSin;
		offset[7] = localYCos + localX2Sin;
	}
	,setRegion: function(region) {
		if(region == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("region cannot be null."));
		}
		this.region = region;
		var uvs = this.uvs;
		var tmp;
		if(((region) instanceof spine_support_graphics_AtlasRegion)) {
			var result = region;
			tmp = result.degrees == 90;
		} else {
			tmp = false;
		}
		if(tmp) {
			uvs[4] = region.u;
			uvs[5] = region.v2;
			uvs[6] = region.u;
			uvs[7] = region.v;
			uvs[0] = region.u2;
			uvs[1] = region.v;
			uvs[2] = region.u2;
			uvs[3] = region.v2;
		} else {
			uvs[2] = region.u;
			uvs[3] = region.v2;
			uvs[4] = region.u;
			uvs[5] = region.v;
			uvs[6] = region.u2;
			uvs[7] = region.v;
			uvs[0] = region.u2;
			uvs[1] = region.v2;
		}
	}
	,getRegion: function() {
		if(this.region == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalStateException("Region has not been set: " + Std.string(this)));
		}
		return this.region;
	}
	,computeWorldVertices: function(bone,worldVertices,offset,stride) {
		var vertexOffset = this.offset;
		var x = bone.worldX;
		var y = bone.worldY;
		var a = bone.a;
		var b = bone.b;
		var c = bone.c;
		var d = bone.d;
		var offsetX = 0;
		var offsetY = 0;
		offsetX = vertexOffset[6];
		offsetY = vertexOffset[7];
		worldVertices[offset] = offsetX * a + offsetY * b + x;
		worldVertices[offset + 1] = offsetX * c + offsetY * d + y;
		offset += stride;
		offsetX = vertexOffset[0];
		offsetY = vertexOffset[1];
		worldVertices[offset] = offsetX * a + offsetY * b + x;
		worldVertices[offset + 1] = offsetX * c + offsetY * d + y;
		offset += stride;
		offsetX = vertexOffset[2];
		offsetY = vertexOffset[3];
		worldVertices[offset] = offsetX * a + offsetY * b + x;
		worldVertices[offset + 1] = offsetX * c + offsetY * d + y;
		offset += stride;
		offsetX = vertexOffset[4];
		offsetY = vertexOffset[5];
		worldVertices[offset] = offsetX * a + offsetY * b + x;
		worldVertices[offset + 1] = offsetX * c + offsetY * d + y;
	}
	,getOffset: function() {
		return this.offset;
	}
	,getUVs: function() {
		return this.uvs;
	}
	,getX: function() {
		return this.x;
	}
	,setX: function(x) {
		this.x = x;
	}
	,getY: function() {
		return this.y;
	}
	,setY: function(y) {
		this.y = y;
	}
	,getScaleX: function() {
		return this.scaleX;
	}
	,setScaleX: function(scaleX) {
		this.scaleX = scaleX;
	}
	,getScaleY: function() {
		return this.scaleY;
	}
	,setScaleY: function(scaleY) {
		this.scaleY = scaleY;
	}
	,getRotation: function() {
		return this.rotation;
	}
	,setRotation: function(rotation) {
		this.rotation = rotation;
	}
	,getWidth: function() {
		return this.width;
	}
	,setWidth: function(width) {
		this.width = width;
	}
	,getHeight: function() {
		return this.height;
	}
	,setHeight: function(height) {
		this.height = height;
	}
	,getColor: function() {
		return this.color;
	}
	,getPath: function() {
		return this.path;
	}
	,setPath: function(path) {
		this.path = path;
	}
	,copy: function() {
		var copy = new spine_attachments_RegionAttachment(this.name);
		copy.region = this.region;
		copy.path = this.path;
		copy.x = this.x;
		copy.y = this.y;
		copy.scaleX = this.scaleX;
		copy.scaleY = this.scaleY;
		copy.rotation = this.rotation;
		copy.width = this.width;
		copy.height = this.height;
		var src = this.uvs;
		var dest = copy.uvs;
		if(src == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("src cannot be null."));
		}
		if(dest == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("dest cannot be null."));
		}
		try {
			spine_support_utils_Array.copy(src,0,dest,0,8);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			throw haxe_Exception.thrown(new spine_support_error_ArrayIndexOutOfBoundsException("Src: " + src.length + ", " + 0 + ", dest: " + dest.length + ", " + 0 + ", count: " + 8));
		}
		var src = this.offset;
		var dest = copy.offset;
		if(src == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("src cannot be null."));
		}
		if(dest == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("dest cannot be null."));
		}
		try {
			spine_support_utils_Array.copy(src,0,dest,0,8);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			throw haxe_Exception.thrown(new spine_support_error_ArrayIndexOutOfBoundsException("Src: " + src.length + ", " + 0 + ", dest: " + dest.length + ", " + 0 + ", count: " + 8));
		}
		var _this = copy.color;
		var color = this.color;
		_this.r = color.r;
		_this.g = color.g;
		_this.b = color.b;
		_this.a = color.a;
		return copy;
	}
	,__class__: spine_attachments_RegionAttachment
});
var spine_support_error_ArrayIndexOutOfBoundsException = function(message) {
	if(message == null) {
		message = "";
	}
	spine_support_error_Error.call(this,message);
	this.name = "ArrayIndexOutOfBoundsException";
};
$hxClasses["spine.support.error.ArrayIndexOutOfBoundsException"] = spine_support_error_ArrayIndexOutOfBoundsException;
spine_support_error_ArrayIndexOutOfBoundsException.__name__ = "spine.support.error.ArrayIndexOutOfBoundsException";
spine_support_error_ArrayIndexOutOfBoundsException.__super__ = spine_support_error_Error;
spine_support_error_ArrayIndexOutOfBoundsException.prototype = $extend(spine_support_error_Error.prototype,{
	__class__: spine_support_error_ArrayIndexOutOfBoundsException
});
var spine_support_error_IllegalStateException = function(message) {
	if(message == null) {
		message = "";
	}
	spine_support_error_Error.call(this,message);
	this.name = "IllegalStateException";
};
$hxClasses["spine.support.error.IllegalStateException"] = spine_support_error_IllegalStateException;
spine_support_error_IllegalStateException.__name__ = "spine.support.error.IllegalStateException";
spine_support_error_IllegalStateException.__super__ = spine_support_error_Error;
spine_support_error_IllegalStateException.prototype = $extend(spine_support_error_Error.prototype,{
	__class__: spine_support_error_IllegalStateException
});
var spine_support_error_RuntimeException = function(message) {
	if(message == null) {
		message = "";
	}
	spine_support_error_Error.call(this,message);
	this.name = "RuntimeException";
};
$hxClasses["spine.support.error.RuntimeException"] = spine_support_error_RuntimeException;
spine_support_error_RuntimeException.__name__ = "spine.support.error.RuntimeException";
spine_support_error_RuntimeException.__super__ = spine_support_error_Error;
spine_support_error_RuntimeException.prototype = $extend(spine_support_error_Error.prototype,{
	__class__: spine_support_error_RuntimeException
});
var spine_support_extensions_ArrayExtensions = function() { };
$hxClasses["spine.support.extensions.ArrayExtensions"] = spine_support_extensions_ArrayExtensions;
spine_support_extensions_ArrayExtensions.__name__ = "spine.support.extensions.ArrayExtensions";
spine_support_extensions_ArrayExtensions.setSize = function(array,size) {
	var len = array.length;
	if(len > size) {
		array.splice(size,size - len);
	} else if(len < size) {
		var dArray = array;
		dArray[size - 1] = null;
	}
	return array;
};
spine_support_extensions_ArrayExtensions.add = function(array,item) {
	array.push(item);
};
spine_support_extensions_ArrayExtensions.removeIndex = function(array,index) {
	array.splice(index,1);
};
spine_support_extensions_ArrayExtensions.unsafeGet = function(array,index) {
	return array[index];
};
spine_support_extensions_ArrayExtensions.unsafeSet = function(array,index,value) {
	array[index] = value;
};
var spine_support_extensions_FileExtensions = function() { };
$hxClasses["spine.support.extensions.FileExtensions"] = spine_support_extensions_FileExtensions;
spine_support_extensions_FileExtensions.__name__ = "spine.support.extensions.FileExtensions";
spine_support_extensions_FileExtensions.nameWithoutExtension = function(file) {
	var name = file.path;
	var slashIndex = name.lastIndexOf("/");
	if(slashIndex != -1) {
		name = name.substring(slashIndex);
	}
	var dotIndex = name.lastIndexOf(".");
	if(dotIndex != -1) {
		name = name.substring(0,dotIndex);
	}
	return name;
};
var spine_support_extensions_SpineExtensions = function() { };
$hxClasses["spine.support.extensions.SpineExtensions"] = spine_support_extensions_SpineExtensions;
spine_support_extensions_SpineExtensions.__name__ = "spine.support.extensions.SpineExtensions";
spine_support_extensions_SpineExtensions.equals = function(anim1,anim2) {
	return anim1 == anim2;
};
spine_support_extensions_SpineExtensions.getHashCode = function(anim) {
	return anim.hashCode;
};
var spine_support_extensions_StringExtensions = function() { };
$hxClasses["spine.support.extensions.StringExtensions"] = spine_support_extensions_StringExtensions;
spine_support_extensions_StringExtensions.__name__ = "spine.support.extensions.StringExtensions";
spine_support_extensions_StringExtensions.equals = function(str0,str1) {
	return str0 == str1;
};
spine_support_extensions_StringExtensions.getHashCode = function(str) {
	var hash = 0;
	var chr;
	if(str.length == 0) {
		return hash;
	}
	var _g = 0;
	var _g1 = str.length;
	while(_g < _g1) {
		var i = _g++;
		chr = HxOverrides.cca(str,i);
		hash = (hash << 5) - hash + chr;
	}
	return hash;
};
var spine_support_files_FileHandle = function() { };
$hxClasses["spine.support.files.FileHandle"] = spine_support_files_FileHandle;
spine_support_files_FileHandle.__name__ = "spine.support.files.FileHandle";
spine_support_files_FileHandle.__isInterface__ = true;
spine_support_files_FileHandle.prototype = {
	__class__: spine_support_files_FileHandle
};
var spine_support_graphics_Color = function(r,g,b,a) {
	if(a == null) {
		a = 0;
	}
	if(b == null) {
		b = 0;
	}
	if(g == null) {
		g = 0;
	}
	if(r == null) {
		r = 0;
	}
	this.r = r;
	this.g = g;
	this.b = b;
	this.a = a;
};
$hxClasses["spine.support.graphics.Color"] = spine_support_graphics_Color;
spine_support_graphics_Color.__name__ = "spine.support.graphics.Color";
spine_support_graphics_Color.valueOf = function(hex) {
	if(hex.charAt(0) == "#") {
		hex = hex.substring(1);
	}
	if(HxOverrides.substr(hex,0,2) == "0x") {
		hex = hex.substring(2);
	}
	var r = Std.parseInt("0x" + hex.substring(0,2));
	var g = Std.parseInt("0x" + hex.substring(2,4));
	var b = Std.parseInt("0x" + hex.substring(4,6));
	var a = hex.length != 8 ? 255 : Std.parseInt("0x" + hex.substring(6,8));
	return new spine_support_graphics_Color(r / 255.0,g / 255.0,b / 255.0,a / 255.0);
};
spine_support_graphics_Color.valueOfIntoColor = function(hex,intoColor) {
	if(hex.charAt(0) == "#") {
		hex = hex.substring(1);
	}
	if(HxOverrides.substr(hex,0,2) == "0x") {
		hex = hex.substring(2);
	}
	var r = Std.parseInt("0x" + hex.substring(0,2));
	var g = Std.parseInt("0x" + hex.substring(2,4));
	var b = Std.parseInt("0x" + hex.substring(4,6));
	var a = hex.length != 8 ? 255 : Std.parseInt("0x" + hex.substring(6,8));
	if(intoColor == null) {
		intoColor = new spine_support_graphics_Color(r / 255.0,g / 255.0,b / 255.0,a / 255.0);
	} else {
		intoColor.r = r / 255.0;
		intoColor.g = g / 255.0;
		intoColor.b = b / 255.0;
		intoColor.a = a / 255.0;
	}
	return intoColor;
};
spine_support_graphics_Color.prototype = {
	setColor: function(color) {
		this.r = color.r;
		this.g = color.g;
		this.b = color.b;
		this.a = color.a;
		return this;
	}
	,set: function(r,g,b,a) {
		this.r = r;
		this.g = g;
		this.b = b;
		this.a = a;
		return this;
	}
	,setRGB: function(r,g,b) {
		this.r = r;
		this.g = g;
		this.b = b;
		return this;
	}
	,add: function(r,g,b,a) {
		this.r += r;
		this.g += g;
		this.b += b;
		this.a += a;
		return this;
	}
	,mul: function(r,g,b,a) {
		this.r *= r;
		this.g *= g;
		this.b *= b;
		this.a *= a;
		return this;
	}
	,setRgba888: function(value) {
		this.r = ((value & -16777216) >>> 24) / 255.0;
		this.g = ((value & 16711680) >>> 16) / 255.0;
		this.b = ((value & 65280) >>> 8) / 255.0;
		this.a = (value & 255) / 255.0;
		return this;
	}
	,__class__: spine_support_graphics_Color
};
var spine_support_graphics_TextureAtlas = function(object,textureLoader) {
	this.regions = [];
	this.pages = [];
	if(object == null) {
		return;
	}
	this.load(object == null ? "null" : "" + object,textureLoader);
};
$hxClasses["spine.support.graphics.TextureAtlas"] = spine_support_graphics_TextureAtlas;
spine_support_graphics_TextureAtlas.__name__ = "spine.support.graphics.TextureAtlas";
spine_support_graphics_TextureAtlas.prototype = {
	load: function(atlasText,textureLoader) {
		if(textureLoader == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("textureLoader cannot be null."));
		}
		this.textureLoader = textureLoader;
		var reader = new spine_support_graphics_Reader(atlasText);
		var tuple = [null,null,null,null];
		var page = null;
		while(true) {
			var line = reader.readLine();
			if(line == null) {
				break;
			}
			line = reader.trim(line);
			if(line.length == 0) {
				page = null;
			} else if(page == null) {
				page = new spine_support_graphics_AtlasPage();
				page.name = line;
				page.uWrap = spine_support_graphics_TextureWrap.clampToEdge;
				page.vWrap = spine_support_graphics_TextureWrap.clampToEdge;
				var key = reader.nextLineKey();
				while(key != null) {
					switch(key) {
					case "filter":
						reader.readTuple(tuple);
						page.minFilter = tuple[0];
						page.magFilter = tuple[1];
						break;
					case "format":
						page.format = reader.readValue();
						break;
					case "repeat":
						var direction = reader.readValue();
						if(direction == "x") {
							page.uWrap = spine_support_graphics_TextureWrap.repeat;
						} else if(direction == "y") {
							page.vWrap = spine_support_graphics_TextureWrap.repeat;
						} else if(direction == "xy") {
							page.uWrap = page.vWrap = spine_support_graphics_TextureWrap.repeat;
						}
						break;
					case "scale":
						reader.readTuple(tuple);
						page.scale = parseFloat(tuple[0]);
						break;
					case "size":
						reader.readTuple(tuple);
						page.width = Std.parseInt(tuple[0]);
						page.height = Std.parseInt(tuple[1]);
						break;
					default:
						reader.readLine();
					}
					key = reader.nextLineKey();
				}
				if(page.format == null) {
					page.format = "rgba8888";
				}
				textureLoader.loadPage(page,line);
				this.pages[this.pages.length] = page;
			} else {
				var region = new spine_support_graphics_AtlasRegion();
				region.name = line;
				region.page = page;
				var x = 0;
				var y = 0;
				var width = 0;
				var height = 0;
				var originalWidth = -1;
				var originalHeight = -1;
				var key1 = reader.nextLineKey();
				while(key1 != null) {
					switch(key1) {
					case "bounds":
						reader.readTuple(tuple);
						x = Std.parseInt(tuple[0]);
						y = Std.parseInt(tuple[1]);
						width = Std.parseInt(tuple[2]);
						height = Std.parseInt(tuple[3]);
						break;
					case "index":
						region.index = Std.parseInt(reader.readValue());
						break;
					case "offset":
						reader.readTuple(tuple);
						region.offsetX = Std.parseInt(tuple[0]);
						region.offsetY = Std.parseInt(tuple[1]);
						break;
					case "orig":
						reader.readTuple(tuple);
						originalWidth = Std.parseInt(tuple[0]);
						originalHeight = Std.parseInt(tuple[1]);
						break;
					case "pad":
						reader.readTuple(tuple);
						region.pads = [Std.parseInt(tuple[0]),Std.parseInt(tuple[1]),Std.parseInt(tuple[2]),Std.parseInt(tuple[3])];
						break;
					case "rotate":
						var value = reader.readValue();
						var rotate = value == "true" || value == "90";
						region.degrees = rotate ? 90 : 0;
						break;
					case "size":
						reader.readTuple(tuple);
						width = Std.parseInt(tuple[0]);
						height = Std.parseInt(tuple[1]);
						break;
					case "split":
						reader.readTuple(tuple);
						region.splits = [Std.parseInt(tuple[0]),Std.parseInt(tuple[1]),Std.parseInt(tuple[2]),Std.parseInt(tuple[3])];
						break;
					case "xy":
						reader.readTuple(tuple);
						x = Std.parseInt(tuple[0]);
						y = Std.parseInt(tuple[1]);
						break;
					default:
						reader.readLine();
					}
					key1 = reader.nextLineKey();
				}
				region.u = x / page.width;
				region.v = y / page.height;
				if(region.degrees == 90) {
					region.u2 = (x + height) / page.width;
					region.v2 = (y + width) / page.height;
				} else {
					region.u2 = (x + width) / page.width;
					region.v2 = (y + height) / page.height;
				}
				region.x = x;
				region.y = y;
				region.width = Math.abs(width);
				region.height = Math.abs(height);
				region.originalWidth = originalWidth != -1 ? originalWidth : region.width;
				region.originalHeight = originalHeight != -1 ? originalHeight : region.height;
				if(region.degrees == 90) {
					region.packedWidth = region.originalHeight;
					region.packedHeight = region.originalWidth;
				} else {
					region.packedWidth = region.originalWidth;
					region.packedHeight = region.originalHeight;
				}
				textureLoader.loadRegion(region);
				this.regions[this.regions.length] = region;
			}
		}
	}
	,findRegion: function(name) {
		var i = 0;
		var n = this.regions.length;
		while(i < n) {
			if(this.regions[i].name == name) {
				return this.regions[i];
			}
			++i;
		}
		return null;
	}
	,dispose: function() {
		var i = 0;
		var n = this.pages.length;
		while(i < n) {
			this.textureLoader.unloadPage(this.pages[i]);
			++i;
		}
	}
	,__class__: spine_support_graphics_TextureAtlas
};
var spine_support_graphics_Reader = function(text) {
	this.lines = StringTools.replace(StringTools.replace(StringTools.trim(text),"\r\n","\n"),"\r","\n").split("\n");
	this.index = 0;
};
$hxClasses["spine.support.graphics.Reader"] = spine_support_graphics_Reader;
spine_support_graphics_Reader.__name__ = "spine.support.graphics.Reader";
spine_support_graphics_Reader.prototype = {
	trim: function(value) {
		return StringTools.trim(value);
	}
	,readLine: function() {
		if(this.index >= this.lines.length) {
			return null;
		}
		return this.lines[this.index++];
	}
	,nextLineKey: function() {
		if(this.index >= this.lines.length) {
			return null;
		} else {
			var line = this.lines[this.index];
			var colon = line.indexOf(":");
			if(colon != -1) {
				return StringTools.trim(line.substring(0,colon));
			} else {
				return null;
			}
		}
	}
	,readValue: function() {
		var line = this.readLine();
		var colon = line.indexOf(":");
		if(colon == -1) {
			throw haxe_Exception.thrown(new spine_support_error_Error("Invalid line: " + line));
		}
		return this.trim(line.substring(colon + 1));
	}
	,readTuple: function(tuple) {
		var line = this.readLine();
		var colon = line.indexOf(":");
		if(colon == -1) {
			throw haxe_Exception.thrown(new spine_support_error_Error("Invalid line: " + line));
		}
		var i = 0;
		var lastMatch = colon + 1;
		while(i < 3) {
			var comma = line.indexOf(",",lastMatch);
			if(comma == -1) {
				break;
			}
			tuple[i] = this.trim(HxOverrides.substr(line,lastMatch,comma - lastMatch));
			lastMatch = comma + 1;
			++i;
		}
		tuple[i] = this.trim(line.substring(lastMatch));
		return i + 1;
	}
	,__class__: spine_support_graphics_Reader
};
var spine_support_graphics_AtlasPage = function() {
	this.scale = 1.0;
	this.height = 0;
	this.width = 0;
};
$hxClasses["spine.support.graphics.AtlasPage"] = spine_support_graphics_AtlasPage;
spine_support_graphics_AtlasPage.__name__ = "spine.support.graphics.AtlasPage";
spine_support_graphics_AtlasPage.prototype = {
	toString: function() {
		return "" + Std.string({ name : this.name, format : this.format, width : this.width, height : this.height, scale : this.scale});
	}
	,__class__: spine_support_graphics_AtlasPage
};
var spine_support_graphics_TextureRegion = function() {
	this.v2 = 0;
	this.u2 = 0;
	this.v = 0;
	this.u = 0;
};
$hxClasses["spine.support.graphics.TextureRegion"] = spine_support_graphics_TextureRegion;
spine_support_graphics_TextureRegion.__name__ = "spine.support.graphics.TextureRegion";
spine_support_graphics_TextureRegion.prototype = {
	getU: function() {
		return this.u;
	}
	,getV: function() {
		return this.v;
	}
	,getU2: function() {
		return this.u2;
	}
	,getV2: function() {
		return this.v2;
	}
	,__class__: spine_support_graphics_TextureRegion
};
var spine_support_graphics_AtlasRegion = function() {
	this.degrees = 0;
	this.index = -1;
	this.originalHeight = 0;
	this.originalWidth = 0;
	this.offsetY = 0;
	this.offsetX = 0;
	this.packedHeight = 0;
	this.packedWidth = 0;
	this.height = 0;
	this.width = 0;
	this.y = 0;
	this.x = 0;
	spine_support_graphics_TextureRegion.call(this);
};
$hxClasses["spine.support.graphics.AtlasRegion"] = spine_support_graphics_AtlasRegion;
spine_support_graphics_AtlasRegion.__name__ = "spine.support.graphics.AtlasRegion";
spine_support_graphics_AtlasRegion.__super__ = spine_support_graphics_TextureRegion;
spine_support_graphics_AtlasRegion.prototype = $extend(spine_support_graphics_TextureRegion.prototype,{
	get_rotate: function() {
		return this.degrees == 90;
	}
	,set_rotate: function(rotate) {
		this.degrees = rotate ? 90 : 0;
		return rotate;
	}
	,getTexture: function() {
		return this;
	}
	,__class__: spine_support_graphics_AtlasRegion
	,__properties__: {set_rotate:"set_rotate",get_rotate:"get_rotate"}
});
var spine_support_graphics_AtlasRegionTexture = {};
spine_support_graphics_AtlasRegionTexture.getWidth = function(this1) {
	return this1.page.width;
};
spine_support_graphics_AtlasRegionTexture.getHeight = function(this1) {
	return this1.page.height;
};
var spine_support_graphics_TextureLoader = function() { };
$hxClasses["spine.support.graphics.TextureLoader"] = spine_support_graphics_TextureLoader;
spine_support_graphics_TextureLoader.__name__ = "spine.support.graphics.TextureLoader";
spine_support_graphics_TextureLoader.__isInterface__ = true;
spine_support_graphics_TextureLoader.prototype = {
	__class__: spine_support_graphics_TextureLoader
};
var spine_support_graphics_TextureWrap = function(ordinal,name) {
	this.ordinal = ordinal;
	this.name = name;
};
$hxClasses["spine.support.graphics.TextureWrap"] = spine_support_graphics_TextureWrap;
spine_support_graphics_TextureWrap.__name__ = "spine.support.graphics.TextureWrap";
spine_support_graphics_TextureWrap.prototype = {
	__class__: spine_support_graphics_TextureWrap
};
var spine_support_math_MathUtils = function() { };
$hxClasses["spine.support.math.MathUtils"] = spine_support_math_MathUtils;
spine_support_math_MathUtils.__name__ = "spine.support.math.MathUtils";
spine_support_math_MathUtils.sinDeg = function(degrees) {
	return Math.sin(degrees * spine_support_math_MathUtils.degRad);
};
spine_support_math_MathUtils.cosDeg = function(degrees) {
	return Math.cos(degrees * spine_support_math_MathUtils.degRad);
};
spine_support_math_MathUtils.sin = function(angle) {
	return Math.sin(angle);
};
spine_support_math_MathUtils.cos = function(angle) {
	return Math.cos(angle);
};
spine_support_math_MathUtils.clamp = function(value,min,max) {
	if(value < min) {
		return min;
	}
	if(value > max) {
		return max;
	}
	return value;
};
spine_support_math_MathUtils.max = function(val1,val2) {
	return Math.max(val1,val2);
};
spine_support_math_MathUtils.min = function(val1,val2) {
	return Math.min(val1,val2);
};
spine_support_math_MathUtils.signum = function(val) {
	if(val > 0) {
		return 1;
	} else if(val < 0) {
		return -1;
	} else {
		return 0;
	}
};
var spine_support_math_Matrix3 = function() {
	var length = 9;
	if(length == null) {
		length = 0;
	}
	var len = length | 0;
	var capacity = len != 0 ? len : 16;
	var this1 = [];
	var array = this1;
	if(length > 0) {
		var len1 = array.length;
		if(len1 > len) {
			array.splice(len,len - len1);
		} else if(len1 < len) {
			while(len1 < len) {
				array.push(0);
				++len1;
			}
		}
	}
	this.val = array;
};
$hxClasses["spine.support.math.Matrix3"] = spine_support_math_Matrix3;
spine_support_math_Matrix3.__name__ = "spine.support.math.Matrix3";
spine_support_math_Matrix3.prototype = {
	__class__: spine_support_math_Matrix3
};
var spine_support_math_Vector2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.y = 0;
	this.x = 0;
	this.x = x;
	this.y = y;
};
$hxClasses["spine.support.math.Vector2"] = spine_support_math_Vector2;
spine_support_math_Vector2.__name__ = "spine.support.math.Vector2";
spine_support_math_Vector2.prototype = {
	set: function(x,y) {
		this.x = x;
		this.y = y;
		return this;
	}
	,__class__: spine_support_math_Vector2
};
var spine_support_utils_AnimationStateMap = {};
spine_support_utils_AnimationStateMap._new = function(initialCapacity,loadFactor) {
	if(loadFactor == null) {
		loadFactor = 0.8;
	}
	if(initialCapacity == null) {
		initialCapacity = 51;
	}
	var this1 = new haxe_ds_IntMap();
	return this1;
};
spine_support_utils_AnimationStateMap.get = function(this1,key,defaultValue) {
	if(defaultValue == null) {
		defaultValue = 0.0;
	}
	var key1 = key.getHashCode();
	var entries = this1.h[key1];
	var result = defaultValue;
	if(entries != null) {
		var _g = 0;
		var _g1 = entries.length;
		while(_g < _g1) {
			var i = _g++;
			var entry = entries[i];
			if(entry.key.equals(key)) {
				result = entry.value;
				break;
			}
		}
	}
	return result;
};
spine_support_utils_AnimationStateMap.clear = function(this1) {
	var keys = [];
	var key = this1.keys();
	while(key.hasNext()) {
		var key1 = key.next();
		keys.push(key1);
	}
	var _g = 0;
	while(_g < keys.length) {
		var key = keys[_g];
		++_g;
		this1.remove(key);
	}
};
spine_support_utils_AnimationStateMap.put = function(this1,key,value) {
	var hashCode = key.getHashCode();
	var entries = this1.h[hashCode];
	if(entries == null) {
		entries = [];
		this1.h[hashCode] = entries;
	}
	var i = 0;
	var didSet = false;
	var _g = 0;
	var _g1 = entries;
	while(_g < _g1.length) {
		var entry = _g1[_g];
		++_g;
		if(entry.key.equals(key)) {
			entries[i].key = key;
			entries[i].value = value;
			didSet = true;
			break;
		}
		++i;
	}
	if(!didSet) {
		entries.push(new spine_support_utils__$AnimationStateMap_Entry(key,value));
	}
};
spine_support_utils_AnimationStateMap.entries = function(this1) {
	var entries = [];
	var entryList = this1.iterator();
	while(entryList.hasNext()) {
		var entryList1 = entryList.next();
		if(entryList1 != null) {
			var _g = 0;
			var _g1 = entryList1;
			while(_g < _g1.length) {
				var entry = _g1[_g];
				++_g;
				entries.push(entry);
			}
		}
	}
	return entries;
};
spine_support_utils_AnimationStateMap.keys = function(this1) {
	var keys = [];
	var entryList = this1.iterator();
	while(entryList.hasNext()) {
		var entryList1 = entryList.next();
		var _g = 0;
		var _g1 = entryList1;
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			keys.push(entry.key);
		}
	}
	return keys;
};
var spine_support_utils__$AnimationStateMap_Entry = function(key,value) {
	this.key = key;
	this.value = value;
};
$hxClasses["spine.support.utils._AnimationStateMap.Entry"] = spine_support_utils__$AnimationStateMap_Entry;
spine_support_utils__$AnimationStateMap_Entry.__name__ = "spine.support.utils._AnimationStateMap.Entry";
spine_support_utils__$AnimationStateMap_Entry.prototype = {
	__class__: spine_support_utils__$AnimationStateMap_Entry
};
var spine_support_utils_Array = {};
spine_support_utils_Array.__properties__ = {set_size:"set_size",get_size:"get_size",set_ordered:"set_ordered",get_ordered:"get_ordered",get_items:"get_items"};
spine_support_utils_Array.copy = function(src,srcPos,dest,destPos,length) {
	var val;
	var srcIndex = srcPos;
	var destIndex = destPos;
	var end = length + srcPos;
	while(srcIndex < end) {
		val = src[srcIndex];
		dest[destIndex] = val;
		++srcIndex;
		++destIndex;
	}
};
spine_support_utils_Array.copyFloats = function(src,srcPos,dest,destPos,length) {
	var val;
	var srcIndex = srcPos;
	var destIndex = destPos;
	var end = length + srcPos;
	while(srcIndex < end) {
		val = src[srcIndex];
		dest[destIndex] = val;
		++srcIndex;
		++destIndex;
	}
};
spine_support_utils_Array.getLengthOf = function(array) {
	return array.length;
};
spine_support_utils_Array.create = function(length) {
	if(length == null) {
		length = 0;
	}
	var len = length | 0;
	var capacity = len != 0 ? len : 16;
	var this1 = [];
	var array = this1;
	if(length != 0) {
		var len1 = array.length;
		if(len1 > len) {
			array.splice(len,len - len1);
		} else if(len1 < len) {
			array[len - 1] = null;
		}
	}
	return array;
};
spine_support_utils_Array.createFloatArray2D = function(length,length2) {
	if(length2 == null) {
		length2 = 0;
	}
	if(length == null) {
		length = 0;
	}
	var len = length | 0;
	var len2 = length2 | 0;
	var capacity = len != 0 ? len : 16;
	var this1 = [];
	var array = this1;
	if(length > 0) {
		var len1 = array.length;
		if(len1 > len) {
			array.splice(len,len - len1);
		} else if(len1 < len) {
			array[len - 1] = null;
		}
	}
	var _g = 0;
	var _g1 = len2;
	while(_g < _g1) {
		var i = _g++;
		var length = length2;
		if(length == null) {
			length = 0;
		}
		var len = length | 0;
		var capacity = len != 0 ? len : 16;
		var this1 = [];
		var array1 = this1;
		if(length > 0) {
			var len1 = array1.length;
			if(len1 > len) {
				array1.splice(len,len - len1);
			} else if(len1 < len) {
				while(len1 < len) {
					array1.push(0);
					++len1;
				}
			}
		}
		array[i] = array1;
	}
	return array;
};
spine_support_utils_Array.createIntArray2D = function(length,length2) {
	if(length2 == null) {
		length2 = 0;
	}
	if(length == null) {
		length = 0;
	}
	var len = length | 0;
	var len2 = length2 | 0;
	var capacity = len != 0 ? len : 16;
	var this1 = [];
	var array = this1;
	if(length > 0) {
		var len1 = array.length;
		if(len1 > len) {
			array.splice(len,len - len1);
		} else if(len1 < len) {
			array[len - 1] = null;
		}
	}
	var _g = 0;
	var _g1 = len2;
	while(_g < _g1) {
		var i = _g++;
		var length = length2;
		if(length == null) {
			length = 0;
		}
		var len = length | 0;
		var capacity = len != 0 ? len : 16;
		var this1 = [];
		var array1 = this1;
		if(length != 0) {
			var len1 = array1.length;
			if(len1 > len) {
				array1.splice(len,len - len1);
			} else if(len1 < len) {
				while(len1 < len) {
					array1.push(0);
					++len1;
				}
			}
		}
		array[i] = array1;
	}
	return array;
};
spine_support_utils_Array._new = function(capacity) {
	if(capacity == null) {
		capacity = 16;
	}
	var this1 = [];
	return this1;
};
spine_support_utils_Array.get_items = function(this1) {
	return this1;
};
spine_support_utils_Array.get_ordered = function(this1) {
	return false;
};
spine_support_utils_Array.set_ordered = function(this1,ordered) {
	return ordered;
};
spine_support_utils_Array.get_size = function(this1) {
	return this1.length;
};
spine_support_utils_Array.set_size = function(this1,size) {
	var len = this1.length;
	if(len > size) {
		this1.splice(size,size - len);
	} else if(len < size) {
		this1[size - 1] = null;
	}
	return this1.length;
};
spine_support_utils_Array.shrink = function(this1) {
	return this1;
};
spine_support_utils_Array.clear = function(this1) {
	this1.splice(0,this1.length);
};
spine_support_utils_Array.first = function(this1) {
	if(this1.length > 0) {
		return this1[0];
	} else {
		return null;
	}
};
spine_support_utils_Array.peek = function(this1) {
	if(this1.length == 0) {
		return null;
	} else {
		return this1[this1.length - 1];
	}
};
spine_support_utils_Array.contains = function(this1,value,identity) {
	return this1.indexOf(value) != -1;
};
spine_support_utils_Array.removeValue = function(this1,value,identity) {
	var index = this1.indexOf(value);
	if(index == -1) {
		return false;
	}
	this1.splice(index,1);
	return true;
};
spine_support_utils_Array.setSize = function(this1,size) {
	var len = this1.length;
	if(len > size) {
		this1.splice(size,size - len);
	} else if(len < size) {
		this1[size - 1] = null;
	}
	return this1;
};
spine_support_utils_Array.add = function(this1,item) {
	this1.push(item);
};
spine_support_utils_Array.addAll = function(this1,items,start,count) {
	if(count == null) {
		count = -1;
	}
	if(start == null) {
		start = 0;
	}
	if(count == -1) {
		count = items.length;
	}
	var i = this1.length;
	var len = i + items.length;
	var len1 = this1.length;
	if(len1 > len) {
		this1.splice(len,len - len1);
	} else if(len1 < len) {
		this1[len - 1] = null;
	}
	var val;
	var _g = 0;
	var _g1 = items.length;
	while(_g < _g1) {
		var j = _g++;
		val = items[j];
		this1[i++] = val;
		if(--count <= 0) {
			break;
		}
	}
};
spine_support_utils_Array.get = function(this1,index) {
	return this1[index];
};
spine_support_utils_Array.set = function(this1,index,value) {
	this1[index] = value;
};
spine_support_utils_Array.indexOf = function(this1,value,identity) {
	return this1.indexOf(value);
};
spine_support_utils_Array.removeIndex = function(this1,index) {
	var item = this1[index];
	this1.splice(index,1);
	return item;
};
spine_support_utils_Array.ensureCapacity = function(this1,size) {
	return this1;
};
var spine_support_utils_AttachmentSet = {};
spine_support_utils_AttachmentSet.__properties__ = {get_size:"get_size"};
spine_support_utils_AttachmentSet._new = function() {
	var this1 = new haxe_ds_IntMap();
	return this1;
};
spine_support_utils_AttachmentSet.get = function(this1,key,defaultValue) {
	var entries = this1.h[key.hashCode];
	var result = defaultValue;
	if(entries != null) {
		var _g = 0;
		var _g1 = entries.length;
		while(_g < _g1) {
			var i = _g++;
			var entry = entries[i];
			var object = key;
			var tmp;
			if(object == null) {
				tmp = false;
			} else {
				var result1 = object;
				var other = result1;
				tmp = entry.slotIndex != other.slotIndex ? false : entry.name == other.name;
			}
			if(tmp) {
				result = entry;
				break;
			}
		}
	}
	return result;
};
spine_support_utils_AttachmentSet.clear = function(this1) {
	this1.h = { };
};
spine_support_utils_AttachmentSet.add = function(this1,key) {
	var prevValue = null;
	var hashCode = key.hashCode;
	var entries = this1.h[hashCode];
	if(entries == null) {
		entries = [];
		this1.h[hashCode] = entries;
	} else {
		var _g = 0;
		var _g1 = entries.length;
		while(_g < _g1) {
			var i = _g++;
			var entry = entries[i];
			var object = key;
			var tmp;
			if(object == null) {
				tmp = false;
			} else {
				var result = object;
				var other = result;
				tmp = entry.slotIndex != other.slotIndex ? false : entry.name == other.name;
			}
			if(tmp) {
				prevValue = entry;
				break;
			}
		}
	}
	var i = 0;
	var didSet = false;
	var _g = 0;
	var _g1 = entries;
	while(_g < _g1.length) {
		var entry = _g1[_g];
		++_g;
		var object = key;
		var tmp;
		if(object == null) {
			tmp = false;
		} else {
			var result = object;
			var other = result;
			tmp = entry.slotIndex != other.slotIndex ? false : entry.name == other.name;
		}
		if(tmp) {
			entries[i] = key;
			didSet = true;
			break;
		}
		++i;
	}
	if(!didSet) {
		entries.push(key);
	}
	return prevValue == null;
};
spine_support_utils_AttachmentSet.remove = function(this1,key) {
	var hashCode = key.hashCode;
	var entries = this1.h[hashCode];
	if(entries != null) {
		var len = entries.length;
		var toRemove = null;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			var entry = entries[i];
			var object = key;
			var tmp;
			if(object == null) {
				tmp = false;
			} else {
				var result = object;
				var other = result;
				tmp = entry.slotIndex != other.slotIndex ? false : entry.name == other.name;
			}
			if(tmp) {
				toRemove = entry;
				break;
			}
		}
		if(toRemove != null) {
			if(len == 1) {
				this1.remove(hashCode);
			} else {
				HxOverrides.remove(entries,toRemove);
			}
		}
	}
};
spine_support_utils_AttachmentSet.orderedItems = function(this1) {
	var entries = [];
	var entryList = this1.iterator();
	while(entryList.hasNext()) {
		var entryList1 = entryList.next();
		var _g = 0;
		var _g1 = entryList1.length;
		while(_g < _g1) {
			var i = _g++;
			entries.push(entryList1[i]);
		}
	}
	return entries;
};
spine_support_utils_AttachmentSet.get_size = function(this1) {
	var numEntries = 0;
	var entryList = this1.iterator();
	while(entryList.hasNext()) {
		var entryList1 = entryList.next();
		var _g = 0;
		var _g1 = entryList1.length;
		while(_g < _g1) {
			var i = _g++;
			++numEntries;
		}
	}
	return numEntries;
};
var spine_support_utils_AttachmentSetEntry = function(key,value) {
	this.key = key;
	this.value = value;
};
$hxClasses["spine.support.utils.AttachmentSetEntry"] = spine_support_utils_AttachmentSetEntry;
spine_support_utils_AttachmentSetEntry.__name__ = "spine.support.utils.AttachmentSetEntry";
spine_support_utils_AttachmentSetEntry.prototype = {
	__class__: spine_support_utils_AttachmentSetEntry
};
var spine_support_utils_BooleanArray = {};
spine_support_utils_BooleanArray.__properties__ = {get_size:"get_size",get_items:"get_items"};
spine_support_utils_BooleanArray.create = function(length) {
	if(length == null) {
		length = 0;
	}
	var len = length | 0;
	var capacity = len != 0 ? len : 16;
	var this1 = [];
	var array = this1;
	if(length != 0) {
		var len1 = array.length;
		if(len1 > len) {
			array.splice(len,len - len1);
		} else if(len1 < len) {
			while(len1 < len) {
				array.push(false);
				++len1;
			}
		}
	}
	return array;
};
spine_support_utils_BooleanArray._new = function(capacity) {
	if(capacity == null) {
		capacity = 16;
	}
	var this1 = [];
	return this1;
};
spine_support_utils_BooleanArray.get_items = function(this1) {
	return this1;
};
spine_support_utils_BooleanArray.get_size = function(this1) {
	return this1.length;
};
spine_support_utils_BooleanArray.shrink = function(this1) {
	return this1;
};
spine_support_utils_BooleanArray.toArray = function(this1) {
	return this1;
};
spine_support_utils_BooleanArray.clear = function(this1) {
	this1.splice(0,this1.length);
};
spine_support_utils_BooleanArray.setSize = function(this1,size) {
	var len = this1.length;
	if(len > size) {
		this1.splice(size,size - len);
	} else if(len < size) {
		while(len < size) {
			this1.push(false);
			++len;
		}
	}
	return this1;
};
spine_support_utils_BooleanArray.add = function(this1,item) {
	this1.push(item);
};
spine_support_utils_BooleanArray.addAll = function(this1,items,start,count) {
	if(count == null) {
		count = -1;
	}
	if(start == null) {
		start = 0;
	}
	if(count == -1) {
		count = items.length;
	}
	var i = this1.length;
	var len = i + items.length;
	var len1 = this1.length;
	if(len1 > len) {
		this1.splice(len,len - len1);
	} else if(len1 < len) {
		while(len1 < len) {
			this1.push(false);
			++len1;
		}
	}
	var _g = 0;
	var _g1 = items;
	while(_g < _g1.length) {
		var item = _g1[_g];
		++_g;
		this1[i++] = item;
		if(--count <= 0) {
			break;
		}
	}
};
spine_support_utils_BooleanArray.get = function(this1,index) {
	return this1[index];
};
spine_support_utils_BooleanArray.set = function(this1,index,value) {
	this1[index] = value;
};
spine_support_utils_BooleanArray.indexOf = function(this1,value,identity) {
	return this1.indexOf(value);
};
spine_support_utils_BooleanArray.removeIndex = function(this1,index) {
	var item = this1[index];
	this1.splice(index,1);
	return item;
};
var spine_support_utils_FastCast = function() { };
$hxClasses["spine.support.utils.FastCast"] = spine_support_utils_FastCast;
spine_support_utils_FastCast.__name__ = "spine.support.utils.FastCast";
spine_support_utils_FastCast.fastCast = function(value,toClass) {
	var result = value;
	return result;
};
var spine_support_utils_FloatArray = {};
spine_support_utils_FloatArray.__properties__ = {get_size:"get_size",get_items:"get_items"};
spine_support_utils_FloatArray.create = function(length) {
	if(length == null) {
		length = 0;
	}
	var len = length | 0;
	var capacity = len != 0 ? len : 16;
	var this1 = [];
	var array = this1;
	if(length > 0) {
		var len1 = array.length;
		if(len1 > len) {
			array.splice(len,len - len1);
		} else if(len1 < len) {
			while(len1 < len) {
				array.push(0);
				++len1;
			}
		}
	}
	return array;
};
spine_support_utils_FloatArray._new = function(capacity) {
	if(capacity == null) {
		capacity = 16;
	}
	var this1 = [];
	return this1;
};
spine_support_utils_FloatArray.get_items = function(this1) {
	return this1;
};
spine_support_utils_FloatArray.get_size = function(this1) {
	return this1.length;
};
spine_support_utils_FloatArray.shrink = function(this1) {
	return this1;
};
spine_support_utils_FloatArray.toArray = function(this1) {
	return this1;
};
spine_support_utils_FloatArray.clear = function(this1) {
	this1.splice(0,this1.length);
};
spine_support_utils_FloatArray.setSize = function(this1,size) {
	var len = this1.length;
	if(len > size) {
		this1.splice(size,size - len);
	} else if(len < size) {
		while(len < size) {
			this1.push(0);
			++len;
		}
	}
	return this1;
};
spine_support_utils_FloatArray.add = function(this1,item) {
	this1.push(item);
};
spine_support_utils_FloatArray.addAll = function(this1,items,start,count) {
	if(count == null) {
		count = -1;
	}
	if(start == null) {
		start = 0;
	}
	if(count == -1) {
		count = items.length;
	}
	var i = this1.length;
	var len = i + items.length;
	var len1 = this1.length;
	if(len1 > len) {
		this1.splice(len,len - len1);
	} else if(len1 < len) {
		while(len1 < len) {
			this1.push(0);
			++len1;
		}
	}
	var _g = 0;
	var _g1 = items;
	while(_g < _g1.length) {
		var item = _g1[_g];
		++_g;
		this1[i++] = item;
		if(--count <= 0) {
			break;
		}
	}
};
spine_support_utils_FloatArray.get = function(this1,index) {
	return this1[index];
};
spine_support_utils_FloatArray.set = function(this1,index,value) {
	this1[index] = value;
};
spine_support_utils_FloatArray.indexOf = function(this1,value,identity) {
	return this1.indexOf(value);
};
spine_support_utils_FloatArray.removeIndex = function(this1,index) {
	var item = this1[index];
	this1.splice(index,1);
	return item;
};
spine_support_utils_FloatArray.fill = function(array,fromIndex,toIndex,val) {
	var _g = fromIndex;
	var _g1 = toIndex;
	while(_g < _g1) {
		var i = _g++;
		array[i] = val;
	}
};
var spine_support_utils_IntArray = {};
spine_support_utils_IntArray.__properties__ = {get_size:"get_size",get_items:"get_items"};
spine_support_utils_IntArray.create = function(length) {
	if(length == null) {
		length = 0;
	}
	var len = length | 0;
	var capacity = len != 0 ? len : 16;
	var this1 = [];
	var array = this1;
	if(length != 0) {
		var len1 = array.length;
		if(len1 > len) {
			array.splice(len,len - len1);
		} else if(len1 < len) {
			while(len1 < len) {
				array.push(0);
				++len1;
			}
		}
	}
	return array;
};
spine_support_utils_IntArray._new = function(capacity) {
	if(capacity == null) {
		capacity = 16;
	}
	var this1 = [];
	return this1;
};
spine_support_utils_IntArray.get_items = function(this1) {
	return this1;
};
spine_support_utils_IntArray.get_size = function(this1) {
	return this1.length;
};
spine_support_utils_IntArray.first = function(this1) {
	return this1[0];
};
spine_support_utils_IntArray.shrink = function(this1) {
	return this1;
};
spine_support_utils_IntArray.toArray = function(this1) {
	return this1;
};
spine_support_utils_IntArray.clear = function(this1) {
	this1.splice(0,this1.length);
};
spine_support_utils_IntArray.setSize = function(this1,size) {
	var len = this1.length;
	if(len > size) {
		this1.splice(size,size - len);
	} else if(len < size) {
		while(len < size) {
			this1.push(0);
			++len;
		}
	}
	return this1;
};
spine_support_utils_IntArray.add = function(this1,item) {
	this1.push(item);
};
spine_support_utils_IntArray.addAll = function(this1,items,start,count) {
	if(count == null) {
		count = -1;
	}
	if(start == null) {
		start = 0;
	}
	if(count == -1) {
		count = items.length;
	}
	var i = this1.length;
	var len = i + items.length;
	var len1 = this1.length;
	if(len1 > len) {
		this1.splice(len,len - len1);
	} else if(len1 < len) {
		while(len1 < len) {
			this1.push(0);
			++len1;
		}
	}
	var _g = 0;
	var _g1 = items;
	while(_g < _g1.length) {
		var item = _g1[_g];
		++_g;
		this1[i++] = item;
		if(--count <= 0) {
			break;
		}
	}
};
spine_support_utils_IntArray.get = function(this1,index) {
	return this1[index];
};
spine_support_utils_IntArray.set = function(this1,index,value) {
	this1[index] = value;
};
spine_support_utils_IntArray.indexOf = function(this1,value,identity) {
	return this1.indexOf(value);
};
spine_support_utils_IntArray.removeIndex = function(this1,index) {
	var item = this1[index];
	this1.splice(index,1);
	return item;
};
spine_support_utils_IntArray.ensureCapacity = function(this1,size) {
	return this1;
};
var spine_support_utils_JsonReader = function() {
};
$hxClasses["spine.support.utils.JsonReader"] = spine_support_utils_JsonReader;
spine_support_utils_JsonReader.__name__ = "spine.support.utils.JsonReader";
spine_support_utils_JsonReader.prototype = {
	parse: function(file) {
		return new spine_support_utils_JsonDynamic(JSON.parse(file.getContent()));
	}
	,__class__: spine_support_utils_JsonReader
};
var spine_support_utils_JsonValue = function() { };
$hxClasses["spine.support.utils.JsonValue"] = spine_support_utils_JsonValue;
spine_support_utils_JsonValue.__name__ = "spine.support.utils.JsonValue";
spine_support_utils_JsonValue.__isInterface__ = true;
spine_support_utils_JsonValue.prototype = {
	__class__: spine_support_utils_JsonValue
	,__properties__: {get_child:"get_child",get_next:"get_next",get_size:"get_size",get_name:"get_name"}
};
var spine_support_utils_JsonDynamic = function(data) {
	this.data = data;
};
$hxClasses["spine.support.utils.JsonDynamic"] = spine_support_utils_JsonDynamic;
spine_support_utils_JsonDynamic.__name__ = "spine.support.utils.JsonDynamic";
spine_support_utils_JsonDynamic.__interfaces__ = [spine_support_utils_JsonValue];
spine_support_utils_JsonDynamic.prototype = {
	toString: function() {
		return "JsonDynamic:" + Std.string(this.data);
	}
	,has: function(key) {
		return this.get(key) != null;
	}
	,require: function(key) {
		return this.get(key);
	}
	,get: function(key) {
		if(((this.data) instanceof Array)) {
			return null;
		} else if(Object.prototype.hasOwnProperty.call(this.data,key)) {
			return new spine_support_utils_JsonDynamic(Reflect.field(this.data,key));
		} else {
			return null;
		}
	}
	,getAtIndex: function(index) {
		if(((this.data) instanceof Array)) {
			return new spine_support_utils_JsonChild(this.data,index);
		} else {
			return null;
		}
	}
	,getChild: function(key) {
		var item = Reflect.field(this.data,key);
		if(item == null) {
			return null;
		} else {
			var value = new spine_support_utils_JsonDynamic(item);
			var child = value.get_child();
			return child;
		}
	}
	,getString: function(key,defaultValue) {
		if(Object.prototype.hasOwnProperty.call(this.data,key)) {
			return Reflect.field(this.data,key);
		} else {
			return defaultValue;
		}
	}
	,getFloat: function(key,defaultValue) {
		if(defaultValue == null) {
			defaultValue = 0;
		}
		if(typeof(key) == "number" && ((key | 0) === key)) {
			if(((this.data) instanceof Array)) {
				return this.data[key];
			} else {
				return defaultValue;
			}
		} else if(Object.prototype.hasOwnProperty.call(this.data,key)) {
			return Reflect.field(this.data,key);
		} else {
			return defaultValue;
		}
	}
	,getInt: function(key,defaultValue) {
		if(defaultValue == null) {
			defaultValue = 0;
		}
		if(Object.prototype.hasOwnProperty.call(this.data,key)) {
			return Reflect.field(this.data,key);
		} else {
			return defaultValue;
		}
	}
	,getBoolean: function(key,defaultValue) {
		if(defaultValue == null) {
			defaultValue = false;
		}
		if(Object.prototype.hasOwnProperty.call(this.data,key)) {
			return Reflect.field(this.data,key);
		} else {
			return defaultValue;
		}
	}
	,asString: function() {
		return this.data;
	}
	,asFloatArray: function() {
		return this.data;
	}
	,asShortArray: function() {
		return this.data;
	}
	,asFloat: function() {
		return this.data;
	}
	,asInt: function() {
		return this.data;
	}
	,isString: function() {
		return typeof(this.data) == "string";
	}
	,isArray: function() {
		return ((this.data) instanceof Array);
	}
	,get_next: function() {
		return null;
	}
	,get_name: function() {
		return null;
	}
	,get_size: function() {
		if(((this.data) instanceof Array)) {
			return this.data.length;
		}
		return Reflect.fields(this.data).length;
	}
	,get_child: function() {
		var item = this.data;
		if(item == null) {
			return null;
		} else if(((item) instanceof Array)) {
			return new spine_support_utils_JsonChild(item,0);
		} else {
			var keys = [];
			var values = [];
			var _g = 0;
			var _g1 = Reflect.fields(item);
			while(_g < _g1.length) {
				var field = _g1[_g];
				++_g;
				keys.push(field);
				values.push(Reflect.field(item,field));
			}
			if(keys.length == 0) {
				return null;
			}
			return new spine_support_utils_JsonChild(values,0,keys);
		}
	}
	,__class__: spine_support_utils_JsonDynamic
	,__properties__: {get_child:"get_child",get_size:"get_size",get_name:"get_name",get_next:"get_next"}
};
var spine_support_utils_JsonChild = function(data,index,keys) {
	this.data = data;
	this.index = index;
	this.keys = keys;
};
$hxClasses["spine.support.utils.JsonChild"] = spine_support_utils_JsonChild;
spine_support_utils_JsonChild.__name__ = "spine.support.utils.JsonChild";
spine_support_utils_JsonChild.__interfaces__ = [spine_support_utils_JsonValue];
spine_support_utils_JsonChild.prototype = {
	toString: function() {
		return "JsonChild:" + this.data[this.index];
	}
	,has: function(key) {
		return this.get(key) != null;
	}
	,require: function(key) {
		return this.get(key);
	}
	,get: function(key) {
		if(Object.prototype.hasOwnProperty.call(this.data[this.index],key)) {
			return new spine_support_utils_JsonDynamic(Reflect.field(this.data[this.index],key));
		} else {
			return null;
		}
	}
	,getAtIndex: function(idx) {
		if(((this.data[this.index]) instanceof Array)) {
			return new spine_support_utils_JsonChild(this.data[this.index],idx);
		} else {
			return null;
		}
	}
	,getChild: function(key) {
		var item = Reflect.field(this.data[this.index],key);
		if(item == null) {
			return null;
		} else {
			return new spine_support_utils_JsonDynamic(item).get_child();
		}
	}
	,getString: function(key,defaultValue) {
		if(Object.prototype.hasOwnProperty.call(this.data[this.index],key)) {
			return Reflect.field(this.data[this.index],key);
		} else {
			return defaultValue;
		}
	}
	,getFloat: function(key,defaultValue) {
		if(defaultValue == null) {
			defaultValue = 0;
		}
		if(typeof(key) == "number" && ((key | 0) === key)) {
			if(((this.data[this.index]) instanceof Array)) {
				return this.data[this.index][key];
			} else {
				return 0;
			}
		} else if(Object.prototype.hasOwnProperty.call(this.data[this.index],key)) {
			return Reflect.field(this.data[this.index],key);
		} else {
			return defaultValue;
		}
	}
	,getInt: function(key,defaultValue) {
		if(defaultValue == null) {
			defaultValue = 0;
		}
		if(Object.prototype.hasOwnProperty.call(this.data[this.index],key)) {
			return Reflect.field(this.data[this.index],key);
		} else {
			return defaultValue;
		}
	}
	,getBoolean: function(key,defaultValue) {
		if(defaultValue == null) {
			defaultValue = false;
		}
		if(Object.prototype.hasOwnProperty.call(this.data[this.index],key)) {
			return Reflect.field(this.data[this.index],key);
		} else {
			return defaultValue;
		}
	}
	,asString: function() {
		return this.data[this.index];
	}
	,asFloat: function() {
		return this.data[this.index];
	}
	,asInt: function() {
		return this.data[this.index];
	}
	,isString: function() {
		return typeof(this.data[this.index]) == "string";
	}
	,isArray: function() {
		return ((this.data[this.index]) instanceof Array);
	}
	,get_next: function() {
		if(this.index < this.data.length - 1) {
			return new spine_support_utils_JsonChild(this.data,this.index + 1,this.keys);
		} else {
			return null;
		}
	}
	,get_name: function() {
		if(this.keys != null) {
			return this.keys[this.index];
		} else {
			return null;
		}
	}
	,get_size: function() {
		return this.data[this.index].length;
	}
	,get_child: function() {
		var item = this.data[this.index];
		if(item == null) {
			return null;
		} else if(((item) instanceof Array)) {
			return new spine_support_utils_JsonChild(item,0);
		} else {
			var keys = [];
			var values = [];
			var _g = 0;
			var _g1 = Reflect.fields(item);
			while(_g < _g1.length) {
				var field = _g1[_g];
				++_g;
				keys.push(field);
				values.push(Reflect.field(item,field));
			}
			if(keys.length == 0) {
				return null;
			}
			return new spine_support_utils_JsonChild(values,0,keys);
		}
	}
	,asFloatArray: function() {
		return this.data[this.index];
	}
	,asShortArray: function() {
		return this.data[this.index];
	}
	,getByIndex: function() {
		return this.data[this.index];
	}
	,__class__: spine_support_utils_JsonChild
	,__properties__: {get_child:"get_child",get_size:"get_size",get_name:"get_name",get_next:"get_next"}
};
var spine_support_utils_ObjectSet = {};
spine_support_utils_ObjectSet._new = function(capacity) {
	if(capacity == null) {
		capacity = 16;
	}
	var this1 = [];
	return this1;
};
spine_support_utils_ObjectSet.clear = function(this1,n) {
	this1.splice(0,this1.length);
};
spine_support_utils_ObjectSet.addAll = function(this1,items) {
	var didAdd = false;
	var _g = 0;
	var _g1 = items.length;
	while(_g < _g1) {
		var i = _g++;
		var item = items[i];
		if(this1.indexOf(item) == -1) {
			didAdd = true;
			this1.push(item);
		}
	}
	return didAdd;
};
spine_support_utils_ObjectSet.contains = function(this1,item) {
	return this1.indexOf(item) != -1;
};
var spine_support_utils_SerializationException = function(message,originalError) {
	if(message == null) {
		message = "";
	}
	if(originalError != null) {
		if(message != "") {
			message += " " + Std.string(originalError);
		} else {
			message = "" + Std.string(originalError);
		}
	}
	spine_support_error_Error.call(this,message);
	this.name = "SerializationException";
};
$hxClasses["spine.support.utils.SerializationException"] = spine_support_utils_SerializationException;
spine_support_utils_SerializationException.__name__ = "spine.support.utils.SerializationException";
spine_support_utils_SerializationException.__super__ = spine_support_error_Error;
spine_support_utils_SerializationException.prototype = $extend(spine_support_error_Error.prototype,{
	__class__: spine_support_utils_SerializationException
});
var spine_support_utils_SnapshotArray = function() {
	this.snapshots = [];
	this.snapshotIndex = -1;
	var this1 = [];
	this.array = this1;
};
$hxClasses["spine.support.utils.SnapshotArray"] = spine_support_utils_SnapshotArray;
spine_support_utils_SnapshotArray.__name__ = "spine.support.utils.SnapshotArray";
spine_support_utils_SnapshotArray.prototype = {
	get_size: function() {
		return this.array.length;
	}
	,begin: function() {
		this.snapshotIndex++;
		var snapshot = this.snapshots[this.snapshotIndex];
		if(snapshot == null) {
			snapshot = [].concat(this.array);
			this.snapshots[this.snapshotIndex] = snapshot;
		} else {
			var size = this.array.length;
			var len = snapshot.length;
			if(len > size) {
				snapshot.splice(size,size - len);
			} else if(len < size) {
				snapshot[size - 1] = null;
			}
			var _g = 0;
			var _g1 = this.array.length;
			while(_g < _g1) {
				var i = _g++;
				snapshot[i] = this.array[i];
			}
		}
		return snapshot;
	}
	,end: function() {
		var snapshot = this.snapshots[this.snapshotIndex];
		this.snapshotIndex--;
		var dynSnapshot = snapshot;
		var _g = 0;
		var _g1 = dynSnapshot.length;
		while(_g < _g1) {
			var i = _g++;
			dynSnapshot[i] = null;
		}
	}
	,removeValue: function(value,identity) {
		var this1 = this.array;
		var index = this1.indexOf(value);
		if(index == -1) {
			return false;
		} else {
			this1.splice(index,1);
			return true;
		}
	}
	,add: function(item) {
		this.array.push(item);
	}
	,clear: function() {
		var this1 = this.array;
		this1.splice(0,this1.length);
	}
	,__class__: spine_support_utils_SnapshotArray
	,__properties__: {get_size:"get_size"}
};
var spine_support_utils_StdEx = function() { };
$hxClasses["spine.support.utils.StdEx"] = spine_support_utils_StdEx;
spine_support_utils_StdEx.__name__ = "spine.support.utils.StdEx";
spine_support_utils_StdEx.parseInt = function(val,base) {
	if(base == 16) {
		return Std.parseInt("0x" + val);
	} else {
		return Std.parseInt(val);
	}
};
var spine_support_utils_StringBuilder = {};
spine_support_utils_StringBuilder._new = function(capacity) {
	var this1 = new StringBuf();
	return this1;
};
spine_support_utils_StringBuilder.$length = function(this1) {
	return this1.b.length;
};
spine_support_utils_StringBuilder.append = function(this1,str) {
	this1.b += str == null ? "null" : "" + str;
};
var spine_utils_SpineUtils = function() {
};
$hxClasses["spine.utils.SpineUtils"] = spine_utils_SpineUtils;
spine_utils_SpineUtils.__name__ = "spine.utils.SpineUtils";
spine_utils_SpineUtils.cosDeg = function(degrees) {
	return Math.cos(degrees * spine_utils_SpineUtils.degRad);
};
spine_utils_SpineUtils.sinDeg = function(degrees) {
	return Math.sin(degrees * spine_utils_SpineUtils.degRad);
};
spine_utils_SpineUtils.cos = function(radians) {
	return Math.cos(radians);
};
spine_utils_SpineUtils.sin = function(radians) {
	return Math.sin(radians);
};
spine_utils_SpineUtils.atan2 = function(y,x) {
	return Math.atan2(y,x);
};
spine_utils_SpineUtils.arraycopy = function(src,srcPos,dest,destPos,length) {
	if(src == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("src cannot be null."));
	}
	if(dest == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("dest cannot be null."));
	}
	try {
		spine_support_utils_Array.copy(src,srcPos,dest,destPos,length);
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		throw haxe_Exception.thrown(new spine_support_error_ArrayIndexOutOfBoundsException("Src: " + src.length + ", " + srcPos + ", dest: " + dest.length + ", " + destPos + ", count: " + length));
	}
};
spine_utils_SpineUtils.prototype = {
	__class__: spine_utils_SpineUtils
};
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
$hxClasses["Math"] = Math;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
haxe_Resource.content = [{ name : "font12_fnt", data : ""},{ name : "spine/text_effect_json", data : "eyJza2VsZXRvbiI6eyJoYXNoIjoiUHpjQVl4NjJBcU0iLCJzcGluZSI6IjQuMC42NCIsIngiOi0yMiwieSI6LTE5LjUsIndpZHRoIjo0NCwiaGVpZ2h0IjozOX0sImJvbmVzIjpbeyJuYW1lIjoicm9vdCJ9LHsibmFtZSI6InRleHQiLCJwYXJlbnQiOiJyb290In1dLCJzbG90cyI6W3sibmFtZSI6ImJhY2tncm91bmQiLCJib25lIjoicm9vdCIsImF0dGFjaG1lbnQiOiJwdXJwbGViYWNrIn0seyJuYW1lIjoibnVtYmVyX3Rlc3QiLCJib25lIjoidGV4dCIsImF0dGFjaG1lbnQiOiJudW1iZXJfdGVzdCJ9XSwic2tpbnMiOlt7Im5hbWUiOiJkZWZhdWx0IiwiYXR0YWNobWVudHMiOnsiYmFja2dyb3VuZCI6eyJwdXJwbGViYWNrIjp7IndpZHRoIjo0NCwiaGVpZ2h0IjozOX19LCJudW1iZXJfdGVzdCI6eyJudW1iZXJfdGVzdCI6eyJ3aWR0aCI6MjEsImhlaWdodCI6MTR9fX19XSwiYW5pbWF0aW9ucyI6eyJkb3duX3NsaWRlbGVmdCI6eyJzbG90cyI6eyJiYWNrZ3JvdW5kIjp7ImF0dGFjaG1lbnQiOlt7Im5hbWUiOm51bGx9XX19LCJib25lcyI6eyJ0ZXh0Ijp7InRyYW5zbGF0ZSI6W3sieSI6LTUzLjQ1fSx7InRpbWUiOjEuNSwieCI6LTguNzEsInkiOi01M30seyJ0aW1lIjoxLjY2NjcsIngiOi0zMS4zNywieSI6LTUzfV19fX0sImRvd25fc2xpZGVsZWZ0MiI6eyJzbG90cyI6eyJiYWNrZ3JvdW5kIjp7ImF0dGFjaG1lbnQiOlt7Im5hbWUiOm51bGx9XX19LCJib25lcyI6eyJ0ZXh0Ijp7InRyYW5zbGF0ZSI6W3sieSI6LTUzLjQ1LCJjdXJ2ZSI6InN0ZXBwZWQifSx7InRpbWUiOjEuNzY2NywieSI6LTUzLjQ1fSx7InRpbWUiOjIuMTY2NywieCI6LTEuNzQsInkiOi01M30seyJ0aW1lIjoyLjMzMzMsIngiOi0zMS4zNywieSI6LTUzfV19fX0sInBvcGluIjp7ImJvbmVzIjp7InRleHQiOnsidHJhbnNsYXRlIjpbe30seyJ0aW1lIjowLjAzMzMsInkiOjE5LjAzfSx7InRpbWUiOjAuMTMzMywieSI6LTE0LjY2LCJjdXJ2ZSI6InN0ZXBwZWQifSx7InRpbWUiOjAuMiwieSI6LTE0LjY2fSx7InRpbWUiOjAuMjY2NywieSI6Ni41NX0seyJ0aW1lIjowLjMzMzMsImN1cnZlIjoic3RlcHBlZCJ9LHsidGltZSI6MC42NjY3fV19fX0sInBvcGluZmFzdCI6eyJib25lcyI6eyJ0ZXh0Ijp7InRyYW5zbGF0ZSI6W3sieSI6LTI2LjUyfSx7InRpbWUiOjAuMTMzMywiY3VydmUiOiJzdGVwcGVkIn0seyJ0aW1lIjowLjY2Njd9XX19fX19"},{ name : "lato15_fnt", data : ""},{ name : "lato13_fnt", data : "aW5mbyBmYWNlPSJMYXRvIEJsYWNrIiBzaXplPTEzIGJvbGQ9MCBpdGFsaWM9MCBjaGFyc2V0PSIiIHVuaWNvZGU9MCBzdHJldGNoSD0xMDAgc21vb3RoPTEgYWE9MSBwYWRkaW5nPTIsMiwyLDIgc3BhY2luZz0tNCwtNA0KY29tbW9uIGxpbmVIZWlnaHQ9MTYgYmFzZT0xMyBzY2FsZVc9NTEyIHNjYWxlSD01MTIgcGFnZXM9MSBwYWNrZWQ9MA0KcGFnZSBpZD0wIGZpbGU9ImxhdG8xMy5wbmciDQpjaGFycyBjb3VudD05OA0KY2hhciBpZD0wICAgICAgIHg9MCAgICB5PTAgICAgd2lkdGg9MCAgICBoZWlnaHQ9MCAgICB4b2Zmc2V0PS0yICAgeW9mZnNldD0wICAgIHhhZHZhbmNlPTAgICAgcGFnZT0wICAgIGNobmw9MCANCmNoYXIgaWQ9MTAgICAgICB4PTAgICAgeT0wICAgIHdpZHRoPTAgICAgaGVpZ2h0PTAgICAgeG9mZnNldD0tMiAgIHlvZmZzZXQ9MCAgICB4YWR2YW5jZT0wICAgIHBhZ2U9MCAgICBjaG5sPTAgDQpjaGFyIGlkPTMyICAgICAgeD0wICAgIHk9MCAgICB3aWR0aD0wICAgIGhlaWdodD0wICAgIHhvZmZzZXQ9LTIgICB5b2Zmc2V0PTAgICAgeGFkdmFuY2U9MyAgICBwYWdlPTAgICAgY2hubD0wIA0KY2hhciBpZD0zMyAgICAgIHg9MTA3ICB5PTE4ICAgd2lkdGg9NyAgICBoZWlnaHQ9MTUgICB4b2Zmc2V0PS0xICAgeW9mZnNldD0wICAgIHhhZHZhbmNlPTUgICAgcGFnZT0wICAgIGNobmw9MCANCmNoYXIgaWQ9MzQgICAgICB4PTQ3OSAgeT0xOCAgIHdpZHRoPTEwICAgaGVpZ2h0PTkgICAgeG9mZnNldD0tMiAgIHlvZmZzZXQ9MCAgICB4YWR2YW5jZT02ICAgIHBhZ2U9MCAgICBjaG5sPTAgDQpjaGFyIGlkPTM1ICAgICAgeD0xMzkgIHk9MTggICB3aWR0aD0xMiAgIGhlaWdodD0xNSAgIHhvZmZzZXQ9LTIgICB5b2Zmc2V0PTAgICAgeGFkdmFuY2U9OCAgICBwYWdlPTAgICAgY2hubD0wIA0KY2hhciBpZD0zNiAgICAgIHg9NzggICB5PTAgICAgd2lkdGg9MTIgICBoZWlnaHQ9MTcgICB4b2Zmc2V0PS0yICAgeW9mZnNldD0tMSAgIHhhZHZhbmNlPTggICAgcGFnZT0wICAgIGNobmw9MCANCmNoYXIgaWQ9MzcgICAgICB4PTEyNCAgeT0xOCAgIHdpZHRoPTE1ICAgaGVpZ2h0PTE1ICAgeG9mZnNldD0tMiAgIHlvZmZzZXQ9MCAgICB4YWR2YW5jZT0xMSAgIHBhZ2U9MCAgICBjaG5sPTAgDQpjaGFyIGlkPTM4ICAgICAgeD0yNDggIHk9MTggICB3aWR0aD0xNCAgIGhlaWdodD0xNCAgIHhvZmZzZXQ9LTIgICB5b2Zmc2V0PTEgICAgeGFkdmFuY2U9OSAgICBwYWdlPTAgICAgY2hubD0wIA0KY2hhciBpZD0zOSAgICAgIHg9NDg5ICB5PTE4ICAgd2lkdGg9NyAgICBoZWlnaHQ9OSAgICB4b2Zmc2V0PS0yICAgeW9mZnNldD0wICAgIHhhZHZhbmNlPTMgICAgcGFnZT0wICAgIGNobmw9MCANCmNoYXIgaWQ9NDAgICAgICB4PTAgICAgeT0wICAgIHdpZHRoPTggICAgaGVpZ2h0PTE4ICAgeG9mZnNldD0tMiAgIHlvZmZzZXQ9MCAgICB4YWR2YW5jZT00ICAgIHBhZ2U9MCAgICBjaG5sPTAgDQpjaGFyIGlkPTQxICAgICAgeD04ICAgIHk9MCAgICB3aWR0aD04ICAgIGhlaWdodD0xOCAgIHhvZmZzZXQ9LTIgICB5b2Zmc2V0PTAgICAgeGFkdmFuY2U9NCAgICBwYWdlPTAgICAgY2hubD0wIA0KY2hhciBpZD00MiAgICAgIHg9NDcwICB5PTE4ICAgd2lkdGg9OSAgICBoZWlnaHQ9MTAgICB4b2Zmc2V0PS0yICAgeW9mZnNldD0wICAgIHhhZHZhbmNlPTUgICAgcGFnZT0wICAgIGNobmw9MCANCmNoYXIgaWQ9NDMgICAgICB4PTM5OSAgeT0xOCAgIHdpZHRoPTExICAgaGVpZ2h0PTEyICAgeG9mZnNldD0tMiAgIHlvZmZzZXQ9MiAgICB4YWR2YW5jZT04ICAgIHBhZ2U9MCAgICBjaG5sPTAgDQpjaGFyIGlkPTQ0ICAgICAgeD00NTIgIHk9MTggICB3aWR0aD03ICAgIGhlaWdodD0xMCAgIHhvZmZzZXQ9LTIgICB5b2Zmc2V0PTggICAgeGFkdmFuY2U9MyAgICBwYWdlPTAgICAgY2hubD0wIA0KY2hhciBpZD00NSAgICAgIHg9MjggICB5PTMzICAgd2lkdGg9OSAgICBoZWlnaHQ9NiAgICB4b2Zmc2V0PS0yICAgeW9mZnNldD02ICAgIHhhZHZhbmNlPTUgICAgcGFnZT0wICAgIGNobmw9MCANCmNoYXIgaWQ9NDYgICAgICB4PTIxICAgeT0zMyAgIHdpZHRoPTcgICAgaGVpZ2h0PTcgICAgeG9mZnNldD0tMiAgIHlvZmZzZXQ9OCAgICB4YWR2YW5jZT0zICAgIHBhZ2U9MCAgICBjaG5sPTAgDQpjaGFyIGlkPTQ3ICAgICAgeD05MCAgIHk9MCAgICB3aWR0aD0xMSAgIGhlaWdodD0xNiAgIHhvZmZzZXQ9LTMgICB5b2Zmc2V0PTAgICAgeGFkdmFuY2U9NSAgICBwYWdlPTAgICAgY2hubD0wIA0KY2hhciBpZD00OCAgICAgIHg9OTUgICB5PTE4ICAgd2lkdGg9MTIgICBoZWlnaHQ9MTUgICB4b2Zmc2V0PS0yICAgeW9mZnNldD0wICAgIHhhZHZhbmNlPTggICAgcGFnZT0wICAgIGNobmw9MCANCmNoYXIgaWQ9NDkgICAgICB4PTAgICAgeT0xOCAgIHdpZHRoPTEyICAgaGVpZ2h0PTE1ICAgeG9mZnNldD0tMiAgIHlvZmZzZXQ9MCAgICB4YWR2YW5jZT04ICAgIHBhZ2U9MCAgICBjaG5sPTAgDQpjaGFyIGlkPTUwICAgICAgeD0xMiAgIHk9MTggICB3aWR0aD0xMiAgIGhlaWdodD0xNSAgIHhvZmZzZXQ9LTIgICB5b2Zmc2V0PTAgICAgeGFkdmFuY2U9OCAgICBwYWdlPTAgICAgY2hubD0wIA0KY2hhciBpZD01MSAgICAgIHg9MjQgICB5PTE4ICAgd2lkdGg9MTIgICBoZWlnaHQ9MTUgICB4b2Zmc2V0PS0yICAgeW9mZnNldD0wICAgIHhhZHZhbmNlPTggICAgcGFnZT0wICAgIGNobmw9MCANCmNoYXIgaWQ9NTIgICAgICB4PTM2ICAgeT0xOCAgIHdpZHRoPTEyICAgaGVpZ2h0PTE1ICAgeG9mZnNldD0tMiAgIHlvZmZzZXQ9MCAgICB4YWR2YW5jZT04ICAgIHBhZ2U9MCAgICBjaG5sPTAgDQpjaGFyIGlkPTUzICAgICAgeD00OCAgIHk9MTggICB3aWR0aD0xMSAgIGhlaWdodD0xNSAgIHhvZmZzZXQ9LTIgICB5b2Zmc2V0PTAgICAgeGFkdmFuY2U9OCAgICBwYWdlPTAgICAgY2hubD0wIA0KY2hhciBpZD01NCAgICAgIHg9NTkgICB5PTE4ICAgd2lkdGg9MTIgICBoZWlnaHQ9MTUgICB4b2Zmc2V0PS0yICAgeW9mZnNldD0wICAgIHhhZHZhbmNlPTggICAgcGFnZT0wICAgIGNobmw9MCANCmNoYXIgaWQ9NTUgICAgICB4PTcxICAgeT0xOCAgIHdpZHRoPTEyICAgaGVpZ2h0PTE1ICAgeG9mZnNldD0tMiAgIHlvZmZzZXQ9MCAgICB4YWR2YW5jZT04ICAgIHBhZ2U9MCAgICBjaG5sPTAgDQpjaGFyIGlkPTU2ICAgICAgeD04MyAgIHk9MTggICB3aWR0aD0xMiAgIGhlaWdodD0xNSAgIHhvZmZzZXQ9LTIgICB5b2Zmc2V0PTAgICAgeGFkdmFuY2U9OCAgICBwYWdlPTAgICAgY2hubD0wIA0KY2hhciBpZD01NyAgICAgIHg9MjI5ICB5PTE4ICAgd2lkdGg9MTIgICBoZWlnaHQ9MTQgICB4b2Zmc2V0PS0yICAgeW9mZnNldD0xICAgIHhhZHZhbmNlPTggICAgcGFnZT0wICAgIGNobmw9MCANCmNoYXIgaWQ9NTggICAgICB4PTM5MiAgeT0xOCAgIHdpZHRoPTcgICAgaGVpZ2h0PTEyICAgeG9mZnNldD0tMiAgIHlvZmZzZXQ9MyAgICB4YWR2YW5jZT00ICAgIHBhZ2U9MCAgICBjaG5sPTAgDQpjaGFyIGlkPTU5ICAgICAgeD0yNDEgIHk9MTggICB3aWR0aD03ICAgIGhlaWdodD0xNCAgIHhvZmZzZXQ9LTIgICB5b2Zmc2V0PTMgICAgeGFkdmFuY2U9NCAgICBwYWdlPTAgICAgY2hubD0wIA0KY2hhciBpZD02MCAgICAgIHg9NDMxICB5PTE4ICAgd2lkdGg9MTEgICBoZWlnaHQ9MTEgICB4b2Zmc2V0PS0yICAgeW9mZnNldD0zICAgIHhhZHZhbmNlPTggICAgcGFnZT0wICAgIGNobmw9MCANCmNoYXIgaWQ9NjEgICAgICB4PTQ5NiAgeT0xOCAgIHdpZHRoPTExICAgaGVpZ2h0PTkgICAgeG9mZnNldD0tMiAgIHlvZmZzZXQ9MyAgICB4YWR2YW5jZT04ICAgIHBhZ2U9MCAgICBjaG5sPTAgDQpjaGFyIGlkPTYyICAgICAgeD00NDIgIHk9MTggICB3aWR0aD0xMCAgIGhlaWdodD0xMSAgIHhvZmZzZXQ9LTEgICB5b2Zmc2V0PTMgICAgeGFkdmFuY2U9OCAgICBwYWdlPTAgICAgY2hubD0wIA0KY2hhciBpZD02MyAgICAgIHg9MTE0ICB5PTE4ICAgd2lkdGg9MTAgICBoZWlnaHQ9MTUgICB4b2Zmc2V0PS0yICAgeW9mZnNldD0wICAgIHhhZHZhbmNlPTYgICAgcGFnZT0wICAgIGNobmw9MCANCmNoYXIgaWQ9NjQgICAgICB4PTEwMSAgeT0wICAgIHdpZHRoPTE1ICAgaGVpZ2h0PTE2ICAgeG9mZnNldD0tMiAgIHlvZmZzZXQ9MSAgICB4YWR2YW5jZT0xMSAgIHBhZ2U9MCAgICBjaG5sPTAgDQpjaGFyIGlkPTY1ICAgICAgeD0xMjcgIHk9MCAgICB3aWR0aD0xNCAgIGhlaWdodD0xNSAgIHhvZmZzZXQ9LTIgICB5b2Zmc2V0PTAgICAgeGFkdmFuY2U9MTAgICBwYWdlPTAgICAgY2hubD0wIA0KY2hhciBpZD02NiAgICAgIHg9MTQxICB5PTAgICAgd2lkdGg9MTMgICBoZWlnaHQ9MTUgICB4b2Zmc2V0PS0yICAgeW9mZnNldD0wICAgIHhhZHZhbmNlPTkgICAgcGFnZT0wICAgIGNobmw9MCANCmNoYXIgaWQ9NjcgICAgICB4PTE1NCAgeT0wICAgIHdpZHRoPTEzICAgaGVpZ2h0PTE1ICAgeG9mZnNldD0tMiAgIHlvZmZzZXQ9MCAgICB4YWR2YW5jZT05ICAgIHBhZ2U9MCAgICBjaG5sPTAgDQpjaGFyIGlkPTY4ICAgICAgeD0xNjcgIHk9MCAgICB3aWR0aD0xNCAgIGhlaWdodD0xNSAgIHhvZmZzZXQ9LTIgICB5b2Zmc2V0PTAgICAgeGFkdmFuY2U9MTAgICBwYWdlPTAgICAgY2hubD0wIA0KY2hhciBpZD02OSAgICAgIHg9MTgxICB5PTAgICAgd2lkdGg9MTEgICBoZWlnaHQ9MTUgICB4b2Zmc2V0PS0yICAgeW9mZnNldD0wICAgIHhhZHZhbmNlPTcgICAgcGFnZT0wICAgIGNobmw9MCANCmNoYXIgaWQ9NzAgICAgICB4PTE5MiAgeT0wICAgIHdpZHRoPTExICAgaGVpZ2h0PTE1ICAgeG9mZnNldD0tMiAgIHlvZmZzZXQ9MCAgICB4YWR2YW5jZT03ICAgIHBhZ2U9MCAgICBjaG5sPTAgDQpjaGFyIGlkPTcxICAgICAgeD0yMDMgIHk9MCAgICB3aWR0aD0xMyAgIGhlaWdodD0xNSAgIHhvZmZzZXQ9LTIgICB5b2Zmc2V0PTAgICAgeGFkdmFuY2U9OSAgICBwYWdlPTAgICAgY2hubD0wIA0KY2hhciBpZD03MiAgICAgIHg9MjE2ICB5PTAgICAgd2lkdGg9MTQgICBoZWlnaHQ9MTUgICB4b2Zmc2V0PS0yICAgeW9mZnNldD0wICAgIHhhZHZhbmNlPTEwICAgcGFnZT0wICAgIGNobmw9MCANCmNoYXIgaWQ9NzMgICAgICB4PTIzMCAgeT0wICAgIHdpZHRoPTggICAgaGVpZ2h0PTE1ICAgeG9mZnNldD0tMiAgIHlvZmZzZXQ9MCAgICB4YWR2YW5jZT00ICAgIHBhZ2U9MCAgICBjaG5sPTAgDQpjaGFyIGlkPTc0ICAgICAgeD0yMzggIHk9MCAgICB3aWR0aD05ICAgIGhlaWdodD0xNSAgIHhvZmZzZXQ9LTIgICB5b2Zmc2V0PTAgICAgeGFkdmFuY2U9NiAgICBwYWdlPTAgICAgY2hubD0wIA0KY2hhciBpZD03NSAgICAgIHg9MjQ3ICB5PTAgICAgd2lkdGg9MTQgICBoZWlnaHQ9MTUgICB4b2Zmc2V0PS0yICAgeW9mZnNldD0wICAgIHhhZHZhbmNlPTkgICAgcGFnZT0wICAgIGNobmw9MCANCmNoYXIgaWQ9NzYgICAgICB4PTI2MSAgeT0wICAgIHdpZHRoPTExICAgaGVpZ2h0PTE1ICAgeG9mZnNldD0tMiAgIHlvZmZzZXQ9MCAgICB4YWR2YW5jZT03ICAgIHBhZ2U9MCAgICBjaG5sPTAgDQpjaGFyIGlkPTc3ICAgICAgeD0yNzIgIHk9MCAgICB3aWR0aD0xNiAgIGhlaWdodD0xNSAgIHhvZmZzZXQ9LTIgICB5b2Zmc2V0PTAgICAgeGFkdmFuY2U9MTIgICBwYWdlPTAgICAgY2hubD0wIA0KY2hhciBpZD03OCAgICAgIHg9Mjg4ICB5PTAgICAgd2lkdGg9MTQgICBoZWlnaHQ9MTUgICB4b2Zmc2V0PS0yICAgeW9mZnNldD0wICAgIHhhZHZhbmNlPTEwICAgcGFnZT0wICAgIGNobmw9MCANCmNoYXIgaWQ9NzkgICAgICB4PTMwMiAgeT0wICAgIHdpZHRoPTE1ICAgaGVpZ2h0PTE1ICAgeG9mZnNldD0tMiAgIHlvZmZzZXQ9MCAgICB4YWR2YW5jZT0xMCAgIHBhZ2U9MCAgICBjaG5sPTAgDQpjaGFyIGlkPTgwICAgICAgeD0zMTcgIHk9MCAgICB3aWR0aD0xMiAgIGhlaWdodD0xNSAgIHhvZmZzZXQ9LTIgICB5b2Zmc2V0PTAgICAgeGFkdmFuY2U9OCAgICBwYWdlPTAgICAgY2hubD0wIA0KY2hhciBpZD04MSAgICAgIHg9MjIgICB5PTAgICAgd2lkdGg9MTUgICBoZWlnaHQ9MTcgICB4b2Zmc2V0PS0yICAgeW9mZnNldD0wICAgIHhhZHZhbmNlPTEwICAgcGFnZT0wICAgIGNobmw9MCANCmNoYXIgaWQ9ODIgICAgICB4PTMyOSAgeT0wICAgIHdpZHRoPTEzICAgaGVpZ2h0PTE1ICAgeG9mZnNldD0tMiAgIHlvZmZzZXQ9MCAgICB4YWR2YW5jZT05ICAgIHBhZ2U9MCAgICBjaG5sPTAgDQpjaGFyIGlkPTgzICAgICAgeD0xNjMgIHk9MTggICB3aWR0aD0xMSAgIGhlaWdodD0xNCAgIHhvZmZzZXQ9LTIgICB5b2Zmc2V0PTEgICAgeGFkdmFuY2U9NyAgICBwYWdlPTAgICAgY2hubD0wIA0KY2hhciBpZD04NCAgICAgIHg9MzQyICB5PTAgICAgd2lkdGg9MTIgICBoZWlnaHQ9MTUgICB4b2Zmc2V0PS0yICAgeW9mZnNldD0wICAgIHhhZHZhbmNlPTggICAgcGFnZT0wICAgIGNobmw9MCANCmNoYXIgaWQ9ODUgICAgICB4PTM1NCAgeT0wICAgIHdpZHRoPTEzICAgaGVpZ2h0PTE1ICAgeG9mZnNldD0tMiAgIHlvZmZzZXQ9MCAgICB4YWR2YW5jZT05ICAgIHBhZ2U9MCAgICBjaG5sPTAgDQpjaGFyIGlkPTg2ICAgICAgeD0zNjcgIHk9MCAgICB3aWR0aD0xNCAgIGhlaWdodD0xNSAgIHhvZmZzZXQ9LTIgICB5b2Zmc2V0PTAgICAgeGFkdmFuY2U9MTAgICBwYWdlPTAgICAgY2hubD0wIA0KY2hhciBpZD04NyAgICAgIHg9MzgxICB5PTAgICAgd2lkdGg9MTggICBoZWlnaHQ9MTUgICB4b2Zmc2V0PS0yICAgeW9mZnNldD0wICAgIHhhZHZhbmNlPTE0ICAgcGFnZT0wICAgIGNobmw9MCANCmNoYXIgaWQ9ODggICAgICB4PTM5OSAgeT0wICAgIHdpZHRoPTE0ICAgaGVpZ2h0PTE1ICAgeG9mZnNldD0tMiAgIHlvZmZzZXQ9MCAgICB4YWR2YW5jZT05ICAgIHBhZ2U9MCAgICBjaG5sPTAgDQpjaGFyIGlkPTg5ICAgICAgeD00MTMgIHk9MCAgICB3aWR0aD0xNCAgIGhlaWdodD0xNSAgIHhvZmZzZXQ9LTMgICB5b2Zmc2V0PTAgICAgeGFkdmFuY2U9OSAgICBwYWdlPTAgICAgY2hubD0wIA0KY2hhciBpZD05MCAgICAgIHg9NDI3ICB5PTAgICAgd2lkdGg9MTIgICBoZWlnaHQ9MTUgICB4b2Zmc2V0PS0yICAgeW9mZnNldD0wICAgIHhhZHZhbmNlPTggICAgcGFnZT0wICAgIGNobmw9MCANCmNoYXIgaWQ9OTEgICAgICB4PTQ2ICAgeT0wICAgIHdpZHRoPTggICAgaGVpZ2h0PTE3ICAgeG9mZnNldD0tMiAgIHlvZmZzZXQ9MCAgICB4YWR2YW5jZT00ICAgIHBhZ2U9MCAgICBjaG5sPTAgDQpjaGFyIGlkPTkyICAgICAgeD0xMTYgIHk9MCAgICB3aWR0aD0xMSAgIGhlaWdodD0xNiAgIHhvZmZzZXQ9LTMgICB5b2Zmc2V0PTAgICAgeGFkdmFuY2U9NSAgICBwYWdlPTAgICAgY2hubD0wIA0KY2hhciBpZD05MyAgICAgIHg9NTQgICB5PTAgICAgd2lkdGg9OCAgICBoZWlnaHQ9MTcgICB4b2Zmc2V0PS0yICAgeW9mZnNldD0wICAgIHhhZHZhbmNlPTQgICAgcGFnZT0wICAgIGNobmw9MCANCmNoYXIgaWQ9OTQgICAgICB4PTQ1OSAgeT0xOCAgIHdpZHRoPTExICAgaGVpZ2h0PTEwICAgeG9mZnNldD0tMiAgIHlvZmZzZXQ9MCAgICB4YWR2YW5jZT04ICAgIHBhZ2U9MCAgICBjaG5sPTAgDQpjaGFyIGlkPTk1ICAgICAgeD0zNyAgIHk9MzMgICB3aWR0aD0xMCAgIGhlaWdodD02ICAgIHhvZmZzZXQ9LTIgICB5b2Zmc2V0PTExICAgeGFkdmFuY2U9NSAgICBwYWdlPTAgICAgY2hubD0wIA0KY2hhciBpZD05NiAgICAgIHg9MTIgICB5PTMzICAgd2lkdGg9OSAgICBoZWlnaHQ9NyAgICB4b2Zmc2V0PS0zICAgeW9mZnNldD0wICAgIHhhZHZhbmNlPTQgICAgcGFnZT0wICAgIGNobmw9MCANCmNoYXIgaWQ9OTcgICAgICB4PTI2MiAgeT0xOCAgIHdpZHRoPTExICAgaGVpZ2h0PTEyICAgeG9mZnNldD0tMiAgIHlvZmZzZXQ9MyAgICB4YWR2YW5jZT03ICAgIHBhZ2U9MCAgICBjaG5sPTAgDQpjaGFyIGlkPTk4ICAgICAgeD00MzkgIHk9MCAgICB3aWR0aD0xMiAgIGhlaWdodD0xNSAgIHhvZmZzZXQ9LTIgICB5b2Zmc2V0PTAgICAgeGFkdmFuY2U9OCAgICBwYWdlPTAgICAgY2hubD0wIA0KY2hhciBpZD05OSAgICAgIHg9NDEwICB5PTE4ICAgd2lkdGg9MTEgICBoZWlnaHQ9MTEgICB4b2Zmc2V0PS0yICAgeW9mZnNldD00ICAgIHhhZHZhbmNlPTYgICAgcGFnZT0wICAgIGNobmw9MCANCmNoYXIgaWQ9MTAwICAgICB4PTQ1MSAgeT0wICAgIHdpZHRoPTExICAgaGVpZ2h0PTE1ICAgeG9mZnNldD0tMiAgIHlvZmZzZXQ9MCAgICB4YWR2YW5jZT04ICAgIHBhZ2U9MCAgICBjaG5sPTAgDQpjaGFyIGlkPTEwMSAgICAgeD0yNzMgIHk9MTggICB3aWR0aD0xMSAgIGhlaWdodD0xMiAgIHhvZmZzZXQ9LTIgICB5b2Zmc2V0PTMgICAgeGFkdmFuY2U9NyAgICBwYWdlPTAgICAgY2hubD0wIA0KY2hhciBpZD0xMDIgICAgIHg9NDYyICB5PTAgICAgd2lkdGg9OSAgICBoZWlnaHQ9MTUgICB4b2Zmc2V0PS0yICAgeW9mZnNldD0wICAgIHhhZHZhbmNlPTUgICAgcGFnZT0wICAgIGNobmw9MCANCmNoYXIgaWQ9MTAzICAgICB4PTE3NCAgeT0xOCAgIHdpZHRoPTExICAgaGVpZ2h0PTE0ICAgeG9mZnNldD0tMiAgIHlvZmZzZXQ9MyAgICB4YWR2YW5jZT03ICAgIHBhZ2U9MCAgICBjaG5sPTAgDQpjaGFyIGlkPTEwNCAgICAgeD00NzEgIHk9MCAgICB3aWR0aD0xMSAgIGhlaWdodD0xNSAgIHhvZmZzZXQ9LTIgICB5b2Zmc2V0PTAgICAgeGFkdmFuY2U9OCAgICBwYWdlPTAgICAgY2hubD0wIA0KY2hhciBpZD0xMDUgICAgIHg9NDgyICB5PTAgICAgd2lkdGg9OCAgICBoZWlnaHQ9MTUgICB4b2Zmc2V0PS0yICAgeW9mZnNldD0wICAgIHhhZHZhbmNlPTQgICAgcGFnZT0wICAgIGNobmw9MCANCmNoYXIgaWQ9MTA2ICAgICB4PTM3ICAgeT0wICAgIHdpZHRoPTkgICAgaGVpZ2h0PTE3ICAgeG9mZnNldD0tMyAgIHlvZmZzZXQ9MCAgICB4YWR2YW5jZT00ICAgIHBhZ2U9MCAgICBjaG5sPTAgDQpjaGFyIGlkPTEwNyAgICAgeD00OTAgIHk9MCAgICB3aWR0aD0xMiAgIGhlaWdodD0xNSAgIHhvZmZzZXQ9LTIgICB5b2Zmc2V0PTAgICAgeGFkdmFuY2U9NyAgICBwYWdlPTAgICAgY2hubD0wIA0KY2hhciBpZD0xMDggICAgIHg9NTAyICB5PTAgICAgd2lkdGg9NyAgICBoZWlnaHQ9MTUgICB4b2Zmc2V0PS0yICAgeW9mZnNldD0wICAgIHhhZHZhbmNlPTQgICAgcGFnZT0wICAgIGNobmw9MCANCmNoYXIgaWQ9MTA5ICAgICB4PTI4NCAgeT0xOCAgIHdpZHRoPTE1ICAgaGVpZ2h0PTEyICAgeG9mZnNldD0tMiAgIHlvZmZzZXQ9MyAgICB4YWR2YW5jZT0xMSAgIHBhZ2U9MCAgICBjaG5sPTAgDQpjaGFyIGlkPTExMCAgICAgeD0yOTkgIHk9MTggICB3aWR0aD0xMSAgIGhlaWdodD0xMiAgIHhvZmZzZXQ9LTIgICB5b2Zmc2V0PTMgICAgeGFkdmFuY2U9OCAgICBwYWdlPTAgICAgY2hubD0wIA0KY2hhciBpZD0xMTEgICAgIHg9MzEwICB5PTE4ICAgd2lkdGg9MTIgICBoZWlnaHQ9MTIgICB4b2Zmc2V0PS0yICAgeW9mZnNldD0zICAgIHhhZHZhbmNlPTggICAgcGFnZT0wICAgIGNobmw9MCANCmNoYXIgaWQ9MTEyICAgICB4PTE4NSAgeT0xOCAgIHdpZHRoPTEyICAgaGVpZ2h0PTE0ICAgeG9mZnNldD0tMiAgIHlvZmZzZXQ9MyAgICB4YWR2YW5jZT04ICAgIHBhZ2U9MCAgICBjaG5sPTAgDQpjaGFyIGlkPTExMyAgICAgeD0xOTcgIHk9MTggICB3aWR0aD0xMSAgIGhlaWdodD0xNCAgIHhvZmZzZXQ9LTIgICB5b2Zmc2V0PTMgICAgeGFkdmFuY2U9OCAgICBwYWdlPTAgICAgY2hubD0wIA0KY2hhciBpZD0xMTQgICAgIHg9MzIyICB5PTE4ICAgd2lkdGg9MTAgICBoZWlnaHQ9MTIgICB4b2Zmc2V0PS0yICAgeW9mZnNldD0zICAgIHhhZHZhbmNlPTUgICAgcGFnZT0wICAgIGNobmw9MCANCmNoYXIgaWQ9MTE1ICAgICB4PTQyMSAgeT0xOCAgIHdpZHRoPTEwICAgaGVpZ2h0PTExICAgeG9mZnNldD0tMiAgIHlvZmZzZXQ9NCAgICB4YWR2YW5jZT02ICAgIHBhZ2U9MCAgICBjaG5sPTAgDQpjaGFyIGlkPTExNiAgICAgeD0yMDggIHk9MTggICB3aWR0aD05ICAgIGhlaWdodD0xNCAgIHhvZmZzZXQ9LTIgICB5b2Zmc2V0PTEgICAgeGFkdmFuY2U9NSAgICBwYWdlPTAgICAgY2hubD0wIA0KY2hhciBpZD0xMTcgICAgIHg9MzMyICB5PTE4ICAgd2lkdGg9MTEgICBoZWlnaHQ9MTIgICB4b2Zmc2V0PS0yICAgeW9mZnNldD0zICAgIHhhZHZhbmNlPTggICAgcGFnZT0wICAgIGNobmw9MCANCmNoYXIgaWQ9MTE4ICAgICB4PTM0MyAgeT0xOCAgIHdpZHRoPTEyICAgaGVpZ2h0PTEyICAgeG9mZnNldD0tMiAgIHlvZmZzZXQ9MyAgICB4YWR2YW5jZT03ICAgIHBhZ2U9MCAgICBjaG5sPTAgDQpjaGFyIGlkPTExOSAgICAgeD0zNTUgIHk9MTggICB3aWR0aD0xNSAgIGhlaWdodD0xMiAgIHhvZmZzZXQ9LTIgICB5b2Zmc2V0PTMgICAgeGFkdmFuY2U9MTEgICBwYWdlPTAgICAgY2hubD0wIA0KY2hhciBpZD0xMjAgICAgIHg9MzcwICB5PTE4ICAgd2lkdGg9MTIgICBoZWlnaHQ9MTIgICB4b2Zmc2V0PS0yICAgeW9mZnNldD0zICAgIHhhZHZhbmNlPTcgICAgcGFnZT0wICAgIGNobmw9MCANCmNoYXIgaWQ9MTIxICAgICB4PTIxNyAgeT0xOCAgIHdpZHRoPTEyICAgaGVpZ2h0PTE0ICAgeG9mZnNldD0tMiAgIHlvZmZzZXQ9MyAgICB4YWR2YW5jZT03ICAgIHBhZ2U9MCAgICBjaG5sPTAgDQpjaGFyIGlkPTEyMiAgICAgeD0zODIgIHk9MTggICB3aWR0aD0xMCAgIGhlaWdodD0xMiAgIHhvZmZzZXQ9LTIgICB5b2Zmc2V0PTMgICAgeGFkdmFuY2U9NiAgICBwYWdlPTAgICAgY2hubD0wIA0KY2hhciBpZD0xMjMgICAgIHg9NjIgICB5PTAgICAgd2lkdGg9OCAgICBoZWlnaHQ9MTcgICB4b2Zmc2V0PS0yICAgeW9mZnNldD0wICAgIHhhZHZhbmNlPTQgICAgcGFnZT0wICAgIGNobmw9MCANCmNoYXIgaWQ9MTI0ICAgICB4PTE2ICAgeT0wICAgIHdpZHRoPTYgICAgaGVpZ2h0PTE4ICAgeG9mZnNldD0tMSAgIHlvZmZzZXQ9LTEgICB4YWR2YW5jZT00ICAgIHBhZ2U9MCAgICBjaG5sPTAgDQpjaGFyIGlkPTEyNSAgICAgeD03MCAgIHk9MCAgICB3aWR0aD04ICAgIGhlaWdodD0xNyAgIHhvZmZzZXQ9LTIgICB5b2Zmc2V0PTAgICAgeGFkdmFuY2U9NCAgICBwYWdlPTAgICAgY2hubD0wIA0KY2hhciBpZD0xMjYgICAgIHg9MCAgICB5PTMzICAgd2lkdGg9MTIgICBoZWlnaHQ9OCAgICB4b2Zmc2V0PS0yICAgeW9mZnNldD01ICAgIHhhZHZhbmNlPTggICAgcGFnZT0wICAgIGNobmw9MCANCmNoYXIgaWQ9MTI3ICAgICB4PTE1MSAgeT0xOCAgIHdpZHRoPTEyICAgaGVpZ2h0PTE1ICAgeG9mZnNldD0tMiAgIHlvZmZzZXQ9MCAgICB4YWR2YW5jZT03ICAgIHBhZ2U9MCAgICBjaG5sPTAgDQprZXJuaW5ncyBjb3VudD0yOTMNCmtlcm5pbmcgZmlyc3Q9NDcgc2Vjb25kPTEwOSBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9NzAgc2Vjb25kPTQ2IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD0zOSBzZWNvbmQ9NjUgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTY1IHNlY29uZD00NSBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9ODQgc2Vjb25kPTEyMSBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9ODkgc2Vjb25kPTY3IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD0xMjEgc2Vjb25kPTQ0IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD0zOSBzZWNvbmQ9OTkgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTg2IHNlY29uZD0xMTMgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTQ2IHNlY29uZD05MiBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9NDQgc2Vjb25kPTQ1IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD0xMTEgc2Vjb25kPTQyIGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD0zOSBzZWNvbmQ9NDQgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTg2IHNlY29uZD01OCBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9ODkgc2Vjb25kPTEwMSBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9ODQgc2Vjb25kPTEwMCBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9ODkgc2Vjb25kPTQ2IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD00NyBzZWNvbmQ9MTIyIGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD05OCBzZWNvbmQ9ODYgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTkyIHNlY29uZD04OSBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9ODQgc2Vjb25kPTQ1IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD05MiBzZWNvbmQ9MzQgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTY1IHNlY29uZD05MiBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9MzQgc2Vjb25kPTExMSBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9NDcgc2Vjb25kPTEwMSBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9NzAgc2Vjb25kPTM4IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD04OCBzZWNvbmQ9MTE4IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD04MCBzZWNvbmQ9NzQgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTQyIHNlY29uZD0xMDAgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTg5IHNlY29uZD0xMTQgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTExOSBzZWNvbmQ9NDQgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTQ3IHNlY29uZD00NiBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9ODQgc2Vjb25kPTExMyBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9NDQgc2Vjb25kPTkyIGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD00MiBzZWNvbmQ9NDUgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTg5IHNlY29uZD01OSBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9MTA5IHNlY29uZD00MiBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9ODQgc2Vjb25kPTU4IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD00NiBzZWNvbmQ9ODQgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTExMSBzZWNvbmQ9MzQgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTg3IHNlY29uZD00NiBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9NDYgc2Vjb25kPTExOCBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9NDcgc2Vjb25kPTExNCBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9ODkgc2Vjb25kPTM4IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD00MiBzZWNvbmQ9MTEzIGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD00NyBzZWNvbmQ9NTkgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTY1IHNlY29uZD04NCBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9NDUgc2Vjb25kPTQ2IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD00NiBzZWNvbmQ9NDIgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTQ3IHNlY29uZD0zOCBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9NjUgc2Vjb25kPTExOCBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9NDQgc2Vjb25kPTg0IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD04NiBzZWNvbmQ9OTcgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTEwOSBzZWNvbmQ9MzQgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTkyIHNlY29uZD0zOSBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9NDQgc2Vjb25kPTExOCBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9ODcgc2Vjb25kPTM4IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD02NSBzZWNvbmQ9NDIgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTg5IHNlY29uZD0xMTkgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTg0IHNlY29uZD0xMTggYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTg5IHNlY29uZD02NCBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9ODYgc2Vjb25kPTExMCBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9NDYgc2Vjb25kPTg5IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD00NCBzZWNvbmQ9NDIgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTQ1IHNlY29uZD0zOCBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9MTExIHNlY29uZD0zOSBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9MTAxIHNlY29uZD05MiBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9NDYgc2Vjb25kPTM0IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD04NCBzZWNvbmQ9OTcgYW1vdW50PS0yDQprZXJuaW5nIGZpcnN0PTkyIHNlY29uZD04NiBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9NzYgc2Vjb25kPTg3IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD02NSBzZWNvbmQ9ODkgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTc2IHNlY29uZD0xMjEgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTY1IHNlY29uZD0zNCBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9ODkgc2Vjb25kPTExMSBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9ODQgc2Vjb25kPTExMCBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9NDQgc2Vjb25kPTg5IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD0xMDIgc2Vjb25kPTQ2IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD0xMTEgc2Vjb25kPTg2IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD0xMDkgc2Vjb25kPTM5IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD00NCBzZWNvbmQ9MzQgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTg2IHNlY29uZD00NyBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9NzYgc2Vjb25kPTQ1IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD00NyBzZWNvbmQ9MTExIGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD03NiBzZWNvbmQ9NzkgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTEyMSBzZWNvbmQ9NDYgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTM5IHNlY29uZD0xMDEgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTg2IHNlY29uZD0xMTUgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTM0IHNlY29uZD0xMDAgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTM5IHNlY29uZD00NiBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9NDYgc2Vjb25kPTM5IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD04OSBzZWNvbmQ9MTAzIGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD0zNCBzZWNvbmQ9NDUgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTEwMSBzZWNvbmQ9NDIgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTg0IHNlY29uZD00NyBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9NzYgc2Vjb25kPTkyIGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD0zNCBzZWNvbmQ9MTEzIGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD00NyBzZWNvbmQ9MTAzIGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD02NSBzZWNvbmQ9MzkgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTExOSBzZWNvbmQ9NDYgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTg0IHNlY29uZD0xMTUgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTc2IHNlY29uZD03MSBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9NDIgc2Vjb25kPTQ3IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD03MCBzZWNvbmQ9NzQgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTEyMSBzZWNvbmQ9MzggYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTQ2IHNlY29uZD04NiBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9NDQgc2Vjb25kPTM5IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD04NyBzZWNvbmQ9MTAzIGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD0zOSBzZWNvbmQ9MzggYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTEwMSBzZWNvbmQ9MzQgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTc2IHNlY29uZD04NCBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9ODkgc2Vjb25kPTc0IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD04NiBzZWNvbmQ9MTIwIGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD02NSBzZWNvbmQ9ODYgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTg2IHNlY29uZD02NSBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9NzYgc2Vjb25kPTExOCBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9NDQgc2Vjb25kPTg2IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD04NiBzZWNvbmQ9OTkgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTk3IHNlY29uZD00MiBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9NDcgc2Vjb25kPTc0IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD04NiBzZWNvbmQ9NDQgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTgwIHNlY29uZD00NyBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9NzYgc2Vjb25kPTQyIGFtb3VudD0tMg0Ka2VybmluZyBmaXJzdD04OSBzZWNvbmQ9MTIxIGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD04NyBzZWNvbmQ9NzQgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTg0IHNlY29uZD0xMjAgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTg2IHNlY29uZD0xMTIgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTg0IHNlY29uZD02NSBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9MTEyIHNlY29uZD05MiBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9ODkgc2Vjb25kPTEwMCBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9ODQgc2Vjb25kPTk5IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD0xMDEgc2Vjb25kPTM5IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD04OSBzZWNvbmQ9NDUgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTg0IHNlY29uZD00NCBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9OTcgc2Vjb25kPTM0IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD03NiBzZWNvbmQ9ODkgYW1vdW50PS0yDQprZXJuaW5nIGZpcnN0PTQyIHNlY29uZD02NSBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9ODkgc2Vjb25kPTc5IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD0zOSBzZWNvbmQ9MTExIGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD03NiBzZWNvbmQ9MzQgYW1vdW50PS0yDQprZXJuaW5nIGZpcnN0PTQ3IHNlY29uZD0xMDAgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTExOCBzZWNvbmQ9NDcgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTQyIHNlY29uZD05OSBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9ODkgc2Vjb25kPTExMyBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9NDcgc2Vjb25kPTQ1IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD04NCBzZWNvbmQ9MTEyIGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD00MiBzZWNvbmQ9NDQgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTg5IHNlY29uZD01OCBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9MTAxIHNlY29uZD04NiBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9NDcgc2Vjb25kPTExMyBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9NDcgc2Vjb25kPTU4IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD03NiBzZWNvbmQ9ODEgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTg5IHNlY29uZD03MSBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9ODYgc2Vjb25kPTExNyBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9ODAgc2Vjb25kPTY1IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD0xMTIgc2Vjb25kPTQyIGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD0zNCBzZWNvbmQ9NDcgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTk3IHNlY29uZD0zOSBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9ODAgc2Vjb25kPTQ0IGFtb3VudD0tMg0Ka2VybmluZyBmaXJzdD03NiBzZWNvbmQ9MzkgYW1vdW50PS0yDQprZXJuaW5nIGZpcnN0PTg5IHNlY29uZD0xMTggYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTg0IHNlY29uZD0xMTcgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTQ1IHNlY29uZD05MiBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9ODYgc2Vjb25kPTEwOSBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9MTEwIHNlY29uZD00MiBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9ODkgc2Vjb25kPTk3IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD0xMTIgc2Vjb25kPTM0IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD0xMTggc2Vjb25kPTY1IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD03NiBzZWNvbmQ9ODYgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTg2IHNlY29uZD0xMjIgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTQ3IHNlY29uZD05NyBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9MTE4IHNlY29uZD00NCBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9ODkgc2Vjb25kPTExMCBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9ODQgc2Vjb25kPTEwOSBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9NDUgc2Vjb25kPTg0IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD04NiBzZWNvbmQ9MTAxIGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD04NyBzZWNvbmQ9OTcgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTExMCBzZWNvbmQ9MzQgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTg2IHNlY29uZD00NiBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9NDcgc2Vjb25kPTExMCBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9NzAgc2Vjb25kPTQ3IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD02OCBzZWNvbmQ9ODkgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTM0IHNlY29uZD02NSBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9ODQgc2Vjb25kPTEyMiBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9Mzkgc2Vjb25kPTEwMCBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9ODYgc2Vjb25kPTExNCBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9MzQgc2Vjb25kPTk5IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD03NSBzZWNvbmQ9MTE2IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD00NSBzZWNvbmQ9NDIgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTM5IHNlY29uZD00NSBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9ODYgc2Vjb25kPTU5IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD0xMTIgc2Vjb25kPTM5IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD0zNCBzZWNvbmQ9NDQgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTg0IHNlY29uZD0xMDEgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTg5IHNlY29uZD00NyBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9ODQgc2Vjb25kPTQ2IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD04NiBzZWNvbmQ9MzggYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTg5IHNlY29uZD04MSBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9Mzkgc2Vjb25kPTExMyBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9NDIgc2Vjb25kPTEwMSBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9ODkgc2Vjb25kPTExNSBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9NDcgc2Vjb25kPTQ3IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD04NCBzZWNvbmQ9MTE0IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD0xMTQgc2Vjb25kPTQ0IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD00MiBzZWNvbmQ9NDYgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTQ1IHNlY29uZD04OSBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9ODQgc2Vjb25kPTU5IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD0xMTIgc2Vjb25kPTg2IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD0xMTAgc2Vjb25kPTM5IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD0xMDQgc2Vjb25kPTQyIGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD00NSBzZWNvbmQ9MzQgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTg3IHNlY29uZD00NyBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9NDYgc2Vjb25kPTExOSBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9NDcgc2Vjb25kPTExNSBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9ODQgc2Vjb25kPTM4IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD02NCBzZWNvbmQ9ODkgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTc1IHNlY29uZD0xMjEgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTQ1IHNlY29uZD00NyBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9NDIgc2Vjb25kPTM4IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD03MCBzZWNvbmQ9NjUgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTk4IHNlY29uZD05MiBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9MTA0IHNlY29uZD0zNCBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9NDQgc2Vjb25kPTExOSBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9ODAgc2Vjb25kPTQ2IGFtb3VudD0tMg0Ka2VybmluZyBmaXJzdD03MCBzZWNvbmQ9NDQgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTg5IHNlY29uZD0xMjAgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTg0IHNlY29uZD0xMTkgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTg5IHNlY29uZD02NSBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9ODYgc2Vjb25kPTExMSBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9NDUgc2Vjb25kPTM5IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD04OSBzZWNvbmQ9OTkgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTg5IHNlY29uZD00NCBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9NDcgc2Vjb25kPTEyMCBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9OTIgc2Vjb25kPTg3IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD04MSBzZWNvbmQ9ODkgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTQ3IHNlY29uZD02NSBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9ODAgc2Vjb25kPTM4IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD05MiBzZWNvbmQ9MTIxIGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD00NyBzZWNvbmQ9OTkgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTg4IHNlY29uZD0xMTYgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTExOCBzZWNvbmQ9NDYgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTg5IHNlY29uZD0xMTIgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTg3IHNlY29uZD02NSBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9NDcgc2Vjb25kPTQ0IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD04NCBzZWNvbmQ9MTExIGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD03NiBzZWNvbmQ9NjcgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTQ1IHNlY29uZD04NiBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9ODYgc2Vjb25kPTEwMyBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9MTA0IHNlY29uZD0zOSBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9OTggc2Vjb25kPTQyIGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD05MiBzZWNvbmQ9NDUgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTg3IHNlY29uZD00NCBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9NDcgc2Vjb25kPTExMiBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9Nzkgc2Vjb25kPTg5IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD00NSBzZWNvbmQ9NjUgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTQyIHNlY29uZD0xMTEgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTEyMSBzZWNvbmQ9NDcgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTM0IHNlY29uZD0xMDEgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTc1IHNlY29uZD0xMTggYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTQ1IHNlY29uZD00NCBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9Mzkgc2Vjb25kPTQ3IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD0xMTggc2Vjb25kPTM4IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD0zNCBzZWNvbmQ9NDYgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTg0IHNlY29uZD0xMDMgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTkyIHNlY29uZD05MiBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9OTggc2Vjb25kPTM0IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD04OCBzZWNvbmQ9MTIxIGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD04NiBzZWNvbmQ9NzQgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTg5IHNlY29uZD0xMTcgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTExNCBzZWNvbmQ9NDYgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTExMSBzZWNvbmQ9OTIgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTQ2IHNlY29uZD04NyBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9MzQgc2Vjb25kPTM4IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD00NiBzZWNvbmQ9MTIxIGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD00NyBzZWNvbmQ9MTE3IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD05MiBzZWNvbmQ9ODQgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTY3IHNlY29uZD00NSBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9OTIgc2Vjb25kPTExOCBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9ODQgc2Vjb25kPTc0IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD02NSBzZWNvbmQ9ODcgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTc2IHNlY29uZD0xMTkgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTQ2IHNlY29uZD00NSBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9ODkgc2Vjb25kPTEwOSBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9NjUgc2Vjb25kPTEyMSBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9NDQgc2Vjb25kPTg3IGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD03NiBzZWNvbmQ9NjQgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTEwMiBzZWNvbmQ9NDQgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTg2IHNlY29uZD0xMDAgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTk4IHNlY29uZD0zOSBhbW91bnQ9LTENCmtlcm5pbmcgZmlyc3Q9OTIgc2Vjb25kPTQyIGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD00NCBzZWNvbmQ9MTIxIGFtb3VudD0tMQ0Ka2VybmluZyBmaXJzdD04NiBzZWNvbmQ9NDUgYW1vdW50PS0xDQprZXJuaW5nIGZpcnN0PTEyMSBzZWNvbmQ9NjUgYW1vdW50PS0xDQo"},{ name : "story_main_json", data : "W3siYWN0aW9uTGFiZWwiOiBudWxsLCJpZCI6ICIxX2VwaWxvZ3VlX3N0YXJ0IiwibWVzc2FnZXMiOiBbeyJib2R5IjogIlRoZSBzdW4gaXMgc2V0dGluZy4gIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6IG51bGx9LHsiYm9keSI6ICJOb3Qgd2FudGluZyB0byBiZSBsYXRlLCB5b3UgaGVhZCBvdXQgZm9yIHRoZSByb2FkLiIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiBudWxsfV0sInRpdGxlIjogIlN0YXJ0IiwidmlzaWJpbGl0eVNjcmlwdCI6IG51bGx9LHsiYWN0aW9uTGFiZWwiOiBudWxsLCJpZCI6ICIyX2dvbGRlbl9zdGF0dWUiLCJtZXNzYWdlcyI6IFt7ImJvZHkiOiAiWW91IHJldHVybiBob21lLCBhIGZhbWlsaWFyIG1hbiB3ZWxjb21lcyB5b3UuIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6IG51bGx9LHsiYm9keSI6ICIgSGV5LCBob3BlIHlvdSBkaWRuJ3Qgd2FpdC4iLCJzY3JpcHQiOiBudWxsLCJzcGVha2VyIjogIklzYWJlbCJ9LHsiYm9keSI6ICJUaGUgbWFuIHNtaWxlcyB3aGVuIGhlIHNlZXMgeW91LiIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiBudWxsfSx7ImJvZHkiOiAiIEZvciBhIG1pc2NoaWVmLW1ha2VyLCB5b3UgYXJlIGdvb2QgYXQga2VlcGluZyB0aW1lLiIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiAiTWFyaW5vIn0seyJib2R5IjogIiBUaGUgbWVldGluZyBwbGFjZSBpcyBiZWhpbmQgdGhlIGNodXJjaCwgcmlnaHQ/IFN0LiBJc2FiZWwuIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6ICJJc2FiZWwifSx7ImJvZHkiOiAiVGhlIG1hbiBwaWNrcyB1cCBhIGdvbGRlbiBzdGF0dWUgb2YgYSB3b21hbi4iLCJzY3JpcHQiOiBudWxsLCJzcGVha2VyIjogbnVsbH0seyJib2R5IjogIiBKdXN0IGdldCB0aGUgcGFja2FnZSBhbmQgZ2l2ZSB0aGVtIHRoZSBzdGF0dWUuICIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiAiTWFyaW5vIn0seyJib2R5IjogIlRoZSBtYW4gZ2l2ZXMgeW91IGEgc2V2ZXJlIGxvb2sgYXMgeW91IHBpY2sgdXAgdGhlIHN0YXR1ZSwgYWxtb3N0IGFuZ3J5LiIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiBudWxsfSx7ImJvZHkiOiAiIFRoYXQgc3RhdHVlIGlzIGEgYmVhdXRpZnVsIHdvcmsgb2YgYXJ0LiBUYWtlIGdvb2QgY2FyZSBvZiBpdC4iLCJzY3JpcHQiOiBudWxsLCJzcGVha2VyIjogIk1hcmlubyJ9LHsiYm9keSI6ICIgQW5kIGRvIG5vdCBjYXVzZSB0cm91YmxlLiBBcmUgd2UgY2xlYXI/Iiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6ICJNYXJpbm8ifSx7ImJvZHkiOiAiWW91IG5vZCBhc3N1cmluZ2x5IGFuZCBoZWFkIG91dCBvZiB0aGUgaG91c2UuIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6IG51bGx9XSwidGl0bGUiOiAiQSBnb2xkZW4gc3RhdHVlIiwidmlzaWJpbGl0eVNjcmlwdCI6IG51bGx9LHsiYWN0aW9uTGFiZWwiOiBudWxsLCJpZCI6ICIzX3RoZV9kZWFsIiwibWVzc2FnZXMiOiBbeyJib2R5IjogIkluIHRoZSBiYWNrIG9mIHRoZSBjaHVyY2ggdGhyZWUgbWFuIGluIGFybW9yIGFyZSB3YWl0aW5nIGZvciB5b3UuIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6IG51bGx9LHsiYm9keSI6ICIgWW91IGhhdmUgdGhlIHBhY2thZ2U/Iiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6ICJJc2FiZWwifSx7ImJvZHkiOiAiVGhlIG1hbiBwb2ludHMgaGlzIGhhbmQgdG8gYSBsYXJnZSB3b29kZW4gYm94LiIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiBudWxsfSx7ImJvZHkiOiAiIFRoYXQgdGhpbmcgaXMgaHVnZS4gSG93IGFtIEkgZ29ubmEgY2FycnkgdGhhdC4uLj8iLCJzY3JpcHQiOiBudWxsLCJzcGVha2VyIjogIklzYWJlbCJ9LHsiYm9keSI6ICIgWW91IHdpbGwgdXNlIG15IHBlcnNvbmFsIGNhcnJpYWdlLiBUaGUgcmlkZXIgaXMgYSBtYW4gb2YgdHJ1c3QuIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6ICJLbmlnaHQifSx7ImJvZHkiOiAiWW91IG5vZCByZXBlYXRlZGx5LCBjb252aW5jZWQuIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6IG51bGx9LHsiYm9keSI6ICJZb3UgdGFrZSBvdXQgdGhlIGdvbGRlbiBzdGF0dWUsIGZvciB0aGUgbWFuIHRvIHNlZS4iLCJzY3JpcHQiOiBudWxsLCJzcGVha2VyIjogbnVsbH0seyJib2R5IjogIlRoZSBtYW4gbm9kcyBhdCB5b3UgYW5kIGNvbWVzIGNsb3NlciB0byB0YWtlIHRoZSBzdGF0dWUuIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6IG51bGx9LHsiYm9keSI6ICIuLi4iLCJzY3JpcHQiOiBudWxsLCJzcGVha2VyIjogbnVsbH0seyJib2R5IjogIi4uLiIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiBudWxsfSx7ImJvZHkiOiAiLi4uIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6IG51bGx9LHsiYm9keSI6ICI1IGRheXMgbGF0ZXIuIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6IG51bGx9LHsiYm9keSI6ICJZb3Ugd2FrZSB1cCBhcyB0aGUgc3VuIGxpZ2h0IGhpdHMgeW91ciBmYWNlLiIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiBudWxsfSx7ImJvZHkiOiAiWW91IHdlcmUgc2xlZXBpbmcgcGVhY2VmdWxseSBpbiB5b3VyIGJlZC4iLCJzY3JpcHQiOiBudWxsLCJzcGVha2VyIjogbnVsbH1dLCJ0aXRsZSI6ICJUaGUgZGVhbCIsInZpc2liaWxpdHlTY3JpcHQiOiBudWxsfSx7ImFjdGlvbkxhYmVsIjogbnVsbCwiaWQiOiAiNV90aGVfY291cnQiLCJtZXNzYWdlcyI6IFt7ImJvZHkiOiAiWW91IHdhbGsgaW50byB0aGUgY291cnRyb29tLiIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiBudWxsfSx7ImJvZHkiOiAiIFRoaXMgaXMgSXNhYmVsLiBUaGVyZSBpcyBubyBvbmUgYmV0dGVyIHN1aXRlZCBmb3IgdGhlIGpvYiwgeW91ciBtYWplc3R5LiIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiAiTWFyaW5vIn0seyJib2R5IjogIlRoZSBLaW5nLCBEb20gUGVkcm8gSVYsIGxvb2tzIGF0IHlvdSB3aXRoIGEgbWl4IG9mIGRpc2d1c3QgYW5kIGRpc3RydXN0LiIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiBudWxsfSx7ImJvZHkiOiAiIE1hcmlubywgYXJlIHlvdSBzdXJlIHdlIGNhbiB0cnVzdCB0aGlzLi4uIENyZWF0dXJlPyIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiAiRG9tIFBlZHJvIElWIn0seyJib2R5IjogIiBTaGUgSVMgaHVtYW4sIHlvdXIgbWFqZXN0eS4gVGhlIENoaWxkcmVuIG9mIFNhaGkgbWF5IGJlIG15c3RpY2FsLCBidXQgdGhleSBhcmUgYXMgaHVtYW4gYXMgSSBhbS4iLCJzY3JpcHQiOiBudWxsLCJzcGVha2VyIjogIk1hcmlubyJ9LHsiYm9keSI6ICIgLi4uSXNhYmVsLiBJIGRvIG5vdCB0cnVzdCB5b3Ugb3IgeW91ciBraW5kLiBCdXQgSSB0cnVzdCBNYXJpbm8uICIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiAiRG9tIFBlZHJvIElWIn0seyJib2R5IjogIiBJIHdhbnQgeW91IHRvIGhlYXIgbXkgcmVxdWVzdC4gTXkgZGF1Z2h0ZXIgaGFzIGJlZW4gY2FwdHVyZWQuIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6ICJEb20gUGVkcm8gSVYifSx7ImJvZHkiOiAiIFJlc2N1ZSBoZXIuIEFuZCBtYWtlIG5vIG1pc3Rha2UsIEkgc3RyaXZlIHRvIGJlIGZhaXIuIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6ICJEb20gUGVkcm8gSVYifSx7ImJvZHkiOiAiIENvbXBsZXRlIHRoaXMgam9iIGFuZCB5b3UnbGwgYmUgcmV3YXJkZWQgYWNjb3JkaW5nbHkuIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6ICJEb20gUGVkcm8gSVYifSx7ImJvZHkiOiAiIEl0IHdvdWxkIGJlIG15IGhvbm9yLCB5b3VyIG1hamVzdHkuIEknbGwgZG8gd2hhdGV2ZXIgaXQgdGFrZXMgdG8gc2F2ZSBvdXIgcm95YWwgcHJpbmNlc3MuIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6ICJJc2FiZWwifSx7ImJvZHkiOiAiVGhlIEtpbmcgbG9va2VkIHN1cnByaXNlZCBhdCB5b3VyIHdvcmRzLiIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiBudWxsfSx7ImJvZHkiOiAiIFNoZSBoYXMgbWFubmVycy4gWW91IGhhdmUgcmFpc2VkIGhlciB3ZWxsLCBNYXJpbm8uICIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiAiRG9tIFBlZHJvIElWIn0seyJib2R5IjogIiBHbyB0byB0aGUgZWFzdCBnYXRlIGFuZCBhc2sgZm9yIFZpY3Rvci4gSGUgd2lsbCB0ZWxsIHlvdSB3aGF0IHlvdSBuZWVkIHRvIGtub3cuIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6ICJEb20gUGVkcm8gSVYifV0sInRpdGxlIjogIlRoZSBDb3VydCIsInZpc2liaWxpdHlTY3JpcHQiOiBudWxsfSx7ImFjdGlvbkxhYmVsIjogbnVsbCwiaWQiOiAiNl92aWN0b3IiLCJtZXNzYWdlcyI6IFt7ImJvZHkiOiAiIFlvdSBtdXN0IGJlIElzYWJlbC4gSSdtIFZpY3RvciBvZiB0aGUgUm95YWwgR3VhcmQuICIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiAiVmljdG9yIn0seyJib2R5IjogIlRoZSBtYW4gZG9lcyBub3Qgc2VlbiBoYXBweSB0byBtZWV0IHlvdS4iLCJzY3JpcHQiOiBudWxsLCJzcGVha2VyIjogbnVsbH0seyJib2R5IjogIiBUaGUgcHJpbmNlc3MgaXMgYmVsaWV2ZWQgdG8gYmUgaGVsZCBhdCBTYW4gTWFyY2VsbyBGb3J0LiBJIHdpbGwgYWNjb21wYW55IHlvdS4iLCJzY3JpcHQiOiBudWxsLCJzcGVha2VyIjogIlZpY3RvciJ9LHsiYm9keSI6ICIgUGxlYXN1cmUgdG8gbWVldCB5b3UsIHNpciBWaWN0b3IuIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6ICJJc2FiZWwifSx7ImJvZHkiOiAiIFdobyBjYXB0dXJlZCB0aGUgcHJpbmNlc3M/IEFyZSB0aGV5IGFza2luZyBmb3IgcmFuc29tPyIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiAiSXNhYmVsIn0seyJib2R5IjogIiBZb3UgZG8gbm90IG5lZWQgdG8ga25vdy4gIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6ICJWaWN0b3IifSx7ImJvZHkiOiAiIC4uLkxpc3RlbiwgVmljdG9yLiBXZSB3YW50IHRoZSBzYW1lIHRoaW5nLiIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiAiSXNhYmVsIn0seyJib2R5IjogIiBUbyBzYXZlIHRoZSBwcmluY2Vzcy4iLCJzY3JpcHQiOiBudWxsLCJzcGVha2VyIjogIklzYWJlbCJ9LHsiYm9keSI6ICIgLi4uQXBvbG9naWVzLiBUaGV5IGJlbGlldmUgaXQgd2FzIHRoZSBsZWFkZXIgb2YgdGhlIFJveWFsIEd1YXJkIHdobyBjYXB0dXJlZCBoZXIuIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6ICJWaWN0b3IifSx7ImJvZHkiOiAiIE9oLi4uIEd1ZXNzIHdlJ2xsIGtub3cgd2hlbiB3ZSBnZXQgdGhlcmUuIExldCdzIGdvLiIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiAiSXNhYmVsIn1dLCJ0aXRsZSI6ICJWaWN0b3Igb2YgdGhlIFJveWFsIEd1YXJkIiwidmlzaWJpbGl0eVNjcmlwdCI6IG51bGx9LHsiYWN0aW9uTGFiZWwiOiBudWxsLCJpZCI6ICI3X2ZpcnN0X3RpbWUiLCJtZXNzYWdlcyI6IFt7ImJvZHkiOiAiVmljdG9yIG9mIHRoZSBSb3lhbCBHdWFyZCBkb2VzIG5vdCBzZWVtIHRvIHN0b3Agc3RhcmluZyBhdCB5b3UuIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6IG51bGx9LHsiYm9keSI6ICIgRmlyc3QgdGltZSBzZWVpbmcgYSBjaGlsZCBvZiBTYWhpPyIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiAiSXNhYmVsIn0seyJib2R5IjogIiBBaCwgbXkgYXBvbG9naWVzLiBEaWQgbm90IG1lYW4gdG8gc3RhcmUuICIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiAiVmljdG9yIn0seyJib2R5IjogIiBZZXMsIGl0IGlzLiBUaGUgYmx1ZSBpcyBhIGJlYXV0aWZ1bCBjb2xvci4iLCJzY3JpcHQiOiBudWxsLCJzcGVha2VyIjogIlZpY3RvciJ9LHsiYm9keSI6ICIgWW91IGRvbid0IHRoaW5rIG9mIHVzIGFzIG1vbnN0ZXJzPyIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiAiSXNhYmVsIn0seyJib2R5IjogIiBJIGFtIGEga25pZ2h0LCBpdCBpcyBub3QgZm9yIG1lIHRvIHRoaW5rIG9yIG5vdCB0aGluayBzdWNoIHRoaW5ncy4iLCJzY3JpcHQiOiBudWxsLCJzcGVha2VyIjogIlZpY3RvciJ9LHsiYm9keSI6ICIgU3BlYWtpbmcgYXMgVmljdG9yLCB0aGUgbWFuLCBJIHdvdWxkIHNheSB3ZSBoYXZlIGxpdHRsZSB0byBnYWluIGFuZCBhIGxvdCB0byBsb3NlIGZyb20gbGFiZWxpbmcgd2hvIGlzIGh1bWFuIGFuZCB3aG8gaXMgbm90LiIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiAiVmljdG9yIn0seyJib2R5IjogIiBMb3ZlbHkgdGhvdWdodHMsIFZpY3Rvci4gS2VlcCB0aGVtIHRvIHlvdXIgaGVhcnQuIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6ICJJc2FiZWwifSx7ImJvZHkiOiAiIEJ1dCBiZXN0IG5vdCB0byB2b2ljZSB0aGVtLiBVbmxlc3MgeW91IGFyZSByZWFkeSB0byBmaWdodCBmb3IgYSBjYXVzZSB3aGljaCBkb2Vzbid0IHJlYWxseSBjb25jZXJuIHlvdS4iLCJzY3JpcHQiOiBudWxsLCJzcGVha2VyIjogIklzYWJlbCJ9LHsiYm9keSI6ICJZb3UgYW5kIFZpY3RvciBjb250aW51ZSBvbiB0aGUgcm9hZC4iLCJzY3JpcHQiOiBudWxsLCJzcGVha2VyIjogbnVsbH1dLCJ0aXRsZSI6ICJGaXJzdCB0aW1lIiwidmlzaWJpbGl0eVNjcmlwdCI6IG51bGx9LHsiYWN0aW9uTGFiZWwiOiBudWxsLCJpZCI6ICI4X3JveWFsX2d1YXJkIiwibWVzc2FnZXMiOiBbeyJib2R5IjogIiBJZiB5b3UgZG9uJ3QgY2FyZSB0aGF0IGFib3V0IG15IGhhaXIgY29sb3IsIHRoZW4gd2h5IGRvIHlvdSBsb29rIGFuZ3J5PyIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiAiSXNhYmVsIn0seyJib2R5IjogIiBUaGlzIGR1dHkgc2hvdWxkIGhhdmUgYmVlbiBnaXZlbiB0byB0aGUgbWVtYmVycyBvZiB0aGUgUm95YWwgR3VhcmQuICIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiAiVmljdG9yIn0seyJib2R5IjogIiBUaGV5IGNvdWxkIGhhdmUgZXZlbiBzZW50IG1lIGFsb25lLiBJdCBpcyBteSBkdXR5IHRvIHByb3RlY3QgdGhlIHByaW5jZXNzLiIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiAiVmljdG9yIn0seyJib2R5IjogIiBZb3UgYXJlIG5vdCBuZWNlc3NhcnksIGFuZCB5ZXQuLi4iLCJzY3JpcHQiOiBudWxsLCJzcGVha2VyIjogIlZpY3RvciJ9LHsiYm9keSI6ICIgSSBzZWUuIFRoZXkgc3VzcGVjdCB0aGUgUm95YWwgR3VhcmQgaXMgaW52b2x2ZWQsIHNvIHRoYXQgaXMgd2h5IEkgd2FzIGNhbGxlZC4iLCJzY3JpcHQiOiBudWxsLCJzcGVha2VyIjogIklzYWJlbCJ9LHsiYm9keSI6ICIgVGhlcmUgaXMgbm8gd2F5IGFueSBtZW1iZXIgb2YgdGhlIFJveWFsIEd1YXJkIGlzIGludm9sdmVkIGluIHRoaXMuIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6ICJWaWN0b3IifSx7ImJvZHkiOiAiIFRoZSBlbmVteSBwbGFucyB0byBzcHJlYWQgZGlzdHJ1c3QgYW5kIGh1cnQgb3VyIGhvbm9yLiIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiAiVmljdG9yIn0seyJib2R5IjogIiBZb3UsIElzYWJlbCwgaGFzIGJlY29tZSBhIHN0YWluIG9mIGRpcnQgaW4gb3VyIG5hbWUuIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6ICJWaWN0b3IifSx7ImJvZHkiOiAiIC4uLiIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiAiSXNhYmVsIn0seyJib2R5IjogIiBJIGFncmVlIHdpdGggeW91LiBJIGRvbid0IHRoaW5rIHRoZSBSb3lhbCBHdWFyZCBpcyBiZWhpbmQgdGhpcyBlaXRoZXIuIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6ICJJc2FiZWwifSx7ImJvZHkiOiAiVmljdG9yIGxvb2tzIHN1cnByaXNlZCBhdCB5b3VyIHdvcmRzLiAiLCJzY3JpcHQiOiBudWxsLCJzcGVha2VyIjogbnVsbH0seyJib2R5IjogIiBMZXQgdXMgaHVycnkuIFRoZSBmYXN0ZXIgd2UgY2FuIHNhdmUgdGhlIHByaW5jZXNzIGFuZCBmaW5kIG91dCB3aG8gdGhlIHJlYWwgZW5lbXkgaXMsIHRoZSBmYXN0ZXIgdGhlIFJveWFsIEd1YXJkIG5hbWUgY2FuIGJlIGNsZWFuZWQuIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6ICJJc2FiZWwifV0sInRpdGxlIjogIlJveWFsIEd1YXJkIEhvbm9yIiwidmlzaWJpbGl0eVNjcmlwdCI6IG51bGx9LHsiYWN0aW9uTGFiZWwiOiBudWxsLCJpZCI6ICIxMV9hcnJlc3QiLCJtZXNzYWdlcyI6IFt7ImJvZHkiOiAiIFByaW5jZXNzISBZb3UgYXJlIHNhZmUhISIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiAiVmljdG9yIn0seyJib2R5IjogIiBWaWN0b3IsIGdvb2Qgb2YgeW91IHRvIGNvbWUuICIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiAiUHJpbmNlc3MifSx7ImJvZHkiOiAiVGhlIHByaW5jZXNzIGxvb2tzIGF0IHlvdSwgd2l0aCBzZXJpb3VzLCBjYWxtIGV5ZXMuIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6IG51bGx9LHsiYm9keSI6ICIgQW5kIHlvdSBhcmU/Iiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6ICJQcmluY2VzcyJ9LHsiYm9keSI6ICIgSXNhYmVsLCB5b3VyIGhpZ2huZXNzLiIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiAiSXNhYmVsIn0seyJib2R5IjogIiBBcnJlc3QgSXNhYmVsLCBWaWN0b3IuIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6ICJQcmluY2VzcyJ9LHsiYm9keSI6ICIgLi4uSSdtIHNvcnJ5PyBZb3UgbWlzdW5kZXJzdGFuZCwgUHJpbmNlc3MsIElzYWJlbCBoZWxwZWQgcmVzY3VlIHlvdS4iLCJzY3JpcHQiOiBudWxsLCJzcGVha2VyIjogIlZpY3RvciJ9LHsiYm9keSI6ICIgSSBhbSBhd2FyZS4gQnV0IHNoZSBpcyBhbHNvIGEgY3JpbWluYWwuIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6ICJQcmluY2VzcyJ9LHsiYm9keSI6ICIgTWF5IEkgYXNrIHdoYXQgbXkgY3JpbWVzIGFyZSwgeW91ciBoaWdobmVzcz8iLCJzY3JpcHQiOiBudWxsLCJzcGVha2VyIjogIklzYWJlbCJ9LHsiYm9keSI6ICIgUm95YWx0eSBhYmR1Y3Rpb24gYW5kIGFzc2Fzc2luYXRpb24gb2YgdGhlIFJveWFsIEd1YXJkLiIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiAiUHJpbmNlc3MifSx7ImJvZHkiOiAiSXNhYmVsIGRyYXdzIGhlciB3ZWFwb24uIFZpY3RvciBkb2VzIHRoZSBzYW1lIGFuZCBtb3ZlcyBjbG9zZXIgdG8gdGhlIHByaW5jZXNzLiIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiBudWxsfSx7ImJvZHkiOiAiIEkgY2FuIGtpbGwgeW91IGJvdGggd2l0aG91dCBwcm9ibGVtLCB5b3Uga25vdz8iLCJzY3JpcHQiOiBudWxsLCJzcGVha2VyIjogIklzYWJlbCJ9LHsiYm9keSI6ICIgWW91IGNvdWxkLiBCdXQgd2hhdCB3b3VsZCB5b3UgZG8gbmV4dD8gR28gYmFjayB0byB0aGUgY2FzdGxlIGFuZCByZXBvcnQgb3VyIGRlYXRocz8iLCJzY3JpcHQiOiBudWxsLCJzcGVha2VyIjogIlByaW5jZXNzIn0seyJib2R5IjogIiBPciBwZXJoYXBzIHlvdSB3b3VsZCBydW4gYXdheSBhZnRlciBraWxsaW5nIHVzLCBiZWNvbWluZyBhIHdhbnRlZCBjcmltaW5hbC4iLCJzY3JpcHQiOiBudWxsLCJzcGVha2VyIjogIlByaW5jZXNzIn0seyJib2R5IjogIiBFaXRoZXIgd2F5LCBNYXJpbm8gd291bGQgbG9zZSBoaXMgam9iIGFuZCB5b3UgZG9uJ3Qgd2FudCB0aGF0LCBkbyB5b3U/Iiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6ICJQcmluY2VzcyJ9LHsiYm9keSI6ICIgWW91IGFyZSB3YXksIHdheSBzbWFydGVyIHRoYW4gSSB0aG91Z2h0LCBQcmluY2Vzcy4gQnJhdm8uIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6ICJJc2FiZWwifSx7ImJvZHkiOiAiIFdlbGwsIGlmIEkgZ2V0IGFycmVzdGVkLCBNYXJpbm8gd291bGQgbG9zZSBoaXMgam9iIHRoZSBzYW1lIHdheSwgc28uLi4gTWlnaHQgYXMgd2VsbCBraWxsIHlvdSBib3RoIGFuZCBrZWVwIG15IGZyZWVkb20uIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6ICJJc2FiZWwifSx7ImJvZHkiOiAiIENhbiBzb21lb25lIGV4cGxhaW4gbWUgd2hhdCBpcyBoYXBwZW5pbmcgaGVyZS4uLj8gV2h5IHdvdWxkIElzYWJlbCBhYmR1Y3QgdGhlIFByaW5jZXNzIGFuZCB0aGVuIGhlbHAgcmVzY3VlIGhlcj8iLCJzY3JpcHQiOiBudWxsLCJzcGVha2VyIjogIlZpY3RvciJ9LHsiYm9keSI6ICIgSXQgaXMgYWxsIE1hcmlubydzIHBsb3QuIEhlIHBsYW5zIHRvIGluY3JlYXNlIGhpcyBpbmZsdWVuY2Ugb3ZlciB0aGUga2luZ2RvbS4iLCJzY3JpcHQiOiBudWxsLCJzcGVha2VyIjogIlByaW5jZXNzIn0seyJib2R5IjogIiBJIGd1ZXNzIGhlIGFsc28gd2FudHMgdG8gcHV0IGhpcyBwYXduLCBJc2FiZWwgaGVyZSwgaW4gYSBtb3JlIGFkdmFudGFnZW91cyBwb3NpdGlvbi4iLCJzY3JpcHQiOiBudWxsLCJzcGVha2VyIjogIlByaW5jZXNzIn0seyJib2R5IjogIlRoZSB0ZW5zaW9uIGJ1aWxkcyB1cCBpbiB0aGUgcm9vbSBhcyBWaWN0b3IgYW5kIElzYWJlbCBzdGFyZSBhdCBlYWNoIG90aGVyLiIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiBudWxsfSx7ImJvZHkiOiAiIFJ1biBQcmluY2VzcywgSSBjYW4gYXQgbGVhc3Qgc2F2ZSB0aW1lLiIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiAiVmljdG9yIn0seyJib2R5IjogIiBQdXQgZG93biB5b3VyIHN3b3JkLCBWaWN0b3IuIFlvdSBhcmUgbm90IGFycmVzdGluZyBoZXIuIEFuZCBJc2FiZWwgd29uJ3QgZmlnaHQgeW91LiIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiAiUHJpbmNlc3MifSx7ImJvZHkiOiAiIEkgd29uJ3Q/IFdoeT8iLCJzY3JpcHQiOiBudWxsLCJzcGVha2VyIjogIklzYWJlbCJ9LHsiYm9keSI6ICIgVGhlcmUgaXMgYSB3YXkgd2UgY2FuIGJvdGggZ2V0IHdoYXQgd2Ugd2FudC4gQW5kIG1vcmUuICIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiAiUHJpbmNlc3MifSx7ImJvZHkiOiAiIFdoeSBkb24ndCB5b3UgbGlzdGVuIHRvIG15IG9mZmVyPyBJJ20gc3VyZSBpdCB3aWxsIGJlIHRvIHlvdXIgbGlraW5nLiIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiAiUHJpbmNlc3MifSx7ImJvZHkiOiAiLiIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiBudWxsfSx7ImJvZHkiOiAiLiIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiBudWxsfSx7ImJvZHkiOiAiLiIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiBudWxsfSx7ImJvZHkiOiAiSXNhYmVsJ3Mgc3Rvcnkgd2lsbCBjb250aW51ZSBpbiBmdXR1cmUgdXBkYXRlcy4iLCJzY3JpcHQiOiBudWxsLCJzcGVha2VyIjogbnVsbH0seyJib2R5IjogIlBsYXkgYXMgWW91IGJ5IGdvaW5nIHRvIHRoZSBUaXRsZSB0YWIuIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6IG51bGx9XSwidGl0bGUiOiAiQXJyZXN0IElzYWJlbCIsInZpc2liaWxpdHlTY3JpcHQiOiBudWxsfSx7ImFjdGlvbkxhYmVsIjogbnVsbCwiaWQiOiAiNF9icmVha2Zhc3QiLCJtZXNzYWdlcyI6IFt7ImJvZHkiOiAiWW91IGNvb2sgZWdncyB3aGlsZSBNYXJpbm8gbWFrZXMgb3JhbmdlIHRlYS4iLCJzY3JpcHQiOiBudWxsLCJzcGVha2VyIjogbnVsbH0seyJib2R5IjogIllvdSBib3RoIHNpdCBkb3duIGZvciBicmVha2Zhc3QuIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6IG51bGx9LHsiYm9keSI6ICIgVGhlIHRlYSB0YXN0ZXMgd2VpcmQgdG9kYXkuICIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiAiSXNhYmVsIn0seyJib2R5IjogIiBTb3JyeSwgY291bGRuJ3Qgc2xlZXAgd2VsbCBsYXN0IG5pZ2h0LiBNdXN0IGhhdmUgc2NyZXdlZCBpdCB1cC4uLiIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiAiTWFyaW5vIn0seyJib2R5IjogIiBXb3JyaWVkIGFib3V0IHRoZSBwbGFuPyAiLCJzY3JpcHQiOiBudWxsLCJzcGVha2VyIjogIklzYWJlbCJ9LHsiYm9keSI6ICIgLi4uWWVzLiBBcyBzaG91bGQgYmUgeW91LiBSZXBlYXQgdGhlIHBsYW4uIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6ICJNYXJpbm8ifSx7ImJvZHkiOiAiIFdlIG1lZXQgdGhlIEtpbmcuIEhlIGFza3MgbWUgdG8gcmVzY3VlIHRoZSBwcmluY2Vzcy4gSSByZXNjdWUgdGhlIHByaW5jZXNzLiAiLCJzY3JpcHQiOiBudWxsLCJzcGVha2VyIjogIklzYWJlbCJ9LHsiYm9keSI6ICIgSSBiZWNvbWUgYSBoZXJvLiBWaXNjb25kZSBNYXJpbm8gYmVjb21lcyBDb25kZSBNYXJpbm8sIGEgbmljZSBwcm9tb3Rpb24uICIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiAiSXNhYmVsIn0seyJib2R5IjogIiBBbSBJIG1pc3NpbmcgYW55dGhpbmc/Iiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6ICJJc2FiZWwifSx7ImJvZHkiOiAiIFBlcmZlY3QuIEV4Y2VwdCBmb3Igd2hhdCB5b3UgZGlkIDUgZGF5cyBhZ28uIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6ICJNYXJpbm8ifSx7ImJvZHkiOiAiIEkgbWFkZSB5b3VyIHBsYW4gZXZlbiBiZXR0ZXIuIFlvdSBzaG91bGQgdGhhbmsgbWUuIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6ICJJc2FiZWwifSx7ImJvZHkiOiAiIFlvdSBkaWQsIGJ1dCBhdCB0aGUgY29zdCBvZiBibG9vZC4gVW5uZWNlc3NhcnkuIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6ICJNYXJpbm8ifSx7ImJvZHkiOiAiVGhlIHJvb20gYmVjb21lcyBzaWxlbnQgYXMgeW91IGJvdGggZmluaXNoIHlvdXIgbWVhbC4iLCJzY3JpcHQiOiBudWxsLCJzcGVha2VyIjogbnVsbH0seyJib2R5IjogIiBMZXQgdXMgZ28uIERvbid0IHdhbm5hIGtlZXAgdGhlIEtpbmcgd2FpdGluZy4iLCJzY3JpcHQiOiBudWxsLCJzcGVha2VyIjogIklzYWJlbCJ9XSwidGl0bGUiOiAiQnJlYWtmYXN0IiwidmlzaWJpbGl0eVNjcmlwdCI6IG51bGx9LHsiYWN0aW9uTGFiZWwiOiBudWxsLCJpZCI6ICI5X3Ryb2xsIiwibWVzc2FnZXMiOiBbeyJib2R5IjogIkEgdHJvbGwgc3RhbmRzIGluIHRoZSBnYXRlcyBvZiB0aGUgRm9ydCBTYW4gTWFyY2Vsby4gIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6IG51bGx9LHsiYm9keSI6ICIgU3RhbmQgYmFjaywgVmljdG9yLiBJJ2xsIGhhbmRsZSBoaW0uICIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiAiSXNhYmVsIn0seyJib2R5IjogIlZpY3RvciBsb29rcyBkaXNhcHBvaW50ZWQgYXQgaGltc2VsZiwgYnV0IG5vZHMsIGxlYXZpbmcgdGhlIGJhdHRsZSB0byB5b3UuIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6IG51bGx9XSwidGl0bGUiOiAiVGhlIFRyb2xsIiwidmlzaWJpbGl0eVNjcmlwdCI6IG51bGx9LHsiYWN0aW9uTGFiZWwiOiBudWxsLCJpZCI6ICIxMF9zdHJlbmd0aCIsIm1lc3NhZ2VzIjogW3siYm9keSI6ICIgSSBoYXZlIGhlYXJkIHRoZSBjaGlsZHJlbiBvZiBTYWhpIHdlcmUgc3Ryb25nLCBidXQgZGlkbid0IGtub3cgaXQgd2FzIHN1Y2ggcG93ZXIuIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6ICJWaWN0b3IifSx7ImJvZHkiOiAiIEkgd2lzaCBJIGhhZCBzdWNoIHN0cmVuZ3RoLi4uIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6ICJWaWN0b3IifSx7ImJvZHkiOiAiIEJlIGNhcmVmdWwgd2l0aCB3aGF0IHlvdSB3aXNoIGZvci4gSXQgY29tZXMgYXQgYSBjb3N0LiAiLCJzY3JpcHQiOiBudWxsLCJzcGVha2VyIjogIklzYWJlbCJ9LHsiYm9keSI6ICIgLi4uIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6ICJWaWN0b3IifSx7ImJvZHkiOiAiIFlvdSBhbHNvIGRvbid0IHRoaW5rIHRoZSBSb3lhbCBHdWFyZCBpcyBiZWhpbmQgdGhlIGFiZHVjdGlvbiBvZiB0aGUgcHJpbmNlc3M/Iiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6ICJWaWN0b3IifSx7ImJvZHkiOiAiIEkgZG9uJ3QuIFNvbWV0aGluZyBlbHNlIGlzIGF0IHdvcmsgaGVyZS4gTW9yZSBzaW5pc3Rlci4iLCJzY3JpcHQiOiBudWxsLCJzcGVha2VyIjogIklzYWJlbCJ9LHsiYm9keSI6ICJWaWN0b3Igc21pbGVzIGF0IHlvdSBhbmQgbm9kcy4iLCJzY3JpcHQiOiBudWxsLCJzcGVha2VyIjogbnVsbH0seyJib2R5IjogIiBJIGZlZWwgdGhlIHNhbWUuIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6ICJWaWN0b3IifSx7ImJvZHkiOiAiWW91IGJvdGggbG9vayBvdmVyIHRvIEZvcnQgU2FuIE1hcmNlbG8uIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6IG51bGx9LHsiYm9keSI6ICIgTGV0IHVzIGh1cnJ5ISIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiAiVmljdG9yIn1dLCJ0aXRsZSI6ICJUaGUgc3RyZW5ndGggb2YgdGhlIENoaWxkcmVuIG9mIFNhaGkiLCJ2aXNpYmlsaXR5U2NyaXB0IjogbnVsbH1d"},{ name : "lato17_fnt", data : ""},{ name : "uigen_txt", data : ""},{ name : "Unnamed_fnt", data : ""},{ name : "font14_fnt", data : ""},{ name : "font16_fnt", data : ""},{ name : "spine/character_json", data : "eyJza2VsZXRvbiI6eyJoYXNoIjoiRFhRcjgwUEZUS2siLCJzcGluZSI6IjQuMC42NCJ9LCJib25lcyI6W3sibmFtZSI6InJvb3QifV0sImFuaW1hdGlvbnMiOnsiYXR0YWNrIjp7ImJvbmVzIjp7InJvb3QiOnsidHJhbnNsYXRlIjpbe30seyJ0aW1lIjowLjA2NjcsIngiOi01NS43OH0seyJ0aW1lIjowLjEzMzMsIngiOjkxLjh9LHsidGltZSI6MC42NjY3fV19fX19fQ"},{ name : "storyjson", data : "W3siYWN0aW9uTGFiZWwiOiAiV2FrZSB1cCIsImlkIjogIkEgZmluZSBtb3JuaW5nLiIsIm1lc3NhZ2VzIjogW3siYm9keSI6ICJJdCdzIGEgZmluZSBtb3JuaW5nLiAiLCJzY3JpcHQiOiBudWxsLCJzcGVha2VyIjogbnVsbH0seyJib2R5IjogIllvdSBoZWFkIGZvciB0aGUgZG9vciwgcmVhZHkgdG8gZ28gb3V0c2lkZS4iLCJzY3JpcHQiOiBudWxsLCJzcGVha2VyIjogbnVsbH0seyJib2R5IjogIiBZb3UncmUgZ29pbmcgb3V0IHRvZGF5IHRvbz8gV2hlcmUgdG8/Iiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6ICJNb20ifSx7ImJvZHkiOiAiIEtpbGwgc29tZSBtb25zdGVycywgbW9tLiIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiAiWW91In0seyJib2R5IjogIiBXaHkgZG8gSSBldmVuIGFzaywgc2hlIGRvZXMgdGhpcyBldmVyeSBkYXkuLi4iLCJzY3JpcHQiOiBudWxsLCJzcGVha2VyIjogIk1vbSJ9XSwidGl0bGUiOiAiQSBmaW5lIG1vcm5pbmcuIiwidmlzaWJpbGl0eVNjcmlwdCI6IG51bGx9LHsiYWN0aW9uTGFiZWwiOiAiSSdtIGh1bmdyeS4uLiIsImlkIjogIlRpbWUgZm9yIGRpbm5lciIsIm1lc3NhZ2VzIjogW3siYm9keSI6ICJZb3VyIHJ1bWJsaW5nIHN0b21hY2ggbWFkZSB5b3UgZGVjaWRlIHRvIGdvIGJhY2sgaG9tZS4iLCJzY3JpcHQiOiBudWxsLCJzcGVha2VyIjogbnVsbH0seyJib2R5IjogIiBJJ20gYmFjayIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiAiWW91In0seyJib2R5IjogIiBHb29kLCBpdCdzIHRpbWUgZm9yIGRpbm5lci4iLCJzY3JpcHQiOiBudWxsLCJzcGVha2VyIjogIk1vbSJ9LHsiYm9keSI6ICIgSGV5IG1vbS4uLiIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiAiWW91In0seyJib2R5IjogIiBXaGF0IGlzIHdyb25nLCBkZWFyPyIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiAiTW9tIn0seyJib2R5IjogIiBJJ20gbGVhdmluZyB0b3duIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6ICJZb3UifSx7ImJvZHkiOiAiIEhhaGFoYWhhYSwgb2ggWW91Li4uIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6ICJNb20ifSx7ImJvZHkiOiAiIEFuZCBJJ20gTWJvaSwgR29kIG9mIFdhdGVyd2F5cyEiLCJzY3JpcHQiOiBudWxsLCJzcGVha2VyIjogIk1vbSJ9LHsiYm9keSI6ICIgLi4uIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6ICJZb3UifSx7ImJvZHkiOiAiIEMnbW9uLCBlYXQgdXAuIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6ICJNb20ifSx7ImJvZHkiOiAiWW91IGdvIGJhY2sgdG8gYmVkLCB1bnNhdGlzZmllZCB3aXRoIHdoYXQgeW91ciBtb20gc2FpZC4iLCJzY3JpcHQiOiBudWxsLCJzcGVha2VyIjogbnVsbH1dLCJ0aXRsZSI6ICJUaW1lIGZvciBkaW5uZXIiLCJ2aXNpYmlsaXR5U2NyaXB0IjogIiByZXR1cm4gZ2xvYmFsW1wibWF4YXJlYVwiXSA+IDI7ICJ9LHsiYWN0aW9uTGFiZWwiOiAiSG93IGRvIEkgZ2V0IHN0cm9uZ2VyLi4uIiwiaWQiOiAiQmVjb21lIHN0cm9uZ2VyIiwibWVzc2FnZXMiOiBbeyJib2R5IjogIllvdSBzdG9wIG1vdmluZyBhbmQgdGFrZSBhIGRlZXAgYnJlYXRoLiAiLCJzY3JpcHQiOiBudWxsLCJzcGVha2VyIjogbnVsbH0seyJib2R5IjogIllvdSBzdGFyZSBhdCB5b3VyIGhhbmRzLCB3aGljaCBhcmUgc3Ryb25nZXIgdGhhbiBldmVyLiIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiBudWxsfSx7ImJvZHkiOiAiWWV0LCBzb21ldGhpbmcgY29uY2VybnMgeW91LiIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiBudWxsfSx7ImJvZHkiOiAiIEkgZmVlbCBsaWtlIGl0IGJlY29tZXMgaGFyZGVyIGFuZCBoYXJkZXIgdG8gYmVjb21lIHN0cm9uZ2VyLi4uIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6ICJZb3UifSx7ImJvZHkiOiAiQSBzaGFkeSBtYW4gYXBwcm9hY2hlcyB5b3UuIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6IG51bGx9LHsiYm9keSI6ICIgSGV5IGtpZC4iLCJzY3JpcHQiOiBudWxsLCJzcGVha2VyIjogIk1hbiJ9LHsiYm9keSI6ICIgV2hvIGFyZSB5b3U/Iiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6ICJZb3UifSx7ImJvZHkiOiAiIE5hbWUncyBDaWQuICIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiAiTWFuIn0seyJib2R5IjogIiBJIGZlZWwgbGlrZSBJJ3ZlIHNlZW4gdGhhdCBuYW1lIGJlZm9yZS4uLiIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiAiWW91In0seyJib2R5IjogIiBZb3Ugd2FubmEgYmVjb21lIHN0cm9uZ2VyPyBIZWguIFNvbWV0aW1lcyB5b3UgZ290dGEgbG9zZSBpdCBhbGwgdG8gcmVhY2ggYSBuZXcgaGVpZ2h0LiIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiAiQ2lkIn0seyJib2R5IjogIiBBbnl3YXlzLCB0YWtlIHRoaXMuIEl0IHRlYWNoZXMgeW91IGhvdyB0byBTb3VsIENydXNoLiIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiAiQ2lkIn0seyJib2R5IjogIkhlIGhhbmRzIHlvdSBhbiBvbGQgc2Nyb2xsLiIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiBudWxsfSx7ImJvZHkiOiAiIEkgc2hvdWxkbid0IHJlYWxseSB0YWtlIHRoaW5ncyBmcm9tIHN0cmFuZ2Vycy4uLiIsInNjcmlwdCI6IG51bGwsInNwZWFrZXIiOiAiWW91In0seyJib2R5IjogIiBCdXQgb2ggd2VsbC4gSSdsbCB0YWtlIGEgc2hvdC4gSG9wZSBpdCBkb2Vzbid0IGdldCBtZSBraWxsZWQuIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6ICJZb3UifSx7ImJvZHkiOiAiIFlvdSBtYXkgbm90IGJlIGFibGUgdG8gZG8gaXQgbm93LCBidXQgc29tZWRheS4uLiBHb29kIGx1Y2ssIGtpZC4iLCJzY3JpcHQiOiBudWxsLCJzcGVha2VyIjogIkNpZCJ9LHsiYm9keSI6ICItLS0iLCJzY3JpcHQiOiBudWxsLCJzcGVha2VyIjogbnVsbH0seyJib2R5IjogIlNvdWwgQ3J1c2ggaXMgbm93IGFjY2Vzc2libGUuIFlvdSBuZWVkIHRvIGJlIGF0IGEgY2VydGFpbiBsZXZlbCB0byB1c2UgaXQuIiwic2NyaXB0IjogbnVsbCwic3BlYWtlciI6IG51bGx9XSwidGl0bGUiOiAiQmVjb21lIHN0cm9uZ2VyIiwidmlzaWJpbGl0eVNjcmlwdCI6ICIgcmV0dXJuIGdsb2JhbFtcImhlcm9sZXZlbFwiXSA+IDg7ICJ9XQ"}];
haxe_ds_ObjectMap.count = 0;
js_Boot.__toStr = ({ }).toString;
Achievement.LOCKED = 0;
Achievement.UNLOCKED = 1;
seedyrng_Xorshift128Plus.PARAMETER_A = 23;
seedyrng_Xorshift128Plus.PARAMETER_B = 17;
seedyrng_Xorshift128Plus.PARAMETER_C = 26;
seedyrng_Xorshift128Plus.SEED_1 = (function($this) {
	var $r;
	var this1 = new haxe__$Int64__$_$_$Int64(842650776,685298713);
	$r = this1;
	return $r;
}(this));
Generation.random = new seedyrng_Random();
BattleConstants.damageLastTurn = "damage-last-turn";
BattleConstants.counterAttack = "Counterattack";
BattleConstants.MAGICATTACK = "MagicAttack";
BattleConstants.MAGICDEFENSE = "MagicDefense";
BattleConstants.MAGICAL = "Mystic";
BattleConstants.MPMax = "MPMax";
BattleConstants.DATAEVENT_CHANGEAREA = "changearea";
BattleConstants.DATAEVENT_REGIONUNLOCK = "regionunlock";
BattleConstants.CURRENCY_TIME = "currency_time";
BattleManager.NORMAL_ENEMY_VIEW = 1;
BattleManager.BOSS_ENEMY_VIEW = 2;
BattleManager.NUMBER_OF_EQUIPMENT_SETS = 5;
Buttons.buttons = new Buttons();
DefaultButtons.UP = 0;
DefaultButtons.RIGHT = 1;
DefaultButtons.DOWN = 2;
DefaultButtons.LEFT = 3;
DefaultButtons.CONFIRM = 4;
DefaultButtons.CANCEL = 5;
DefaultButtons.ACTION1 = 6;
DefaultButtons.ACTION2 = 7;
DefaultButtons.TABRIGHT = 8;
DefaultButtons.TABLEFT = 9;
DefaultButtons.TABRIGHTB = 10;
DefaultButtons.TABLEFTB = 11;
GRIArcaniaBattleManagerIntegrator.arcaniaToBattleManagerStat = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["playerattack"] = "Attack";
	_g.h["playerdefense"] = "Defense";
	_g.h["playerspeed"] = "Speed";
	_g.h["playermagicattack"] = BattleConstants.MAGICATTACK;
	_g.h["playerlife"] = "LifeMax";
	$r = _g;
	return $r;
}(this));
GRIArcaniaJson.resources = "[\r\n        {\r\n            \"id\" : \"stamina\",\r\n            \"name\": \"Stamina\",\r\n            \"desc\": \"The ability to sustain effort\",\r\n            \"max\": 30,\r\n            \"initial\" : 0\r\n        },\r\n        {\r\n            \"id\" : \"flower\",\r\n            \"desc\": \"Possibly a subspecies of Snapdragon.\\nUnlike Snapdragons found in the Lusitani empire, this one is blue\",\r\n            \"name\": \"Flower\",\r\n            \"max\": 10\r\n        },\r\n        {\r\n            \"id\" : \"mysticflower\",\r\n            \"desc\": \"The snapdragon goes from blue to purple. Sometimes, it shines during the night.\",\r\n            \"name\": \"Mystic Flower\",\r\n            \"max\": 10,\r\n            \"mod\": {\r\n                \"esoterism.max\": 1\r\n            },\r\n            \"require\": \"mysticflower>0\"\r\n        },\r\n        {\r\n            \"id\" : \"mental\",\r\n            \"name\": \"Mental\",\r\n            \"desc\": \"The resistence of the mind\",\r\n            \"max\": 20,\r\n            \"require\": \"contemplatearea\"\r\n        },\r\n        {\r\n            \"id\" : \"creativity\",\r\n            \"name\": \"Creativity\",\r\n            \"desc\": \"Elasticity of thought\",\r\n            \"max\": 20,\r\n            \"require\": \"contemplatearea\"\r\n        },\r\n        {\r\n            \"id\" : \"bottle\",\r\n            \"name\": \"Bottle\",\r\n            \"desc\": \"Old and foggy\",\r\n            \"max\": 3,\r\n            \"mod\": {\r\n                \"flower.max\": 5\r\n            },\r\n            \"require\": \"buybottle\"\r\n        },\r\n        {\r\n            \"id\" : \"mysticbottle\",\r\n            \"name\": \"Mystic Bottle\",\r\n            \"desc\": \"There is a weird fog bottled up\",\r\n            \"max\": 3,\r\n            \"mod\": {\r\n                \"flower.max\": 2,\r\n                \"mysticflower.max\": 3,\r\n                \"esoterism.max\": 2\r\n            },\r\n            \"require\": \"mysticbottle\"\r\n        },\r\n        \r\n        {\r\n            \"id\" : \"esoterism\",\r\n            \"name\": \"Esoterism\",\r\n            \"desc\": \"Obscure knowledge meant to a small number of people\",\r\n            \"max\": 10,\r\n            \"require\": \"flowersahi\"\r\n        },\r\n        {\r\n            \"id\" : \"playerlevel\",\r\n            \"name\": \"Level\",\r\n            \"require\": \"playerlevel>1\",\r\n            \"max\": -1,\r\n            \"initial\": 99999\r\n        },\r\n        {\r\n            \"id\" : \"playerattack\",\r\n            \"name\": \"Attack Bonus\",\r\n            \"desc\": \"Bonus to your stats\",\r\n            \"require\": \"playerattack\"\r\n        },\r\n        {\r\n            \"id\" : \"playerspeed\",\r\n            \"desc\": \"Bonus to your stats\",\r\n            \"name\": \"Speed Bonus\",\r\n            \"require\": \"playerspeed\"\r\n        },\r\n        {\r\n            \"id\" : \"playermagicattack\",\r\n            \"name\": \"Magic Attack Bonus\",\r\n            \"desc\": \"Bonus to your stats\",\r\n            \"require\": \"playermagicattack\"\r\n        },\r\n        {\r\n            \"id\" : \"playermagicdefense\",\r\n            \"name\": \"Magic Defense Bonus\",\r\n            \"desc\": \"Bonus to your stats\",\r\n            \"require\": \"playermagicdefense\"\r\n        },\r\n        {\r\n            \"id\" : \"playerdefense\",\r\n            \"name\": \"Defense Bonus\",\r\n            \"desc\": \"Bonus to your stats\",\r\n            \"require\": \"playerdefense\"\r\n        },\r\n        {\r\n            \"id\" : \"playerlife\",\r\n            \"name\": \"Life Bonus\",\r\n            \"desc\": \"Bonus to your stats\",\r\n            \"require\": \"playerlife\"\r\n        }\r\n    ]";
GRIArcaniaJson.events = "\r\n    [\r\n        {\r\n            \"id\": \"story_beggining\",\r\n            \"name\": \"I open my eyes\",\r\n            \"desc\": \"I feel exhausted and fog is everywhere\",\r\n            \"locked\": false\r\n        },\r\n        {\r\n            \"id\": \"story_fog\",\r\n            \"name\": \"The fog recedes\",\r\n            \"desc\": \"I can see an aged man, sitting by the grass\",\r\n            \"require\": \"throwflowers\"\r\n        },\r\n        {\r\n            \"id\": \"story_feelsahi\",\r\n            \"name\": \"I can feel Sahi \",\r\n            \"desc\": \"My patroness God.\\n We are not exactly best friends, but I take what I can get.\",\r\n            \"require\": \"flowersahi\"\r\n        },\r\n        {\r\n            \"id\": \"story_oldmantalk\",\r\n            \"name\": \"The old man talks to me\",\r\n            \"desc\": \"Telling me about the Gods\",\r\n            \"require\": \"giveflowersoldman\"\r\n        },\r\n        {\r\n            \"id\": \"sahi_mind1\",\r\n            \"name\": \"Sahi invades my mind\",\r\n            \"desc\": \"Overwriting my senses\",\r\n            \"require\": \"mindsahi1\"\r\n        }\r\n    ]\r\n    ";
GRIArcaniaJson.actions = "\r\n        [{\r\n            \"id\": \"sitdown\",\r\n            \"name\": \"Sit down\",\r\n            \"desc\": \"Lay down your butt in the grass\",\r\n            \"perpetual\": true,\r\n            \"effect\": {\r\n                \"stamina\": 3,\r\n                \"mental\": 3\r\n            }\r\n        }, \r\n        {\r\n            \"id\": \"pickflowers\",\r\n            \"name\": \"Pick up flower\",\r\n            \"desc\": \"There are some flowers growing nearby. I think they are Snapdragons?\",\r\n            \"cost\": {\r\n                \"stamina\": 1\r\n            },\r\n            \"result\": {\r\n                \"flower\": 1\r\n            }\r\n        }, {\r\n            \"id\": \"imagine\",\r\n            \"name\": \"Imagine\",\r\n            \"desc\": \"Think up adventures, what ifs, the craziest ideas\",\r\n            \"run\": {\r\n                \"mental\": 3\r\n            },\r\n            \"effect\": {\r\n                \"creativity\": 1\r\n            },\r\n            \"perpetual\": true,\r\n            \"require\": \"contemplatearea\"\r\n        }, {\r\n            \"id\": \"commune\",\r\n            \"name\": \"Commune\",\r\n            \"desc\": \"Open your ears to Brazil, so that it may open to you\",\r\n            \"run\": {\r\n                \"mental\": 2\r\n            },\r\n            \"effect\": {\r\n                \"esoterism\": 1\r\n            },\r\n            \"perpetual\": true,\r\n            \"require\": \"flowersahi\"\r\n        },\r\n    \r\n        {\r\n            \"id\": \"thinkflower\",\r\n            \"name\": \"Dwell on flowers\",\r\n            \"desc\": \"What can you possibly do with a flower?\",\r\n            \"max\": 1,\r\n            \"duration\": 20,\r\n            \"run\": {\r\n                \"mental\": 1\r\n            },\r\n            \"cost\": {\r\n                \"creativity\": 5,\r\n                \"esoterism\": 3\r\n            },\r\n            \"require\": \"creativity>3\"\r\n        }, {\r\n            \"id\": \"embedflower\",\r\n            \"name\": \"Embed flower\",\r\n            \"desc\": \"Bring the flower back to the Gods\",\r\n            \"perpetual\": true,\r\n            \"duration\": 5,\r\n            \"cost\": {\r\n                \"flower\": 1\r\n            },\r\n            \"run\": {\r\n                \"mental\": 1,\r\n                \"stamina\": 1,\r\n                \"esoterism\": 1\r\n            },\r\n            \"result\": {\r\n                \"mysticflower\": 1\r\n            },\r\n            \"require\": \"thinkflower\"\r\n        }, {\r\n            \"id\": \"embedbottle\",\r\n            \"name\": \"Embed bottle\",\r\n            \"desc\": \"Breath a faint of life into what is lifeless\",\r\n            \"perpetual\": true,\r\n            \"duration\": 20,\r\n            \"cost\": {\r\n                \"bottle\": 1\r\n            },\r\n            \"run\": {\r\n                \"mental\": 1,\r\n                \"stamina\": 1,\r\n                \"esoterism\": 1\r\n            },\r\n            \"result\": {\r\n                \"mysticbottle\": 1\r\n            },\r\n            \"require\": \"mysticflower>7\"\r\n        }, {\r\n            \"id\": \"throwflowers\",\r\n            \"name\": \"Flowers to the wind\",\r\n            \"desc\": \"Throw out some flowers into the wind\",\r\n            \"max\": 1,\r\n            \"require\": \"flower>5\",\r\n            \"cost\": {\r\n                \"flower\": 8\r\n            }\r\n        }, {\r\n            \"id\": \"esotericdreams\",\r\n            \"name\": \"Esoteric Dreams\",\r\n            \"desc\": \"Sleep and dream of the unknown\",\r\n            \"max\": 1,\r\n            \"require\": \"mysticflower>7\",\r\n            \"cost\": {\r\n                \"mysticflower\": 8,\r\n                \"esoterism\": 20\r\n            },\r\n            \"run\": {\r\n                \"mental\": 1\r\n            },\r\n            \"duration\": 90,\r\n            \"mod\": {\r\n                \"mental.max\": 15,\r\n                \"esoterism.max\": 5\r\n            }\r\n        }, {\r\n            \"id\": \"contemplatearea\",\r\n            \"name\": \"Place to contemplate\",\r\n            \"desc\": \"Put some flowers here, some there. Perfect place to think.\",\r\n            \"max\": 1,\r\n            \"duration\": 3,\r\n            \"run\": {\r\n                \"stamina\": 1\r\n            },\r\n            \"require\": \"throwflowers\",\r\n            \"cost\": {\r\n                \"flower\": 7\r\n            }\r\n    \r\n        }, {\r\n            \"id\": \"giveflowersoldman\",\r\n            \"name\": \"Give Flowers\",\r\n            \"desc\": \"Give the old man some flowers. Maybe he will smile.\",\r\n            \"max\": 1,\r\n            \"require\": \"throwflowers\",\r\n            \"cost\": {\r\n                \"flower\": 5\r\n            }\r\n        }, {\r\n            \"id\": \"flowersahi\",\r\n            \"name\": \"Deity Flowers\",\r\n            \"desc\": \"Offer flowers to Sahi, Goddess of the Cursed Moon\",\r\n            \"max\": 1,\r\n            \"require\": \"flower>= 15\",\r\n            \"cost\": {\r\n                \"flower\": 30\r\n            }\r\n        }, {\r\n            \"id\": \"mindsahi1\",\r\n            \"name\": \"Mind to Sahi\",\r\n            \"desc\": \"Let the Cursed Moon corrupt your senses\",\r\n            \"max\": 1,\r\n            \"duration\": 5,\r\n            \"run\": {\r\n                \"mental\": 1\r\n            },\r\n            \"require\": \"flowersahi&playerlevel>=5\",\r\n            \"cost\": {\r\n                \"esoterism\": 10\r\n            }\r\n        }, {\r\n            \"id\": \"mindsahi2\",\r\n            \"name\": \"Mind to Sahi II\",\r\n            \"desc\": \"Let the Cursed Moon corrupt your senses\",\r\n            \"max\": 1,\r\n            \"duration\": 8,\r\n            \"run\": {\r\n                \"mental\": 1\r\n            },\r\n            \"require\": \"mindsahi1&playerlevel>=20\",\r\n            \"cost\": {\r\n                \"esoterism\": 20\r\n            },\r\n            \"mod\": {\r\n                \"sahiattack.max\": 2,\r\n                \"sahilife.max\": 4,\r\n                \"sahishield.max\": 2\r\n            }\r\n        }, {\r\n            \"id\": \"mindsahi3\",\r\n            \"name\": \"Mind to Sahi III\",\r\n            \"desc\": \"Let the Cursed Moon corrupt your senses\",\r\n            \"max\": 1,\r\n            \"duration\": 20,\r\n            \"run\": {\r\n                \"mental\": 1\r\n            },\r\n            \"require\": \"mindsahi2&playerlevel>=50\",\r\n            \"cost\": {\r\n                \"esoterism\": 80\r\n            },\r\n            \"mod\": {\r\n                \"sahiattack.max\": 3,\r\n                \"sahilife.max\": 5,\r\n                \"sahishield.max\": 3,\r\n                \"sahimagic.max\": 3,\r\n                \"sahimagicshield.max\": 3,\r\n                \"sahispeed.max\": 3,\r\n                \"highesoterism.max\": 1\r\n            }\r\n        }, {\r\n            \"id\": \"sahiflesh\",\r\n            \"name\": \"Lunar Flesh\",\r\n            \"desc\": \"Attain the body of the Lunars\",\r\n            \"max\": 1,\r\n            \"require\": \"mindsahi2\",\r\n            \"enable\": \"playerlevel>=21\",\r\n            \"cost\": {\r\n                \"esoterism\": 30,\r\n                \"flower\": 40\r\n            },\r\n            \"mod\": {\r\n                \"sahilife.max\": 4,\r\n                \"sahishield.max\": 3,\r\n                \"sahispeed.max\": 3\r\n            }\r\n        }, {\r\n            \"id\": \"sahispirit\",\r\n            \"name\": \"Lunar Spirit\",\r\n            \"desc\": \"Attain the psyche of the Lunars\",\r\n            \"max\": 1,\r\n            \"require\": \"mindsahi2\",\r\n            \"enable\": \"playerlevel>=22\",\r\n            \"cost\": {\r\n                \"esoterism\": 40,\r\n                \"flower\": 30\r\n            },\r\n            \"mod\": {\r\n                \"sahiattack.max\": 3,\r\n                \"sahimagic.max\": 3,\r\n                \"sahimagicshield.max\": 3\r\n            }\r\n        }, {\r\n            \"id\": \"highesoterism\",\r\n            \"name\": \"Obscure Mind\",\r\n            \"desc\": \"Open your eyes to that which is arcane\",\r\n            \"max\": 3,\r\n            \"require\": \"esoterism>25\",\r\n            \"cost\": {\r\n                \"esoterism\": 40,\r\n                \"flower\": 30,\r\n                \"mental\": 30\r\n            },\r\n            \"mod\": {\r\n                \"esoterism.max\": 25\r\n            }\r\n        },\r\n    \r\n        {\r\n            \"id\": \"godbibelot\",\r\n            \"name\": \"Mystic Bibelot\",\r\n            \"desc\": \"A small ornament for the old Gods\",\r\n            \"max\": 3,\r\n            \"require\": \"esoterism>=5\",\r\n            \"duration\": 20,\r\n            \"run\": {\r\n                \"stamina\": 1\r\n            },\r\n            \"cost\": {\r\n                \"flower\": 40,\r\n                \"esoterism\": 7,\r\n                \"creativity\": 15\r\n            },\r\n            \"mod\": {\r\n                \"esoterism.max\": 5\r\n            }\r\n        }, {\r\n            \"id\": \"sahiattack\",\r\n            \"name\": \"Agressive Moon\",\r\n            \"desc\": \"Let the agressive face of the Moon become your face\",\r\n            \"max\": 2,\r\n            \"require\": \"mindsahi1\",\r\n            \"cost\": {\r\n                \"esoterism\": 15,\r\n                \"flower\": 10\r\n            },\r\n            \"result\": {\r\n                \"playerattack\": 1\r\n            }\r\n        }, {\r\n            \"id\": \"sahimagic\",\r\n            \"name\": \"Magical Moon\",\r\n            \"desc\": \"The mysticism of the moon\",\r\n            \"max\": 2,\r\n            \"require\": \"sahispirit\",\r\n            \"cost\": {\r\n                \"esoterism\": 20,\r\n                \"flower\": 15\r\n            },\r\n            \"result\": {\r\n                \"playermagicattack\": 1\r\n            }\r\n        }, {\r\n            \"id\": \"sahimagicshield\",\r\n            \"name\": \"Solid Moon\",\r\n            \"desc\": \"The moon can shield you from the flames of the sun\",\r\n            \"max\": 2,\r\n            \"require\": \"sahispirit\",\r\n            \"cost\": {\r\n                \"esoterism\": 18,\r\n                \"flower\": 18\r\n            },\r\n            \"result\": {\r\n                \"playermagicdefense\": 1\r\n            }\r\n        }, {\r\n            \"id\": \"sahispeed\",\r\n            \"name\": \"Moon Hare\",\r\n            \"desc\": \"The Lusitani say there is a rabbit in the moon\",\r\n            \"max\": 2,\r\n            \"require\": \"sahiflesh\",\r\n            \"cost\": {\r\n                \"esoterism\": 25,\r\n                \"flower\": 10\r\n            },\r\n            \"result\": {\r\n                \"playerspeed\": 1\r\n            }\r\n        }, {\r\n            \"id\": \"sahilife\",\r\n            \"name\": \"Nurturing Moon\",\r\n            \"desc\": \"The moon reflects the nurturing light of the sun\",\r\n            \"max\": 4,\r\n            \"require\": \"mindsahi1\",\r\n            \"cost\": {\r\n                \"esoterism\": 5,\r\n                \"flower\": 25\r\n            },\r\n            \"result\": {\r\n                \"playerlife\": 1\r\n            }\r\n        }, {\r\n            \"id\": \"sahishield\",\r\n            \"name\": \"Guardian Moon\",\r\n            \"desc\": \"In the night, the moonlight is your only guardian\",\r\n            \"max\": 2,\r\n            \"require\": \"sahilife\",\r\n            \"cost\": {\r\n                \"esoterism\": 10,\r\n                \"flower\": 40\r\n            },\r\n            \"result\": {\r\n                \"playerdefense\": 1\r\n            }\r\n        }, {\r\n            \"id\": \"buybottle\",\r\n            \"name\": \"Trade for a bottle\",\r\n            \"desc\": \"The old man is carrying a large amount of bottles... Why?\",\r\n            \"require\": \"giveflowersoldman\",\r\n            \"cost\": {\r\n                \"flower\": 5\r\n            },\r\n            \"result\": {\r\n                \"bottle\": 1\r\n            }\r\n        }, {\r\n            \"id\": \"buyvase\",\r\n            \"name\": \"Flower Vase\",\r\n            \"desc\": \"Flowers for a vase, vase for flowers.\",\r\n            \"max\": 2,\r\n            \"require\": \"giveflowersoldman\",\r\n            \"cost\": {\r\n                \"flower\": 15\r\n            },\r\n            \"mod\": {\r\n                \"flower.max\": 10\r\n            }\r\n        }\r\n    ]";
GRIArcaniaView.LAYOUT_ACTION = "arcania_actions";
GRIArcaniaView.LAYOUT_RESOURCES = "arcania_resources";
GRIArcaniaView.LAYOUT_LOG = "arcania_log";
GRIArcaniaView.TAG_TAB_ARCANIA = "village_tab_arcania";
GRIArcaniaView.DATA_ACTIONPRESS = "arcania_action";
GRIArcaniaViewLog.LAYOUT_LOG = "arcania_log";
GRIButtons.FEEDBACK_BUTTON = 100;
GRIButtons.SKILL_BUTTON_1 = 101;
GRIButtons.SKILL_BUTTON_2 = 102;
GRIButtons.SKILL_BUTTON_3 = 103;
GRIButtons.SKILL_BUTTON_4 = 104;
GRIButtons.SKILL_BUTTON_5 = 105;
GRIButtons.SKILL_BUTTON_6 = 106;
GRIButtons.SKILL_BUTTON_7 = 107;
GRIConfigurer.DIMENSION_ID_LAGRIMA = "LAGRIMA";
GRIConfigurer.DIMENSION_ID_AMAZONIA = "AMAZONIA";
GRIControl.key = "save data master";
GRIControl.keyBackup = "save backup";
GRIControl.PRIVACY_ACCEPTANCE_KEY = "privacymemory";
GRIControl.saveRate = 10000;
GRIControlRegion.listStandard = 0;
GRIControlRegion.listDanger = 1;
GRIControlRegion.dataRegionB = "regionbutton";
GRIControlRegion.dataAreaB = "areabutton";
GRIControlTitle.CHARACTER_SELECTION_HAPPENED_KEY = "characterselectionhappened";
GRIEffects.SPINE_TEXT_EFFECT = "spine/text_effect_json";
GRIEffects.SPINE_ACTOR = "spine/character_json";
GRIEquipFilterControl.LAYOUT_ID = "equip_filter_buttons";
GRIEquipFilterControl.DATAINPUT_CHANGEFILTER = "change_filter";
GRISetView.SETVIEWTAG = "setview";
TurnOrderData.charaSprites = [Sprite.create("heroicon",512,512),Sprite.create("enemyicon",512,512),Sprite.create("boss",512,512),Sprite.create("bossb",512,512),Sprite.create("isabelicon",512,512)];
GRIView.COLOR_BLACK = 0;
GRIView.COLOR_ACTIVE_BLUE = 11004149;
GRIView.COLOR_ACTIVE_RED = 13245982;
GRIView.COLOR_BACKGROUND = 988450;
GRIView.COLOR_BACKGROUND_GRAY = 1779241;
GRIView.COLOR_BAR_XP = 1322844;
GRIView.COLOR_BAR_TIME = 10963070;
GRIView.COLOR_OUTLINE = 3824248;
GRIView.COLOR_TAB = 10390166;
GRIView.COLOR_TAB_HOVER = GRIView.COLOR_ACTIVE_BLUE;
GRIView.COLOR_DISABLED_BUTTON = 5854292;
GRIView.COLOR_BUFF = 38655;
GRIView.COLOR_DEBUFF = 10298857;
GRIView.COLOR_TEXT_NORMAL = 11970471;
GRIView.COLOR_TEXT_HEADER = 2188254;
GRIView.COLOR_TEXT_ACTION = 15375794;
GRIView.COLOR_TEXT_ACTION_HOVER = 15577066;
GRIView.COLOR_ACTIVE_PINK = GRIView.COLOR_TEXT_ACTION;
GRIView.COLOR_ACTIVE_PINK2 = GRIView.COLOR_TEXT_ACTION_HOVER;
GRIView.LAYER_BACKGROUND = 0;
GRIView.LAYER_DEFAULT = 1;
GRIView.LAYER_EFFECT = 3;
GRIView.LAYER_HOVER = 4;
GRIView.LAYER_DIALOG = 5;
GRIView.TEXT_MESSAGEBOSS = "Hard Area Cleared!\nYour stats permanently increased!\n\n";
GRIView.ARCHETYPE_SIMPLE = "simple";
GRIView.ARCHETYPE_TEXT_ACTION = "actiontext";
GRIView.ARCHETYPE_SIMPLE_MEDIUM = "simplemedium";
GRIView.ARCHETYPE_SIMPLE_LARGE = "simplelarge";
GRIView.ARCHETYPE_SIMPLE_TIMID = "simpletimid";
GRIView.ARCHETYPE_IMPORTANT_TIMID = "importanttimid";
GRIView.ARCHETYPE_HEADER = "header";
GRIView.ARCHETYPE_HEADER_LARGE = "header";
GRIView.ARCHETYPE_HEADER_HOVER = "header";
GRIView.ARCHETYPE_HEADER_TIMID = "headertimid";
GRIView.ARCHETYPE_HEADER_STAT = "statheader";
GRIView.ARCHETYPE_TEXT_STORYSPEAKER = GRIView.ARCHETYPE_HEADER;
GRIView.ARCHETYPE_TEXT_STORYMESSAGE = GRIView.ARCHETYPE_IMPORTANT_TIMID;
GRIView.ARCHETYPE_TEXT_ENEMYNAME = GRIView.ARCHETYPE_SIMPLE_TIMID;
GRIView.ARCHETYPE_BAR_TIMID = "bar_timid";
GRIView.ARCHETYPE_BAR_MINI = "bar_mini";
GRIView.ARCHETYPE_BAR_XP2 = "bar_xp2";
GRIView.ARCHETYPE_BAR_TIME = "bar_time";
GRIView.ARCHETYPE_BAR_POINT = "bar_timid2";
GRIView.ARCHETYPE_BG_DEFAULT = "background";
GRIView.ARCHETYPE_BG_SIMPLE = "backgroundsimple";
GRIView.ARCHETYPE_BUTTON_SMALL = "buttonsmall";
GRIView.ARCHETYPE_BUTTON_MEDIUM = "buttonmedium";
GRIView.ARCHETYPE_BUTTON_SMALL_LABEL = "buttonsmall_label";
GRIView.ARCHETYPE_BUTTON_TAB = "buttontab";
GRIView.ARCHETYPE_BUTTON_REGION = GRIView.ARCHETYPE_BUTTON_SMALL_LABEL;
GRIView.SPRITE_BLUEGRAD = Sprite.create("bluegradient",32,32);
GRIView.SPRITE_PINKGRAD = Sprite.create("pinkgradient",32,32);
GRIView.SPRITE_GREENGRAD = Sprite.create("greengradient",32,32);
GRIView.LAYOUT_HOVER = "generichover";
GRIView.LAYOUT_HOVER_ACTOR = "actorstathover";
GRIView.TAG_HOVER_ACTOR = GRIView.LAYOUT_HOVER_ACTOR;
GRIView.LAYOUT_SET = "setbuttongroup";
GRIView.TAG_TAB_BUTTON = "tag_tab_button";
GRIView.tagTabBattle = "tabbattle";
GRIView.tagTabEquip = "tabequip";
GRIView.tagTabRegion = "tabregion";
GRIView.tagTabTitle = "tabtitle";
GRIView.tagTabMemory = "tabmemory";
GRIView.tagTabCharacter = "tabcharacter";
GRIView.tagTabVillage = "tabvillage";
ActorViewLogic.ignoredStats = ["Life","MP","MPRecharge","MPRechargeCount","","SpeedCount","damage-last-turn"];
ActorViewLogic.AttributeExplanation = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["Attack"] = "Influences inflicted damage";
	_g.h["Defense"] = "Decreases incoming damage";
	_g.h["Speed"] = "Frequency of attacks";
	_g.h["Blood"] = "Increases damage, but loses life with each attack";
	_g.h["Piercing"] = "Armor piercing power";
	_g.h["Life"] = "When it gets to 0, you need to recover";
	_g.h["LifeMax"] = "When it gets to 0, you need to recover";
	_g.h["MPMax"] = "Skills consume this. Expend it all to start recovering.";
	_g.h["Safeguard"] = "Piercing protection";
	_g.h[BattleConstants.counterAttack] = "Strikes back when attacked. Flame uses your attack. Icicle your defense. Shock the damage you took. Attack is a non-elemental normal attack.";
	_g.h[BattleConstants.MAGICAL] = "Normal attacks are magic in nature";
	$r = _g;
	return $r;
}(this));
ActorViewLogic.attributeMetaData = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var value = new StatMetaInfo(["","Flame","Icicle","Shock","Attack"]);
		_g.h[BattleConstants.counterAttack] = value;
	}
	$r = _g;
	return $r;
}(this));
GRIViewCharacterTab.LAYOUT_ACHIEVEMENT = "layout_achievement";
CurrencyViewLogic.currencyToSprite = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var value = Sprite.create("whitep",1,1);
		_g.h["Lagrima"] = value;
	}
	{
		var value = Sprite.create("circle",11,11);
		_g.h["Lagrima Stone"] = value;
	}
	$r = _g;
	return $r;
}(this));
CurrencyViewLogic.visibleCurrencies = ["Lagrima","Lagrima Stone"];
GRIViewEquip.equipment_MaxInPage = 9999;
GRIViewEquip.equippedViewIdPart = "equippedbutton_";
GRIViewEquip.equipmentViewIdPart = "equipmentbutton_";
GRIViewEquip.layoutIdEquip = "equipbutton";
GRIViewEquip.layoutIdEquipHover = "equiphover";
GRIViewEquip.layoutIdEquipSets = "setequipbuttons";
GRIViewEquip.LAYOUT_EQUIP_BUTTON_MISC = "miscequipbuttons";
GRIViewEquip.TAG_EQUIPBUTTON_SPECIALWIDGET = "specialwidget";
GRIViewEquip.DATA_UPGRADE = "upgradebutton";
GRIViewEquip.DATA_SELL = "sellbutton";
GRIViewEquip.DATA_SELL_WORSE = "sellbutton_worse";
GRIViewEquip.DATA_EQUIP = "equipnmodebutton";
LittleBattleWidget.stateTexts = ["Recover","Combat","Idle","Rest"];
LittleBattleWidget.colors = [GRIView.COLOR_ACTIVE_BLUE,GRIView.COLOR_ACTIVE_RED,GRIView.COLOR_ACTIVE_BLUE,GRIView.COLOR_TEXT_NORMAL];
GRIViewMemoryTab.LAYOUT_MEMORY_BUTTONS = "memory_buttons";
GRIViewMemoryTab.DATA_START = "story_start";
GRIViewMemoryTab.DATA_RESTART = "story_restart";
GRIViewMemoryTab.DATA_RESUME = "story_resume";
GRIViewRegion.LAYOUT_REGION_REGIONS = "region_regions";
GRIViewRegion.LAYOUT_REGION_AREAS = "region_areas";
GRIViewRegion.LAYOUT_REGION_MONSTER = "region_enemy";
GRIViewRegion.LAYOUT_REGION_MONSTER_STAT = "region_enemy_stat";
GRIViewStory.LAYOUT_STORY = "story_main";
GRIViewStory.LAYOUT_BUTTON_A = "storybuttona";
GRIViewStory.LAYOUT_BUTTON_B = "storybuttonb";
GRIViewStory.DATA_BUTTON_ADVANCE = "storyadvance";
GRIViewStory.DATA_BUTTON_SKIP = "storyskip";
GRIViewStory.DATA_BUTTON_LATER = "storylater";
GRIViewStory.EVENT_STORY_START_NATURAL = "ev_storystartnatural";
GRIViewTalent.TAG_TALENTMODE = "talent_mode";
GRIViewTalent.TAG_PRACTICEMODE = "practice_mode";
GRIViewTalent.LAYOUT_TALENTWIDGETS = "talent_set_widgets";
GRIViewTalent.LAYOUT_TALENTSETWIDGETS = "talent_set_widgets";
GRIViewTalent.DATA_STARTPRACTICE = "data_practice_start";
GRIViewTalent.DATA_STUDY = "data_study";
GRIViewTalent.DATA_REROLLFORM = "data_form_reroll";
GRIViewTalent.DATA_RETURNFROMPRACTICE = "data_return_practice";
GRIViewTalent.MODETAGS = [GRIViewTalent.TAG_TALENTMODE,GRIViewTalent.TAG_PRACTICEMODE];
GRIViewTalent.CURSORGROUPMODES = [new CursorGroup(),new CursorGroup()];
GRIViewTalent.FORMRANKNAMES = ["F","E","D","C","B","A","A+","S","S+","SS","X","X+","Y","Y+","Z","Z+","ZZ","ZY","ZX"];
GRIViewTitle.LAYOUT_BUTTON_TITLE = "titlebuttons";
GRIViewTitle.LAYOUT_CHARACTER_SELECTION = "character_selection";
GRIViewTitle.TAG_TITLE_MAIN = "tag_title_main";
GRIViewTitle.TAG_TITLE_ACCEPT = "tag_title_accept";
GRIViewTitle.TAG_TITLE_DIMENSION = "tag_title_dimension";
GRIViewTitle.TAG_TITLE_LOGO = "tag_title_logo";
GRIViewTitle.DATA_DISCORD = "discord";
GRIViewTitle.DATA_STEAM = "steam";
GRIViewTitle.DATA_START = "start";
GRIViewTitle.DATA_RESET = "reset";
GRIViewTitle.DATA_EXTERNALSAVE = "externalsave";
GRIViewTitle.DATA_EXIT = "quit";
GRIViewTitle.DATA_CONTINUE = "buttoncontinue";
GRIViewTitle.DATA_GOTOCHARACTER = "buttonfirststart";
GRIViewTitle.DATA_ROADMAP = "roadmap";
GRIViewTitle.DATA_ACCEPT = "accept";
GRIViewTitle.DATA_PRIVACYSEE = "privacysee";
GlobalData.IGNORE = -99999;
Mouse.mouse = new Mouse();
Keyboard.KEY_UP = 100000;
Keyboard.KEY_LEFT = 100001;
Keyboard.KEY_DOWN = 100002;
Keyboard.KEY_RIGHT = 100003;
Keyboard.KEY_ENTER = 100004;
Keyboard.KEY_SPACE = 100005;
Keyboard.KEY_ESCAPE = 100006;
Keyboard.KEY_TAB = 100007;
Keyboard.JOY_BUTTON_1 = 100051;
Keyboard.JOY_BUTTON_2 = 100052;
Keyboard.JOY_BUTTON_3 = 100053;
Keyboard.JOY_BUTTON_4 = 100054;
Keyboard.JOY_BUTTON_L = 100055;
Keyboard.JOY_BUTTON_R = 100056;
Keyboard.JOY_BUTTON_R2 = 100057;
Keyboard.JOY_BUTTON_L2 = 100058;
Keyboard.JOY_BUTTON_D_UP = 100059;
Keyboard.JOY_BUTTON_D_LEFT = 100060;
Keyboard.JOY_BUTTON_D_DOWN = 100061;
Keyboard.JOY_BUTTON_D_RIGHT = 100062;
Keyboard.JOY_BUTTON_START = 100063;
Keyboard.JOY_BUTTON_SELECT = 100064;
Keyboard.keyboard = new Keyboard();
JsonStoryTypes.jsonwriterstory = new JsonWriter_$106();
JsonStoryTypes.jsonparserstory = new JsonParser_$118();
JsonStoryTypes.jsonparsercutscenes = new JsonParser_$123();
JsonMainTypes.jsonwriterwdata = new JsonWriter_$1();
JsonMainTypes.jsonparserwdata = new JsonParser_$1();
JsonMainTypes.jsonwritergeneral = new JsonWriter_$73();
JsonMainTypes.jsonparsergeneral = new JsonParser_$85();
JsonMainTypes.jsonwritervillageD = new JsonWriter_$81();
JsonMainTypes.jsonparservillageD = new JsonParser_$93();
JsonMainTypes.jsonwritervillageS = new JsonWriter_$93();
JsonMainTypes.jsonparservillageS = new JsonParser_$105();
PhaserRenderer.images = new haxe_ds_StringMap();
PhaserRenderer.z = 0;
PrototypeItemMaker.itemType_Weapon = 0;
PrototypeItemMaker.itemType_Armor = 1;
GameEventTrigger.IGNORE = -99999;
Renderer.aux = new Rect(0,0,0,0);
Renderer.aux2 = new Rect(0,0,0,0);
Renderer.aux3 = new Rect(0,0,0,0);
Renderer.aux4 = new Rect(0,0,0,0);
RetentionLogic.rollingRetentionDays = [1,2,3,7,15,30,60,90,120,365];
StoryControlLogic.TAG_MEMORY_BUTTON_SCREEN = "tag_memory";
StoryControlLogic.TAG_STORY_SCREEN = "tag_story";
TalentModel.STUDY_COST_IN_TIME = 50;
TalentModel.BASE_STUDY_GET_XP = 25;
TalentModel.setConditions = [new BMCondition(BMConditionType.CURRENT_SET_NUMBER,0),new BMCondition(BMConditionType.CURRENT_SET_NUMBER,1),new BMCondition(BMConditionType.CURRENT_SET_NUMBER,2),new BMCondition(BMConditionType.CURRENT_SET_NUMBER,3),new BMCondition(BMConditionType.CURRENT_SET_NUMBER,4),new BMCondition(BMConditionType.CURRENT_SET_NUMBER,5),new BMCondition(BMConditionType.CURRENT_SET_NUMBER,6),new BMCondition(BMConditionType.CURRENT_SET_NUMBER,7)];
Vector2.elementCount = 2;
XTextRender.auxLines = [];
BitmapText.spaceCharCode = HxOverrides.cca(" ",0);
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
arcania_logic_LogicalOperatorString.map = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["&"] = arcania_logic_LogicalOperator.AND;
	_g.h["|"] = arcania_logic_LogicalOperator.OR;
	_g.h["^"] = arcania_logic_LogicalOperator.XOR;
	$r = _g;
	return $r;
}(this));
arcania_logic_RelationshipComparison.BIGGER = ">";
arcania_logic_RelationshipComparison.BIGGEREQUAL = ">=";
arcania_logic_RelationshipComparison.SMALLER = "<";
arcania_logic_RelationshipComparison.SMALLEREQUAL = "<=";
arcania_logic_RelationshipComparison.EQUAL = "==";
arcania_logic_RelationshipComparison.NOT = "!=";
arcania_logic_RelationshipComparison.comparisons = [arcania_logic_RelationshipComparison.BIGGEREQUAL,arcania_logic_RelationshipComparison.SMALLEREQUAL,arcania_logic_RelationshipComparison.BIGGER,arcania_logic_RelationshipComparison.SMALLER,arcania_logic_RelationshipComparison.EQUAL,arcania_logic_RelationshipComparison.NOT];
arcania_logic_ArcaniaModel.resourceTypeConfiguration = [new arcania_logic_ResourceTypeConfiguration("Action"),new arcania_logic_ResourceTypeConfiguration("Resource"),new arcania_logic_ResourceTypeConfiguration("Event",false,true)];
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	h.h["lt"] = "<";
	h.h["gt"] = ">";
	h.h["amp"] = "&";
	h.h["quot"] = "\"";
	h.h["apos"] = "'";
	$r = h;
	return $r;
}(this));
hscript_Parser.p1 = 0;
hscript_Parser.tokenMin = 0;
hscript_Parser.tokenMax = 0;
spine_CurveTimeline.LINEAR = 0;
spine_CurveTimeline.STEPPED = 1;
spine_CurveTimeline.BEZIER = 2;
spine_CurveTimeline.BEZIER_SIZE = 18;
spine_CurveTimeline1.ENTRIES = 2;
spine_CurveTimeline1.VALUE = 1;
spine_CurveTimeline1.LINEAR = 0;
spine_CurveTimeline1.STEPPED = 1;
spine_CurveTimeline1.BEZIER = 2;
spine_CurveTimeline1.BEZIER_SIZE = 18;
spine_CurveTimeline2.ENTRIES = 3;
spine_CurveTimeline2.VALUE1 = 1;
spine_CurveTimeline2.VALUE2 = 2;
spine_CurveTimeline2.LINEAR = 0;
spine_CurveTimeline2.STEPPED = 1;
spine_CurveTimeline2.BEZIER = 2;
spine_CurveTimeline2.BEZIER_SIZE = 18;
spine_RotateTimeline.ENTRIES = 2;
spine_RotateTimeline.VALUE = 1;
spine_RotateTimeline.LINEAR = 0;
spine_RotateTimeline.STEPPED = 1;
spine_RotateTimeline.BEZIER = 2;
spine_RotateTimeline.BEZIER_SIZE = 18;
spine_TranslateTimeline.ENTRIES = 3;
spine_TranslateTimeline.VALUE1 = 1;
spine_TranslateTimeline.VALUE2 = 2;
spine_TranslateTimeline.LINEAR = 0;
spine_TranslateTimeline.STEPPED = 1;
spine_TranslateTimeline.BEZIER = 2;
spine_TranslateTimeline.BEZIER_SIZE = 18;
spine_TranslateXTimeline.ENTRIES = 2;
spine_TranslateXTimeline.VALUE = 1;
spine_TranslateXTimeline.LINEAR = 0;
spine_TranslateXTimeline.STEPPED = 1;
spine_TranslateXTimeline.BEZIER = 2;
spine_TranslateXTimeline.BEZIER_SIZE = 18;
spine_TranslateYTimeline.ENTRIES = 2;
spine_TranslateYTimeline.VALUE = 1;
spine_TranslateYTimeline.LINEAR = 0;
spine_TranslateYTimeline.STEPPED = 1;
spine_TranslateYTimeline.BEZIER = 2;
spine_TranslateYTimeline.BEZIER_SIZE = 18;
spine_ScaleTimeline.ENTRIES = 3;
spine_ScaleTimeline.VALUE1 = 1;
spine_ScaleTimeline.VALUE2 = 2;
spine_ScaleTimeline.LINEAR = 0;
spine_ScaleTimeline.STEPPED = 1;
spine_ScaleTimeline.BEZIER = 2;
spine_ScaleTimeline.BEZIER_SIZE = 18;
spine_ScaleXTimeline.ENTRIES = 2;
spine_ScaleXTimeline.VALUE = 1;
spine_ScaleXTimeline.LINEAR = 0;
spine_ScaleXTimeline.STEPPED = 1;
spine_ScaleXTimeline.BEZIER = 2;
spine_ScaleXTimeline.BEZIER_SIZE = 18;
spine_ScaleYTimeline.ENTRIES = 2;
spine_ScaleYTimeline.VALUE = 1;
spine_ScaleYTimeline.LINEAR = 0;
spine_ScaleYTimeline.STEPPED = 1;
spine_ScaleYTimeline.BEZIER = 2;
spine_ScaleYTimeline.BEZIER_SIZE = 18;
spine_ShearTimeline.ENTRIES = 3;
spine_ShearTimeline.VALUE1 = 1;
spine_ShearTimeline.VALUE2 = 2;
spine_ShearTimeline.LINEAR = 0;
spine_ShearTimeline.STEPPED = 1;
spine_ShearTimeline.BEZIER = 2;
spine_ShearTimeline.BEZIER_SIZE = 18;
spine_ShearXTimeline.ENTRIES = 2;
spine_ShearXTimeline.VALUE = 1;
spine_ShearXTimeline.LINEAR = 0;
spine_ShearXTimeline.STEPPED = 1;
spine_ShearXTimeline.BEZIER = 2;
spine_ShearXTimeline.BEZIER_SIZE = 18;
spine_ShearYTimeline.ENTRIES = 2;
spine_ShearYTimeline.VALUE = 1;
spine_ShearYTimeline.LINEAR = 0;
spine_ShearYTimeline.STEPPED = 1;
spine_ShearYTimeline.BEZIER = 2;
spine_ShearYTimeline.BEZIER_SIZE = 18;
spine_RGBATimeline.ENTRIES = 5;
spine_RGBATimeline.R = 1;
spine_RGBATimeline.G = 2;
spine_RGBATimeline.B = 3;
spine_RGBATimeline.A = 4;
spine_RGBATimeline.LINEAR = 0;
spine_RGBATimeline.STEPPED = 1;
spine_RGBATimeline.BEZIER = 2;
spine_RGBATimeline.BEZIER_SIZE = 18;
spine_RGBTimeline.ENTRIES = 4;
spine_RGBTimeline.R = 1;
spine_RGBTimeline.G = 2;
spine_RGBTimeline.B = 3;
spine_RGBTimeline.LINEAR = 0;
spine_RGBTimeline.STEPPED = 1;
spine_RGBTimeline.BEZIER = 2;
spine_RGBTimeline.BEZIER_SIZE = 18;
spine_AlphaTimeline.ENTRIES = 2;
spine_AlphaTimeline.VALUE = 1;
spine_AlphaTimeline.LINEAR = 0;
spine_AlphaTimeline.STEPPED = 1;
spine_AlphaTimeline.BEZIER = 2;
spine_AlphaTimeline.BEZIER_SIZE = 18;
spine_RGBA2Timeline.ENTRIES = 8;
spine_RGBA2Timeline.R = 1;
spine_RGBA2Timeline.G = 2;
spine_RGBA2Timeline.B = 3;
spine_RGBA2Timeline.A = 4;
spine_RGBA2Timeline.R2 = 5;
spine_RGBA2Timeline.G2 = 6;
spine_RGBA2Timeline.B2 = 7;
spine_RGBA2Timeline.LINEAR = 0;
spine_RGBA2Timeline.STEPPED = 1;
spine_RGBA2Timeline.BEZIER = 2;
spine_RGBA2Timeline.BEZIER_SIZE = 18;
spine_RGB2Timeline.ENTRIES = 7;
spine_RGB2Timeline.R = 1;
spine_RGB2Timeline.G = 2;
spine_RGB2Timeline.B = 3;
spine_RGB2Timeline.R2 = 4;
spine_RGB2Timeline.G2 = 5;
spine_RGB2Timeline.B2 = 6;
spine_RGB2Timeline.LINEAR = 0;
spine_RGB2Timeline.STEPPED = 1;
spine_RGB2Timeline.BEZIER = 2;
spine_RGB2Timeline.BEZIER_SIZE = 18;
spine_DeformTimeline.LINEAR = 0;
spine_DeformTimeline.STEPPED = 1;
spine_DeformTimeline.BEZIER = 2;
spine_DeformTimeline.BEZIER_SIZE = 18;
spine_EventTimeline.propertyIds = ["12"];
spine_DrawOrderTimeline.propertyIds = ["13"];
spine_IkConstraintTimeline.ENTRIES = 6;
spine_IkConstraintTimeline.MIX = 1;
spine_IkConstraintTimeline.SOFTNESS = 2;
spine_IkConstraintTimeline.BEND_DIRECTION = 3;
spine_IkConstraintTimeline.COMPRESS = 4;
spine_IkConstraintTimeline.STRETCH = 5;
spine_IkConstraintTimeline.LINEAR = 0;
spine_IkConstraintTimeline.STEPPED = 1;
spine_IkConstraintTimeline.BEZIER = 2;
spine_IkConstraintTimeline.BEZIER_SIZE = 18;
spine_TransformConstraintTimeline.ENTRIES = 7;
spine_TransformConstraintTimeline.ROTATE = 1;
spine_TransformConstraintTimeline.X = 2;
spine_TransformConstraintTimeline.Y = 3;
spine_TransformConstraintTimeline.SCALEX = 4;
spine_TransformConstraintTimeline.SCALEY = 5;
spine_TransformConstraintTimeline.SHEARY = 6;
spine_TransformConstraintTimeline.LINEAR = 0;
spine_TransformConstraintTimeline.STEPPED = 1;
spine_TransformConstraintTimeline.BEZIER = 2;
spine_TransformConstraintTimeline.BEZIER_SIZE = 18;
spine_PathConstraintPositionTimeline.ENTRIES = 2;
spine_PathConstraintPositionTimeline.VALUE = 1;
spine_PathConstraintPositionTimeline.LINEAR = 0;
spine_PathConstraintPositionTimeline.STEPPED = 1;
spine_PathConstraintPositionTimeline.BEZIER = 2;
spine_PathConstraintPositionTimeline.BEZIER_SIZE = 18;
spine_PathConstraintSpacingTimeline.ENTRIES = 2;
spine_PathConstraintSpacingTimeline.VALUE = 1;
spine_PathConstraintSpacingTimeline.LINEAR = 0;
spine_PathConstraintSpacingTimeline.STEPPED = 1;
spine_PathConstraintSpacingTimeline.BEZIER = 2;
spine_PathConstraintSpacingTimeline.BEZIER_SIZE = 18;
spine_PathConstraintMixTimeline.ENTRIES = 4;
spine_PathConstraintMixTimeline.ROTATE = 1;
spine_PathConstraintMixTimeline.X = 2;
spine_PathConstraintMixTimeline.Y = 3;
spine_PathConstraintMixTimeline.LINEAR = 0;
spine_PathConstraintMixTimeline.STEPPED = 1;
spine_PathConstraintMixTimeline.BEZIER = 2;
spine_PathConstraintMixTimeline.BEZIER_SIZE = 18;
spine_MixBlend_$enum.setup_value = 0;
spine_MixBlend_$enum.first_value = 1;
spine_MixBlend_$enum.replace_value = 2;
spine_MixBlend_$enum.add_value = 3;
spine_MixBlend_$enum.setup_name = "setup";
spine_MixBlend_$enum.first_name = "first";
spine_MixBlend_$enum.replace_name = "replace";
spine_MixBlend_$enum.add_name = "add";
spine_MixDirection_$enum.directionIn_value = 0;
spine_MixDirection_$enum.directionOut_value = 1;
spine_MixDirection_$enum.directionIn_name = "directionIn";
spine_MixDirection_$enum.directionOut_name = "directionOut";
spine_Property_$enum.rotate_value = 0;
spine_Property_$enum.x_value = 1;
spine_Property_$enum.y_value = 2;
spine_Property_$enum.scaleX_value = 3;
spine_Property_$enum.scaleY_value = 4;
spine_Property_$enum.shearX_value = 5;
spine_Property_$enum.shearY_value = 6;
spine_Property_$enum.rgb_value = 7;
spine_Property_$enum.alpha_value = 8;
spine_Property_$enum.rgb2_value = 9;
spine_Property_$enum.attachment_value = 10;
spine_Property_$enum.deform_value = 11;
spine_Property_$enum.event_value = 12;
spine_Property_$enum.drawOrder_value = 13;
spine_Property_$enum.ikConstraint_value = 14;
spine_Property_$enum.transformConstraint_value = 15;
spine_Property_$enum.pathConstraintPosition_value = 16;
spine_Property_$enum.pathConstraintSpacing_value = 17;
spine_Property_$enum.pathConstraintMix_value = 18;
spine_Property_$enum.rotate_name = "rotate";
spine_Property_$enum.x_name = "x";
spine_Property_$enum.y_name = "y";
spine_Property_$enum.scaleX_name = "scaleX";
spine_Property_$enum.scaleY_name = "scaleY";
spine_Property_$enum.shearX_name = "shearX";
spine_Property_$enum.shearY_name = "shearY";
spine_Property_$enum.rgb_name = "rgb";
spine_Property_$enum.alpha_name = "alpha";
spine_Property_$enum.rgb2_name = "rgb2";
spine_Property_$enum.attachment_name = "attachment";
spine_Property_$enum.deform_name = "deform";
spine_Property_$enum.event_name = "event";
spine_Property_$enum.drawOrder_name = "drawOrder";
spine_Property_$enum.ikConstraint_name = "ikConstraint";
spine_Property_$enum.transformConstraint_name = "transformConstraint";
spine_Property_$enum.pathConstraintPosition_name = "pathConstraintPosition";
spine_Property_$enum.pathConstraintSpacing_name = "pathConstraintSpacing";
spine_Property_$enum.pathConstraintMix_name = "pathConstraintMix";
spine_support_error_Error.DEFAULT_TO_STRING = "Error";
spine_AnimationState.emptyAnimation = (function($this) {
	var $r;
	var this1 = [];
	$r = new spine_Animation("<empty>",this1,0);
	return $r;
}(this));
spine_AnimationState.SUBSEQUENT = 0;
spine_AnimationState.FIRST = 1;
spine_AnimationState.HOLD_SUBSEQUENT = 2;
spine_AnimationState.HOLD_FIRST = 3;
spine_AnimationState.HOLD_MIX = 4;
spine_AnimationState.SETUP = 1;
spine_AnimationState.CURRENT = 2;
spine_EventType_$enum.start_value = 0;
spine_EventType_$enum.interrupt_value = 1;
spine_EventType_$enum.end_value = 2;
spine_EventType_$enum.dispose_value = 3;
spine_EventType_$enum.complete_value = 4;
spine_EventType_$enum.event_value = 5;
spine_EventType_$enum.start_name = "start";
spine_EventType_$enum.interrupt_name = "interrupt";
spine_EventType_$enum.end_name = "end";
spine_EventType_$enum.dispose_name = "dispose";
spine_EventType_$enum.complete_name = "complete";
spine_EventType_$enum.event_name = "event";
spine_BlendMode_$enum.normal_value = 0;
spine_BlendMode_$enum.additive_value = 1;
spine_BlendMode_$enum.multiply_value = 2;
spine_BlendMode_$enum.screen_value = 3;
spine_BlendMode_$enum.normal_name = "normal";
spine_BlendMode_$enum.additive_name = "additive";
spine_BlendMode_$enum.multiply_name = "multiply";
spine_BlendMode_$enum.screen_name = "screen";
spine_TransformMode_$enum.normal_value = 0;
spine_TransformMode_$enum.onlyTranslation_value = 1;
spine_TransformMode_$enum.noRotationOrReflection_value = 2;
spine_TransformMode_$enum.noScale_value = 3;
spine_TransformMode_$enum.noScaleOrReflection_value = 4;
spine_TransformMode_$enum.normal_name = "normal";
spine_TransformMode_$enum.onlyTranslation_name = "onlyTranslation";
spine_TransformMode_$enum.noRotationOrReflection_name = "noRotationOrReflection";
spine_TransformMode_$enum.noScale_name = "noScale";
spine_TransformMode_$enum.noScaleOrReflection_name = "noScaleOrReflection";
spine_PathConstraint.NONE = -1;
spine_PathConstraint.BEFORE = -2;
spine_PathConstraint.AFTER = -3;
spine_PathConstraint.epsilon = 0.00001;
spine_PositionMode_$enum.fixed_value = 0;
spine_PositionMode_$enum.percent_value = 1;
spine_PositionMode_$enum.fixed_name = "fixed";
spine_PositionMode_$enum.percent_name = "percent";
spine_SpacingMode_$enum.length_value = 0;
spine_SpacingMode_$enum.fixed_value = 1;
spine_SpacingMode_$enum.percent_value = 2;
spine_SpacingMode_$enum.proportional_value = 3;
spine_SpacingMode_$enum.length_name = "length";
spine_SpacingMode_$enum.fixed_name = "fixed";
spine_SpacingMode_$enum.percent_name = "percent";
spine_SpacingMode_$enum.proportional_name = "proportional";
spine_RotateMode_$enum.tangent_value = 0;
spine_RotateMode_$enum.chain_value = 1;
spine_RotateMode_$enum.chainScale_value = 2;
spine_RotateMode_$enum.tangent_name = "tangent";
spine_RotateMode_$enum.chain_name = "chain";
spine_RotateMode_$enum.chainScale_name = "chainScale";
spine_attachments_AtlasAttachmentLoader.__meta__ = { obj : { SuppressWarnings : ["javadoc"]}};
spine_attachments_AttachmentType_$enum.region_value = 0;
spine_attachments_AttachmentType_$enum.boundingbox_value = 1;
spine_attachments_AttachmentType_$enum.mesh_value = 2;
spine_attachments_AttachmentType_$enum.linkedmesh_value = 3;
spine_attachments_AttachmentType_$enum.path_value = 4;
spine_attachments_AttachmentType_$enum.point_value = 5;
spine_attachments_AttachmentType_$enum.clipping_value = 6;
spine_attachments_AttachmentType_$enum.region_name = "region";
spine_attachments_AttachmentType_$enum.boundingbox_name = "boundingbox";
spine_attachments_AttachmentType_$enum.mesh_name = "mesh";
spine_attachments_AttachmentType_$enum.linkedmesh_name = "linkedmesh";
spine_attachments_AttachmentType_$enum.path_name = "path";
spine_attachments_AttachmentType_$enum.point_name = "point";
spine_attachments_AttachmentType_$enum.clipping_name = "clipping";
spine_attachments_VertexAttachment.nextID = 0;
spine_attachments_RegionAttachment.BLX = 0;
spine_attachments_RegionAttachment.BLY = 1;
spine_attachments_RegionAttachment.ULX = 2;
spine_attachments_RegionAttachment.ULY = 3;
spine_attachments_RegionAttachment.URX = 4;
spine_attachments_RegionAttachment.URY = 5;
spine_attachments_RegionAttachment.BRX = 6;
spine_attachments_RegionAttachment.BRY = 7;
spine_support_graphics_Color.CLEAR = new spine_support_graphics_Color(0,0,0,0);
spine_support_graphics_Color.BLACK = new spine_support_graphics_Color(0,0,0,1);
spine_support_graphics_Color.WHITE = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 1.;
	_this.g = 1.;
	_this.b = 1.;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.LIGHT_GRAY = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 0.74901960784313726;
	_this.g = 0.74901960784313726;
	_this.b = 0.74901960784313726;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.GRAY = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 0.49803921568627452;
	_this.g = 0.49803921568627452;
	_this.b = 0.49803921568627452;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.DARK_GRAY = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 0.24705882352941178;
	_this.g = 0.24705882352941178;
	_this.b = 0.24705882352941178;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.BLUE = new spine_support_graphics_Color(0,0,1,1);
spine_support_graphics_Color.NAVY = new spine_support_graphics_Color(0,0,0.5,1);
spine_support_graphics_Color.ROYAL = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 0.25490196078431371;
	_this.g = 0.41176470588235292;
	_this.b = 0.88235294117647056;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.SLATE = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 0.4392156862745098;
	_this.g = 0.50196078431372548;
	_this.b = 0.56470588235294117;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.SKY = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 0.52941176470588236;
	_this.g = 0.807843137254902;
	_this.b = 0.92156862745098034;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.CYAN = new spine_support_graphics_Color(0,1,1,1);
spine_support_graphics_Color.TEAL = new spine_support_graphics_Color(0,0.5,0.5,1);
spine_support_graphics_Color.GREEN = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 0.;
	_this.g = 1.;
	_this.b = 0.;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.CHARTREUSE = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 0.49803921568627452;
	_this.g = 1.;
	_this.b = 0.;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.LIME = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 0.19607843137254902;
	_this.g = 0.803921568627451;
	_this.b = 0.19607843137254902;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.FOREST = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 0.13333333333333333;
	_this.g = 0.54509803921568623;
	_this.b = 0.13333333333333333;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.OLIVE = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 0.41960784313725491;
	_this.g = 0.55686274509803924;
	_this.b = 0.13725490196078433;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.YELLOW = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 1.;
	_this.g = 1.;
	_this.b = 0.;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.GOLD = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 1.;
	_this.g = 0.84313725490196079;
	_this.b = 0.;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.GOLDENROD = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 0.85490196078431369;
	_this.g = 0.6470588235294118;
	_this.b = 0.12549019607843137;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.ORANGE = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 1.;
	_this.g = 0.6470588235294118;
	_this.b = 0.;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.BROWN = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 0.54509803921568623;
	_this.g = 0.27058823529411763;
	_this.b = 0.074509803921568626;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.TAN = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 0.82352941176470584;
	_this.g = 0.70588235294117652;
	_this.b = 0.5490196078431373;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.FIREBRICK = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 0.69803921568627447;
	_this.g = 0.13333333333333333;
	_this.b = 0.13333333333333333;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.RED = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 1.;
	_this.g = 0.;
	_this.b = 0.;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.SCARLET = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 1.;
	_this.g = 0.20392156862745098;
	_this.b = 0.10980392156862745;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.CORAL = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 1.;
	_this.g = 0.49803921568627452;
	_this.b = 0.31372549019607843;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.SALMON = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 0.98039215686274506;
	_this.g = 0.50196078431372548;
	_this.b = 0.44705882352941179;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.PINK = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 1.;
	_this.g = 0.41176470588235292;
	_this.b = 0.70588235294117652;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.MAGENTA = new spine_support_graphics_Color(1,0,1,1);
spine_support_graphics_Color.PURPLE = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 0.62745098039215685;
	_this.g = 0.12549019607843137;
	_this.b = 0.94117647058823528;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.VIOLET = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 0.93333333333333335;
	_this.g = 0.50980392156862742;
	_this.b = 0.93333333333333335;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.MAROON = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 0.69019607843137254;
	_this.g = 0.18823529411764706;
	_this.b = 0.37647058823529411;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_TextureWrap.mirroredRepeat = new spine_support_graphics_TextureWrap(0,"mirroredRepeat");
spine_support_graphics_TextureWrap.clampToEdge = new spine_support_graphics_TextureWrap(1,"clampToEdge");
spine_support_graphics_TextureWrap.repeat = new spine_support_graphics_TextureWrap(2,"repeat");
spine_support_math_MathUtils.degRad = Math.PI / 180.0;
spine_support_math_MathUtils.radDeg = 180.0 / Math.PI;
spine_support_math_Matrix3.M00 = 0;
spine_support_math_Matrix3.M01 = 3;
spine_support_math_Matrix3.M02 = 6;
spine_support_math_Matrix3.M10 = 1;
spine_support_math_Matrix3.M11 = 4;
spine_support_math_Matrix3.M12 = 7;
spine_support_math_Matrix3.M20 = 2;
spine_support_math_Matrix3.M21 = 5;
spine_support_math_Matrix3.M22 = 8;
spine_support_utils_AttachmentSet._keys = [];
spine_utils_SpineUtils.PI = 3.1415927;
spine_utils_SpineUtils.PI2 = 6.2831854;
spine_utils_SpineUtils.radiansToDegrees = 57.295778666661661;
spine_utils_SpineUtils.radDeg = spine_utils_SpineUtils.radiansToDegrees;
spine_utils_SpineUtils.degreesToRadians = 0.017453292777777778;
spine_utils_SpineUtils.degRad = spine_utils_SpineUtils.degreesToRadians;
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
